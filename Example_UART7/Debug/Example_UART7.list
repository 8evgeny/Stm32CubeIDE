
Example_UART7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ee4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  08018184  08018184  00028184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019eec  08019eec  00029eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019ef4  08019ef4  00029ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019ef8  08019ef8  00029ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  08019efc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000090  08019f8c  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f0  08019fec  000300f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxArraySection 00001800  24000150  0801a04c  00030150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000079d4  24001950  0801b84c  00031950  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  24009324  0801b84c  00039324  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00031950  2**0
                  CONTENTS, READONLY
 13 .comment      000000a7  00000000  00000000  0003197e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0007a5c9  00000000  00000000  00031a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ecc2  00000000  00000000  000abfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002f10  00000000  00000000  000bacb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002ba0  00000000  00000000  000bdbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004920f  00000000  00000000  000c0760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003cd1d  00000000  00000000  0010996f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00193467  00000000  00000000  0014668c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b920  00000000  00000000  002d9af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000545c  00000000  00000000  002e5414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <deregister_tm_clones>:
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <deregister_tm_clones+0x10>)
 80002a2:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <deregister_tm_clones+0x14>)
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d002      	beq.n	80002ae <deregister_tm_clones+0xe>
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <deregister_tm_clones+0x18>)
 80002aa:	b103      	cbz	r3, 80002ae <deregister_tm_clones+0xe>
 80002ac:	4718      	bx	r3
 80002ae:	4770      	bx	lr
 80002b0:	24000090 	.word	0x24000090
 80002b4:	24000090 	.word	0x24000090
 80002b8:	00000000 	.word	0x00000000

080002bc <register_tm_clones>:
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <register_tm_clones+0x18>)
 80002be:	4906      	ldr	r1, [pc, #24]	; (80002d8 <register_tm_clones+0x1c>)
 80002c0:	1a0b      	subs	r3, r1, r0
 80002c2:	0fd9      	lsrs	r1, r3, #31
 80002c4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80002c8:	1049      	asrs	r1, r1, #1
 80002ca:	d002      	beq.n	80002d2 <register_tm_clones+0x16>
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <register_tm_clones+0x20>)
 80002ce:	b103      	cbz	r3, 80002d2 <register_tm_clones+0x16>
 80002d0:	4718      	bx	r3
 80002d2:	4770      	bx	lr
 80002d4:	24000090 	.word	0x24000090
 80002d8:	24000090 	.word	0x24000090
 80002dc:	00000000 	.word	0x00000000

080002e0 <__do_global_dtors_aux>:
 80002e0:	b510      	push	{r4, lr}
 80002e2:	4c06      	ldr	r4, [pc, #24]	; (80002fc <__do_global_dtors_aux+0x1c>)
 80002e4:	7823      	ldrb	r3, [r4, #0]
 80002e6:	b943      	cbnz	r3, 80002fa <__do_global_dtors_aux+0x1a>
 80002e8:	f7ff ffda 	bl	80002a0 <deregister_tm_clones>
 80002ec:	4b04      	ldr	r3, [pc, #16]	; (8000300 <__do_global_dtors_aux+0x20>)
 80002ee:	b113      	cbz	r3, 80002f6 <__do_global_dtors_aux+0x16>
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <__do_global_dtors_aux+0x24>)
 80002f2:	f3af 8000 	nop.w
 80002f6:	2301      	movs	r3, #1
 80002f8:	7023      	strb	r3, [r4, #0]
 80002fa:	bd10      	pop	{r4, pc}
 80002fc:	24001950 	.word	0x24001950
 8000300:	00000000 	.word	0x00000000
 8000304:	0801816c 	.word	0x0801816c

08000308 <frame_dummy>:
 8000308:	b508      	push	{r3, lr}
 800030a:	4b04      	ldr	r3, [pc, #16]	; (800031c <frame_dummy+0x14>)
 800030c:	b11b      	cbz	r3, 8000316 <frame_dummy+0xe>
 800030e:	4904      	ldr	r1, [pc, #16]	; (8000320 <frame_dummy+0x18>)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <frame_dummy+0x1c>)
 8000312:	f3af 8000 	nop.w
 8000316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800031a:	e7cf      	b.n	80002bc <register_tm_clones>
 800031c:	00000000 	.word	0x00000000
 8000320:	24001954 	.word	0x24001954
 8000324:	0801816c 	.word	0x0801816c

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4e0d      	ldr	r6, [pc, #52]	; (8000360 <__libc_init_array+0x38>)
 800032c:	4d0d      	ldr	r5, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 800032e:	1b76      	subs	r6, r6, r5
 8000330:	10b6      	asrs	r6, r6, #2
 8000332:	d006      	beq.n	8000342 <__libc_init_array+0x1a>
 8000334:	2400      	movs	r4, #0
 8000336:	3401      	adds	r4, #1
 8000338:	f855 3b04 	ldr.w	r3, [r5], #4
 800033c:	4798      	blx	r3
 800033e:	42a6      	cmp	r6, r4
 8000340:	d1f9      	bne.n	8000336 <__libc_init_array+0xe>
 8000342:	4e09      	ldr	r6, [pc, #36]	; (8000368 <__libc_init_array+0x40>)
 8000344:	4d09      	ldr	r5, [pc, #36]	; (800036c <__libc_init_array+0x44>)
 8000346:	1b76      	subs	r6, r6, r5
 8000348:	f017 ff10 	bl	801816c <_init>
 800034c:	10b6      	asrs	r6, r6, #2
 800034e:	d006      	beq.n	800035e <__libc_init_array+0x36>
 8000350:	2400      	movs	r4, #0
 8000352:	3401      	adds	r4, #1
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	42a6      	cmp	r6, r4
 800035c:	d1f9      	bne.n	8000352 <__libc_init_array+0x2a>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	08019ef4 	.word	0x08019ef4
 8000364:	08019ef4 	.word	0x08019ef4
 8000368:	08019ef8 	.word	0x08019ef8
 800036c:	08019ef4 	.word	0x08019ef4

08000370 <memcmp>:
 8000370:	2a03      	cmp	r2, #3
 8000372:	b470      	push	{r4, r5, r6}
 8000374:	d912      	bls.n	800039c <memcmp+0x2c>
 8000376:	ea40 0501 	orr.w	r5, r0, r1
 800037a:	07ad      	lsls	r5, r5, #30
 800037c:	4604      	mov	r4, r0
 800037e:	460b      	mov	r3, r1
 8000380:	d120      	bne.n	80003c4 <memcmp+0x54>
 8000382:	4619      	mov	r1, r3
 8000384:	4620      	mov	r0, r4
 8000386:	f853 5b04 	ldr.w	r5, [r3], #4
 800038a:	f854 6b04 	ldr.w	r6, [r4], #4
 800038e:	42ae      	cmp	r6, r5
 8000390:	d118      	bne.n	80003c4 <memcmp+0x54>
 8000392:	3a04      	subs	r2, #4
 8000394:	2a03      	cmp	r2, #3
 8000396:	4620      	mov	r0, r4
 8000398:	4619      	mov	r1, r3
 800039a:	d8f2      	bhi.n	8000382 <memcmp+0x12>
 800039c:	1e54      	subs	r4, r2, #1
 800039e:	b172      	cbz	r2, 80003be <memcmp+0x4e>
 80003a0:	7803      	ldrb	r3, [r0, #0]
 80003a2:	780a      	ldrb	r2, [r1, #0]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	bf08      	it	eq
 80003a8:	1824      	addeq	r4, r4, r0
 80003aa:	d006      	beq.n	80003ba <memcmp+0x4a>
 80003ac:	e00c      	b.n	80003c8 <memcmp+0x58>
 80003ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80003b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <memcmp+0x58>
 80003ba:	42a0      	cmp	r0, r4
 80003bc:	d1f7      	bne.n	80003ae <memcmp+0x3e>
 80003be:	2000      	movs	r0, #0
 80003c0:	bc70      	pop	{r4, r5, r6}
 80003c2:	4770      	bx	lr
 80003c4:	1e54      	subs	r4, r2, #1
 80003c6:	e7eb      	b.n	80003a0 <memcmp+0x30>
 80003c8:	1a98      	subs	r0, r3, r2
 80003ca:	bc70      	pop	{r4, r5, r6}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <memcpy>:
 80003d0:	4684      	mov	ip, r0
 80003d2:	ea41 0300 	orr.w	r3, r1, r0
 80003d6:	f013 0303 	ands.w	r3, r3, #3
 80003da:	d16d      	bne.n	80004b8 <memcpy+0xe8>
 80003dc:	3a40      	subs	r2, #64	; 0x40
 80003de:	d341      	bcc.n	8000464 <memcpy+0x94>
 80003e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e4:	f840 3b04 	str.w	r3, [r0], #4
 80003e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ec:	f840 3b04 	str.w	r3, [r0], #4
 80003f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f4:	f840 3b04 	str.w	r3, [r0], #4
 80003f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003fc:	f840 3b04 	str.w	r3, [r0], #4
 8000400:	f851 3b04 	ldr.w	r3, [r1], #4
 8000404:	f840 3b04 	str.w	r3, [r0], #4
 8000408:	f851 3b04 	ldr.w	r3, [r1], #4
 800040c:	f840 3b04 	str.w	r3, [r0], #4
 8000410:	f851 3b04 	ldr.w	r3, [r1], #4
 8000414:	f840 3b04 	str.w	r3, [r0], #4
 8000418:	f851 3b04 	ldr.w	r3, [r1], #4
 800041c:	f840 3b04 	str.w	r3, [r0], #4
 8000420:	f851 3b04 	ldr.w	r3, [r1], #4
 8000424:	f840 3b04 	str.w	r3, [r0], #4
 8000428:	f851 3b04 	ldr.w	r3, [r1], #4
 800042c:	f840 3b04 	str.w	r3, [r0], #4
 8000430:	f851 3b04 	ldr.w	r3, [r1], #4
 8000434:	f840 3b04 	str.w	r3, [r0], #4
 8000438:	f851 3b04 	ldr.w	r3, [r1], #4
 800043c:	f840 3b04 	str.w	r3, [r0], #4
 8000440:	f851 3b04 	ldr.w	r3, [r1], #4
 8000444:	f840 3b04 	str.w	r3, [r0], #4
 8000448:	f851 3b04 	ldr.w	r3, [r1], #4
 800044c:	f840 3b04 	str.w	r3, [r0], #4
 8000450:	f851 3b04 	ldr.w	r3, [r1], #4
 8000454:	f840 3b04 	str.w	r3, [r0], #4
 8000458:	f851 3b04 	ldr.w	r3, [r1], #4
 800045c:	f840 3b04 	str.w	r3, [r0], #4
 8000460:	3a40      	subs	r2, #64	; 0x40
 8000462:	d2bd      	bcs.n	80003e0 <memcpy+0x10>
 8000464:	3230      	adds	r2, #48	; 0x30
 8000466:	d311      	bcc.n	800048c <memcpy+0xbc>
 8000468:	f851 3b04 	ldr.w	r3, [r1], #4
 800046c:	f840 3b04 	str.w	r3, [r0], #4
 8000470:	f851 3b04 	ldr.w	r3, [r1], #4
 8000474:	f840 3b04 	str.w	r3, [r0], #4
 8000478:	f851 3b04 	ldr.w	r3, [r1], #4
 800047c:	f840 3b04 	str.w	r3, [r0], #4
 8000480:	f851 3b04 	ldr.w	r3, [r1], #4
 8000484:	f840 3b04 	str.w	r3, [r0], #4
 8000488:	3a10      	subs	r2, #16
 800048a:	d2ed      	bcs.n	8000468 <memcpy+0x98>
 800048c:	320c      	adds	r2, #12
 800048e:	d305      	bcc.n	800049c <memcpy+0xcc>
 8000490:	f851 3b04 	ldr.w	r3, [r1], #4
 8000494:	f840 3b04 	str.w	r3, [r0], #4
 8000498:	3a04      	subs	r2, #4
 800049a:	d2f9      	bcs.n	8000490 <memcpy+0xc0>
 800049c:	3204      	adds	r2, #4
 800049e:	d008      	beq.n	80004b2 <memcpy+0xe2>
 80004a0:	07d2      	lsls	r2, r2, #31
 80004a2:	bf1c      	itt	ne
 80004a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80004a8:	f800 3b01 	strbne.w	r3, [r0], #1
 80004ac:	d301      	bcc.n	80004b2 <memcpy+0xe2>
 80004ae:	880b      	ldrh	r3, [r1, #0]
 80004b0:	8003      	strh	r3, [r0, #0]
 80004b2:	4660      	mov	r0, ip
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	2a08      	cmp	r2, #8
 80004ba:	d313      	bcc.n	80004e4 <memcpy+0x114>
 80004bc:	078b      	lsls	r3, r1, #30
 80004be:	d08d      	beq.n	80003dc <memcpy+0xc>
 80004c0:	f010 0303 	ands.w	r3, r0, #3
 80004c4:	d08a      	beq.n	80003dc <memcpy+0xc>
 80004c6:	f1c3 0304 	rsb	r3, r3, #4
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	07db      	lsls	r3, r3, #31
 80004ce:	bf1c      	itt	ne
 80004d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80004d4:	f800 3b01 	strbne.w	r3, [r0], #1
 80004d8:	d380      	bcc.n	80003dc <memcpy+0xc>
 80004da:	f831 3b02 	ldrh.w	r3, [r1], #2
 80004de:	f820 3b02 	strh.w	r3, [r0], #2
 80004e2:	e77b      	b.n	80003dc <memcpy+0xc>
 80004e4:	3a04      	subs	r2, #4
 80004e6:	d3d9      	bcc.n	800049c <memcpy+0xcc>
 80004e8:	3a01      	subs	r2, #1
 80004ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004ee:	f800 3b01 	strb.w	r3, [r0], #1
 80004f2:	d2f9      	bcs.n	80004e8 <memcpy+0x118>
 80004f4:	780b      	ldrb	r3, [r1, #0]
 80004f6:	7003      	strb	r3, [r0, #0]
 80004f8:	784b      	ldrb	r3, [r1, #1]
 80004fa:	7043      	strb	r3, [r0, #1]
 80004fc:	788b      	ldrb	r3, [r1, #2]
 80004fe:	7083      	strb	r3, [r0, #2]
 8000500:	4660      	mov	r0, ip
 8000502:	4770      	bx	lr

08000504 <memmove>:
 8000504:	4288      	cmp	r0, r1
 8000506:	b4f0      	push	{r4, r5, r6, r7}
 8000508:	d90d      	bls.n	8000526 <memmove+0x22>
 800050a:	188b      	adds	r3, r1, r2
 800050c:	4283      	cmp	r3, r0
 800050e:	d90a      	bls.n	8000526 <memmove+0x22>
 8000510:	1884      	adds	r4, r0, r2
 8000512:	b132      	cbz	r2, 8000522 <memmove+0x1e>
 8000514:	4622      	mov	r2, r4
 8000516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800051a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800051e:	4299      	cmp	r1, r3
 8000520:	d1f9      	bne.n	8000516 <memmove+0x12>
 8000522:	bcf0      	pop	{r4, r5, r6, r7}
 8000524:	4770      	bx	lr
 8000526:	2a0f      	cmp	r2, #15
 8000528:	d80e      	bhi.n	8000548 <memmove+0x44>
 800052a:	4603      	mov	r3, r0
 800052c:	1e54      	subs	r4, r2, #1
 800052e:	2a00      	cmp	r2, #0
 8000530:	d0f7      	beq.n	8000522 <memmove+0x1e>
 8000532:	3401      	adds	r4, #1
 8000534:	440c      	add	r4, r1
 8000536:	3b01      	subs	r3, #1
 8000538:	f811 2b01 	ldrb.w	r2, [r1], #1
 800053c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000540:	42a1      	cmp	r1, r4
 8000542:	d1f9      	bne.n	8000538 <memmove+0x34>
 8000544:	bcf0      	pop	{r4, r5, r6, r7}
 8000546:	4770      	bx	lr
 8000548:	ea40 0301 	orr.w	r3, r0, r1
 800054c:	079b      	lsls	r3, r3, #30
 800054e:	d13b      	bne.n	80005c8 <memmove+0xc4>
 8000550:	f1a2 0710 	sub.w	r7, r2, #16
 8000554:	093f      	lsrs	r7, r7, #4
 8000556:	f101 0620 	add.w	r6, r1, #32
 800055a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800055e:	f101 0310 	add.w	r3, r1, #16
 8000562:	f100 0410 	add.w	r4, r0, #16
 8000566:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800056a:	f844 5c10 	str.w	r5, [r4, #-16]
 800056e:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8000572:	f844 5c0c 	str.w	r5, [r4, #-12]
 8000576:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800057a:	f844 5c08 	str.w	r5, [r4, #-8]
 800057e:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8000582:	f844 5c04 	str.w	r5, [r4, #-4]
 8000586:	3310      	adds	r3, #16
 8000588:	42b3      	cmp	r3, r6
 800058a:	f104 0410 	add.w	r4, r4, #16
 800058e:	d1ea      	bne.n	8000566 <memmove+0x62>
 8000590:	1c7b      	adds	r3, r7, #1
 8000592:	011b      	lsls	r3, r3, #4
 8000594:	f012 0f0c 	tst.w	r2, #12
 8000598:	4419      	add	r1, r3
 800059a:	f002 050f 	and.w	r5, r2, #15
 800059e:	4403      	add	r3, r0
 80005a0:	d015      	beq.n	80005ce <memmove+0xca>
 80005a2:	3d04      	subs	r5, #4
 80005a4:	08ad      	lsrs	r5, r5, #2
 80005a6:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 80005aa:	1f1c      	subs	r4, r3, #4
 80005ac:	460e      	mov	r6, r1
 80005ae:	f856 7b04 	ldr.w	r7, [r6], #4
 80005b2:	f844 7f04 	str.w	r7, [r4, #4]!
 80005b6:	4564      	cmp	r4, ip
 80005b8:	d1f9      	bne.n	80005ae <memmove+0xaa>
 80005ba:	3501      	adds	r5, #1
 80005bc:	00ad      	lsls	r5, r5, #2
 80005be:	442b      	add	r3, r5
 80005c0:	4429      	add	r1, r5
 80005c2:	f002 0203 	and.w	r2, r2, #3
 80005c6:	e7b1      	b.n	800052c <memmove+0x28>
 80005c8:	1e54      	subs	r4, r2, #1
 80005ca:	4603      	mov	r3, r0
 80005cc:	e7b1      	b.n	8000532 <memmove+0x2e>
 80005ce:	462a      	mov	r2, r5
 80005d0:	e7ac      	b.n	800052c <memmove+0x28>
 80005d2:	bf00      	nop

080005d4 <memset>:
 80005d4:	b4f0      	push	{r4, r5, r6, r7}
 80005d6:	0786      	lsls	r6, r0, #30
 80005d8:	d046      	beq.n	8000668 <memset+0x94>
 80005da:	1e54      	subs	r4, r2, #1
 80005dc:	2a00      	cmp	r2, #0
 80005de:	d03c      	beq.n	800065a <memset+0x86>
 80005e0:	b2ca      	uxtb	r2, r1
 80005e2:	4603      	mov	r3, r0
 80005e4:	e002      	b.n	80005ec <memset+0x18>
 80005e6:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80005ea:	d336      	bcc.n	800065a <memset+0x86>
 80005ec:	f803 2b01 	strb.w	r2, [r3], #1
 80005f0:	079d      	lsls	r5, r3, #30
 80005f2:	d1f8      	bne.n	80005e6 <memset+0x12>
 80005f4:	2c03      	cmp	r4, #3
 80005f6:	d929      	bls.n	800064c <memset+0x78>
 80005f8:	b2cd      	uxtb	r5, r1
 80005fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80005fe:	2c0f      	cmp	r4, #15
 8000600:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000604:	d933      	bls.n	800066e <memset+0x9a>
 8000606:	f1a4 0610 	sub.w	r6, r4, #16
 800060a:	0936      	lsrs	r6, r6, #4
 800060c:	f103 0720 	add.w	r7, r3, #32
 8000610:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000614:	f103 0210 	add.w	r2, r3, #16
 8000618:	e942 5504 	strd	r5, r5, [r2, #-16]
 800061c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8000620:	3210      	adds	r2, #16
 8000622:	42ba      	cmp	r2, r7
 8000624:	d1f8      	bne.n	8000618 <memset+0x44>
 8000626:	1c72      	adds	r2, r6, #1
 8000628:	f014 0f0c 	tst.w	r4, #12
 800062c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000630:	f004 060f 	and.w	r6, r4, #15
 8000634:	d013      	beq.n	800065e <memset+0x8a>
 8000636:	1f33      	subs	r3, r6, #4
 8000638:	f023 0303 	bic.w	r3, r3, #3
 800063c:	3304      	adds	r3, #4
 800063e:	4413      	add	r3, r2
 8000640:	f842 5b04 	str.w	r5, [r2], #4
 8000644:	4293      	cmp	r3, r2
 8000646:	d1fb      	bne.n	8000640 <memset+0x6c>
 8000648:	f006 0403 	and.w	r4, r6, #3
 800064c:	b12c      	cbz	r4, 800065a <memset+0x86>
 800064e:	b2c9      	uxtb	r1, r1
 8000650:	441c      	add	r4, r3
 8000652:	f803 1b01 	strb.w	r1, [r3], #1
 8000656:	429c      	cmp	r4, r3
 8000658:	d1fb      	bne.n	8000652 <memset+0x7e>
 800065a:	bcf0      	pop	{r4, r5, r6, r7}
 800065c:	4770      	bx	lr
 800065e:	4634      	mov	r4, r6
 8000660:	4613      	mov	r3, r2
 8000662:	2c00      	cmp	r4, #0
 8000664:	d1f3      	bne.n	800064e <memset+0x7a>
 8000666:	e7f8      	b.n	800065a <memset+0x86>
 8000668:	4614      	mov	r4, r2
 800066a:	4603      	mov	r3, r0
 800066c:	e7c2      	b.n	80005f4 <memset+0x20>
 800066e:	461a      	mov	r2, r3
 8000670:	4626      	mov	r6, r4
 8000672:	e7e0      	b.n	8000636 <memset+0x62>

08000674 <_iprintf_r>:
 8000674:	b40e      	push	{r1, r2, r3}
 8000676:	b510      	push	{r4, lr}
 8000678:	4604      	mov	r4, r0
 800067a:	b083      	sub	sp, #12
 800067c:	b108      	cbz	r0, 8000682 <_iprintf_r+0xe>
 800067e:	6983      	ldr	r3, [r0, #24]
 8000680:	b163      	cbz	r3, 800069c <_iprintf_r+0x28>
 8000682:	a806      	add	r0, sp, #24
 8000684:	4603      	mov	r3, r0
 8000686:	9001      	str	r0, [sp, #4]
 8000688:	9a05      	ldr	r2, [sp, #20]
 800068a:	68a1      	ldr	r1, [r4, #8]
 800068c:	4620      	mov	r0, r4
 800068e:	f000 fb4b 	bl	8000d28 <_vfiprintf_r>
 8000692:	b003      	add	sp, #12
 8000694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000698:	b003      	add	sp, #12
 800069a:	4770      	bx	lr
 800069c:	f000 f9a4 	bl	80009e8 <__sinit>
 80006a0:	e7ef      	b.n	8000682 <_iprintf_r+0xe>
 80006a2:	bf00      	nop

080006a4 <iprintf>:
 80006a4:	b40f      	push	{r0, r1, r2, r3}
 80006a6:	b510      	push	{r4, lr}
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <iprintf+0x34>)
 80006aa:	681c      	ldr	r4, [r3, #0]
 80006ac:	b082      	sub	sp, #8
 80006ae:	b10c      	cbz	r4, 80006b4 <iprintf+0x10>
 80006b0:	69a3      	ldr	r3, [r4, #24]
 80006b2:	b163      	cbz	r3, 80006ce <iprintf+0x2a>
 80006b4:	a805      	add	r0, sp, #20
 80006b6:	4603      	mov	r3, r0
 80006b8:	9001      	str	r0, [sp, #4]
 80006ba:	9a04      	ldr	r2, [sp, #16]
 80006bc:	68a1      	ldr	r1, [r4, #8]
 80006be:	4620      	mov	r0, r4
 80006c0:	f000 fb32 	bl	8000d28 <_vfiprintf_r>
 80006c4:	b002      	add	sp, #8
 80006c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ca:	b004      	add	sp, #16
 80006cc:	4770      	bx	lr
 80006ce:	4620      	mov	r0, r4
 80006d0:	f000 f98a 	bl	80009e8 <__sinit>
 80006d4:	e7ee      	b.n	80006b4 <iprintf+0x10>
 80006d6:	bf00      	nop
 80006d8:	24000000 	.word	0x24000000

080006dc <srand>:
 80006dc:	b538      	push	{r3, r4, r5, lr}
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <srand+0x4c>)
 80006e0:	681c      	ldr	r4, [r3, #0]
 80006e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80006e4:	4605      	mov	r5, r0
 80006e6:	b11a      	cbz	r2, 80006f0 <srand+0x14>
 80006e8:	2300      	movs	r3, #0
 80006ea:	e9c2 5304 	strd	r5, r3, [r2, #16]
 80006ee:	bd38      	pop	{r3, r4, r5, pc}
 80006f0:	2018      	movs	r0, #24
 80006f2:	f000 fa0b 	bl	8000b0c <malloc>
 80006f6:	4602      	mov	r2, r0
 80006f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80006fa:	b178      	cbz	r0, 800071c <srand+0x40>
 80006fc:	2001      	movs	r0, #1
 80006fe:	2100      	movs	r1, #0
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <srand+0x50>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000708:	230b      	movs	r3, #11
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <srand+0x54>)
 800070c:	4909      	ldr	r1, [pc, #36]	; (8000734 <srand+0x58>)
 800070e:	8193      	strh	r3, [r2, #12]
 8000710:	2300      	movs	r3, #0
 8000712:	e9c2 0101 	strd	r0, r1, [r2, #4]
 8000716:	e9c2 5304 	strd	r5, r3, [r2, #16]
 800071a:	bd38      	pop	{r3, r4, r5, pc}
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <srand+0x5c>)
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <srand+0x60>)
 8000720:	2142      	movs	r1, #66	; 0x42
 8000722:	f000 f855 	bl	80007d0 <__assert_func>
 8000726:	bf00      	nop
 8000728:	24000000 	.word	0x24000000
 800072c:	abcd330e 	.word	0xabcd330e
 8000730:	e66d1234 	.word	0xe66d1234
 8000734:	0005deec 	.word	0x0005deec
 8000738:	08019e24 	.word	0x08019e24
 800073c:	08019e3c 	.word	0x08019e3c

08000740 <rand>:
 8000740:	b538      	push	{r3, r4, r5, lr}
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <rand+0x6c>)
 8000744:	681c      	ldr	r4, [r3, #0]
 8000746:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000748:	b192      	cbz	r2, 8000770 <rand+0x30>
 800074a:	6914      	ldr	r4, [r2, #16]
 800074c:	4918      	ldr	r1, [pc, #96]	; (80007b0 <rand+0x70>)
 800074e:	6953      	ldr	r3, [r2, #20]
 8000750:	4818      	ldr	r0, [pc, #96]	; (80007b4 <rand+0x74>)
 8000752:	fb01 f104 	mul.w	r1, r1, r4
 8000756:	fb00 1303 	mla	r3, r0, r3, r1
 800075a:	fba4 4500 	umull	r4, r5, r4, r0
 800075e:	1c61      	adds	r1, r4, #1
 8000760:	441d      	add	r5, r3
 8000762:	f145 0300 	adc.w	r3, r5, #0
 8000766:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800076a:	e9c2 1304 	strd	r1, r3, [r2, #16]
 800076e:	bd38      	pop	{r3, r4, r5, pc}
 8000770:	2018      	movs	r0, #24
 8000772:	f000 f9cb 	bl	8000b0c <malloc>
 8000776:	4602      	mov	r2, r0
 8000778:	63a0      	str	r0, [r4, #56]	; 0x38
 800077a:	b188      	cbz	r0, 80007a0 <rand+0x60>
 800077c:	2001      	movs	r0, #1
 800077e:	2100      	movs	r1, #0
 8000780:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <rand+0x70>)
 8000786:	4c0c      	ldr	r4, [pc, #48]	; (80007b8 <rand+0x78>)
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <rand+0x7c>)
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <rand+0x80>)
 800078c:	4d0d      	ldr	r5, [pc, #52]	; (80007c4 <rand+0x84>)
 800078e:	6014      	str	r4, [r2, #0]
 8000790:	6053      	str	r3, [r2, #4]
 8000792:	240b      	movs	r4, #11
 8000794:	4603      	mov	r3, r0
 8000796:	6095      	str	r5, [r2, #8]
 8000798:	8194      	strh	r4, [r2, #12]
 800079a:	e9c2 1304 	strd	r1, r3, [r2, #16]
 800079e:	bd38      	pop	{r3, r4, r5, pc}
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <rand+0x88>)
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <rand+0x8c>)
 80007a4:	214e      	movs	r1, #78	; 0x4e
 80007a6:	f000 f813 	bl	80007d0 <__assert_func>
 80007aa:	bf00      	nop
 80007ac:	24000000 	.word	0x24000000
 80007b0:	5851f42d 	.word	0x5851f42d
 80007b4:	4c957f2d 	.word	0x4c957f2d
 80007b8:	abcd330e 	.word	0xabcd330e
 80007bc:	e66d1234 	.word	0xe66d1234
 80007c0:	4c957f2e 	.word	0x4c957f2e
 80007c4:	0005deec 	.word	0x0005deec
 80007c8:	08019e24 	.word	0x08019e24
 80007cc:	08019e3c 	.word	0x08019e3c

080007d0 <__assert_func>:
 80007d0:	b500      	push	{lr}
 80007d2:	4c0a      	ldr	r4, [pc, #40]	; (80007fc <__assert_func+0x2c>)
 80007d4:	6826      	ldr	r6, [r4, #0]
 80007d6:	4605      	mov	r5, r0
 80007d8:	b085      	sub	sp, #20
 80007da:	461c      	mov	r4, r3
 80007dc:	68f0      	ldr	r0, [r6, #12]
 80007de:	b152      	cbz	r2, 80007f6 <__assert_func+0x26>
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <__assert_func+0x30>)
 80007e2:	9100      	str	r1, [sp, #0]
 80007e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80007e8:	4906      	ldr	r1, [pc, #24]	; (8000804 <__assert_func+0x34>)
 80007ea:	462b      	mov	r3, r5
 80007ec:	4622      	mov	r2, r4
 80007ee:	f000 f929 	bl	8000a44 <fiprintf>
 80007f2:	f000 ff39 	bl	8001668 <abort>
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__assert_func+0x38>)
 80007f8:	461a      	mov	r2, r3
 80007fa:	e7f2      	b.n	80007e2 <__assert_func+0x12>
 80007fc:	24000000 	.word	0x24000000
 8000800:	08019e70 	.word	0x08019e70
 8000804:	08019e80 	.word	0x08019e80
 8000808:	08019e7c 	.word	0x08019e7c

0800080c <__assert>:
 800080c:	b508      	push	{r3, lr}
 800080e:	4613      	mov	r3, r2
 8000810:	2200      	movs	r2, #0
 8000812:	f7ff ffdd 	bl	80007d0 <__assert_func>
 8000816:	bf00      	nop

08000818 <__fp_lock>:
 8000818:	2000      	movs	r0, #0
 800081a:	4770      	bx	lr

0800081c <_cleanup_r>:
 800081c:	4901      	ldr	r1, [pc, #4]	; (8000824 <_cleanup_r+0x8>)
 800081e:	f000 b94b 	b.w	8000ab8 <_fwalk_reent>
 8000822:	bf00      	nop
 8000824:	080017c9 	.word	0x080017c9

08000828 <__fp_unlock>:
 8000828:	2000      	movs	r0, #0
 800082a:	4770      	bx	lr

0800082c <__sfmoreglue>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	1e4a      	subs	r2, r1, #1
 8000830:	2568      	movs	r5, #104	; 0x68
 8000832:	fb05 f502 	mul.w	r5, r5, r2
 8000836:	460e      	mov	r6, r1
 8000838:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800083c:	f000 f9cc 	bl	8000bd8 <_malloc_r>
 8000840:	4604      	mov	r4, r0
 8000842:	b140      	cbz	r0, 8000856 <__sfmoreglue+0x2a>
 8000844:	2100      	movs	r1, #0
 8000846:	300c      	adds	r0, #12
 8000848:	6066      	str	r6, [r4, #4]
 800084a:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800084e:	6021      	str	r1, [r4, #0]
 8000850:	60a0      	str	r0, [r4, #8]
 8000852:	f7ff febf 	bl	80005d4 <memset>
 8000856:	4620      	mov	r0, r4
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	bf00      	nop

0800085c <__sfp>:
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <__sfp+0x7c>)
 800085e:	b570      	push	{r4, r5, r6, lr}
 8000860:	681d      	ldr	r5, [r3, #0]
 8000862:	69ab      	ldr	r3, [r5, #24]
 8000864:	4606      	mov	r6, r0
 8000866:	b343      	cbz	r3, 80008ba <__sfp+0x5e>
 8000868:	3548      	adds	r5, #72	; 0x48
 800086a:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	d505      	bpl.n	800087e <__sfp+0x22>
 8000872:	e01e      	b.n	80008b2 <__sfp+0x56>
 8000874:	3b01      	subs	r3, #1
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800087c:	d019      	beq.n	80008b2 <__sfp+0x56>
 800087e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000882:	2a00      	cmp	r2, #0
 8000884:	d1f6      	bne.n	8000874 <__sfp+0x18>
 8000886:	2500      	movs	r5, #0
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <__sfp+0x80>)
 800088a:	6665      	str	r5, [r4, #100]	; 0x64
 800088c:	e9c4 5500 	strd	r5, r5, [r4]
 8000890:	60a5      	str	r5, [r4, #8]
 8000892:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000896:	61a5      	str	r5, [r4, #24]
 8000898:	4629      	mov	r1, r5
 800089a:	60e3      	str	r3, [r4, #12]
 800089c:	2208      	movs	r2, #8
 800089e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80008a2:	f7ff fe97 	bl	80005d4 <memset>
 80008a6:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80008aa:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80008ae:	4620      	mov	r0, r4
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	682c      	ldr	r4, [r5, #0]
 80008b4:	b12c      	cbz	r4, 80008c2 <__sfp+0x66>
 80008b6:	4625      	mov	r5, r4
 80008b8:	e7d7      	b.n	800086a <__sfp+0xe>
 80008ba:	4628      	mov	r0, r5
 80008bc:	f000 f810 	bl	80008e0 <__sinit.part.0>
 80008c0:	e7d2      	b.n	8000868 <__sfp+0xc>
 80008c2:	2104      	movs	r1, #4
 80008c4:	4630      	mov	r0, r6
 80008c6:	f7ff ffb1 	bl	800082c <__sfmoreglue>
 80008ca:	4604      	mov	r4, r0
 80008cc:	6028      	str	r0, [r5, #0]
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d1f1      	bne.n	80008b6 <__sfp+0x5a>
 80008d2:	230c      	movs	r3, #12
 80008d4:	6033      	str	r3, [r6, #0]
 80008d6:	e7ea      	b.n	80008ae <__sfp+0x52>
 80008d8:	08019c80 	.word	0x08019c80
 80008dc:	ffff0001 	.word	0xffff0001

080008e0 <__sinit.part.0>:
 80008e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e4:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <__sinit.part.0+0xd4>)
 80008e6:	4934      	ldr	r1, [pc, #208]	; (80009b8 <__sinit.part.0+0xd8>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	6281      	str	r1, [r0, #40]	; 0x28
 80008ec:	4290      	cmp	r0, r2
 80008ee:	f04f 0300 	mov.w	r3, #0
 80008f2:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80008f6:	6503      	str	r3, [r0, #80]	; 0x50
 80008f8:	bf04      	itt	eq
 80008fa:	2301      	moveq	r3, #1
 80008fc:	6183      	streq	r3, [r0, #24]
 80008fe:	4605      	mov	r5, r0
 8000900:	f7ff ffac 	bl	800085c <__sfp>
 8000904:	6068      	str	r0, [r5, #4]
 8000906:	4628      	mov	r0, r5
 8000908:	f7ff ffa8 	bl	800085c <__sfp>
 800090c:	60a8      	str	r0, [r5, #8]
 800090e:	4628      	mov	r0, r5
 8000910:	f7ff ffa4 	bl	800085c <__sfp>
 8000914:	686e      	ldr	r6, [r5, #4]
 8000916:	60e8      	str	r0, [r5, #12]
 8000918:	2400      	movs	r4, #0
 800091a:	2304      	movs	r3, #4
 800091c:	60f3      	str	r3, [r6, #12]
 800091e:	6674      	str	r4, [r6, #100]	; 0x64
 8000920:	e9c6 4400 	strd	r4, r4, [r6]
 8000924:	60b4      	str	r4, [r6, #8]
 8000926:	e9c6 4404 	strd	r4, r4, [r6, #16]
 800092a:	61b4      	str	r4, [r6, #24]
 800092c:	4621      	mov	r1, r4
 800092e:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8000932:	2208      	movs	r2, #8
 8000934:	f7ff fe4e 	bl	80005d4 <memset>
 8000938:	f8df b088 	ldr.w	fp, [pc, #136]	; 80009c4 <__sinit.part.0+0xe4>
 800093c:	68af      	ldr	r7, [r5, #8]
 800093e:	f8df a088 	ldr.w	sl, [pc, #136]	; 80009c8 <__sinit.part.0+0xe8>
 8000942:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80009cc <__sinit.part.0+0xec>
 8000946:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80009d0 <__sinit.part.0+0xf0>
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <__sinit.part.0+0xdc>)
 800094c:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 8000950:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8000954:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 8000958:	4621      	mov	r1, r4
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	2208      	movs	r2, #8
 800095e:	667c      	str	r4, [r7, #100]	; 0x64
 8000960:	e9c7 4400 	strd	r4, r4, [r7]
 8000964:	60bc      	str	r4, [r7, #8]
 8000966:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800096a:	61bc      	str	r4, [r7, #24]
 800096c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8000970:	f7ff fe30 	bl	80005d4 <memset>
 8000974:	68ee      	ldr	r6, [r5, #12]
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <__sinit.part.0+0xe0>)
 8000978:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 800097c:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 8000980:	e9c7 a90a 	strd	sl, r9, [r7, #40]	; 0x28
 8000984:	4621      	mov	r1, r4
 8000986:	60f3      	str	r3, [r6, #12]
 8000988:	6674      	str	r4, [r6, #100]	; 0x64
 800098a:	e9c6 4400 	strd	r4, r4, [r6]
 800098e:	60b4      	str	r4, [r6, #8]
 8000990:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8000994:	61b4      	str	r4, [r6, #24]
 8000996:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800099a:	2208      	movs	r2, #8
 800099c:	f7ff fe1a 	bl	80005d4 <memset>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80009a6:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80009aa:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80009ae:	61ab      	str	r3, [r5, #24]
 80009b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009b4:	08019c80 	.word	0x08019c80
 80009b8:	0800081d 	.word	0x0800081d
 80009bc:	00010009 	.word	0x00010009
 80009c0:	00020012 	.word	0x00020012
 80009c4:	080013ed 	.word	0x080013ed
 80009c8:	08001415 	.word	0x08001415
 80009cc:	08001455 	.word	0x08001455
 80009d0:	08001475 	.word	0x08001475

080009d4 <_cleanup>:
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <_cleanup+0xc>)
 80009d6:	4903      	ldr	r1, [pc, #12]	; (80009e4 <_cleanup+0x10>)
 80009d8:	6818      	ldr	r0, [r3, #0]
 80009da:	f000 b86d 	b.w	8000ab8 <_fwalk_reent>
 80009de:	bf00      	nop
 80009e0:	08019c80 	.word	0x08019c80
 80009e4:	080017c9 	.word	0x080017c9

080009e8 <__sinit>:
 80009e8:	6983      	ldr	r3, [r0, #24]
 80009ea:	b903      	cbnz	r3, 80009ee <__sinit+0x6>
 80009ec:	e778      	b.n	80008e0 <__sinit.part.0>
 80009ee:	4770      	bx	lr

080009f0 <__sfp_lock_acquire>:
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__sfp_lock_release>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__sinit_lock_acquire>:
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__sinit_lock_release>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__fp_lock_all>:
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <__fp_lock_all+0xc>)
 8000a02:	4903      	ldr	r1, [pc, #12]	; (8000a10 <__fp_lock_all+0x10>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	f000 b831 	b.w	8000a6c <_fwalk>
 8000a0a:	bf00      	nop
 8000a0c:	24000000 	.word	0x24000000
 8000a10:	08000819 	.word	0x08000819

08000a14 <__fp_unlock_all>:
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <__fp_unlock_all+0xc>)
 8000a16:	4903      	ldr	r1, [pc, #12]	; (8000a24 <__fp_unlock_all+0x10>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f000 b827 	b.w	8000a6c <_fwalk>
 8000a1e:	bf00      	nop
 8000a20:	24000000 	.word	0x24000000
 8000a24:	08000829 	.word	0x08000829

08000a28 <_fiprintf_r>:
 8000a28:	b40c      	push	{r2, r3}
 8000a2a:	b500      	push	{lr}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	ab04      	add	r3, sp, #16
 8000a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	f000 f977 	bl	8000d28 <_vfiprintf_r>
 8000a3a:	b003      	add	sp, #12
 8000a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a40:	b002      	add	sp, #8
 8000a42:	4770      	bx	lr

08000a44 <fiprintf>:
 8000a44:	b40e      	push	{r1, r2, r3}
 8000a46:	b510      	push	{r4, lr}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	ab05      	add	r3, sp, #20
 8000a4c:	4c06      	ldr	r4, [pc, #24]	; (8000a68 <fiprintf+0x24>)
 8000a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	4601      	mov	r1, r0
 8000a56:	6820      	ldr	r0, [r4, #0]
 8000a58:	f000 f966 	bl	8000d28 <_vfiprintf_r>
 8000a5c:	b003      	add	sp, #12
 8000a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a62:	b003      	add	sp, #12
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	24000000 	.word	0x24000000

08000a6c <_fwalk>:
 8000a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a70:	f110 0748 	adds.w	r7, r0, #72	; 0x48
 8000a74:	d01b      	beq.n	8000aae <_fwalk+0x42>
 8000a76:	4688      	mov	r8, r1
 8000a78:	2600      	movs	r6, #0
 8000a7a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8000a7e:	3d01      	subs	r5, #1
 8000a80:	d40f      	bmi.n	8000aa2 <_fwalk+0x36>
 8000a82:	89a3      	ldrh	r3, [r4, #12]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8000a8a:	d906      	bls.n	8000a9a <_fwalk+0x2e>
 8000a8c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4620      	mov	r0, r4
 8000a94:	d001      	beq.n	8000a9a <_fwalk+0x2e>
 8000a96:	47c0      	blx	r8
 8000a98:	4306      	orrs	r6, r0
 8000a9a:	1c6b      	adds	r3, r5, #1
 8000a9c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8000aa0:	d1ef      	bne.n	8000a82 <_fwalk+0x16>
 8000aa2:	683f      	ldr	r7, [r7, #0]
 8000aa4:	2f00      	cmp	r7, #0
 8000aa6:	d1e8      	bne.n	8000a7a <_fwalk+0xe>
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000aae:	463e      	mov	r6, r7
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab6:	bf00      	nop

08000ab8 <_fwalk_reent>:
 8000ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000abc:	f110 0748 	adds.w	r7, r0, #72	; 0x48
 8000ac0:	d01f      	beq.n	8000b02 <_fwalk_reent+0x4a>
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	f04f 0900 	mov.w	r9, #0
 8000aca:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8000ace:	3d01      	subs	r5, #1
 8000ad0:	d411      	bmi.n	8000af6 <_fwalk_reent+0x3e>
 8000ad2:	89a3      	ldrh	r3, [r4, #12]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8000ada:	d908      	bls.n	8000aee <_fwalk_reent+0x36>
 8000adc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	d002      	beq.n	8000aee <_fwalk_reent+0x36>
 8000ae8:	47c0      	blx	r8
 8000aea:	ea49 0900 	orr.w	r9, r9, r0
 8000aee:	1c6b      	adds	r3, r5, #1
 8000af0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8000af4:	d1ed      	bne.n	8000ad2 <_fwalk_reent+0x1a>
 8000af6:	683f      	ldr	r7, [r7, #0]
 8000af8:	2f00      	cmp	r7, #0
 8000afa:	d1e6      	bne.n	8000aca <_fwalk_reent+0x12>
 8000afc:	4648      	mov	r0, r9
 8000afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b02:	46b9      	mov	r9, r7
 8000b04:	4648      	mov	r0, r9
 8000b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b0a:	bf00      	nop

08000b0c <malloc>:
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <malloc+0xc>)
 8000b0e:	4601      	mov	r1, r0
 8000b10:	6818      	ldr	r0, [r3, #0]
 8000b12:	f000 b861 	b.w	8000bd8 <_malloc_r>
 8000b16:	bf00      	nop
 8000b18:	24000000 	.word	0x24000000

08000b1c <free>:
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <free+0xc>)
 8000b1e:	4601      	mov	r1, r0
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	f000 b803 	b.w	8000b2c <_free_r>
 8000b26:	bf00      	nop
 8000b28:	24000000 	.word	0x24000000

08000b2c <_free_r>:
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	d03c      	beq.n	8000baa <_free_r+0x7e>
 8000b30:	b538      	push	{r3, r4, r5, lr}
 8000b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b36:	1f0c      	subs	r4, r1, #4
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	bfb8      	it	lt
 8000b3c:	18e4      	addlt	r4, r4, r3
 8000b3e:	4605      	mov	r5, r0
 8000b40:	f001 f8e6 	bl	8001d10 <__malloc_lock>
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <_free_r+0xa8>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	b12a      	cbz	r2, 8000b56 <_free_r+0x2a>
 8000b4a:	42a2      	cmp	r2, r4
 8000b4c:	d90d      	bls.n	8000b6a <_free_r+0x3e>
 8000b4e:	6821      	ldr	r1, [r4, #0]
 8000b50:	1860      	adds	r0, r4, r1
 8000b52:	4282      	cmp	r2, r0
 8000b54:	d023      	beq.n	8000b9e <_free_r+0x72>
 8000b56:	6062      	str	r2, [r4, #4]
 8000b58:	4628      	mov	r0, r5
 8000b5a:	601c      	str	r4, [r3, #0]
 8000b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b60:	f001 b8d8 	b.w	8001d14 <__malloc_unlock>
 8000b64:	42a3      	cmp	r3, r4
 8000b66:	d803      	bhi.n	8000b70 <_free_r+0x44>
 8000b68:	461a      	mov	r2, r3
 8000b6a:	6853      	ldr	r3, [r2, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1f9      	bne.n	8000b64 <_free_r+0x38>
 8000b70:	6811      	ldr	r1, [r2, #0]
 8000b72:	1850      	adds	r0, r2, r1
 8000b74:	42a0      	cmp	r0, r4
 8000b76:	d019      	beq.n	8000bac <_free_r+0x80>
 8000b78:	d824      	bhi.n	8000bc4 <_free_r+0x98>
 8000b7a:	6821      	ldr	r1, [r4, #0]
 8000b7c:	1860      	adds	r0, r4, r1
 8000b7e:	4283      	cmp	r3, r0
 8000b80:	d006      	beq.n	8000b90 <_free_r+0x64>
 8000b82:	6063      	str	r3, [r4, #4]
 8000b84:	6054      	str	r4, [r2, #4]
 8000b86:	4628      	mov	r0, r5
 8000b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b8c:	f001 b8c2 	b.w	8001d14 <__malloc_unlock>
 8000b90:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000b94:	4401      	add	r1, r0
 8000b96:	6063      	str	r3, [r4, #4]
 8000b98:	6021      	str	r1, [r4, #0]
 8000b9a:	6054      	str	r4, [r2, #4]
 8000b9c:	e7f3      	b.n	8000b86 <_free_r+0x5a>
 8000b9e:	e9d2 0200 	ldrd	r0, r2, [r2]
 8000ba2:	4401      	add	r1, r0
 8000ba4:	6062      	str	r2, [r4, #4]
 8000ba6:	6021      	str	r1, [r4, #0]
 8000ba8:	e7d6      	b.n	8000b58 <_free_r+0x2c>
 8000baa:	4770      	bx	lr
 8000bac:	6820      	ldr	r0, [r4, #0]
 8000bae:	4401      	add	r1, r0
 8000bb0:	1850      	adds	r0, r2, r1
 8000bb2:	4283      	cmp	r3, r0
 8000bb4:	6011      	str	r1, [r2, #0]
 8000bb6:	d1e6      	bne.n	8000b86 <_free_r+0x5a>
 8000bb8:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000bbc:	4401      	add	r1, r0
 8000bbe:	6053      	str	r3, [r2, #4]
 8000bc0:	6011      	str	r1, [r2, #0]
 8000bc2:	e7e0      	b.n	8000b86 <_free_r+0x5a>
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	602b      	str	r3, [r5, #0]
 8000bc8:	4628      	mov	r0, r5
 8000bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bce:	f001 b8a1 	b.w	8001d14 <__malloc_unlock>
 8000bd2:	bf00      	nop
 8000bd4:	2400196c 	.word	0x2400196c

08000bd8 <_malloc_r>:
 8000bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bda:	1ccd      	adds	r5, r1, #3
 8000bdc:	f025 0503 	bic.w	r5, r5, #3
 8000be0:	3508      	adds	r5, #8
 8000be2:	2d0c      	cmp	r5, #12
 8000be4:	bf38      	it	cc
 8000be6:	250c      	movcc	r5, #12
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	4606      	mov	r6, r0
 8000bec:	db33      	blt.n	8000c56 <_malloc_r+0x7e>
 8000bee:	42a9      	cmp	r1, r5
 8000bf0:	d831      	bhi.n	8000c56 <_malloc_r+0x7e>
 8000bf2:	4f2a      	ldr	r7, [pc, #168]	; (8000c9c <_malloc_r+0xc4>)
 8000bf4:	f001 f88c 	bl	8001d10 <__malloc_lock>
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	b152      	cbz	r2, 8000c12 <_malloc_r+0x3a>
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	1b5b      	subs	r3, r3, r5
 8000c00:	d404      	bmi.n	8000c0c <_malloc_r+0x34>
 8000c02:	e03f      	b.n	8000c84 <_malloc_r+0xac>
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	1b5b      	subs	r3, r3, r5
 8000c08:	d529      	bpl.n	8000c5e <_malloc_r+0x86>
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	6854      	ldr	r4, [r2, #4]
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d1f8      	bne.n	8000c04 <_malloc_r+0x2c>
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	2900      	cmp	r1, #0
 8000c16:	d03b      	beq.n	8000c90 <_malloc_r+0xb8>
 8000c18:	4629      	mov	r1, r5
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	f000 fbd4 	bl	80013c8 <_sbrk_r>
 8000c20:	1c43      	adds	r3, r0, #1
 8000c22:	d028      	beq.n	8000c76 <_malloc_r+0x9e>
 8000c24:	1cc4      	adds	r4, r0, #3
 8000c26:	f024 0403 	bic.w	r4, r4, #3
 8000c2a:	42a0      	cmp	r0, r4
 8000c2c:	d005      	beq.n	8000c3a <_malloc_r+0x62>
 8000c2e:	1a21      	subs	r1, r4, r0
 8000c30:	4630      	mov	r0, r6
 8000c32:	f000 fbc9 	bl	80013c8 <_sbrk_r>
 8000c36:	3001      	adds	r0, #1
 8000c38:	d01d      	beq.n	8000c76 <_malloc_r+0x9e>
 8000c3a:	6025      	str	r5, [r4, #0]
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	f001 f869 	bl	8001d14 <__malloc_unlock>
 8000c42:	f104 000b 	add.w	r0, r4, #11
 8000c46:	f020 0007 	bic.w	r0, r0, #7
 8000c4a:	1d23      	adds	r3, r4, #4
 8000c4c:	1ac2      	subs	r2, r0, r3
 8000c4e:	d001      	beq.n	8000c54 <_malloc_r+0x7c>
 8000c50:	1a1b      	subs	r3, r3, r0
 8000c52:	50a3      	str	r3, [r4, r2]
 8000c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c56:	220c      	movs	r2, #12
 8000c58:	6032      	str	r2, [r6, #0]
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c5e:	2b0b      	cmp	r3, #11
 8000c60:	d805      	bhi.n	8000c6e <_malloc_r+0x96>
 8000c62:	42a2      	cmp	r2, r4
 8000c64:	6863      	ldr	r3, [r4, #4]
 8000c66:	d011      	beq.n	8000c8c <_malloc_r+0xb4>
 8000c68:	6053      	str	r3, [r2, #4]
 8000c6a:	e7e7      	b.n	8000c3c <_malloc_r+0x64>
 8000c6c:	4614      	mov	r4, r2
 8000c6e:	6023      	str	r3, [r4, #0]
 8000c70:	441c      	add	r4, r3
 8000c72:	6025      	str	r5, [r4, #0]
 8000c74:	e7e2      	b.n	8000c3c <_malloc_r+0x64>
 8000c76:	230c      	movs	r3, #12
 8000c78:	4630      	mov	r0, r6
 8000c7a:	6033      	str	r3, [r6, #0]
 8000c7c:	f001 f84a 	bl	8001d14 <__malloc_unlock>
 8000c80:	2000      	movs	r0, #0
 8000c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c84:	2b0b      	cmp	r3, #11
 8000c86:	d8f1      	bhi.n	8000c6c <_malloc_r+0x94>
 8000c88:	6853      	ldr	r3, [r2, #4]
 8000c8a:	4614      	mov	r4, r2
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	e7d5      	b.n	8000c3c <_malloc_r+0x64>
 8000c90:	4630      	mov	r0, r6
 8000c92:	f000 fb99 	bl	80013c8 <_sbrk_r>
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	e7be      	b.n	8000c18 <_malloc_r+0x40>
 8000c9a:	bf00      	nop
 8000c9c:	2400196c 	.word	0x2400196c

08000ca0 <__sfputc_r>:
 8000ca0:	6893      	ldr	r3, [r2, #8]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	6093      	str	r3, [r2, #8]
 8000ca8:	da11      	bge.n	8000cce <__sfputc_r+0x2e>
 8000caa:	b410      	push	{r4}
 8000cac:	6994      	ldr	r4, [r2, #24]
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	db09      	blt.n	8000cc6 <__sfputc_r+0x26>
 8000cb2:	290a      	cmp	r1, #10
 8000cb4:	d007      	beq.n	8000cc6 <__sfputc_r+0x26>
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	1c58      	adds	r0, r3, #1
 8000cba:	6010      	str	r0, [r2, #0]
 8000cbc:	7019      	strb	r1, [r3, #0]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cca:	f000 bbd7 	b.w	800147c <__swbuf_r>
 8000cce:	6813      	ldr	r3, [r2, #0]
 8000cd0:	1c58      	adds	r0, r3, #1
 8000cd2:	6010      	str	r0, [r2, #0]
 8000cd4:	7019      	strb	r1, [r3, #0]
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__sfputs_r>:
 8000cdc:	b19b      	cbz	r3, 8000d06 <__sfputs_r+0x2a>
 8000cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce0:	4413      	add	r3, r2
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	4606      	mov	r6, r0
 8000ce6:	1e5d      	subs	r5, r3, #1
 8000ce8:	1e54      	subs	r4, r2, #1
 8000cea:	e001      	b.n	8000cf0 <__sfputs_r+0x14>
 8000cec:	42ac      	cmp	r4, r5
 8000cee:	d008      	beq.n	8000d02 <__sfputs_r+0x26>
 8000cf0:	463a      	mov	r2, r7
 8000cf2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	f7ff ffd2 	bl	8000ca0 <__sfputc_r>
 8000cfc:	1c43      	adds	r3, r0, #1
 8000cfe:	d1f5      	bne.n	8000cec <__sfputs_r+0x10>
 8000d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d02:	2000      	movs	r0, #0
 8000d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d06:	2000      	movs	r0, #0
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <__sprint_r>:
 8000d0c:	6893      	ldr	r3, [r2, #8]
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	4614      	mov	r4, r2
 8000d12:	b913      	cbnz	r3, 8000d1a <__sprint_r+0xe>
 8000d14:	6053      	str	r3, [r2, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd10      	pop	{r4, pc}
 8000d1a:	f000 fd97 	bl	800184c <__sfvwrite_r>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8000d24:	bd10      	pop	{r4, pc}
 8000d26:	bf00      	nop

08000d28 <_vfiprintf_r>:
 8000d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d2c:	b09f      	sub	sp, #124	; 0x7c
 8000d2e:	468b      	mov	fp, r1
 8000d30:	4690      	mov	r8, r2
 8000d32:	461c      	mov	r4, r3
 8000d34:	9003      	str	r0, [sp, #12]
 8000d36:	b118      	cbz	r0, 8000d40 <_vfiprintf_r+0x18>
 8000d38:	6983      	ldr	r3, [r0, #24]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 80b7 	beq.w	8000eae <_vfiprintf_r+0x186>
 8000d40:	4ba2      	ldr	r3, [pc, #648]	; (8000fcc <_vfiprintf_r+0x2a4>)
 8000d42:	459b      	cmp	fp, r3
 8000d44:	f000 80b9 	beq.w	8000eba <_vfiprintf_r+0x192>
 8000d48:	4ba1      	ldr	r3, [pc, #644]	; (8000fd0 <_vfiprintf_r+0x2a8>)
 8000d4a:	459b      	cmp	fp, r3
 8000d4c:	f000 80c7 	beq.w	8000ede <_vfiprintf_r+0x1b6>
 8000d50:	4ba0      	ldr	r3, [pc, #640]	; (8000fd4 <_vfiprintf_r+0x2ac>)
 8000d52:	459b      	cmp	fp, r3
 8000d54:	bf04      	itt	eq
 8000d56:	9b03      	ldreq	r3, [sp, #12]
 8000d58:	f8d3 b00c 	ldreq.w	fp, [r3, #12]
 8000d5c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8000d60:	0718      	lsls	r0, r3, #28
 8000d62:	f140 80b2 	bpl.w	8000eca <_vfiprintf_r+0x1a2>
 8000d66:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80ad 	beq.w	8000eca <_vfiprintf_r+0x1a2>
 8000d70:	2330      	movs	r3, #48	; 0x30
 8000d72:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8000d76:	f898 3000 	ldrb.w	r3, [r8]
 8000d7a:	9405      	str	r4, [sp, #20]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2220      	movs	r2, #32
 8000d80:	910b      	str	r1, [sp, #44]	; 0x2c
 8000d82:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8000d86:	4e94      	ldr	r6, [pc, #592]	; (8000fd8 <_vfiprintf_r+0x2b0>)
 8000d88:	2701      	movs	r7, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 8087 	beq.w	8000e9e <_vfiprintf_r+0x176>
 8000d90:	2b25      	cmp	r3, #37	; 0x25
 8000d92:	f000 8115 	beq.w	8000fc0 <_vfiprintf_r+0x298>
 8000d96:	4645      	mov	r5, r8
 8000d98:	e003      	b.n	8000da2 <_vfiprintf_r+0x7a>
 8000d9a:	2b25      	cmp	r3, #37	; 0x25
 8000d9c:	f000 80a3 	beq.w	8000ee6 <_vfiprintf_r+0x1be>
 8000da0:	4625      	mov	r5, r4
 8000da2:	786b      	ldrb	r3, [r5, #1]
 8000da4:	1c6c      	adds	r4, r5, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f7      	bne.n	8000d9a <_vfiprintf_r+0x72>
 8000daa:	ebb4 0a08 	subs.w	sl, r4, r8
 8000dae:	d076      	beq.n	8000e9e <_vfiprintf_r+0x176>
 8000db0:	4642      	mov	r2, r8
 8000db2:	4653      	mov	r3, sl
 8000db4:	4659      	mov	r1, fp
 8000db6:	9803      	ldr	r0, [sp, #12]
 8000db8:	f7ff ff90 	bl	8000cdc <__sfputs_r>
 8000dbc:	3001      	adds	r0, #1
 8000dbe:	d06e      	beq.n	8000e9e <_vfiprintf_r+0x176>
 8000dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000dc2:	786a      	ldrb	r2, [r5, #1]
 8000dc4:	4453      	add	r3, sl
 8000dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d068      	beq.n	8000e9e <_vfiprintf_r+0x176>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd2:	3401      	adds	r4, #1
 8000dd4:	9306      	str	r3, [sp, #24]
 8000dd6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000dda:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8000dde:	931c      	str	r3, [sp, #112]	; 0x70
 8000de0:	9207      	str	r2, [sp, #28]
 8000de2:	e005      	b.n	8000df0 <_vfiprintf_r+0xc8>
 8000de4:	9a06      	ldr	r2, [sp, #24]
 8000de6:	fa07 f303 	lsl.w	r3, r7, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	462c      	mov	r4, r5
 8000dee:	9306      	str	r3, [sp, #24]
 8000df0:	4625      	mov	r5, r4
 8000df2:	2205      	movs	r2, #5
 8000df4:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 ff39 	bl	8001c70 <memchr>
 8000dfe:	46aa      	mov	sl, r5
 8000e00:	1b83      	subs	r3, r0, r6
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d1ee      	bne.n	8000de4 <_vfiprintf_r+0xbc>
 8000e06:	9b06      	ldr	r3, [sp, #24]
 8000e08:	06d9      	lsls	r1, r3, #27
 8000e0a:	bf44      	itt	mi
 8000e0c:	2220      	movmi	r2, #32
 8000e0e:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000e12:	7821      	ldrb	r1, [r4, #0]
 8000e14:	071a      	lsls	r2, r3, #28
 8000e16:	bf44      	itt	mi
 8000e18:	222b      	movmi	r2, #43	; 0x2b
 8000e1a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000e1e:	292a      	cmp	r1, #42	; 0x2a
 8000e20:	d166      	bne.n	8000ef0 <_vfiprintf_r+0x1c8>
 8000e22:	9a05      	ldr	r2, [sp, #20]
 8000e24:	6811      	ldr	r1, [r2, #0]
 8000e26:	3204      	adds	r2, #4
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	9205      	str	r2, [sp, #20]
 8000e2c:	f2c0 809d 	blt.w	8000f6a <_vfiprintf_r+0x242>
 8000e30:	9109      	str	r1, [sp, #36]	; 0x24
 8000e32:	7861      	ldrb	r1, [r4, #1]
 8000e34:	1ca5      	adds	r5, r4, #2
 8000e36:	292e      	cmp	r1, #46	; 0x2e
 8000e38:	d073      	beq.n	8000f22 <_vfiprintf_r+0x1fa>
 8000e3a:	4c68      	ldr	r4, [pc, #416]	; (8000fdc <_vfiprintf_r+0x2b4>)
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f000 ff16 	bl	8001c70 <memchr>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	f000 8086 	beq.w	8000f56 <_vfiprintf_r+0x22e>
 8000e4a:	1b00      	subs	r0, r0, r4
 8000e4c:	9b06      	ldr	r3, [sp, #24]
 8000e4e:	2440      	movs	r4, #64	; 0x40
 8000e50:	fa04 f000 	lsl.w	r0, r4, r0
 8000e54:	4303      	orrs	r3, r0
 8000e56:	9306      	str	r3, [sp, #24]
 8000e58:	f105 0801 	add.w	r8, r5, #1
 8000e5c:	7829      	ldrb	r1, [r5, #0]
 8000e5e:	4860      	ldr	r0, [pc, #384]	; (8000fe0 <_vfiprintf_r+0x2b8>)
 8000e60:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8000e64:	2206      	movs	r2, #6
 8000e66:	f000 ff03 	bl	8001c70 <memchr>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	f000 8083 	beq.w	8000f76 <_vfiprintf_r+0x24e>
 8000e70:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <_vfiprintf_r+0x2bc>)
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d072      	beq.n	8000f5c <_vfiprintf_r+0x234>
 8000e76:	ab05      	add	r3, sp, #20
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	465a      	mov	r2, fp
 8000e7c:	4b5a      	ldr	r3, [pc, #360]	; (8000fe8 <_vfiprintf_r+0x2c0>)
 8000e7e:	9803      	ldr	r0, [sp, #12]
 8000e80:	a906      	add	r1, sp, #24
 8000e82:	f3af 8000 	nop.w
 8000e86:	4681      	mov	r9, r0
 8000e88:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8000e8c:	d007      	beq.n	8000e9e <_vfiprintf_r+0x176>
 8000e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000e90:	444b      	add	r3, r9
 8000e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e94:	f898 3000 	ldrb.w	r3, [r8]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f47f af79 	bne.w	8000d90 <_vfiprintf_r+0x68>
 8000e9e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8000ea2:	065b      	lsls	r3, r3, #25
 8000ea4:	d418      	bmi.n	8000ed8 <_vfiprintf_r+0x1b0>
 8000ea6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000ea8:	b01f      	add	sp, #124	; 0x7c
 8000eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eae:	f7ff fd9b 	bl	80009e8 <__sinit>
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <_vfiprintf_r+0x2a4>)
 8000eb4:	459b      	cmp	fp, r3
 8000eb6:	f47f af47 	bne.w	8000d48 <_vfiprintf_r+0x20>
 8000eba:	9b03      	ldr	r3, [sp, #12]
 8000ebc:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8000ec0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8000ec4:	0718      	lsls	r0, r3, #28
 8000ec6:	f53f af4e 	bmi.w	8000d66 <_vfiprintf_r+0x3e>
 8000eca:	4659      	mov	r1, fp
 8000ecc:	9803      	ldr	r0, [sp, #12]
 8000ece:	f000 fb4b 	bl	8001568 <__swsetup_r>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	f43f af4c 	beq.w	8000d70 <_vfiprintf_r+0x48>
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000edc:	e7e4      	b.n	8000ea8 <_vfiprintf_r+0x180>
 8000ede:	9b03      	ldr	r3, [sp, #12]
 8000ee0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8000ee4:	e73a      	b.n	8000d5c <_vfiprintf_r+0x34>
 8000ee6:	ebb4 0a08 	subs.w	sl, r4, r8
 8000eea:	f43f af6f 	beq.w	8000dcc <_vfiprintf_r+0xa4>
 8000eee:	e75f      	b.n	8000db0 <_vfiprintf_r+0x88>
 8000ef0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000ef4:	2a09      	cmp	r2, #9
 8000ef6:	bf88      	it	hi
 8000ef8:	46a2      	movhi	sl, r4
 8000efa:	d89c      	bhi.n	8000e36 <_vfiprintf_r+0x10e>
 8000efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000efe:	e001      	b.n	8000f04 <_vfiprintf_r+0x1dc>
 8000f00:	462c      	mov	r4, r5
 8000f02:	3501      	adds	r5, #1
 8000f04:	7829      	ldrb	r1, [r5, #0]
 8000f06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000f0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000f12:	2a09      	cmp	r2, #9
 8000f14:	46aa      	mov	sl, r5
 8000f16:	d9f3      	bls.n	8000f00 <_vfiprintf_r+0x1d8>
 8000f18:	292e      	cmp	r1, #46	; 0x2e
 8000f1a:	f104 0502 	add.w	r5, r4, #2
 8000f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8000f20:	d18b      	bne.n	8000e3a <_vfiprintf_r+0x112>
 8000f22:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8000f26:	292a      	cmp	r1, #42	; 0x2a
 8000f28:	d12f      	bne.n	8000f8a <_vfiprintf_r+0x262>
 8000f2a:	9b05      	ldr	r3, [sp, #20]
 8000f2c:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	9207      	str	r2, [sp, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2a00      	cmp	r2, #0
 8000f38:	9305      	str	r3, [sp, #20]
 8000f3a:	f10a 0503 	add.w	r5, sl, #3
 8000f3e:	f10a 0302 	add.w	r3, sl, #2
 8000f42:	db38      	blt.n	8000fb6 <_vfiprintf_r+0x28e>
 8000f44:	4c25      	ldr	r4, [pc, #148]	; (8000fdc <_vfiprintf_r+0x2b4>)
 8000f46:	2203      	movs	r2, #3
 8000f48:	4620      	mov	r0, r4
 8000f4a:	469a      	mov	sl, r3
 8000f4c:	f000 fe90 	bl	8001c70 <memchr>
 8000f50:	2800      	cmp	r0, #0
 8000f52:	f47f af7a 	bne.w	8000e4a <_vfiprintf_r+0x122>
 8000f56:	46a8      	mov	r8, r5
 8000f58:	4655      	mov	r5, sl
 8000f5a:	e77f      	b.n	8000e5c <_vfiprintf_r+0x134>
 8000f5c:	9b05      	ldr	r3, [sp, #20]
 8000f5e:	3307      	adds	r3, #7
 8000f60:	f023 0307 	bic.w	r3, r3, #7
 8000f64:	3308      	adds	r3, #8
 8000f66:	9305      	str	r3, [sp, #20]
 8000f68:	e791      	b.n	8000e8e <_vfiprintf_r+0x166>
 8000f6a:	4249      	negs	r1, r1
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	9109      	str	r1, [sp, #36]	; 0x24
 8000f72:	9306      	str	r3, [sp, #24]
 8000f74:	e75d      	b.n	8000e32 <_vfiprintf_r+0x10a>
 8000f76:	ab05      	add	r3, sp, #20
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	465a      	mov	r2, fp
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <_vfiprintf_r+0x2c0>)
 8000f7e:	9803      	ldr	r0, [sp, #12]
 8000f80:	a906      	add	r1, sp, #24
 8000f82:	f000 f8d5 	bl	8001130 <_printf_i>
 8000f86:	4681      	mov	r9, r0
 8000f88:	e77e      	b.n	8000e88 <_vfiprintf_r+0x160>
 8000f8a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2a09      	cmp	r2, #9
 8000f92:	9307      	str	r3, [sp, #28]
 8000f94:	d901      	bls.n	8000f9a <_vfiprintf_r+0x272>
 8000f96:	e015      	b.n	8000fc4 <_vfiprintf_r+0x29c>
 8000f98:	4655      	mov	r5, sl
 8000f9a:	7869      	ldrb	r1, [r5, #1]
 8000f9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fa0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000fa4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000fa8:	2a09      	cmp	r2, #9
 8000faa:	f105 0a01 	add.w	sl, r5, #1
 8000fae:	d9f3      	bls.n	8000f98 <_vfiprintf_r+0x270>
 8000fb0:	3502      	adds	r5, #2
 8000fb2:	9307      	str	r3, [sp, #28]
 8000fb4:	e741      	b.n	8000e3a <_vfiprintf_r+0x112>
 8000fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fba:	469a      	mov	sl, r3
 8000fbc:	9207      	str	r2, [sp, #28]
 8000fbe:	e73c      	b.n	8000e3a <_vfiprintf_r+0x112>
 8000fc0:	4644      	mov	r4, r8
 8000fc2:	e703      	b.n	8000dcc <_vfiprintf_r+0xa4>
 8000fc4:	46aa      	mov	sl, r5
 8000fc6:	3501      	adds	r5, #1
 8000fc8:	e737      	b.n	8000e3a <_vfiprintf_r+0x112>
 8000fca:	bf00      	nop
 8000fcc:	08019cc4 	.word	0x08019cc4
 8000fd0:	08019ca4 	.word	0x08019ca4
 8000fd4:	08019c84 	.word	0x08019c84
 8000fd8:	08019eb0 	.word	0x08019eb0
 8000fdc:	08019eb8 	.word	0x08019eb8
 8000fe0:	08019ebc 	.word	0x08019ebc
 8000fe4:	00000000 	.word	0x00000000
 8000fe8:	08000cdd 	.word	0x08000cdd

08000fec <vfiprintf>:
 8000fec:	b410      	push	{r4}
 8000fee:	4c04      	ldr	r4, [pc, #16]	; (8001000 <vfiprintf+0x14>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	4601      	mov	r1, r0
 8000ff6:	6820      	ldr	r0, [r4, #0]
 8000ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ffc:	f7ff be94 	b.w	8000d28 <_vfiprintf_r>
 8001000:	24000000 	.word	0x24000000

08001004 <_printf_common>:
 8001004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001008:	460c      	mov	r4, r1
 800100a:	4691      	mov	r9, r2
 800100c:	690a      	ldr	r2, [r1, #16]
 800100e:	6889      	ldr	r1, [r1, #8]
 8001010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001014:	428a      	cmp	r2, r1
 8001016:	bfb8      	it	lt
 8001018:	460a      	movlt	r2, r1
 800101a:	f8c9 2000 	str.w	r2, [r9]
 800101e:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8001022:	4606      	mov	r6, r0
 8001024:	461f      	mov	r7, r3
 8001026:	b111      	cbz	r1, 800102e <_printf_common+0x2a>
 8001028:	3201      	adds	r2, #1
 800102a:	f8c9 2000 	str.w	r2, [r9]
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	0699      	lsls	r1, r3, #26
 8001032:	d55c      	bpl.n	80010ee <_printf_common+0xea>
 8001034:	f8d9 2000 	ldr.w	r2, [r9]
 8001038:	3202      	adds	r2, #2
 800103a:	f8c9 2000 	str.w	r2, [r9]
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	f013 0f06 	tst.w	r3, #6
 8001044:	4619      	mov	r1, r3
 8001046:	d11d      	bne.n	8001084 <_printf_common+0x80>
 8001048:	68e1      	ldr	r1, [r4, #12]
 800104a:	1a8a      	subs	r2, r1, r2
 800104c:	2a00      	cmp	r2, #0
 800104e:	bfd8      	it	le
 8001050:	4619      	movle	r1, r3
 8001052:	dd17      	ble.n	8001084 <_printf_common+0x80>
 8001054:	f104 0a19 	add.w	sl, r4, #25
 8001058:	2500      	movs	r5, #0
 800105a:	e005      	b.n	8001068 <_printf_common+0x64>
 800105c:	68e3      	ldr	r3, [r4, #12]
 800105e:	f8d9 2000 	ldr.w	r2, [r9]
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	42ab      	cmp	r3, r5
 8001066:	dd0c      	ble.n	8001082 <_printf_common+0x7e>
 8001068:	2301      	movs	r3, #1
 800106a:	4652      	mov	r2, sl
 800106c:	4639      	mov	r1, r7
 800106e:	4630      	mov	r0, r6
 8001070:	47c0      	blx	r8
 8001072:	3001      	adds	r0, #1
 8001074:	f105 0501 	add.w	r5, r5, #1
 8001078:	d1f0      	bne.n	800105c <_printf_common+0x58>
 800107a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800107e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001082:	6821      	ldr	r1, [r4, #0]
 8001084:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001088:	3300      	adds	r3, #0
 800108a:	bf18      	it	ne
 800108c:	2301      	movne	r3, #1
 800108e:	068a      	lsls	r2, r1, #26
 8001090:	d50a      	bpl.n	80010a8 <_printf_common+0xa4>
 8001092:	18e1      	adds	r1, r4, r3
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	2030      	movs	r0, #48	; 0x30
 8001098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800109c:	4422      	add	r2, r4
 800109e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80010a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80010a6:	3302      	adds	r3, #2
 80010a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010ac:	4639      	mov	r1, r7
 80010ae:	4630      	mov	r0, r6
 80010b0:	47c0      	blx	r8
 80010b2:	3001      	adds	r0, #1
 80010b4:	d0e1      	beq.n	800107a <_printf_common+0x76>
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	68a2      	ldr	r2, [r4, #8]
 80010ba:	6921      	ldr	r1, [r4, #16]
 80010bc:	f003 0306 	and.w	r3, r3, #6
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d01d      	beq.n	8001100 <_printf_common+0xfc>
 80010c4:	428a      	cmp	r2, r1
 80010c6:	dd26      	ble.n	8001116 <_printf_common+0x112>
 80010c8:	f04f 0900 	mov.w	r9, #0
 80010cc:	1a52      	subs	r2, r2, r1
 80010ce:	4491      	add	r9, r2
 80010d0:	341a      	adds	r4, #26
 80010d2:	2500      	movs	r5, #0
 80010d4:	e001      	b.n	80010da <_printf_common+0xd6>
 80010d6:	454d      	cmp	r5, r9
 80010d8:	da1d      	bge.n	8001116 <_printf_common+0x112>
 80010da:	2301      	movs	r3, #1
 80010dc:	4622      	mov	r2, r4
 80010de:	4639      	mov	r1, r7
 80010e0:	4630      	mov	r0, r6
 80010e2:	47c0      	blx	r8
 80010e4:	3001      	adds	r0, #1
 80010e6:	f105 0501 	add.w	r5, r5, #1
 80010ea:	d1f4      	bne.n	80010d6 <_printf_common+0xd2>
 80010ec:	e7c5      	b.n	800107a <_printf_common+0x76>
 80010ee:	f013 0f06 	tst.w	r3, #6
 80010f2:	d013      	beq.n	800111c <_printf_common+0x118>
 80010f4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80010f8:	3300      	adds	r3, #0
 80010fa:	bf18      	it	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	e7d3      	b.n	80010a8 <_printf_common+0xa4>
 8001100:	f8d9 0000 	ldr.w	r0, [r9]
 8001104:	68e3      	ldr	r3, [r4, #12]
 8001106:	428a      	cmp	r2, r1
 8001108:	eba3 0300 	sub.w	r3, r3, r0
 800110c:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
 8001110:	dcdc      	bgt.n	80010cc <_printf_common+0xc8>
 8001112:	2b00      	cmp	r3, #0
 8001114:	dcdc      	bgt.n	80010d0 <_printf_common+0xcc>
 8001116:	2000      	movs	r0, #0
 8001118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800111c:	68e1      	ldr	r1, [r4, #12]
 800111e:	f8d9 2000 	ldr.w	r2, [r9]
 8001122:	1a8a      	subs	r2, r1, r2
 8001124:	2a00      	cmp	r2, #0
 8001126:	bfd8      	it	le
 8001128:	4619      	movle	r1, r3
 800112a:	dc93      	bgt.n	8001054 <_printf_common+0x50>
 800112c:	e7aa      	b.n	8001084 <_printf_common+0x80>
 800112e:	bf00      	nop

08001130 <_printf_i>:
 8001130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001134:	460c      	mov	r4, r1
 8001136:	7e09      	ldrb	r1, [r1, #24]
 8001138:	b085      	sub	sp, #20
 800113a:	296e      	cmp	r1, #110	; 0x6e
 800113c:	4606      	mov	r6, r0
 800113e:	4617      	mov	r7, r2
 8001140:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001142:	4698      	mov	r8, r3
 8001144:	f104 0e43 	add.w	lr, r4, #67	; 0x43
 8001148:	d06d      	beq.n	8001226 <_printf_i+0xf6>
 800114a:	d939      	bls.n	80011c0 <_printf_i+0x90>
 800114c:	2973      	cmp	r1, #115	; 0x73
 800114e:	f000 80f6 	beq.w	800133e <_printf_i+0x20e>
 8001152:	d944      	bls.n	80011de <_printf_i+0xae>
 8001154:	2975      	cmp	r1, #117	; 0x75
 8001156:	f000 8104 	beq.w	8001362 <_printf_i+0x232>
 800115a:	2978      	cmp	r1, #120	; 0x78
 800115c:	f040 8111 	bne.w	8001382 <_printf_i+0x252>
 8001160:	2378      	movs	r3, #120	; 0x78
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	f8df c258 	ldr.w	ip, [pc, #600]	; 80013c0 <_printf_i+0x290>
 8001168:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800116c:	6801      	ldr	r1, [r0, #0]
 800116e:	0615      	lsls	r5, r2, #24
 8001170:	f851 3b04 	ldr.w	r3, [r1], #4
 8001174:	6001      	str	r1, [r0, #0]
 8001176:	f140 80a1 	bpl.w	80012bc <_printf_i+0x18c>
 800117a:	07d1      	lsls	r1, r2, #31
 800117c:	bf44      	itt	mi
 800117e:	f042 0220 	orrmi.w	r2, r2, #32
 8001182:	6022      	strmi	r2, [r4, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 8093 	beq.w	80012b0 <_printf_i+0x180>
 800118a:	2210      	movs	r2, #16
 800118c:	2100      	movs	r1, #0
 800118e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001192:	6860      	ldr	r0, [r4, #4]
 8001194:	60a0      	str	r0, [r4, #8]
 8001196:	2800      	cmp	r0, #0
 8001198:	f2c0 80c8 	blt.w	800132c <_printf_i+0x1fc>
 800119c:	6821      	ldr	r1, [r4, #0]
 800119e:	f021 0104 	bic.w	r1, r1, #4
 80011a2:	6021      	str	r1, [r4, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f040 80a3 	bne.w	80012f0 <_printf_i+0x1c0>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	f040 80c0 	bne.w	8001330 <_printf_i+0x200>
 80011b0:	4675      	mov	r5, lr
 80011b2:	2a08      	cmp	r2, #8
 80011b4:	f000 80ac 	beq.w	8001310 <_printf_i+0x1e0>
 80011b8:	ebae 0305 	sub.w	r3, lr, r5
 80011bc:	6123      	str	r3, [r4, #16]
 80011be:	e041      	b.n	8001244 <_printf_i+0x114>
 80011c0:	2963      	cmp	r1, #99	; 0x63
 80011c2:	f000 80e5 	beq.w	8001390 <_printf_i+0x260>
 80011c6:	d81a      	bhi.n	80011fe <_printf_i+0xce>
 80011c8:	2900      	cmp	r1, #0
 80011ca:	d038      	beq.n	800123e <_printf_i+0x10e>
 80011cc:	2958      	cmp	r1, #88	; 0x58
 80011ce:	f040 80d8 	bne.w	8001382 <_printf_i+0x252>
 80011d2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80011d6:	6822      	ldr	r2, [r4, #0]
 80011d8:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 80013c4 <_printf_i+0x294>
 80011dc:	e7c6      	b.n	800116c <_printf_i+0x3c>
 80011de:	296f      	cmp	r1, #111	; 0x6f
 80011e0:	f000 80bf 	beq.w	8001362 <_printf_i+0x232>
 80011e4:	2970      	cmp	r1, #112	; 0x70
 80011e6:	f040 80cc 	bne.w	8001382 <_printf_i+0x252>
 80011ea:	6822      	ldr	r2, [r4, #0]
 80011ec:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80013c0 <_printf_i+0x290>
 80011f0:	f042 0220 	orr.w	r2, r2, #32
 80011f4:	2378      	movs	r3, #120	; 0x78
 80011f6:	6022      	str	r2, [r4, #0]
 80011f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80011fc:	e7b6      	b.n	800116c <_printf_i+0x3c>
 80011fe:	2964      	cmp	r1, #100	; 0x64
 8001200:	d002      	beq.n	8001208 <_printf_i+0xd8>
 8001202:	2969      	cmp	r1, #105	; 0x69
 8001204:	f040 80bd 	bne.w	8001382 <_printf_i+0x252>
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	6803      	ldr	r3, [r0, #0]
 800120c:	0611      	lsls	r1, r2, #24
 800120e:	f103 0504 	add.w	r5, r3, #4
 8001212:	d557      	bpl.n	80012c4 <_printf_i+0x194>
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	6005      	str	r5, [r0, #0]
 8001218:	460b      	mov	r3, r1
 800121a:	2900      	cmp	r1, #0
 800121c:	db59      	blt.n	80012d2 <_printf_i+0x1a2>
 800121e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80013c4 <_printf_i+0x294>
 8001222:	220a      	movs	r2, #10
 8001224:	e7b5      	b.n	8001192 <_printf_i+0x62>
 8001226:	6803      	ldr	r3, [r0, #0]
 8001228:	6822      	ldr	r2, [r4, #0]
 800122a:	6961      	ldr	r1, [r4, #20]
 800122c:	1d1d      	adds	r5, r3, #4
 800122e:	6005      	str	r5, [r0, #0]
 8001230:	0615      	lsls	r5, r2, #24
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	d402      	bmi.n	800123c <_printf_i+0x10c>
 8001236:	0650      	lsls	r0, r2, #25
 8001238:	f100 80bd 	bmi.w	80013b6 <_printf_i+0x286>
 800123c:	6019      	str	r1, [r3, #0]
 800123e:	2300      	movs	r3, #0
 8001240:	4675      	mov	r5, lr
 8001242:	6123      	str	r3, [r4, #16]
 8001244:	f8cd 8000 	str.w	r8, [sp]
 8001248:	463b      	mov	r3, r7
 800124a:	aa03      	add	r2, sp, #12
 800124c:	4621      	mov	r1, r4
 800124e:	4630      	mov	r0, r6
 8001250:	f7ff fed8 	bl	8001004 <_printf_common>
 8001254:	3001      	adds	r0, #1
 8001256:	d020      	beq.n	800129a <_printf_i+0x16a>
 8001258:	462a      	mov	r2, r5
 800125a:	6923      	ldr	r3, [r4, #16]
 800125c:	4639      	mov	r1, r7
 800125e:	4630      	mov	r0, r6
 8001260:	47c0      	blx	r8
 8001262:	3001      	adds	r0, #1
 8001264:	d019      	beq.n	800129a <_printf_i+0x16a>
 8001266:	6822      	ldr	r2, [r4, #0]
 8001268:	9803      	ldr	r0, [sp, #12]
 800126a:	68e3      	ldr	r3, [r4, #12]
 800126c:	0792      	lsls	r2, r2, #30
 800126e:	d519      	bpl.n	80012a4 <_printf_i+0x174>
 8001270:	1a1a      	subs	r2, r3, r0
 8001272:	2a00      	cmp	r2, #0
 8001274:	dd16      	ble.n	80012a4 <_printf_i+0x174>
 8001276:	f104 0919 	add.w	r9, r4, #25
 800127a:	2500      	movs	r5, #0
 800127c:	e004      	b.n	8001288 <_printf_i+0x158>
 800127e:	68e3      	ldr	r3, [r4, #12]
 8001280:	9803      	ldr	r0, [sp, #12]
 8001282:	1a1a      	subs	r2, r3, r0
 8001284:	42aa      	cmp	r2, r5
 8001286:	dd0d      	ble.n	80012a4 <_printf_i+0x174>
 8001288:	2301      	movs	r3, #1
 800128a:	464a      	mov	r2, r9
 800128c:	4639      	mov	r1, r7
 800128e:	4630      	mov	r0, r6
 8001290:	47c0      	blx	r8
 8001292:	3001      	adds	r0, #1
 8001294:	f105 0501 	add.w	r5, r5, #1
 8001298:	d1f1      	bne.n	800127e <_printf_i+0x14e>
 800129a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129e:	b005      	add	sp, #20
 80012a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012a4:	4298      	cmp	r0, r3
 80012a6:	bfb8      	it	lt
 80012a8:	4618      	movlt	r0, r3
 80012aa:	b005      	add	sp, #20
 80012ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012b0:	6822      	ldr	r2, [r4, #0]
 80012b2:	f022 0220 	bic.w	r2, r2, #32
 80012b6:	6022      	str	r2, [r4, #0]
 80012b8:	2210      	movs	r2, #16
 80012ba:	e767      	b.n	800118c <_printf_i+0x5c>
 80012bc:	0650      	lsls	r0, r2, #25
 80012be:	bf48      	it	mi
 80012c0:	b29b      	uxthmi	r3, r3
 80012c2:	e75a      	b.n	800117a <_printf_i+0x4a>
 80012c4:	0651      	lsls	r1, r2, #25
 80012c6:	d5a5      	bpl.n	8001214 <_printf_i+0xe4>
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	6005      	str	r5, [r0, #0]
 80012ce:	4619      	mov	r1, r3
 80012d0:	e7a3      	b.n	800121a <_printf_i+0xea>
 80012d2:	6861      	ldr	r1, [r4, #4]
 80012d4:	60a1      	str	r1, [r4, #8]
 80012d6:	202d      	movs	r0, #45	; 0x2d
 80012d8:	2900      	cmp	r1, #0
 80012da:	f1c3 0300 	rsb	r3, r3, #0
 80012de:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80012e2:	db02      	blt.n	80012ea <_printf_i+0x1ba>
 80012e4:	f022 0204 	bic.w	r2, r2, #4
 80012e8:	6022      	str	r2, [r4, #0]
 80012ea:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80013c4 <_printf_i+0x294>
 80012ee:	220a      	movs	r2, #10
 80012f0:	4675      	mov	r5, lr
 80012f2:	e000      	b.n	80012f6 <_printf_i+0x1c6>
 80012f4:	460b      	mov	r3, r1
 80012f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80012fa:	fb02 3011 	mls	r0, r2, r1, r3
 80012fe:	4293      	cmp	r3, r2
 8001300:	f81c 0000 	ldrb.w	r0, [ip, r0]
 8001304:	f805 0d01 	strb.w	r0, [r5, #-1]!
 8001308:	d2f4      	bcs.n	80012f4 <_printf_i+0x1c4>
 800130a:	2a08      	cmp	r2, #8
 800130c:	f47f af54 	bne.w	80011b8 <_printf_i+0x88>
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	07db      	lsls	r3, r3, #31
 8001314:	f57f af50 	bpl.w	80011b8 <_printf_i+0x88>
 8001318:	6862      	ldr	r2, [r4, #4]
 800131a:	6923      	ldr	r3, [r4, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	f73f af4b 	bgt.w	80011b8 <_printf_i+0x88>
 8001322:	2330      	movs	r3, #48	; 0x30
 8001324:	f805 3c01 	strb.w	r3, [r5, #-1]
 8001328:	3d01      	subs	r5, #1
 800132a:	e745      	b.n	80011b8 <_printf_i+0x88>
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1df      	bne.n	80012f0 <_printf_i+0x1c0>
 8001330:	f89c 3000 	ldrb.w	r3, [ip]
 8001334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800133c:	e739      	b.n	80011b2 <_printf_i+0x82>
 800133e:	6803      	ldr	r3, [r0, #0]
 8001340:	6862      	ldr	r2, [r4, #4]
 8001342:	1d19      	adds	r1, r3, #4
 8001344:	6001      	str	r1, [r0, #0]
 8001346:	681d      	ldr	r5, [r3, #0]
 8001348:	2100      	movs	r1, #0
 800134a:	4628      	mov	r0, r5
 800134c:	f000 fc90 	bl	8001c70 <memchr>
 8001350:	2800      	cmp	r0, #0
 8001352:	d032      	beq.n	80013ba <_printf_i+0x28a>
 8001354:	1b40      	subs	r0, r0, r5
 8001356:	6060      	str	r0, [r4, #4]
 8001358:	6120      	str	r0, [r4, #16]
 800135a:	2300      	movs	r3, #0
 800135c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001360:	e770      	b.n	8001244 <_printf_i+0x114>
 8001362:	6822      	ldr	r2, [r4, #0]
 8001364:	6803      	ldr	r3, [r0, #0]
 8001366:	f012 0f80 	tst.w	r2, #128	; 0x80
 800136a:	f103 0504 	add.w	r5, r3, #4
 800136e:	d01a      	beq.n	80013a6 <_printf_i+0x276>
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6005      	str	r5, [r0, #0]
 8001374:	296f      	cmp	r1, #111	; 0x6f
 8001376:	bf0c      	ite	eq
 8001378:	2208      	moveq	r2, #8
 800137a:	220a      	movne	r2, #10
 800137c:	f8df c044 	ldr.w	ip, [pc, #68]	; 80013c4 <_printf_i+0x294>
 8001380:	e704      	b.n	800118c <_printf_i+0x5c>
 8001382:	2301      	movs	r3, #1
 8001384:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001388:	6123      	str	r3, [r4, #16]
 800138a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800138e:	e7e4      	b.n	800135a <_printf_i+0x22a>
 8001390:	6803      	ldr	r3, [r0, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	1d19      	adds	r1, r3, #4
 8001396:	2301      	movs	r3, #1
 8001398:	6001      	str	r1, [r0, #0]
 800139a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800139e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80013a2:	6123      	str	r3, [r4, #16]
 80013a4:	e7d9      	b.n	800135a <_printf_i+0x22a>
 80013a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80013aa:	bf0d      	iteet	eq
 80013ac:	681b      	ldreq	r3, [r3, #0]
 80013ae:	6005      	strne	r5, [r0, #0]
 80013b0:	881b      	ldrhne	r3, [r3, #0]
 80013b2:	6005      	streq	r5, [r0, #0]
 80013b4:	e7de      	b.n	8001374 <_printf_i+0x244>
 80013b6:	8019      	strh	r1, [r3, #0]
 80013b8:	e741      	b.n	800123e <_printf_i+0x10e>
 80013ba:	6860      	ldr	r0, [r4, #4]
 80013bc:	e7cc      	b.n	8001358 <_printf_i+0x228>
 80013be:	bf00      	nop
 80013c0:	08019ed8 	.word	0x08019ed8
 80013c4:	08019ec4 	.word	0x08019ec4

080013c8 <_sbrk_r>:
 80013c8:	b538      	push	{r3, r4, r5, lr}
 80013ca:	4c07      	ldr	r4, [pc, #28]	; (80013e8 <_sbrk_r+0x20>)
 80013cc:	2300      	movs	r3, #0
 80013ce:	4605      	mov	r5, r0
 80013d0:	4608      	mov	r0, r1
 80013d2:	6023      	str	r3, [r4, #0]
 80013d4:	f002 fa8e 	bl	80038f4 <_sbrk>
 80013d8:	1c43      	adds	r3, r0, #1
 80013da:	d000      	beq.n	80013de <_sbrk_r+0x16>
 80013dc:	bd38      	pop	{r3, r4, r5, pc}
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0fb      	beq.n	80013dc <_sbrk_r+0x14>
 80013e4:	602b      	str	r3, [r5, #0]
 80013e6:	bd38      	pop	{r3, r4, r5, pc}
 80013e8:	2400931c 	.word	0x2400931c

080013ec <__sread>:
 80013ec:	b510      	push	{r4, lr}
 80013ee:	460c      	mov	r4, r1
 80013f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013f4:	f000 fcb6 	bl	8001d64 <_read_r>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	db03      	blt.n	8001404 <__sread+0x18>
 80013fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013fe:	4403      	add	r3, r0
 8001400:	6563      	str	r3, [r4, #84]	; 0x54
 8001402:	bd10      	pop	{r4, pc}
 8001404:	89a3      	ldrh	r3, [r4, #12]
 8001406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800140a:	81a3      	strh	r3, [r4, #12]
 800140c:	bd10      	pop	{r4, pc}
 800140e:	bf00      	nop

08001410 <__seofread>:
 8001410:	2000      	movs	r0, #0
 8001412:	4770      	bx	lr

08001414 <__swrite>:
 8001414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001418:	4616      	mov	r6, r2
 800141a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800141e:	461f      	mov	r7, r3
 8001420:	05d3      	lsls	r3, r2, #23
 8001422:	460c      	mov	r4, r1
 8001424:	4605      	mov	r5, r0
 8001426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800142a:	d409      	bmi.n	8001440 <__swrite+0x2c>
 800142c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001430:	81a2      	strh	r2, [r4, #12]
 8001432:	463b      	mov	r3, r7
 8001434:	4632      	mov	r2, r6
 8001436:	4628      	mov	r0, r5
 8001438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800143c:	f000 b87e 	b.w	800153c <_write_r>
 8001440:	2200      	movs	r2, #0
 8001442:	2302      	movs	r3, #2
 8001444:	f000 fb86 	bl	8001b54 <_lseek_r>
 8001448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800144c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001450:	e7ec      	b.n	800142c <__swrite+0x18>
 8001452:	bf00      	nop

08001454 <__sseek>:
 8001454:	b510      	push	{r4, lr}
 8001456:	460c      	mov	r4, r1
 8001458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800145c:	f000 fb7a 	bl	8001b54 <_lseek_r>
 8001460:	89a3      	ldrh	r3, [r4, #12]
 8001462:	1c42      	adds	r2, r0, #1
 8001464:	bf0e      	itee	eq
 8001466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800146a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800146e:	6560      	strne	r0, [r4, #84]	; 0x54
 8001470:	81a3      	strh	r3, [r4, #12]
 8001472:	bd10      	pop	{r4, pc}

08001474 <__sclose>:
 8001474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001478:	f000 b8fe 	b.w	8001678 <_close_r>

0800147c <__swbuf_r>:
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	460d      	mov	r5, r1
 8001480:	4614      	mov	r4, r2
 8001482:	4606      	mov	r6, r0
 8001484:	b108      	cbz	r0, 800148a <__swbuf_r+0xe>
 8001486:	6983      	ldr	r3, [r0, #24]
 8001488:	b343      	cbz	r3, 80014dc <__swbuf_r+0x60>
 800148a:	4b25      	ldr	r3, [pc, #148]	; (8001520 <__swbuf_r+0xa4>)
 800148c:	429c      	cmp	r4, r3
 800148e:	d02a      	beq.n	80014e6 <__swbuf_r+0x6a>
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <__swbuf_r+0xa8>)
 8001492:	429c      	cmp	r4, r3
 8001494:	d029      	beq.n	80014ea <__swbuf_r+0x6e>
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <__swbuf_r+0xac>)
 8001498:	429c      	cmp	r4, r3
 800149a:	bf08      	it	eq
 800149c:	68f4      	ldreq	r4, [r6, #12]
 800149e:	89a3      	ldrh	r3, [r4, #12]
 80014a0:	69a2      	ldr	r2, [r4, #24]
 80014a2:	60a2      	str	r2, [r4, #8]
 80014a4:	071a      	lsls	r2, r3, #28
 80014a6:	d522      	bpl.n	80014ee <__swbuf_r+0x72>
 80014a8:	6923      	ldr	r3, [r4, #16]
 80014aa:	b303      	cbz	r3, 80014ee <__swbuf_r+0x72>
 80014ac:	6822      	ldr	r2, [r4, #0]
 80014ae:	6961      	ldr	r1, [r4, #20]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b2ed      	uxtb	r5, r5
 80014b4:	4299      	cmp	r1, r3
 80014b6:	462f      	mov	r7, r5
 80014b8:	dd29      	ble.n	800150e <__swbuf_r+0x92>
 80014ba:	3301      	adds	r3, #1
 80014bc:	68a1      	ldr	r1, [r4, #8]
 80014be:	1c50      	adds	r0, r2, #1
 80014c0:	3901      	subs	r1, #1
 80014c2:	60a1      	str	r1, [r4, #8]
 80014c4:	6020      	str	r0, [r4, #0]
 80014c6:	7015      	strb	r5, [r2, #0]
 80014c8:	6962      	ldr	r2, [r4, #20]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d016      	beq.n	80014fc <__swbuf_r+0x80>
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	07db      	lsls	r3, r3, #31
 80014d2:	d501      	bpl.n	80014d8 <__swbuf_r+0x5c>
 80014d4:	2d0a      	cmp	r5, #10
 80014d6:	d011      	beq.n	80014fc <__swbuf_r+0x80>
 80014d8:	4638      	mov	r0, r7
 80014da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014dc:	f7ff fa84 	bl	80009e8 <__sinit>
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <__swbuf_r+0xa4>)
 80014e2:	429c      	cmp	r4, r3
 80014e4:	d1d4      	bne.n	8001490 <__swbuf_r+0x14>
 80014e6:	6874      	ldr	r4, [r6, #4]
 80014e8:	e7d9      	b.n	800149e <__swbuf_r+0x22>
 80014ea:	68b4      	ldr	r4, [r6, #8]
 80014ec:	e7d7      	b.n	800149e <__swbuf_r+0x22>
 80014ee:	4621      	mov	r1, r4
 80014f0:	4630      	mov	r0, r6
 80014f2:	f000 f839 	bl	8001568 <__swsetup_r>
 80014f6:	b938      	cbnz	r0, 8001508 <__swbuf_r+0x8c>
 80014f8:	6923      	ldr	r3, [r4, #16]
 80014fa:	e7d7      	b.n	80014ac <__swbuf_r+0x30>
 80014fc:	4621      	mov	r1, r4
 80014fe:	4630      	mov	r0, r6
 8001500:	f000 f962 	bl	80017c8 <_fflush_r>
 8001504:	2800      	cmp	r0, #0
 8001506:	d0e7      	beq.n	80014d8 <__swbuf_r+0x5c>
 8001508:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800150c:	e7e4      	b.n	80014d8 <__swbuf_r+0x5c>
 800150e:	4621      	mov	r1, r4
 8001510:	4630      	mov	r0, r6
 8001512:	f000 f959 	bl	80017c8 <_fflush_r>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1f6      	bne.n	8001508 <__swbuf_r+0x8c>
 800151a:	6822      	ldr	r2, [r4, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	e7cd      	b.n	80014bc <__swbuf_r+0x40>
 8001520:	08019cc4 	.word	0x08019cc4
 8001524:	08019ca4 	.word	0x08019ca4
 8001528:	08019c84 	.word	0x08019c84

0800152c <__swbuf>:
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <__swbuf+0xc>)
 800152e:	460a      	mov	r2, r1
 8001530:	4601      	mov	r1, r0
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	f7ff bfa2 	b.w	800147c <__swbuf_r>
 8001538:	24000000 	.word	0x24000000

0800153c <_write_r>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	460d      	mov	r5, r1
 8001540:	4c08      	ldr	r4, [pc, #32]	; (8001564 <_write_r+0x28>)
 8001542:	4611      	mov	r1, r2
 8001544:	4606      	mov	r6, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4628      	mov	r0, r5
 800154a:	2300      	movs	r3, #0
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	f002 f980 	bl	8003852 <_write>
 8001552:	1c43      	adds	r3, r0, #1
 8001554:	d000      	beq.n	8001558 <_write_r+0x1c>
 8001556:	bd70      	pop	{r4, r5, r6, pc}
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0fb      	beq.n	8001556 <_write_r+0x1a>
 800155e:	6033      	str	r3, [r6, #0]
 8001560:	bd70      	pop	{r4, r5, r6, pc}
 8001562:	bf00      	nop
 8001564:	2400931c 	.word	0x2400931c

08001568 <__swsetup_r>:
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <__swsetup_r+0xf0>)
 800156a:	b570      	push	{r4, r5, r6, lr}
 800156c:	681d      	ldr	r5, [r3, #0]
 800156e:	4606      	mov	r6, r0
 8001570:	460c      	mov	r4, r1
 8001572:	b10d      	cbz	r5, 8001578 <__swsetup_r+0x10>
 8001574:	69ab      	ldr	r3, [r5, #24]
 8001576:	b1db      	cbz	r3, 80015b0 <__swsetup_r+0x48>
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <__swsetup_r+0xf4>)
 800157a:	429c      	cmp	r4, r3
 800157c:	d01e      	beq.n	80015bc <__swsetup_r+0x54>
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <__swsetup_r+0xf8>)
 8001580:	429c      	cmp	r4, r3
 8001582:	d04a      	beq.n	800161a <__swsetup_r+0xb2>
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <__swsetup_r+0xfc>)
 8001586:	429c      	cmp	r4, r3
 8001588:	bf08      	it	eq
 800158a:	68ec      	ldreq	r4, [r5, #12]
 800158c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001590:	b293      	uxth	r3, r2
 8001592:	0719      	lsls	r1, r3, #28
 8001594:	d518      	bpl.n	80015c8 <__swsetup_r+0x60>
 8001596:	6920      	ldr	r0, [r4, #16]
 8001598:	b308      	cbz	r0, 80015de <__swsetup_r+0x76>
 800159a:	f013 0201 	ands.w	r2, r3, #1
 800159e:	d02c      	beq.n	80015fa <__swsetup_r+0x92>
 80015a0:	6963      	ldr	r3, [r4, #20]
 80015a2:	2200      	movs	r2, #0
 80015a4:	425b      	negs	r3, r3
 80015a6:	61a3      	str	r3, [r4, #24]
 80015a8:	60a2      	str	r2, [r4, #8]
 80015aa:	b360      	cbz	r0, 8001606 <__swsetup_r+0x9e>
 80015ac:	2000      	movs	r0, #0
 80015ae:	bd70      	pop	{r4, r5, r6, pc}
 80015b0:	4628      	mov	r0, r5
 80015b2:	f7ff fa19 	bl	80009e8 <__sinit>
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <__swsetup_r+0xf4>)
 80015b8:	429c      	cmp	r4, r3
 80015ba:	d1e0      	bne.n	800157e <__swsetup_r+0x16>
 80015bc:	686c      	ldr	r4, [r5, #4]
 80015be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015c2:	b293      	uxth	r3, r2
 80015c4:	0719      	lsls	r1, r3, #28
 80015c6:	d4e6      	bmi.n	8001596 <__swsetup_r+0x2e>
 80015c8:	06dd      	lsls	r5, r3, #27
 80015ca:	d53c      	bpl.n	8001646 <__swsetup_r+0xde>
 80015cc:	0758      	lsls	r0, r3, #29
 80015ce:	d426      	bmi.n	800161e <__swsetup_r+0xb6>
 80015d0:	6920      	ldr	r0, [r4, #16]
 80015d2:	f042 0308 	orr.w	r3, r2, #8
 80015d6:	81a3      	strh	r3, [r4, #12]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	2800      	cmp	r0, #0
 80015dc:	d1dd      	bne.n	800159a <__swsetup_r+0x32>
 80015de:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80015e2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80015e6:	d0d8      	beq.n	800159a <__swsetup_r+0x32>
 80015e8:	4630      	mov	r0, r6
 80015ea:	4621      	mov	r1, r4
 80015ec:	f000 faf6 	bl	8001bdc <__smakebuf_r>
 80015f0:	89a3      	ldrh	r3, [r4, #12]
 80015f2:	6920      	ldr	r0, [r4, #16]
 80015f4:	f013 0201 	ands.w	r2, r3, #1
 80015f8:	d1d2      	bne.n	80015a0 <__swsetup_r+0x38>
 80015fa:	0799      	lsls	r1, r3, #30
 80015fc:	bf58      	it	pl
 80015fe:	6962      	ldrpl	r2, [r4, #20]
 8001600:	60a2      	str	r2, [r4, #8]
 8001602:	2800      	cmp	r0, #0
 8001604:	d1d2      	bne.n	80015ac <__swsetup_r+0x44>
 8001606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800160a:	061a      	lsls	r2, r3, #24
 800160c:	d5cf      	bpl.n	80015ae <__swsetup_r+0x46>
 800160e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001612:	81a3      	strh	r3, [r4, #12]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001618:	bd70      	pop	{r4, r5, r6, pc}
 800161a:	68ac      	ldr	r4, [r5, #8]
 800161c:	e7b6      	b.n	800158c <__swsetup_r+0x24>
 800161e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001620:	b151      	cbz	r1, 8001638 <__swsetup_r+0xd0>
 8001622:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001626:	4299      	cmp	r1, r3
 8001628:	d004      	beq.n	8001634 <__swsetup_r+0xcc>
 800162a:	4630      	mov	r0, r6
 800162c:	f7ff fa7e 	bl	8000b2c <_free_r>
 8001630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001634:	2300      	movs	r3, #0
 8001636:	6363      	str	r3, [r4, #52]	; 0x34
 8001638:	2300      	movs	r3, #0
 800163a:	6920      	ldr	r0, [r4, #16]
 800163c:	6063      	str	r3, [r4, #4]
 800163e:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8001642:	6020      	str	r0, [r4, #0]
 8001644:	e7c5      	b.n	80015d2 <__swsetup_r+0x6a>
 8001646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164a:	2309      	movs	r3, #9
 800164c:	6033      	str	r3, [r6, #0]
 800164e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001652:	81a2      	strh	r2, [r4, #12]
 8001654:	bd70      	pop	{r4, r5, r6, pc}
 8001656:	bf00      	nop
 8001658:	24000000 	.word	0x24000000
 800165c:	08019cc4 	.word	0x08019cc4
 8001660:	08019ca4 	.word	0x08019ca4
 8001664:	08019c84 	.word	0x08019c84

08001668 <abort>:
 8001668:	b508      	push	{r3, lr}
 800166a:	2006      	movs	r0, #6
 800166c:	f000 fc16 	bl	8001e9c <raise>
 8001670:	2001      	movs	r0, #1
 8001672:	f002 f8c7 	bl	8003804 <_exit>
 8001676:	bf00      	nop

08001678 <_close_r>:
 8001678:	b538      	push	{r3, r4, r5, lr}
 800167a:	4c07      	ldr	r4, [pc, #28]	; (8001698 <_close_r+0x20>)
 800167c:	2300      	movs	r3, #0
 800167e:	4605      	mov	r5, r0
 8001680:	4608      	mov	r0, r1
 8001682:	6023      	str	r3, [r4, #0]
 8001684:	f002 f901 	bl	800388a <_close>
 8001688:	1c43      	adds	r3, r0, #1
 800168a:	d000      	beq.n	800168e <_close_r+0x16>
 800168c:	bd38      	pop	{r3, r4, r5, pc}
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0fb      	beq.n	800168c <_close_r+0x14>
 8001694:	602b      	str	r3, [r5, #0]
 8001696:	bd38      	pop	{r3, r4, r5, pc}
 8001698:	2400931c 	.word	0x2400931c

0800169c <__sflush_r>:
 800169c:	898b      	ldrh	r3, [r1, #12]
 800169e:	071a      	lsls	r2, r3, #28
 80016a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016a4:	460c      	mov	r4, r1
 80016a6:	4680      	mov	r8, r0
 80016a8:	d441      	bmi.n	800172e <__sflush_r+0x92>
 80016aa:	684a      	ldr	r2, [r1, #4]
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	dd59      	ble.n	8001764 <__sflush_r+0xc8>
 80016b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016b2:	2e00      	cmp	r6, #0
 80016b4:	d053      	beq.n	800175e <__sflush_r+0xc2>
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8d8 5000 	ldr.w	r5, [r8]
 80016bc:	6a21      	ldr	r1, [r4, #32]
 80016be:	f8c8 2000 	str.w	r2, [r8]
 80016c2:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 80016c6:	d151      	bne.n	800176c <__sflush_r+0xd0>
 80016c8:	2301      	movs	r3, #1
 80016ca:	4640      	mov	r0, r8
 80016cc:	47b0      	blx	r6
 80016ce:	1c43      	adds	r3, r0, #1
 80016d0:	d05f      	beq.n	8001792 <__sflush_r+0xf6>
 80016d2:	89a3      	ldrh	r3, [r4, #12]
 80016d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016d6:	6a21      	ldr	r1, [r4, #32]
 80016d8:	075f      	lsls	r7, r3, #29
 80016da:	d505      	bpl.n	80016e8 <__sflush_r+0x4c>
 80016dc:	6862      	ldr	r2, [r4, #4]
 80016de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016e0:	1a80      	subs	r0, r0, r2
 80016e2:	b10b      	cbz	r3, 80016e8 <__sflush_r+0x4c>
 80016e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016e6:	1ac0      	subs	r0, r0, r3
 80016e8:	4602      	mov	r2, r0
 80016ea:	2300      	movs	r3, #0
 80016ec:	4640      	mov	r0, r8
 80016ee:	47b0      	blx	r6
 80016f0:	1c46      	adds	r6, r0, #1
 80016f2:	d145      	bne.n	8001780 <__sflush_r+0xe4>
 80016f4:	f8d8 3000 	ldr.w	r3, [r8]
 80016f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d055      	beq.n	80017ac <__sflush_r+0x110>
 8001700:	2b1d      	cmp	r3, #29
 8001702:	d001      	beq.n	8001708 <__sflush_r+0x6c>
 8001704:	2b16      	cmp	r3, #22
 8001706:	d15a      	bne.n	80017be <__sflush_r+0x122>
 8001708:	6923      	ldr	r3, [r4, #16]
 800170a:	2200      	movs	r2, #0
 800170c:	e9c4 3200 	strd	r3, r2, [r4]
 8001710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001712:	f8c8 5000 	str.w	r5, [r8]
 8001716:	b311      	cbz	r1, 800175e <__sflush_r+0xc2>
 8001718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800171c:	4299      	cmp	r1, r3
 800171e:	d002      	beq.n	8001726 <__sflush_r+0x8a>
 8001720:	4640      	mov	r0, r8
 8001722:	f7ff fa03 	bl	8000b2c <_free_r>
 8001726:	2000      	movs	r0, #0
 8001728:	6360      	str	r0, [r4, #52]	; 0x34
 800172a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800172e:	690e      	ldr	r6, [r1, #16]
 8001730:	b1ae      	cbz	r6, 800175e <__sflush_r+0xc2>
 8001732:	680d      	ldr	r5, [r1, #0]
 8001734:	600e      	str	r6, [r1, #0]
 8001736:	0799      	lsls	r1, r3, #30
 8001738:	bf0c      	ite	eq
 800173a:	6963      	ldreq	r3, [r4, #20]
 800173c:	2300      	movne	r3, #0
 800173e:	1bad      	subs	r5, r5, r6
 8001740:	60a3      	str	r3, [r4, #8]
 8001742:	e00a      	b.n	800175a <__sflush_r+0xbe>
 8001744:	462b      	mov	r3, r5
 8001746:	4632      	mov	r2, r6
 8001748:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800174a:	6a21      	ldr	r1, [r4, #32]
 800174c:	4640      	mov	r0, r8
 800174e:	47b8      	blx	r7
 8001750:	2800      	cmp	r0, #0
 8001752:	eba5 0500 	sub.w	r5, r5, r0
 8001756:	4406      	add	r6, r0
 8001758:	dd0a      	ble.n	8001770 <__sflush_r+0xd4>
 800175a:	2d00      	cmp	r5, #0
 800175c:	dcf2      	bgt.n	8001744 <__sflush_r+0xa8>
 800175e:	2000      	movs	r0, #0
 8001760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001764:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001766:	2a00      	cmp	r2, #0
 8001768:	dca2      	bgt.n	80016b0 <__sflush_r+0x14>
 800176a:	e7f8      	b.n	800175e <__sflush_r+0xc2>
 800176c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800176e:	e7b3      	b.n	80016d8 <__sflush_r+0x3c>
 8001770:	89a3      	ldrh	r3, [r4, #12]
 8001772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001776:	81a3      	strh	r3, [r4, #12]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800177c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001780:	6922      	ldr	r2, [r4, #16]
 8001782:	89a3      	ldrh	r3, [r4, #12]
 8001784:	6022      	str	r2, [r4, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	6062      	str	r2, [r4, #4]
 800178a:	04da      	lsls	r2, r3, #19
 800178c:	d5c0      	bpl.n	8001710 <__sflush_r+0x74>
 800178e:	6560      	str	r0, [r4, #84]	; 0x54
 8001790:	e7be      	b.n	8001710 <__sflush_r+0x74>
 8001792:	f8d8 3000 	ldr.w	r3, [r8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d09b      	beq.n	80016d2 <__sflush_r+0x36>
 800179a:	2b1d      	cmp	r3, #29
 800179c:	d00c      	beq.n	80017b8 <__sflush_r+0x11c>
 800179e:	2b16      	cmp	r3, #22
 80017a0:	d00a      	beq.n	80017b8 <__sflush_r+0x11c>
 80017a2:	89a3      	ldrh	r3, [r4, #12]
 80017a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a8:	81a3      	strh	r3, [r4, #12]
 80017aa:	e7d9      	b.n	8001760 <__sflush_r+0xc4>
 80017ac:	6921      	ldr	r1, [r4, #16]
 80017ae:	e9c4 1300 	strd	r1, r3, [r4]
 80017b2:	04d3      	lsls	r3, r2, #19
 80017b4:	d5ac      	bpl.n	8001710 <__sflush_r+0x74>
 80017b6:	e7ea      	b.n	800178e <__sflush_r+0xf2>
 80017b8:	f8c8 5000 	str.w	r5, [r8]
 80017bc:	e7cf      	b.n	800175e <__sflush_r+0xc2>
 80017be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c2:	81a2      	strh	r2, [r4, #12]
 80017c4:	e7cc      	b.n	8001760 <__sflush_r+0xc4>
 80017c6:	bf00      	nop

080017c8 <_fflush_r>:
 80017c8:	690b      	ldr	r3, [r1, #16]
 80017ca:	b323      	cbz	r3, 8001816 <_fflush_r+0x4e>
 80017cc:	b510      	push	{r4, lr}
 80017ce:	4604      	mov	r4, r0
 80017d0:	b082      	sub	sp, #8
 80017d2:	b108      	cbz	r0, 80017d8 <_fflush_r+0x10>
 80017d4:	6983      	ldr	r3, [r0, #24]
 80017d6:	b1bb      	cbz	r3, 8001808 <_fflush_r+0x40>
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <_fflush_r+0x54>)
 80017da:	4299      	cmp	r1, r3
 80017dc:	d012      	beq.n	8001804 <_fflush_r+0x3c>
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_fflush_r+0x58>)
 80017e0:	4299      	cmp	r1, r3
 80017e2:	d016      	beq.n	8001812 <_fflush_r+0x4a>
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <_fflush_r+0x5c>)
 80017e6:	4299      	cmp	r1, r3
 80017e8:	bf08      	it	eq
 80017ea:	68e1      	ldreq	r1, [r4, #12]
 80017ec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80017f0:	b12b      	cbz	r3, 80017fe <_fflush_r+0x36>
 80017f2:	4620      	mov	r0, r4
 80017f4:	b002      	add	sp, #8
 80017f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017fa:	f7ff bf4f 	b.w	800169c <__sflush_r>
 80017fe:	2000      	movs	r0, #0
 8001800:	b002      	add	sp, #8
 8001802:	bd10      	pop	{r4, pc}
 8001804:	6861      	ldr	r1, [r4, #4]
 8001806:	e7f1      	b.n	80017ec <_fflush_r+0x24>
 8001808:	9101      	str	r1, [sp, #4]
 800180a:	f7ff f8ed 	bl	80009e8 <__sinit>
 800180e:	9901      	ldr	r1, [sp, #4]
 8001810:	e7e2      	b.n	80017d8 <_fflush_r+0x10>
 8001812:	68a1      	ldr	r1, [r4, #8]
 8001814:	e7ea      	b.n	80017ec <_fflush_r+0x24>
 8001816:	2000      	movs	r0, #0
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	08019cc4 	.word	0x08019cc4
 8001820:	08019ca4 	.word	0x08019ca4
 8001824:	08019c84 	.word	0x08019c84

08001828 <fflush>:
 8001828:	b120      	cbz	r0, 8001834 <fflush+0xc>
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <fflush+0x18>)
 800182c:	4601      	mov	r1, r0
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	f7ff bfca 	b.w	80017c8 <_fflush_r>
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <fflush+0x1c>)
 8001836:	4904      	ldr	r1, [pc, #16]	; (8001848 <fflush+0x20>)
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f7ff b93d 	b.w	8000ab8 <_fwalk_reent>
 800183e:	bf00      	nop
 8001840:	24000000 	.word	0x24000000
 8001844:	08019c80 	.word	0x08019c80
 8001848:	080017c9 	.word	0x080017c9

0800184c <__sfvwrite_r>:
 800184c:	6893      	ldr	r3, [r2, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8102 	beq.w	8001a58 <__sfvwrite_r+0x20c>
 8001854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001858:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800185c:	b29b      	uxth	r3, r3
 800185e:	460c      	mov	r4, r1
 8001860:	0719      	lsls	r1, r3, #28
 8001862:	b083      	sub	sp, #12
 8001864:	4682      	mov	sl, r0
 8001866:	4690      	mov	r8, r2
 8001868:	d535      	bpl.n	80018d6 <__sfvwrite_r+0x8a>
 800186a:	6922      	ldr	r2, [r4, #16]
 800186c:	b39a      	cbz	r2, 80018d6 <__sfvwrite_r+0x8a>
 800186e:	f013 0202 	ands.w	r2, r3, #2
 8001872:	f8d8 6000 	ldr.w	r6, [r8]
 8001876:	d03d      	beq.n	80018f4 <__sfvwrite_r+0xa8>
 8001878:	2700      	movs	r7, #0
 800187a:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 800187e:	f8d4 c020 	ldr.w	ip, [r4, #32]
 8001882:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8001b50 <__sfvwrite_r+0x304>
 8001886:	463d      	mov	r5, r7
 8001888:	454d      	cmp	r5, r9
 800188a:	462b      	mov	r3, r5
 800188c:	463a      	mov	r2, r7
 800188e:	bf28      	it	cs
 8001890:	464b      	movcs	r3, r9
 8001892:	4661      	mov	r1, ip
 8001894:	4650      	mov	r0, sl
 8001896:	b1d5      	cbz	r5, 80018ce <__sfvwrite_r+0x82>
 8001898:	47d8      	blx	fp
 800189a:	2800      	cmp	r0, #0
 800189c:	f340 80d2 	ble.w	8001a44 <__sfvwrite_r+0x1f8>
 80018a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80018a4:	1a1b      	subs	r3, r3, r0
 80018a6:	4407      	add	r7, r0
 80018a8:	1a2d      	subs	r5, r5, r0
 80018aa:	f8c8 3008 	str.w	r3, [r8, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80b7 	beq.w	8001a22 <__sfvwrite_r+0x1d6>
 80018b4:	f8d4 c020 	ldr.w	ip, [r4, #32]
 80018b8:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 80018bc:	454d      	cmp	r5, r9
 80018be:	462b      	mov	r3, r5
 80018c0:	463a      	mov	r2, r7
 80018c2:	bf28      	it	cs
 80018c4:	464b      	movcs	r3, r9
 80018c6:	4661      	mov	r1, ip
 80018c8:	4650      	mov	r0, sl
 80018ca:	2d00      	cmp	r5, #0
 80018cc:	d1e4      	bne.n	8001898 <__sfvwrite_r+0x4c>
 80018ce:	e9d6 7500 	ldrd	r7, r5, [r6]
 80018d2:	3608      	adds	r6, #8
 80018d4:	e7d8      	b.n	8001888 <__sfvwrite_r+0x3c>
 80018d6:	4621      	mov	r1, r4
 80018d8:	4650      	mov	r0, sl
 80018da:	f7ff fe45 	bl	8001568 <__swsetup_r>
 80018de:	2800      	cmp	r0, #0
 80018e0:	f040 8130 	bne.w	8001b44 <__sfvwrite_r+0x2f8>
 80018e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018e8:	f8d8 6000 	ldr.w	r6, [r8]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f013 0202 	ands.w	r2, r3, #2
 80018f2:	d1c1      	bne.n	8001878 <__sfvwrite_r+0x2c>
 80018f4:	f013 0901 	ands.w	r9, r3, #1
 80018f8:	f040 80b0 	bne.w	8001a5c <__sfvwrite_r+0x210>
 80018fc:	68a7      	ldr	r7, [r4, #8]
 80018fe:	6820      	ldr	r0, [r4, #0]
 8001900:	464d      	mov	r5, r9
 8001902:	2d00      	cmp	r5, #0
 8001904:	d054      	beq.n	80019b0 <__sfvwrite_r+0x164>
 8001906:	059a      	lsls	r2, r3, #22
 8001908:	f140 80bc 	bpl.w	8001a84 <__sfvwrite_r+0x238>
 800190c:	42af      	cmp	r7, r5
 800190e:	46bb      	mov	fp, r7
 8001910:	f200 80e7 	bhi.w	8001ae2 <__sfvwrite_r+0x296>
 8001914:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8001918:	d02f      	beq.n	800197a <__sfvwrite_r+0x12e>
 800191a:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 800191e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8001922:	eba0 0b01 	sub.w	fp, r0, r1
 8001926:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800192a:	1c68      	adds	r0, r5, #1
 800192c:	107f      	asrs	r7, r7, #1
 800192e:	4458      	add	r0, fp
 8001930:	42b8      	cmp	r0, r7
 8001932:	463a      	mov	r2, r7
 8001934:	bf84      	itt	hi
 8001936:	4607      	movhi	r7, r0
 8001938:	463a      	movhi	r2, r7
 800193a:	055b      	lsls	r3, r3, #21
 800193c:	f140 80e9 	bpl.w	8001b12 <__sfvwrite_r+0x2c6>
 8001940:	4611      	mov	r1, r2
 8001942:	4650      	mov	r0, sl
 8001944:	f7ff f948 	bl	8000bd8 <_malloc_r>
 8001948:	2800      	cmp	r0, #0
 800194a:	f000 80f5 	beq.w	8001b38 <__sfvwrite_r+0x2ec>
 800194e:	465a      	mov	r2, fp
 8001950:	6921      	ldr	r1, [r4, #16]
 8001952:	9001      	str	r0, [sp, #4]
 8001954:	f7fe fd3c 	bl	80003d0 <memcpy>
 8001958:	89a2      	ldrh	r2, [r4, #12]
 800195a:	9b01      	ldr	r3, [sp, #4]
 800195c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8001960:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001964:	81a2      	strh	r2, [r4, #12]
 8001966:	eba7 020b 	sub.w	r2, r7, fp
 800196a:	eb03 000b 	add.w	r0, r3, fp
 800196e:	6167      	str	r7, [r4, #20]
 8001970:	6123      	str	r3, [r4, #16]
 8001972:	6020      	str	r0, [r4, #0]
 8001974:	60a2      	str	r2, [r4, #8]
 8001976:	462f      	mov	r7, r5
 8001978:	46ab      	mov	fp, r5
 800197a:	465a      	mov	r2, fp
 800197c:	4649      	mov	r1, r9
 800197e:	f7fe fdc1 	bl	8000504 <memmove>
 8001982:	68a2      	ldr	r2, [r4, #8]
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	1bd2      	subs	r2, r2, r7
 8001988:	445b      	add	r3, fp
 800198a:	462f      	mov	r7, r5
 800198c:	60a2      	str	r2, [r4, #8]
 800198e:	6023      	str	r3, [r4, #0]
 8001990:	2500      	movs	r5, #0
 8001992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001996:	1bdb      	subs	r3, r3, r7
 8001998:	44b9      	add	r9, r7
 800199a:	f8c8 3008 	str.w	r3, [r8, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d03f      	beq.n	8001a22 <__sfvwrite_r+0x1d6>
 80019a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019a6:	68a7      	ldr	r7, [r4, #8]
 80019a8:	6820      	ldr	r0, [r4, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2d00      	cmp	r5, #0
 80019ae:	d1aa      	bne.n	8001906 <__sfvwrite_r+0xba>
 80019b0:	e9d6 9500 	ldrd	r9, r5, [r6]
 80019b4:	3608      	adds	r6, #8
 80019b6:	e7a4      	b.n	8001902 <__sfvwrite_r+0xb6>
 80019b8:	f10b 0308 	add.w	r3, fp, #8
 80019bc:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 80019c0:	469b      	mov	fp, r3
 80019c2:	3308      	adds	r3, #8
 80019c4:	2f00      	cmp	r7, #0
 80019c6:	d0f9      	beq.n	80019bc <__sfvwrite_r+0x170>
 80019c8:	463a      	mov	r2, r7
 80019ca:	210a      	movs	r1, #10
 80019cc:	4630      	mov	r0, r6
 80019ce:	f000 f94f 	bl	8001c70 <memchr>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d053      	beq.n	8001a7e <__sfvwrite_r+0x232>
 80019d6:	3001      	adds	r0, #1
 80019d8:	eba0 0906 	sub.w	r9, r0, r6
 80019dc:	464b      	mov	r3, r9
 80019de:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80019e2:	6820      	ldr	r0, [r4, #0]
 80019e4:	42bb      	cmp	r3, r7
 80019e6:	bf28      	it	cs
 80019e8:	463b      	movcs	r3, r7
 80019ea:	4288      	cmp	r0, r1
 80019ec:	d903      	bls.n	80019f6 <__sfvwrite_r+0x1aa>
 80019ee:	68a5      	ldr	r5, [r4, #8]
 80019f0:	4415      	add	r5, r2
 80019f2:	42ab      	cmp	r3, r5
 80019f4:	dc19      	bgt.n	8001a2a <__sfvwrite_r+0x1de>
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dc7d      	bgt.n	8001af6 <__sfvwrite_r+0x2aa>
 80019fa:	4613      	mov	r3, r2
 80019fc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80019fe:	6a21      	ldr	r1, [r4, #32]
 8001a00:	4632      	mov	r2, r6
 8001a02:	4650      	mov	r0, sl
 8001a04:	47a8      	blx	r5
 8001a06:	1e05      	subs	r5, r0, #0
 8001a08:	dd1c      	ble.n	8001a44 <__sfvwrite_r+0x1f8>
 8001a0a:	ebb9 0905 	subs.w	r9, r9, r5
 8001a0e:	d06b      	beq.n	8001ae8 <__sfvwrite_r+0x29c>
 8001a10:	2001      	movs	r0, #1
 8001a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001a16:	1b5b      	subs	r3, r3, r5
 8001a18:	442e      	add	r6, r5
 8001a1a:	1b7f      	subs	r7, r7, r5
 8001a1c:	f8c8 3008 	str.w	r3, [r8, #8]
 8001a20:	bb13      	cbnz	r3, 8001a68 <__sfvwrite_r+0x21c>
 8001a22:	2000      	movs	r0, #0
 8001a24:	b003      	add	sp, #12
 8001a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a2a:	4631      	mov	r1, r6
 8001a2c:	462a      	mov	r2, r5
 8001a2e:	f7fe fd69 	bl	8000504 <memmove>
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	442b      	add	r3, r5
 8001a36:	6023      	str	r3, [r4, #0]
 8001a38:	4621      	mov	r1, r4
 8001a3a:	4650      	mov	r0, sl
 8001a3c:	f7ff fec4 	bl	80017c8 <_fflush_r>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d0e2      	beq.n	8001a0a <__sfvwrite_r+0x1be>
 8001a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a50:	81a3      	strh	r3, [r4, #12]
 8001a52:	b003      	add	sp, #12
 8001a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr
 8001a5c:	4633      	mov	r3, r6
 8001a5e:	4691      	mov	r9, r2
 8001a60:	4610      	mov	r0, r2
 8001a62:	4617      	mov	r7, r2
 8001a64:	464e      	mov	r6, r9
 8001a66:	469b      	mov	fp, r3
 8001a68:	2f00      	cmp	r7, #0
 8001a6a:	d0a5      	beq.n	80019b8 <__sfvwrite_r+0x16c>
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d1b5      	bne.n	80019dc <__sfvwrite_r+0x190>
 8001a70:	463a      	mov	r2, r7
 8001a72:	210a      	movs	r1, #10
 8001a74:	4630      	mov	r0, r6
 8001a76:	f000 f8fb 	bl	8001c70 <memchr>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1ab      	bne.n	80019d6 <__sfvwrite_r+0x18a>
 8001a7e:	1c7b      	adds	r3, r7, #1
 8001a80:	4699      	mov	r9, r3
 8001a82:	e7ac      	b.n	80019de <__sfvwrite_r+0x192>
 8001a84:	6923      	ldr	r3, [r4, #16]
 8001a86:	4283      	cmp	r3, r0
 8001a88:	d315      	bcc.n	8001ab6 <__sfvwrite_r+0x26a>
 8001a8a:	6961      	ldr	r1, [r4, #20]
 8001a8c:	42a9      	cmp	r1, r5
 8001a8e:	d812      	bhi.n	8001ab6 <__sfvwrite_r+0x26a>
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <__sfvwrite_r+0x300>)
 8001a92:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001a94:	429d      	cmp	r5, r3
 8001a96:	bf94      	ite	ls
 8001a98:	462b      	movls	r3, r5
 8001a9a:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 8001a9e:	464a      	mov	r2, r9
 8001aa0:	fb93 f3f1 	sdiv	r3, r3, r1
 8001aa4:	4650      	mov	r0, sl
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	6a21      	ldr	r1, [r4, #32]
 8001aac:	47b8      	blx	r7
 8001aae:	1e07      	subs	r7, r0, #0
 8001ab0:	ddc8      	ble.n	8001a44 <__sfvwrite_r+0x1f8>
 8001ab2:	1bed      	subs	r5, r5, r7
 8001ab4:	e76d      	b.n	8001992 <__sfvwrite_r+0x146>
 8001ab6:	42af      	cmp	r7, r5
 8001ab8:	bf28      	it	cs
 8001aba:	462f      	movcs	r7, r5
 8001abc:	463a      	mov	r2, r7
 8001abe:	4649      	mov	r1, r9
 8001ac0:	f7fe fd20 	bl	8000504 <memmove>
 8001ac4:	68a3      	ldr	r3, [r4, #8]
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	1bdb      	subs	r3, r3, r7
 8001aca:	443a      	add	r2, r7
 8001acc:	60a3      	str	r3, [r4, #8]
 8001ace:	6022      	str	r2, [r4, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <__sfvwrite_r+0x266>
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	4650      	mov	r0, sl
 8001ad8:	f7ff fe76 	bl	80017c8 <_fflush_r>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d0e8      	beq.n	8001ab2 <__sfvwrite_r+0x266>
 8001ae0:	e7b0      	b.n	8001a44 <__sfvwrite_r+0x1f8>
 8001ae2:	462f      	mov	r7, r5
 8001ae4:	46ab      	mov	fp, r5
 8001ae6:	e748      	b.n	800197a <__sfvwrite_r+0x12e>
 8001ae8:	4621      	mov	r1, r4
 8001aea:	4650      	mov	r0, sl
 8001aec:	f7ff fe6c 	bl	80017c8 <_fflush_r>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d08e      	beq.n	8001a12 <__sfvwrite_r+0x1c6>
 8001af4:	e7a6      	b.n	8001a44 <__sfvwrite_r+0x1f8>
 8001af6:	461a      	mov	r2, r3
 8001af8:	4631      	mov	r1, r6
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	f7fe fd02 	bl	8000504 <memmove>
 8001b00:	9b01      	ldr	r3, [sp, #4]
 8001b02:	68a1      	ldr	r1, [r4, #8]
 8001b04:	6822      	ldr	r2, [r4, #0]
 8001b06:	1ac9      	subs	r1, r1, r3
 8001b08:	441a      	add	r2, r3
 8001b0a:	60a1      	str	r1, [r4, #8]
 8001b0c:	6022      	str	r2, [r4, #0]
 8001b0e:	461d      	mov	r5, r3
 8001b10:	e77b      	b.n	8001a0a <__sfvwrite_r+0x1be>
 8001b12:	4650      	mov	r0, sl
 8001b14:	f000 f900 	bl	8001d18 <_realloc_r>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	f47f af23 	bne.w	8001966 <__sfvwrite_r+0x11a>
 8001b20:	6921      	ldr	r1, [r4, #16]
 8001b22:	4650      	mov	r0, sl
 8001b24:	f7ff f802 	bl	8000b2c <_free_r>
 8001b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b2c:	220c      	movs	r2, #12
 8001b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b32:	f8ca 2000 	str.w	r2, [sl]
 8001b36:	e787      	b.n	8001a48 <__sfvwrite_r+0x1fc>
 8001b38:	230c      	movs	r3, #12
 8001b3a:	f8ca 3000 	str.w	r3, [sl]
 8001b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b42:	e781      	b.n	8001a48 <__sfvwrite_r+0x1fc>
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b48:	e76c      	b.n	8001a24 <__sfvwrite_r+0x1d8>
 8001b4a:	bf00      	nop
 8001b4c:	7ffffffe 	.word	0x7ffffffe
 8001b50:	7ffffc00 	.word	0x7ffffc00

08001b54 <_lseek_r>:
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	460d      	mov	r5, r1
 8001b58:	4c08      	ldr	r4, [pc, #32]	; (8001b7c <_lseek_r+0x28>)
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4606      	mov	r6, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4628      	mov	r0, r5
 8001b62:	2300      	movs	r3, #0
 8001b64:	6023      	str	r3, [r4, #0]
 8001b66:	f001 feb7 	bl	80038d8 <_lseek>
 8001b6a:	1c43      	adds	r3, r0, #1
 8001b6c:	d000      	beq.n	8001b70 <_lseek_r+0x1c>
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0fb      	beq.n	8001b6e <_lseek_r+0x1a>
 8001b76:	6033      	str	r3, [r6, #0]
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2400931c 	.word	0x2400931c

08001b80 <__swhatbuf_r>:
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	460c      	mov	r4, r1
 8001b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b88:	2900      	cmp	r1, #0
 8001b8a:	b096      	sub	sp, #88	; 0x58
 8001b8c:	4616      	mov	r6, r2
 8001b8e:	461d      	mov	r5, r3
 8001b90:	db13      	blt.n	8001bba <__swhatbuf_r+0x3a>
 8001b92:	466a      	mov	r2, sp
 8001b94:	f000 f9ba 	bl	8001f0c <_fstat_r>
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	db0e      	blt.n	8001bba <__swhatbuf_r+0x3a>
 8001b9c:	9a01      	ldr	r2, [sp, #4]
 8001b9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ba2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8001ba6:	fab2 f282 	clz	r2, r2
 8001baa:	0952      	lsrs	r2, r2, #5
 8001bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	602a      	str	r2, [r5, #0]
 8001bb4:	6033      	str	r3, [r6, #0]
 8001bb6:	b016      	add	sp, #88	; 0x58
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
 8001bba:	89a3      	ldrh	r3, [r4, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	061b      	lsls	r3, r3, #24
 8001bc0:	602a      	str	r2, [r5, #0]
 8001bc2:	d504      	bpl.n	8001bce <__swhatbuf_r+0x4e>
 8001bc4:	2340      	movs	r3, #64	; 0x40
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	6033      	str	r3, [r6, #0]
 8001bca:	b016      	add	sp, #88	; 0x58
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
 8001bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	6033      	str	r3, [r6, #0]
 8001bd6:	b016      	add	sp, #88	; 0x58
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
 8001bda:	bf00      	nop

08001bdc <__smakebuf_r>:
 8001bdc:	898a      	ldrh	r2, [r1, #12]
 8001bde:	0792      	lsls	r2, r2, #30
 8001be0:	460b      	mov	r3, r1
 8001be2:	d506      	bpl.n	8001bf2 <__smakebuf_r+0x16>
 8001be4:	f101 0247 	add.w	r2, r1, #71	; 0x47
 8001be8:	2101      	movs	r1, #1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e9c3 2104 	strd	r2, r1, [r3, #16]
 8001bf0:	4770      	bx	lr
 8001bf2:	b570      	push	{r4, r5, r6, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	ab01      	add	r3, sp, #4
 8001bf8:	466a      	mov	r2, sp
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	4606      	mov	r6, r0
 8001bfe:	f7ff ffbf 	bl	8001b80 <__swhatbuf_r>
 8001c02:	9900      	ldr	r1, [sp, #0]
 8001c04:	4605      	mov	r5, r0
 8001c06:	4630      	mov	r0, r6
 8001c08:	f7fe ffe6 	bl	8000bd8 <_malloc_r>
 8001c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c10:	b170      	cbz	r0, 8001c30 <__smakebuf_r+0x54>
 8001c12:	4916      	ldr	r1, [pc, #88]	; (8001c6c <__smakebuf_r+0x90>)
 8001c14:	62b1      	str	r1, [r6, #40]	; 0x28
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	9900      	ldr	r1, [sp, #0]
 8001c1a:	6020      	str	r0, [r4, #0]
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c20:	81a3      	strh	r3, [r4, #12]
 8001c22:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8001c26:	b98a      	cbnz	r2, 8001c4c <__smakebuf_r+0x70>
 8001c28:	432b      	orrs	r3, r5
 8001c2a:	81a3      	strh	r3, [r4, #12]
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd70      	pop	{r4, r5, r6, pc}
 8001c30:	059a      	lsls	r2, r3, #22
 8001c32:	d4fb      	bmi.n	8001c2c <__smakebuf_r+0x50>
 8001c34:	f023 0303 	bic.w	r3, r3, #3
 8001c38:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	2101      	movs	r1, #1
 8001c42:	81a3      	strh	r3, [r4, #12]
 8001c44:	6022      	str	r2, [r4, #0]
 8001c46:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8001c4a:	e7ef      	b.n	8001c2c <__smakebuf_r+0x50>
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c52:	f000 f96f 	bl	8001f34 <_isatty_r>
 8001c56:	b910      	cbnz	r0, 8001c5e <__smakebuf_r+0x82>
 8001c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c5c:	e7e4      	b.n	8001c28 <__smakebuf_r+0x4c>
 8001c5e:	89a3      	ldrh	r3, [r4, #12]
 8001c60:	f023 0303 	bic.w	r3, r3, #3
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	e7dd      	b.n	8001c28 <__smakebuf_r+0x4c>
 8001c6c:	0800081d 	.word	0x0800081d

08001c70 <memchr>:
 8001c70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001c74:	2a10      	cmp	r2, #16
 8001c76:	db2b      	blt.n	8001cd0 <memchr+0x60>
 8001c78:	f010 0f07 	tst.w	r0, #7
 8001c7c:	d008      	beq.n	8001c90 <memchr+0x20>
 8001c7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001c82:	3a01      	subs	r2, #1
 8001c84:	428b      	cmp	r3, r1
 8001c86:	d02d      	beq.n	8001ce4 <memchr+0x74>
 8001c88:	f010 0f07 	tst.w	r0, #7
 8001c8c:	b342      	cbz	r2, 8001ce0 <memchr+0x70>
 8001c8e:	d1f6      	bne.n	8001c7e <memchr+0xe>
 8001c90:	b4f0      	push	{r4, r5, r6, r7}
 8001c92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001c96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001c9a:	f022 0407 	bic.w	r4, r2, #7
 8001c9e:	f07f 0700 	mvns.w	r7, #0
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001ca8:	3c08      	subs	r4, #8
 8001caa:	ea85 0501 	eor.w	r5, r5, r1
 8001cae:	ea86 0601 	eor.w	r6, r6, r1
 8001cb2:	fa85 f547 	uadd8	r5, r5, r7
 8001cb6:	faa3 f587 	sel	r5, r3, r7
 8001cba:	fa86 f647 	uadd8	r6, r6, r7
 8001cbe:	faa5 f687 	sel	r6, r5, r7
 8001cc2:	b98e      	cbnz	r6, 8001ce8 <memchr+0x78>
 8001cc4:	d1ee      	bne.n	8001ca4 <memchr+0x34>
 8001cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001ccc:	f002 0207 	and.w	r2, r2, #7
 8001cd0:	b132      	cbz	r2, 8001ce0 <memchr+0x70>
 8001cd2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001cd6:	3a01      	subs	r2, #1
 8001cd8:	ea83 0301 	eor.w	r3, r3, r1
 8001cdc:	b113      	cbz	r3, 8001ce4 <memchr+0x74>
 8001cde:	d1f8      	bne.n	8001cd2 <memchr+0x62>
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	4770      	bx	lr
 8001ce4:	3801      	subs	r0, #1
 8001ce6:	4770      	bx	lr
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	bf06      	itte	eq
 8001cec:	4635      	moveq	r5, r6
 8001cee:	3803      	subeq	r0, #3
 8001cf0:	3807      	subne	r0, #7
 8001cf2:	f015 0f01 	tst.w	r5, #1
 8001cf6:	d107      	bne.n	8001d08 <memchr+0x98>
 8001cf8:	3001      	adds	r0, #1
 8001cfa:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001cfe:	bf02      	ittt	eq
 8001d00:	3001      	addeq	r0, #1
 8001d02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001d06:	3001      	addeq	r0, #1
 8001d08:	bcf0      	pop	{r4, r5, r6, r7}
 8001d0a:	3801      	subs	r0, #1
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop

08001d10 <__malloc_lock>:
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop

08001d14 <__malloc_unlock>:
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop

08001d18 <_realloc_r>:
 8001d18:	b309      	cbz	r1, 8001d5e <_realloc_r+0x46>
 8001d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	b1ca      	cbz	r2, 8001d54 <_realloc_r+0x3c>
 8001d20:	4606      	mov	r6, r0
 8001d22:	460d      	mov	r5, r1
 8001d24:	f000 f918 	bl	8001f58 <_malloc_usable_size_r>
 8001d28:	42a0      	cmp	r0, r4
 8001d2a:	d302      	bcc.n	8001d32 <_realloc_r+0x1a>
 8001d2c:	462f      	mov	r7, r5
 8001d2e:	4638      	mov	r0, r7
 8001d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d32:	4621      	mov	r1, r4
 8001d34:	4630      	mov	r0, r6
 8001d36:	f7fe ff4f 	bl	8000bd8 <_malloc_r>
 8001d3a:	4607      	mov	r7, r0
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	d0f6      	beq.n	8001d2e <_realloc_r+0x16>
 8001d40:	4622      	mov	r2, r4
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7fe fb44 	bl	80003d0 <memcpy>
 8001d48:	4630      	mov	r0, r6
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7fe feee 	bl	8000b2c <_free_r>
 8001d50:	4638      	mov	r0, r7
 8001d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d54:	4627      	mov	r7, r4
 8001d56:	f7fe fee9 	bl	8000b2c <_free_r>
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d5e:	4611      	mov	r1, r2
 8001d60:	f7fe bf3a 	b.w	8000bd8 <_malloc_r>

08001d64 <_read_r>:
 8001d64:	b570      	push	{r4, r5, r6, lr}
 8001d66:	460d      	mov	r5, r1
 8001d68:	4c08      	ldr	r4, [pc, #32]	; (8001d8c <_read_r+0x28>)
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4606      	mov	r6, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4628      	mov	r0, r5
 8001d72:	2300      	movs	r3, #0
 8001d74:	6023      	str	r3, [r4, #0]
 8001d76:	f001 fd4f 	bl	8003818 <_read>
 8001d7a:	1c43      	adds	r3, r0, #1
 8001d7c:	d000      	beq.n	8001d80 <_read_r+0x1c>
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0fb      	beq.n	8001d7e <_read_r+0x1a>
 8001d86:	6033      	str	r3, [r6, #0]
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2400931c 	.word	0x2400931c

08001d90 <_init_signal_r.part.0>:
 8001d90:	b510      	push	{r4, lr}
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	4604      	mov	r4, r0
 8001d96:	f7fe ff1f 	bl	8000bd8 <_malloc_r>
 8001d9a:	6460      	str	r0, [r4, #68]	; 0x44
 8001d9c:	b140      	cbz	r0, 8001db0 <_init_signal_r.part.0+0x20>
 8001d9e:	1f03      	subs	r3, r0, #4
 8001da0:	2200      	movs	r2, #0
 8001da2:	307c      	adds	r0, #124	; 0x7c
 8001da4:	f843 2f04 	str.w	r2, [r3, #4]!
 8001da8:	4283      	cmp	r3, r0
 8001daa:	d1fb      	bne.n	8001da4 <_init_signal_r.part.0+0x14>
 8001dac:	2000      	movs	r0, #0
 8001dae:	bd10      	pop	{r4, pc}
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	bd10      	pop	{r4, pc}
 8001db6:	bf00      	nop

08001db8 <_init_signal_r>:
 8001db8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001dba:	b10b      	cbz	r3, 8001dc0 <_init_signal_r+0x8>
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	4770      	bx	lr
 8001dc0:	e7e6      	b.n	8001d90 <_init_signal_r.part.0>
 8001dc2:	bf00      	nop

08001dc4 <_signal_r>:
 8001dc4:	291f      	cmp	r1, #31
 8001dc6:	b570      	push	{r4, r5, r6, lr}
 8001dc8:	4605      	mov	r5, r0
 8001dca:	d808      	bhi.n	8001dde <_signal_r+0x1a>
 8001dcc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001dce:	4616      	mov	r6, r2
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	b14b      	cbz	r3, 8001de8 <_signal_r+0x24>
 8001dd4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001dd8:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
 8001dde:	2216      	movs	r2, #22
 8001de0:	6002      	str	r2, [r0, #0]
 8001de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
 8001de8:	f7ff ffd2 	bl	8001d90 <_init_signal_r.part.0>
 8001dec:	b908      	cbnz	r0, 8001df2 <_signal_r+0x2e>
 8001dee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001df0:	e7f0      	b.n	8001dd4 <_signal_r+0x10>
 8001df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df6:	bd70      	pop	{r4, r5, r6, pc}

08001df8 <_raise_r>:
 8001df8:	291f      	cmp	r1, #31
 8001dfa:	b538      	push	{r3, r4, r5, lr}
 8001dfc:	d821      	bhi.n	8001e42 <_raise_r+0x4a>
 8001dfe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001e00:	4605      	mov	r5, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	b16a      	cbz	r2, 8001e22 <_raise_r+0x2a>
 8001e06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001e0a:	b153      	cbz	r3, 8001e22 <_raise_r+0x2a>
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d016      	beq.n	8001e3e <_raise_r+0x46>
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	d010      	beq.n	8001e36 <_raise_r+0x3e>
 8001e14:	2500      	movs	r5, #0
 8001e16:	4620      	mov	r0, r4
 8001e18:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8001e1c:	4798      	blx	r3
 8001e1e:	4628      	mov	r0, r5
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
 8001e22:	4628      	mov	r0, r5
 8001e24:	f000 f870 	bl	8001f08 <_getpid_r>
 8001e28:	4622      	mov	r2, r4
 8001e2a:	4601      	mov	r1, r0
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e32:	f000 b855 	b.w	8001ee0 <_kill_r>
 8001e36:	2316      	movs	r3, #22
 8001e38:	6003      	str	r3, [r0, #0]
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
 8001e3e:	2000      	movs	r0, #0
 8001e40:	bd38      	pop	{r3, r4, r5, pc}
 8001e42:	2316      	movs	r3, #22
 8001e44:	6003      	str	r3, [r0, #0]
 8001e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e4a:	bd38      	pop	{r3, r4, r5, pc}

08001e4c <__sigtramp_r>:
 8001e4c:	291f      	cmp	r1, #31
 8001e4e:	d821      	bhi.n	8001e94 <__sigtramp_r+0x48>
 8001e50:	b538      	push	{r3, r4, r5, lr}
 8001e52:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e54:	4605      	mov	r5, r0
 8001e56:	460c      	mov	r4, r1
 8001e58:	b183      	cbz	r3, 8001e7c <__sigtramp_r+0x30>
 8001e5a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8001e5e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001e62:	b14a      	cbz	r2, 8001e78 <__sigtramp_r+0x2c>
 8001e64:	1c51      	adds	r1, r2, #1
 8001e66:	d010      	beq.n	8001e8a <__sigtramp_r+0x3e>
 8001e68:	2a01      	cmp	r2, #1
 8001e6a:	d00c      	beq.n	8001e86 <__sigtramp_r+0x3a>
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	4620      	mov	r0, r4
 8001e70:	601d      	str	r5, [r3, #0]
 8001e72:	4790      	blx	r2
 8001e74:	4628      	mov	r0, r5
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
 8001e78:	2001      	movs	r0, #1
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
 8001e7c:	f7ff ff88 	bl	8001d90 <_init_signal_r.part.0>
 8001e80:	b928      	cbnz	r0, 8001e8e <__sigtramp_r+0x42>
 8001e82:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001e84:	e7e9      	b.n	8001e5a <__sigtramp_r+0xe>
 8001e86:	2003      	movs	r0, #3
 8001e88:	bd38      	pop	{r3, r4, r5, pc}
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	bd38      	pop	{r3, r4, r5, pc}
 8001e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e92:	bd38      	pop	{r3, r4, r5, pc}
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <raise>:
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <raise+0xc>)
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	f7ff bfa9 	b.w	8001df8 <_raise_r>
 8001ea6:	bf00      	nop
 8001ea8:	24000000 	.word	0x24000000

08001eac <signal>:
 8001eac:	4b02      	ldr	r3, [pc, #8]	; (8001eb8 <signal+0xc>)
 8001eae:	460a      	mov	r2, r1
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	f7ff bf86 	b.w	8001dc4 <_signal_r>
 8001eb8:	24000000 	.word	0x24000000

08001ebc <_init_signal>:
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <_init_signal+0x10>)
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ec2:	b10b      	cbz	r3, 8001ec8 <_init_signal+0xc>
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	4770      	bx	lr
 8001ec8:	e762      	b.n	8001d90 <_init_signal_r.part.0>
 8001eca:	bf00      	nop
 8001ecc:	24000000 	.word	0x24000000

08001ed0 <__sigtramp>:
 8001ed0:	4b02      	ldr	r3, [pc, #8]	; (8001edc <__sigtramp+0xc>)
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	f7ff bfb9 	b.w	8001e4c <__sigtramp_r>
 8001eda:	bf00      	nop
 8001edc:	24000000 	.word	0x24000000

08001ee0 <_kill_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4c07      	ldr	r4, [pc, #28]	; (8001f04 <_kill_r+0x24>)
 8001ee6:	4605      	mov	r5, r0
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	6023      	str	r3, [r4, #0]
 8001ef0:	f001 fc76 	bl	80037e0 <_kill>
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	d000      	beq.n	8001efa <_kill_r+0x1a>
 8001ef8:	bd38      	pop	{r3, r4, r5, pc}
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0fb      	beq.n	8001ef8 <_kill_r+0x18>
 8001f00:	602b      	str	r3, [r5, #0]
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	2400931c 	.word	0x2400931c

08001f08 <_getpid_r>:
 8001f08:	f001 bc62 	b.w	80037d0 <_getpid>

08001f0c <_fstat_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4c07      	ldr	r4, [pc, #28]	; (8001f30 <_fstat_r+0x24>)
 8001f12:	4605      	mov	r5, r0
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6023      	str	r3, [r4, #0]
 8001f1c:	f001 fcc1 	bl	80038a2 <_fstat>
 8001f20:	1c43      	adds	r3, r0, #1
 8001f22:	d000      	beq.n	8001f26 <_fstat_r+0x1a>
 8001f24:	bd38      	pop	{r3, r4, r5, pc}
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0fb      	beq.n	8001f24 <_fstat_r+0x18>
 8001f2c:	602b      	str	r3, [r5, #0]
 8001f2e:	bd38      	pop	{r3, r4, r5, pc}
 8001f30:	2400931c 	.word	0x2400931c

08001f34 <_isatty_r>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	4c07      	ldr	r4, [pc, #28]	; (8001f54 <_isatty_r+0x20>)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	4605      	mov	r5, r0
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	6023      	str	r3, [r4, #0]
 8001f40:	f001 fcbf 	bl	80038c2 <_isatty>
 8001f44:	1c43      	adds	r3, r0, #1
 8001f46:	d000      	beq.n	8001f4a <_isatty_r+0x16>
 8001f48:	bd38      	pop	{r3, r4, r5, pc}
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0fb      	beq.n	8001f48 <_isatty_r+0x14>
 8001f50:	602b      	str	r3, [r5, #0]
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
 8001f54:	2400931c 	.word	0x2400931c

08001f58 <_malloc_usable_size_r>:
 8001f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f5c:	1f18      	subs	r0, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bfbc      	itt	lt
 8001f62:	580b      	ldrlt	r3, [r1, r0]
 8001f64:	18c0      	addlt	r0, r0, r3
 8001f66:	4770      	bx	lr

08001f68 <__aeabi_uldivmod>:
 8001f68:	b953      	cbnz	r3, 8001f80 <__aeabi_uldivmod+0x18>
 8001f6a:	b94a      	cbnz	r2, 8001f80 <__aeabi_uldivmod+0x18>
 8001f6c:	2900      	cmp	r1, #0
 8001f6e:	bf08      	it	eq
 8001f70:	2800      	cmpeq	r0, #0
 8001f72:	bf1c      	itt	ne
 8001f74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001f78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001f7c:	f000 b96e 	b.w	800225c <__aeabi_idiv0>
 8001f80:	f1ad 0c08 	sub.w	ip, sp, #8
 8001f84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001f88:	f000 f806 	bl	8001f98 <__udivmoddi4>
 8001f8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001f94:	b004      	add	sp, #16
 8001f96:	4770      	bx	lr

08001f98 <__udivmoddi4>:
 8001f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f9c:	9d08      	ldr	r5, [sp, #32]
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	468c      	mov	ip, r1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 8083 	bne.w	80020ae <__udivmoddi4+0x116>
 8001fa8:	428a      	cmp	r2, r1
 8001faa:	4617      	mov	r7, r2
 8001fac:	d947      	bls.n	800203e <__udivmoddi4+0xa6>
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b142      	cbz	r2, 8001fc6 <__udivmoddi4+0x2e>
 8001fb4:	f1c2 0020 	rsb	r0, r2, #32
 8001fb8:	fa24 f000 	lsr.w	r0, r4, r0
 8001fbc:	4091      	lsls	r1, r2
 8001fbe:	4097      	lsls	r7, r2
 8001fc0:	ea40 0c01 	orr.w	ip, r0, r1
 8001fc4:	4094      	lsls	r4, r2
 8001fc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001fca:	0c23      	lsrs	r3, r4, #16
 8001fcc:	fbbc f6f8 	udiv	r6, ip, r8
 8001fd0:	fa1f fe87 	uxth.w	lr, r7
 8001fd4:	fb08 c116 	mls	r1, r8, r6, ip
 8001fd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001fdc:	fb06 f10e 	mul.w	r1, r6, lr
 8001fe0:	4299      	cmp	r1, r3
 8001fe2:	d909      	bls.n	8001ff8 <__udivmoddi4+0x60>
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8001fea:	f080 8119 	bcs.w	8002220 <__udivmoddi4+0x288>
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	f240 8116 	bls.w	8002220 <__udivmoddi4+0x288>
 8001ff4:	3e02      	subs	r6, #2
 8001ff6:	443b      	add	r3, r7
 8001ff8:	1a5b      	subs	r3, r3, r1
 8001ffa:	b2a4      	uxth	r4, r4
 8001ffc:	fbb3 f0f8 	udiv	r0, r3, r8
 8002000:	fb08 3310 	mls	r3, r8, r0, r3
 8002004:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002008:	fb00 fe0e 	mul.w	lr, r0, lr
 800200c:	45a6      	cmp	lr, r4
 800200e:	d909      	bls.n	8002024 <__udivmoddi4+0x8c>
 8002010:	193c      	adds	r4, r7, r4
 8002012:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002016:	f080 8105 	bcs.w	8002224 <__udivmoddi4+0x28c>
 800201a:	45a6      	cmp	lr, r4
 800201c:	f240 8102 	bls.w	8002224 <__udivmoddi4+0x28c>
 8002020:	3802      	subs	r0, #2
 8002022:	443c      	add	r4, r7
 8002024:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002028:	eba4 040e 	sub.w	r4, r4, lr
 800202c:	2600      	movs	r6, #0
 800202e:	b11d      	cbz	r5, 8002038 <__udivmoddi4+0xa0>
 8002030:	40d4      	lsrs	r4, r2
 8002032:	2300      	movs	r3, #0
 8002034:	e9c5 4300 	strd	r4, r3, [r5]
 8002038:	4631      	mov	r1, r6
 800203a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800203e:	b902      	cbnz	r2, 8002042 <__udivmoddi4+0xaa>
 8002040:	deff      	udf	#255	; 0xff
 8002042:	fab2 f282 	clz	r2, r2
 8002046:	2a00      	cmp	r2, #0
 8002048:	d150      	bne.n	80020ec <__udivmoddi4+0x154>
 800204a:	1bcb      	subs	r3, r1, r7
 800204c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002050:	fa1f f887 	uxth.w	r8, r7
 8002054:	2601      	movs	r6, #1
 8002056:	fbb3 fcfe 	udiv	ip, r3, lr
 800205a:	0c21      	lsrs	r1, r4, #16
 800205c:	fb0e 331c 	mls	r3, lr, ip, r3
 8002060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002064:	fb08 f30c 	mul.w	r3, r8, ip
 8002068:	428b      	cmp	r3, r1
 800206a:	d907      	bls.n	800207c <__udivmoddi4+0xe4>
 800206c:	1879      	adds	r1, r7, r1
 800206e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8002072:	d202      	bcs.n	800207a <__udivmoddi4+0xe2>
 8002074:	428b      	cmp	r3, r1
 8002076:	f200 80e9 	bhi.w	800224c <__udivmoddi4+0x2b4>
 800207a:	4684      	mov	ip, r0
 800207c:	1ac9      	subs	r1, r1, r3
 800207e:	b2a3      	uxth	r3, r4
 8002080:	fbb1 f0fe 	udiv	r0, r1, lr
 8002084:	fb0e 1110 	mls	r1, lr, r0, r1
 8002088:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800208c:	fb08 f800 	mul.w	r8, r8, r0
 8002090:	45a0      	cmp	r8, r4
 8002092:	d907      	bls.n	80020a4 <__udivmoddi4+0x10c>
 8002094:	193c      	adds	r4, r7, r4
 8002096:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800209a:	d202      	bcs.n	80020a2 <__udivmoddi4+0x10a>
 800209c:	45a0      	cmp	r8, r4
 800209e:	f200 80d9 	bhi.w	8002254 <__udivmoddi4+0x2bc>
 80020a2:	4618      	mov	r0, r3
 80020a4:	eba4 0408 	sub.w	r4, r4, r8
 80020a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80020ac:	e7bf      	b.n	800202e <__udivmoddi4+0x96>
 80020ae:	428b      	cmp	r3, r1
 80020b0:	d909      	bls.n	80020c6 <__udivmoddi4+0x12e>
 80020b2:	2d00      	cmp	r5, #0
 80020b4:	f000 80b1 	beq.w	800221a <__udivmoddi4+0x282>
 80020b8:	2600      	movs	r6, #0
 80020ba:	e9c5 0100 	strd	r0, r1, [r5]
 80020be:	4630      	mov	r0, r6
 80020c0:	4631      	mov	r1, r6
 80020c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020c6:	fab3 f683 	clz	r6, r3
 80020ca:	2e00      	cmp	r6, #0
 80020cc:	d14a      	bne.n	8002164 <__udivmoddi4+0x1cc>
 80020ce:	428b      	cmp	r3, r1
 80020d0:	d302      	bcc.n	80020d8 <__udivmoddi4+0x140>
 80020d2:	4282      	cmp	r2, r0
 80020d4:	f200 80b8 	bhi.w	8002248 <__udivmoddi4+0x2b0>
 80020d8:	1a84      	subs	r4, r0, r2
 80020da:	eb61 0103 	sbc.w	r1, r1, r3
 80020de:	2001      	movs	r0, #1
 80020e0:	468c      	mov	ip, r1
 80020e2:	2d00      	cmp	r5, #0
 80020e4:	d0a8      	beq.n	8002038 <__udivmoddi4+0xa0>
 80020e6:	e9c5 4c00 	strd	r4, ip, [r5]
 80020ea:	e7a5      	b.n	8002038 <__udivmoddi4+0xa0>
 80020ec:	f1c2 0320 	rsb	r3, r2, #32
 80020f0:	fa20 f603 	lsr.w	r6, r0, r3
 80020f4:	4097      	lsls	r7, r2
 80020f6:	fa01 f002 	lsl.w	r0, r1, r2
 80020fa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80020fe:	40d9      	lsrs	r1, r3
 8002100:	4330      	orrs	r0, r6
 8002102:	0c03      	lsrs	r3, r0, #16
 8002104:	fbb1 f6fe 	udiv	r6, r1, lr
 8002108:	fa1f f887 	uxth.w	r8, r7
 800210c:	fb0e 1116 	mls	r1, lr, r6, r1
 8002110:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002114:	fb06 f108 	mul.w	r1, r6, r8
 8002118:	4299      	cmp	r1, r3
 800211a:	fa04 f402 	lsl.w	r4, r4, r2
 800211e:	d909      	bls.n	8002134 <__udivmoddi4+0x19c>
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8002126:	f080 808d 	bcs.w	8002244 <__udivmoddi4+0x2ac>
 800212a:	4299      	cmp	r1, r3
 800212c:	f240 808a 	bls.w	8002244 <__udivmoddi4+0x2ac>
 8002130:	3e02      	subs	r6, #2
 8002132:	443b      	add	r3, r7
 8002134:	1a5b      	subs	r3, r3, r1
 8002136:	b281      	uxth	r1, r0
 8002138:	fbb3 f0fe 	udiv	r0, r3, lr
 800213c:	fb0e 3310 	mls	r3, lr, r0, r3
 8002140:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002144:	fb00 f308 	mul.w	r3, r0, r8
 8002148:	428b      	cmp	r3, r1
 800214a:	d907      	bls.n	800215c <__udivmoddi4+0x1c4>
 800214c:	1879      	adds	r1, r7, r1
 800214e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8002152:	d273      	bcs.n	800223c <__udivmoddi4+0x2a4>
 8002154:	428b      	cmp	r3, r1
 8002156:	d971      	bls.n	800223c <__udivmoddi4+0x2a4>
 8002158:	3802      	subs	r0, #2
 800215a:	4439      	add	r1, r7
 800215c:	1acb      	subs	r3, r1, r3
 800215e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8002162:	e778      	b.n	8002056 <__udivmoddi4+0xbe>
 8002164:	f1c6 0c20 	rsb	ip, r6, #32
 8002168:	fa03 f406 	lsl.w	r4, r3, r6
 800216c:	fa22 f30c 	lsr.w	r3, r2, ip
 8002170:	431c      	orrs	r4, r3
 8002172:	fa20 f70c 	lsr.w	r7, r0, ip
 8002176:	fa01 f306 	lsl.w	r3, r1, r6
 800217a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800217e:	fa21 f10c 	lsr.w	r1, r1, ip
 8002182:	431f      	orrs	r7, r3
 8002184:	0c3b      	lsrs	r3, r7, #16
 8002186:	fbb1 f9fe 	udiv	r9, r1, lr
 800218a:	fa1f f884 	uxth.w	r8, r4
 800218e:	fb0e 1119 	mls	r1, lr, r9, r1
 8002192:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8002196:	fb09 fa08 	mul.w	sl, r9, r8
 800219a:	458a      	cmp	sl, r1
 800219c:	fa02 f206 	lsl.w	r2, r2, r6
 80021a0:	fa00 f306 	lsl.w	r3, r0, r6
 80021a4:	d908      	bls.n	80021b8 <__udivmoddi4+0x220>
 80021a6:	1861      	adds	r1, r4, r1
 80021a8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80021ac:	d248      	bcs.n	8002240 <__udivmoddi4+0x2a8>
 80021ae:	458a      	cmp	sl, r1
 80021b0:	d946      	bls.n	8002240 <__udivmoddi4+0x2a8>
 80021b2:	f1a9 0902 	sub.w	r9, r9, #2
 80021b6:	4421      	add	r1, r4
 80021b8:	eba1 010a 	sub.w	r1, r1, sl
 80021bc:	b2bf      	uxth	r7, r7
 80021be:	fbb1 f0fe 	udiv	r0, r1, lr
 80021c2:	fb0e 1110 	mls	r1, lr, r0, r1
 80021c6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80021ca:	fb00 f808 	mul.w	r8, r0, r8
 80021ce:	45b8      	cmp	r8, r7
 80021d0:	d907      	bls.n	80021e2 <__udivmoddi4+0x24a>
 80021d2:	19e7      	adds	r7, r4, r7
 80021d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80021d8:	d22e      	bcs.n	8002238 <__udivmoddi4+0x2a0>
 80021da:	45b8      	cmp	r8, r7
 80021dc:	d92c      	bls.n	8002238 <__udivmoddi4+0x2a0>
 80021de:	3802      	subs	r0, #2
 80021e0:	4427      	add	r7, r4
 80021e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80021e6:	eba7 0708 	sub.w	r7, r7, r8
 80021ea:	fba0 8902 	umull	r8, r9, r0, r2
 80021ee:	454f      	cmp	r7, r9
 80021f0:	46c6      	mov	lr, r8
 80021f2:	4649      	mov	r1, r9
 80021f4:	d31a      	bcc.n	800222c <__udivmoddi4+0x294>
 80021f6:	d017      	beq.n	8002228 <__udivmoddi4+0x290>
 80021f8:	b15d      	cbz	r5, 8002212 <__udivmoddi4+0x27a>
 80021fa:	ebb3 020e 	subs.w	r2, r3, lr
 80021fe:	eb67 0701 	sbc.w	r7, r7, r1
 8002202:	fa07 fc0c 	lsl.w	ip, r7, ip
 8002206:	40f2      	lsrs	r2, r6
 8002208:	ea4c 0202 	orr.w	r2, ip, r2
 800220c:	40f7      	lsrs	r7, r6
 800220e:	e9c5 2700 	strd	r2, r7, [r5]
 8002212:	2600      	movs	r6, #0
 8002214:	4631      	mov	r1, r6
 8002216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800221a:	462e      	mov	r6, r5
 800221c:	4628      	mov	r0, r5
 800221e:	e70b      	b.n	8002038 <__udivmoddi4+0xa0>
 8002220:	4606      	mov	r6, r0
 8002222:	e6e9      	b.n	8001ff8 <__udivmoddi4+0x60>
 8002224:	4618      	mov	r0, r3
 8002226:	e6fd      	b.n	8002024 <__udivmoddi4+0x8c>
 8002228:	4543      	cmp	r3, r8
 800222a:	d2e5      	bcs.n	80021f8 <__udivmoddi4+0x260>
 800222c:	ebb8 0e02 	subs.w	lr, r8, r2
 8002230:	eb69 0104 	sbc.w	r1, r9, r4
 8002234:	3801      	subs	r0, #1
 8002236:	e7df      	b.n	80021f8 <__udivmoddi4+0x260>
 8002238:	4608      	mov	r0, r1
 800223a:	e7d2      	b.n	80021e2 <__udivmoddi4+0x24a>
 800223c:	4660      	mov	r0, ip
 800223e:	e78d      	b.n	800215c <__udivmoddi4+0x1c4>
 8002240:	4681      	mov	r9, r0
 8002242:	e7b9      	b.n	80021b8 <__udivmoddi4+0x220>
 8002244:	4666      	mov	r6, ip
 8002246:	e775      	b.n	8002134 <__udivmoddi4+0x19c>
 8002248:	4630      	mov	r0, r6
 800224a:	e74a      	b.n	80020e2 <__udivmoddi4+0x14a>
 800224c:	f1ac 0c02 	sub.w	ip, ip, #2
 8002250:	4439      	add	r1, r7
 8002252:	e713      	b.n	800207c <__udivmoddi4+0xe4>
 8002254:	3802      	subs	r0, #2
 8002256:	443c      	add	r4, r7
 8002258:	e724      	b.n	80020a4 <__udivmoddi4+0x10c>
 800225a:	bf00      	nop

0800225c <__aeabi_idiv0>:
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop

08002260 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a07      	ldr	r2, [pc, #28]	; (800228c <vApplicationGetIdleTaskMemory+0x2c>)
 8002270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4a06      	ldr	r2, [pc, #24]	; (8002290 <vApplicationGetIdleTaskMemory+0x30>)
 8002276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	24001974 	.word	0x24001974
 8002290:	240019c8 	.word	0x240019c8

08002294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002294:	b5b0      	push	{r4, r5, r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800229a:	f000 fd0f 	bl	8002cbc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800229e:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <main+0x12c>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11b      	bne.n	80022e2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022aa:	f3bf 8f4f 	dsb	sy
}
 80022ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022b0:	f3bf 8f6f 	isb	sy
}
 80022b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80022b6:	4b42      	ldr	r3, [pc, #264]	; (80023c0 <main+0x12c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80022be:	f3bf 8f4f 	dsb	sy
}
 80022c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022c4:	f3bf 8f6f 	isb	sy
}
 80022c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <main+0x12c>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4a3c      	ldr	r2, [pc, #240]	; (80023c0 <main+0x12c>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80022d6:	f3bf 8f4f 	dsb	sy
}
 80022da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022dc:	f3bf 8f6f 	isb	sy
}
 80022e0:	e000      	b.n	80022e4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80022e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <main+0x12c>)
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d138      	bne.n	8002362 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80022f0:	4b33      	ldr	r3, [pc, #204]	; (80023c0 <main+0x12c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80022f8:	f3bf 8f4f 	dsb	sy
}
 80022fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <main+0x12c>)
 8002300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002304:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	0b5b      	lsrs	r3, r3, #13
 800230a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800230e:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	08db      	lsrs	r3, r3, #3
 8002314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002318:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002322:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002328:	4925      	ldr	r1, [pc, #148]	; (80023c0 <main+0x12c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	1e5a      	subs	r2, r3, #1
 8002334:	61fa      	str	r2, [r7, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ef      	bne.n	800231a <main+0x86>
    } while(sets-- != 0U);
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	623a      	str	r2, [r7, #32]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002344:	f3bf 8f4f 	dsb	sy
}
 8002348:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <main+0x12c>)
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <main+0x12c>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002356:	f3bf 8f4f 	dsb	sy
}
 800235a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800235c:	f3bf 8f6f 	isb	sy
}
 8002360:	e000      	b.n	8002364 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002362:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002364:	f001 fd10 	bl	8003d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002368:	f000 f830 	bl	80023cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800236c:	f000 f8be 	bl	80024ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002370:	f000 fb76 	bl	8002a60 <MX_GPIO_Init>
  MX_FMC_Init();
 8002374:	f000 fb10 	bl	8002998 <MX_FMC_Init>
  MX_I2C1_Init();
 8002378:	f000 f8e4 	bl	8002544 <MX_I2C1_Init>
  MX_I2C2_Init();
 800237c:	f000 f922 	bl	80025c4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002380:	f000 f960 	bl	8002644 <MX_I2C3_Init>
  MX_SAI1_Init();
 8002384:	f000 f9b4 	bl	80026f0 <MX_SAI1_Init>
  MX_UART7_Init();
 8002388:	f000 fa60 	bl	800284c <MX_UART7_Init>
  MX_TIM3_Init();
 800238c:	f000 fa10 	bl	80027b0 <MX_TIM3_Init>
  MX_DMA_Init();
 8002390:	f000 faaa 	bl	80028e8 <MX_DMA_Init>
  MX_RNG_Init();
 8002394:	f000 f996 	bl	80026c4 <MX_RNG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <main+0x130>)
 800239a:	463c      	mov	r4, r7
 800239c:	461d      	mov	r5, r3
 800239e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80023aa:	463b      	mov	r3, r7
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f00d fd21 	bl	800fdf6 <osThreadCreate>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <main+0x134>)
 80023b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80023ba:	f00d fd05 	bl	800fdc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023be:	e7fe      	b.n	80023be <main+0x12a>
 80023c0:	e000ed00 	.word	0xe000ed00
 80023c4:	08018190 	.word	0x08018190
 80023c8:	24005e58 	.word	0x24005e58

080023cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b09c      	sub	sp, #112	; 0x70
 80023d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d6:	224c      	movs	r2, #76	; 0x4c
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f8fa 	bl	80005d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	2220      	movs	r2, #32
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f8f4 	bl	80005d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80023ec:	2002      	movs	r0, #2
 80023ee:	f006 fae5 	bl	80089bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80023f2:	2300      	movs	r3, #0
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <SystemClock_Config+0x114>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	4a39      	ldr	r2, [pc, #228]	; (80024e0 <SystemClock_Config+0x114>)
 80023fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002400:	6193      	str	r3, [r2, #24]
 8002402:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <SystemClock_Config+0x114>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <SystemClock_Config+0x118>)
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	4a34      	ldr	r2, [pc, #208]	; (80024e4 <SystemClock_Config+0x118>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <SystemClock_Config+0x118>)
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002424:	bf00      	nop
 8002426:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <SystemClock_Config+0x114>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002432:	d1f8      	bne.n	8002426 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <SystemClock_Config+0x11c>)
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f023 0303 	bic.w	r3, r3, #3
 800243c:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <SystemClock_Config+0x11c>)
 800243e:	f043 0302 	orr.w	r3, r3, #2
 8002442:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002444:	2321      	movs	r3, #33	; 0x21
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800244e:	2301      	movs	r3, #1
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002452:	2302      	movs	r3, #2
 8002454:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002456:	2302      	movs	r3, #2
 8002458:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 800245a:	230a      	movs	r3, #10
 800245c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 384;
 800245e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002462:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002464:	2302      	movs	r3, #2
 8002466:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8002468:	230a      	movs	r3, #10
 800246a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800246c:	2304      	movs	r3, #4
 800246e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002470:	2304      	movs	r3, #4
 8002472:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002474:	2300      	movs	r3, #0
 8002476:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f006 fad5 	bl	8008a30 <HAL_RCC_OscConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800248c:	f000 fc50 	bl	8002d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002490:	233f      	movs	r3, #63	; 0x3f
 8002492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002494:	2303      	movs	r3, #3
 8002496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800249c:	2308      	movs	r3, #8
 800249e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80024a0:	2340      	movs	r3, #64	; 0x40
 80024a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80024a4:	2340      	movs	r3, #64	; 0x40
 80024a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80024a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80024ae:	2340      	movs	r3, #64	; 0x40
 80024b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2104      	movs	r1, #4
 80024b6:	4618      	mov	r0, r3
 80024b8:	f006 fee6 	bl	8009288 <HAL_RCC_ClockConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80024c2:	f000 fc35 	bl	8002d30 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80024c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80024ca:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80024ce:	2000      	movs	r0, #0
 80024d0:	f007 f890 	bl	80095f4 <HAL_RCC_MCOConfig>
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80024d4:	f007 f8f8 	bl	80096c8 <HAL_RCC_EnableCSS>
}
 80024d8:	bf00      	nop
 80024da:	3770      	adds	r7, #112	; 0x70
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58024800 	.word	0x58024800
 80024e4:	58000400 	.word	0x58000400
 80024e8:	58024400 	.word	0x58024400

080024ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0b0      	sub	sp, #192	; 0xc0
 80024f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	22bc      	movs	r2, #188	; 0xbc
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe f86b 	bl	80005d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80024fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002502:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8002504:	2319      	movs	r3, #25
 8002506:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 512;
 8002508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800250c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 125;
 800250e:	237d      	movs	r3, #125	; 0x7d
 8002510:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 125;
 8002512:	237d      	movs	r3, #125	; 0x7d
 8002514:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 125;
 8002516:	237d      	movs	r3, #125	; 0x7d
 8002518:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002526:	2301      	movs	r3, #1
 8002528:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	4618      	mov	r0, r3
 800252e:	f007 facd 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8002538:	f000 fbfa 	bl	8002d30 <Error_Handler>
  }
}
 800253c:	bf00      	nop
 800253e:	37c0      	adds	r7, #192	; 0xc0
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_I2C1_Init+0x74>)
 800254a:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <MX_I2C1_Init+0x78>)
 800254c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002550:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <MX_I2C1_Init+0x7c>)
 8002552:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <MX_I2C1_Init+0x74>)
 800255c:	2201      	movs	r2, #1
 800255e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <MX_I2C1_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_I2C1_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800257e:	480e      	ldr	r0, [pc, #56]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002580:	f006 f8da 	bl	8008738 <HAL_I2C_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800258a:	f000 fbd1 	bl	8002d30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800258e:	2100      	movs	r1, #0
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002592:	f006 f97b 	bl	800888c <HAL_I2CEx_ConfigAnalogFilter>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800259c:	f000 fbc8 	bl	8002d30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025a0:	2100      	movs	r1, #0
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_I2C1_Init+0x74>)
 80025a4:	f006 f9bd 	bl	8008922 <HAL_I2CEx_ConfigDigitalFilter>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025ae:	f000 fbbf 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	24005f38 	.word	0x24005f38
 80025bc:	40005400 	.word	0x40005400
 80025c0:	307075b1 	.word	0x307075b1

080025c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <MX_I2C2_Init+0x74>)
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <MX_I2C2_Init+0x78>)
 80025cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <MX_I2C2_Init+0x74>)
 80025d0:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <MX_I2C2_Init+0x7c>)
 80025d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <MX_I2C2_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <MX_I2C2_Init+0x74>)
 80025dc:	2201      	movs	r2, #1
 80025de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <MX_I2C2_Init+0x74>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <MX_I2C2_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <MX_I2C2_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_I2C2_Init+0x74>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <MX_I2C2_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025fe:	480e      	ldr	r0, [pc, #56]	; (8002638 <MX_I2C2_Init+0x74>)
 8002600:	f006 f89a 	bl	8008738 <HAL_I2C_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800260a:	f000 fb91 	bl	8002d30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800260e:	2100      	movs	r1, #0
 8002610:	4809      	ldr	r0, [pc, #36]	; (8002638 <MX_I2C2_Init+0x74>)
 8002612:	f006 f93b 	bl	800888c <HAL_I2CEx_ConfigAnalogFilter>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800261c:	f000 fb88 	bl	8002d30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002620:	2100      	movs	r1, #0
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_I2C2_Init+0x74>)
 8002624:	f006 f97d 	bl	8008922 <HAL_I2CEx_ConfigDigitalFilter>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800262e:	f000 fb7f 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	24005f84 	.word	0x24005f84
 800263c:	40005800 	.word	0x40005800
 8002640:	307075b1 	.word	0x307075b1

08002644 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <MX_I2C3_Init+0x74>)
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <MX_I2C3_Init+0x78>)
 800264c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <MX_I2C3_Init+0x74>)
 8002650:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <MX_I2C3_Init+0x7c>)
 8002652:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002654:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <MX_I2C3_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <MX_I2C3_Init+0x74>)
 800265c:	2201      	movs	r2, #1
 800265e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <MX_I2C3_Init+0x74>)
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <MX_I2C3_Init+0x74>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MX_I2C3_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <MX_I2C3_Init+0x74>)
 8002674:	2200      	movs	r2, #0
 8002676:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_I2C3_Init+0x74>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800267e:	480e      	ldr	r0, [pc, #56]	; (80026b8 <MX_I2C3_Init+0x74>)
 8002680:	f006 f85a 	bl	8008738 <HAL_I2C_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800268a:	f000 fb51 	bl	8002d30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800268e:	2100      	movs	r1, #0
 8002690:	4809      	ldr	r0, [pc, #36]	; (80026b8 <MX_I2C3_Init+0x74>)
 8002692:	f006 f8fb 	bl	800888c <HAL_I2CEx_ConfigAnalogFilter>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800269c:	f000 fb48 	bl	8002d30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026a0:	2100      	movs	r1, #0
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <MX_I2C3_Init+0x74>)
 80026a4:	f006 f93d 	bl	8008922 <HAL_I2CEx_ConfigDigitalFilter>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80026ae:	f000 fb3f 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	24005e5c 	.word	0x24005e5c
 80026bc:	40005c00 	.word	0x40005c00
 80026c0:	307075b1 	.word	0x307075b1

080026c4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <MX_RNG_Init+0x24>)
 80026ca:	4a08      	ldr	r2, [pc, #32]	; (80026ec <MX_RNG_Init+0x28>)
 80026cc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_RNG_Init+0x24>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80026d4:	4804      	ldr	r0, [pc, #16]	; (80026e8 <MX_RNG_Init+0x24>)
 80026d6:	f009 fb7f 	bl	800bdd8 <HAL_RNG_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80026e0:	f000 fb26 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	24006358 	.word	0x24006358
 80026ec:	48021800 	.word	0x48021800

080026f0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80026f4:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <MX_SAI1_Init+0xb0>)
 80026f6:	4a2b      	ldr	r2, [pc, #172]	; (80027a4 <MX_SAI1_Init+0xb4>)
 80026f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <MX_SAI1_Init+0xb0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <MX_SAI1_Init+0xb0>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002706:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <MX_SAI1_Init+0xb0>)
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800270c:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <MX_SAI1_Init+0xb0>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <MX_SAI1_Init+0xb0>)
 8002714:	2200      	movs	r2, #0
 8002716:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_8K;
 8002718:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <MX_SAI1_Init+0xb0>)
 800271a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800271e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <MX_SAI1_Init+0xb0>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <MX_SAI1_Init+0xb0>)
 8002728:	2200      	movs	r2, #0
 800272a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <MX_SAI1_Init+0xb0>)
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <MX_SAI1_Init+0xb0>)
 8002734:	2200      	movs	r2, #0
 8002736:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002738:	2302      	movs	r3, #2
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	4818      	ldr	r0, [pc, #96]	; (80027a0 <MX_SAI1_Init+0xb0>)
 8002740:	f009 fbac 	bl	800be9c <HAL_SAI_InitProtocol>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 800274a:	f000 faf1 	bl	8002d30 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <MX_SAI1_Init+0xb8>)
 8002750:	4a16      	ldr	r2, [pc, #88]	; (80027ac <MX_SAI1_Init+0xbc>)
 8002752:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_SAI1_Init+0xb8>)
 8002756:	2203      	movs	r2, #3
 8002758:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <MX_SAI1_Init+0xb8>)
 800275c:	2201      	movs	r2, #1
 800275e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_SAI1_Init+0xb8>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <MX_SAI1_Init+0xb8>)
 8002768:	2200      	movs	r2, #0
 800276a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_SAI1_Init+0xb8>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <MX_SAI1_Init+0xb8>)
 8002774:	2200      	movs	r2, #0
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <MX_SAI1_Init+0xb8>)
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <MX_SAI1_Init+0xb8>)
 8002780:	2200      	movs	r2, #0
 8002782:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002784:	2302      	movs	r3, #2
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <MX_SAI1_Init+0xb8>)
 800278c:	f009 fb86 	bl	800be9c <HAL_SAI_InitProtocol>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8002796:	f000 facb 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	240063e4 	.word	0x240063e4
 80027a4:	40015804 	.word	0x40015804
 80027a8:	24006158 	.word	0x24006158
 80027ac:	40015824 	.word	0x40015824

080027b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <MX_TIM3_Init+0x94>)
 80027d0:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <MX_TIM3_Init+0x98>)
 80027d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <MX_TIM3_Init+0x94>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <MX_TIM3_Init+0x94>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15000;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <MX_TIM3_Init+0x94>)
 80027e2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80027e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <MX_TIM3_Init+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <MX_TIM3_Init+0x94>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027f4:	4813      	ldr	r0, [pc, #76]	; (8002844 <MX_TIM3_Init+0x94>)
 80027f6:	f00a fa6b 	bl	800ccd0 <HAL_TIM_Base_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002800:	f000 fa96 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002808:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800280a:	f107 0310 	add.w	r3, r7, #16
 800280e:	4619      	mov	r1, r3
 8002810:	480c      	ldr	r0, [pc, #48]	; (8002844 <MX_TIM3_Init+0x94>)
 8002812:	f00a fbd3 	bl	800cfbc <HAL_TIM_ConfigClockSource>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800281c:	f000 fa88 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	4619      	mov	r1, r3
 800282c:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_TIM3_Init+0x94>)
 800282e:	f00a fe27 	bl	800d480 <HAL_TIMEx_MasterConfigSynchronization>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002838:	f000 fa7a 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	2400601c 	.word	0x2400601c
 8002848:	40000400 	.word	0x40000400

0800284c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <MX_UART7_Init+0x94>)
 8002852:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <MX_UART7_Init+0x98>)
 8002854:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <MX_UART7_Init+0x94>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <MX_UART7_Init+0x94>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <MX_UART7_Init+0x94>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <MX_UART7_Init+0x94>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <MX_UART7_Init+0x94>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <MX_UART7_Init+0x94>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <MX_UART7_Init+0x94>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <MX_UART7_Init+0x94>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <MX_UART7_Init+0x94>)
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <MX_UART7_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002894:	4812      	ldr	r0, [pc, #72]	; (80028e0 <MX_UART7_Init+0x94>)
 8002896:	f00a fe9f 	bl	800d5d8 <HAL_UART_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80028a0:	f000 fa46 	bl	8002d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 80028a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028a8:	480d      	ldr	r0, [pc, #52]	; (80028e0 <MX_UART7_Init+0x94>)
 80028aa:	f00c fab9 	bl	800ee20 <HAL_UARTEx_SetTxFifoThreshold>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80028b4:	f000 fa3c 	bl	8002d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 80028b8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80028bc:	4808      	ldr	r0, [pc, #32]	; (80028e0 <MX_UART7_Init+0x94>)
 80028be:	f00c faed 	bl	800ee9c <HAL_UARTEx_SetRxFifoThreshold>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80028c8:	f000 fa32 	bl	8002d30 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 80028cc:	4804      	ldr	r0, [pc, #16]	; (80028e0 <MX_UART7_Init+0x94>)
 80028ce:	f00c fa6c 	bl	800edaa <HAL_UARTEx_EnableFifoMode>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80028d8:	f000 fa2a 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	24005ea8 	.word	0x24005ea8
 80028e4:	40007800 	.word	0x40007800

080028e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028ee:	4b29      	ldr	r3, [pc, #164]	; (8002994 <MX_DMA_Init+0xac>)
 80028f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028f4:	4a27      	ldr	r2, [pc, #156]	; (8002994 <MX_DMA_Init+0xac>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <MX_DMA_Init+0xac>)
 8002900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <MX_DMA_Init+0xac>)
 800290e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002912:	4a20      	ldr	r2, [pc, #128]	; (8002994 <MX_DMA_Init+0xac>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <MX_DMA_Init+0xac>)
 800291e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2105      	movs	r1, #5
 800292e:	200c      	movs	r0, #12
 8002930:	f001 fbb7 	bl	80040a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002934:	200c      	movs	r0, #12
 8002936:	f001 fbce 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2105      	movs	r1, #5
 800293e:	200d      	movs	r0, #13
 8002940:	f001 fbaf 	bl	80040a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002944:	200d      	movs	r0, #13
 8002946:	f001 fbc6 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2105      	movs	r1, #5
 800294e:	200e      	movs	r0, #14
 8002950:	f001 fba7 	bl	80040a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002954:	200e      	movs	r0, #14
 8002956:	f001 fbbe 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2105      	movs	r1, #5
 800295e:	200f      	movs	r0, #15
 8002960:	f001 fb9f 	bl	80040a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002964:	200f      	movs	r0, #15
 8002966:	f001 fbb6 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2105      	movs	r1, #5
 800296e:	203b      	movs	r0, #59	; 0x3b
 8002970:	f001 fb97 	bl	80040a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002974:	203b      	movs	r0, #59	; 0x3b
 8002976:	f001 fbae 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2105      	movs	r1, #5
 800297e:	203c      	movs	r0, #60	; 0x3c
 8002980:	f001 fb8f 	bl	80040a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002984:	203c      	movs	r0, #60	; 0x3c
 8002986:	f001 fba6 	bl	80040d6 <HAL_NVIC_EnableIRQ>

}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	58024400 	.word	0x58024400

08002998 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
 80029ac:	615a      	str	r2, [r3, #20]
 80029ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029b2:	4a29      	ldr	r2, [pc, #164]	; (8002a58 <MX_FMC_Init+0xc0>)
 80029b4:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80029b6:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029b8:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <MX_FMC_Init+0xc4>)
 80029ba:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029d0:	2220      	movs	r2, #32
 80029d2:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029dc:	2200      	movs	r2, #0
 80029de:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <MX_FMC_Init+0xbc>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <MX_FMC_Init+0xbc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <MX_FMC_Init+0xbc>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <MX_FMC_Init+0xbc>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <MX_FMC_Init+0xbc>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002a18:	230f      	movs	r3, #15
 8002a1a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002a1c:	230f      	movs	r3, #15
 8002a1e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002a20:	23ff      	movs	r3, #255	; 0xff
 8002a22:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002a24:	230f      	movs	r3, #15
 8002a26:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002a28:	2310      	movs	r3, #16
 8002a2a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002a2c:	2311      	movs	r3, #17
 8002a2e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	2200      	movs	r2, #0
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4806      	ldr	r0, [pc, #24]	; (8002a54 <MX_FMC_Init+0xbc>)
 8002a3c:	f00a f8f8 	bl	800cc30 <HAL_SRAM_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8002a46:	f000 f973 	bl	8002d30 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	24005fd0 	.word	0x24005fd0
 8002a58:	52004000 	.word	0x52004000
 8002a5c:	52004104 	.word	0x52004104

08002a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08e      	sub	sp, #56	; 0x38
 8002a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a76:	4b87      	ldr	r3, [pc, #540]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7c:	4a85      	ldr	r2, [pc, #532]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002a7e:	f043 0310 	orr.w	r3, r3, #16
 8002a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a86:	4b83      	ldr	r3, [pc, #524]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	623b      	str	r3, [r7, #32]
 8002a92:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a94:	4b7f      	ldr	r3, [pc, #508]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9a:	4a7e      	ldr	r2, [pc, #504]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa4:	4b7b      	ldr	r3, [pc, #492]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ab2:	4b78      	ldr	r3, [pc, #480]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab8:	4a76      	ldr	r2, [pc, #472]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac2:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ad0:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad6:	4a6f      	ldr	r2, [pc, #444]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002ad8:	f043 0320 	orr.w	r3, r3, #32
 8002adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae0:	4b6c      	ldr	r3, [pc, #432]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aee:	4b69      	ldr	r3, [pc, #420]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af4:	4a67      	ldr	r2, [pc, #412]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afe:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0c:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b12:	4a60      	ldr	r2, [pc, #384]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1c:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2a:	4b5a      	ldr	r3, [pc, #360]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	4a58      	ldr	r2, [pc, #352]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3a:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b48:	4b52      	ldr	r3, [pc, #328]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4e:	4a51      	ldr	r2, [pc, #324]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b58:	4b4e      	ldr	r3, [pc, #312]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b66:	4b4b      	ldr	r3, [pc, #300]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6c:	4a49      	ldr	r2, [pc, #292]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b6e:	f043 0308 	orr.w	r3, r3, #8
 8002b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POW_DOWN_Pin|TEST_LED_Pin, GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002b8a:	4843      	ldr	r0, [pc, #268]	; (8002c98 <MX_GPIO_Init+0x238>)
 8002b8c:	f005 fdba 	bl	8008704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, L4_Pin|L5_Pin|L6_Pin, GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002b96:	4841      	ldr	r0, [pc, #260]	; (8002c9c <MX_GPIO_Init+0x23c>)
 8002b98:	f005 fdb4 	bl	8008704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L1_Pin|L2_Pin|L3_Pin, GPIO_PIN_RESET);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002ba2:	483f      	ldr	r0, [pc, #252]	; (8002ca0 <MX_GPIO_Init+0x240>)
 8002ba4:	f005 fdae 	bl	8008704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DET_48V_Pin UPR_MIC2_Pin CFG_UI0_Pin */
  GPIO_InitStruct.Pin = DET_48V_Pin|UPR_MIC2_Pin|CFG_UI0_Pin;
 8002ba8:	f24a 0340 	movw	r3, #41024	; 0xa040
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4838      	ldr	r0, [pc, #224]	; (8002ca0 <MX_GPIO_Init+0x240>)
 8002bbe:	f005 fbf1 	bl	80083a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : POW_DOWN_Pin TEST_LED_Pin */
  GPIO_InitStruct.Pin = POW_DOWN_Pin|TEST_LED_Pin;
 8002bc2:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	482f      	ldr	r0, [pc, #188]	; (8002c98 <MX_GPIO_Init+0x238>)
 8002bdc:	f005 fbe2 	bl	80083a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L4_Pin L5_Pin L6_Pin */
  GPIO_InitStruct.Pin = L4_Pin|L5_Pin|L6_Pin;
 8002be0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be6:	2301      	movs	r3, #1
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4828      	ldr	r0, [pc, #160]	; (8002c9c <MX_GPIO_Init+0x23c>)
 8002bfa:	f005 fbd3 	bl	80083a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_INT_Pin */
  GPIO_InitStruct.Pin = I2C3_INT_Pin;
 8002bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2C3_INT_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	4823      	ldr	r0, [pc, #140]	; (8002ca0 <MX_GPIO_Init+0x240>)
 8002c14:	f005 fbc6 	bl	80083a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c22:	2301      	movs	r3, #1
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c32:	4619      	mov	r1, r3
 8002c34:	481b      	ldr	r0, [pc, #108]	; (8002ca4 <MX_GPIO_Init+0x244>)
 8002c36:	f005 fbb5 	bl	80083a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_Pin L2_Pin L3_Pin */
  GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 8002c3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c40:	2301      	movs	r3, #1
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c50:	4619      	mov	r1, r3
 8002c52:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <MX_GPIO_Init+0x240>)
 8002c54:	f005 fba6 	bl	80083a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : K1_Pin K2_Pin K3_Pin K4_Pin
                           K5_Pin K6_Pin */
  GPIO_InitStruct.Pin = K1_Pin|K2_Pin|K3_Pin|K4_Pin
 8002c58:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
                          |K5_Pin|K6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480b      	ldr	r0, [pc, #44]	; (8002c9c <MX_GPIO_Init+0x23c>)
 8002c6e:	f005 fb99 	bl	80083a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_BUT_Pin */
  GPIO_InitStruct.Pin = TEST_BUT_Pin;
 8002c72:	2320      	movs	r3, #32
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TEST_BUT_GPIO_Port, &GPIO_InitStruct);
 8002c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c82:	4619      	mov	r1, r3
 8002c84:	4804      	ldr	r0, [pc, #16]	; (8002c98 <MX_GPIO_Init+0x238>)
 8002c86:	f005 fb8d 	bl	80083a4 <HAL_GPIO_Init>

}
 8002c8a:	bf00      	nop
 8002c8c:	3738      	adds	r7, #56	; 0x38
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	58024400 	.word	0x58024400
 8002c98:	58020400 	.word	0x58020400
 8002c9c:	58021800 	.word	0x58021800
 8002ca0:	58020800 	.word	0x58020800
 8002ca4:	58020000 	.word	0x58020000

08002ca8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002cb0:	f00c fa98 	bl	800f1e4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f00d f8ea 	bl	800fe8e <osDelay>
 8002cba:	e7fb      	b.n	8002cb4 <StartDefaultTask+0xc>

08002cbc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002cce:	f001 fa1d 	bl	800410c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002cda:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002cde:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002cec:	2303      	movs	r3, #3
 8002cee:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d00:	463b      	mov	r3, r7
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 fa3a 	bl	800417c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <MPU_Config+0x70>)
 8002d0e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8002d10:	230e      	movs	r3, #14
 8002d12:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d14:	463b      	mov	r3, r7
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fa30 	bl	800417c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002d1c:	2004      	movs	r0, #4
 8002d1e:	f001 fa0d 	bl	800413c <HAL_MPU_Enable>

}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	30040000 	.word	0x30040000

08002d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <Error_Handler+0x8>
	...

08002d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_MspInit+0x38>)
 8002d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d48:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <HAL_MspInit+0x38>)
 8002d4a:	f043 0302 	orr.w	r3, r3, #2
 8002d4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_MspInit+0x38>)
 8002d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d60:	2200      	movs	r2, #0
 8002d62:	210f      	movs	r1, #15
 8002d64:	f06f 0001 	mvn.w	r0, #1
 8002d68:	f001 f99b 	bl	80040a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	58024400 	.word	0x58024400

08002d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b0be      	sub	sp, #248	; 0xf8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d94:	22bc      	movs	r2, #188	; 0xbc
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fc1b 	bl	80005d4 <memset>
  if(hi2c->Instance==I2C1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4ab0      	ldr	r2, [pc, #704]	; (8003064 <HAL_I2C_MspInit+0x2ec>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d142      	bne.n	8002e2e <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002da8:	2308      	movs	r3, #8
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002db6:	4618      	mov	r0, r3
 8002db8:	f006 fe88 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002dc2:	f7ff ffb5 	bl	8002d30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	4ba8      	ldr	r3, [pc, #672]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dcc:	4aa6      	ldr	r2, [pc, #664]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd6:	4ba4      	ldr	r3, [pc, #656]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002de4:	23c0      	movs	r3, #192	; 0xc0
 8002de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dea:	2312      	movs	r3, #18
 8002dec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df6:	2302      	movs	r3, #2
 8002df8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e06:	4619      	mov	r1, r3
 8002e08:	4898      	ldr	r0, [pc, #608]	; (800306c <HAL_I2C_MspInit+0x2f4>)
 8002e0a:	f005 facb 	bl	80083a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e0e:	4b96      	ldr	r3, [pc, #600]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e14:	4a94      	ldr	r2, [pc, #592]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e1e:	4b92      	ldr	r3, [pc, #584]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e2c:	e116      	b.n	800305c <HAL_I2C_MspInit+0x2e4>
  else if(hi2c->Instance==I2C2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a8f      	ldr	r2, [pc, #572]	; (8003070 <HAL_I2C_MspInit+0x2f8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	f040 809d 	bne.w	8002f74 <HAL_I2C_MspInit+0x1fc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f006 fe3f 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8002e54:	f7ff ff6c 	bl	8002d30 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e58:	4b83      	ldr	r3, [pc, #524]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5e:	4a82      	ldr	r2, [pc, #520]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e68:	4b7f      	ldr	r3, [pc, #508]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e76:	2330      	movs	r3, #48	; 0x30
 8002e78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e7c:	2312      	movs	r3, #18
 8002e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e8e:	2304      	movs	r3, #4
 8002e90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4876      	ldr	r0, [pc, #472]	; (8003074 <HAL_I2C_MspInit+0x2fc>)
 8002e9c:	f005 fa82 	bl	80083a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ea0:	4b71      	ldr	r3, [pc, #452]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ea6:	4a70      	ldr	r2, [pc, #448]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002ea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002eb0:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8002ebe:	4b6e      	ldr	r3, [pc, #440]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002ec0:	4a6e      	ldr	r2, [pc, #440]	; (800307c <HAL_I2C_MspInit+0x304>)
 8002ec2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8002ec4:	4b6c      	ldr	r3, [pc, #432]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002ec6:	2223      	movs	r2, #35	; 0x23
 8002ec8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eca:	4b6b      	ldr	r3, [pc, #428]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed0:	4b69      	ldr	r3, [pc, #420]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed6:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002edc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ede:	4b66      	ldr	r3, [pc, #408]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee4:	4b64      	ldr	r3, [pc, #400]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002eea:	4b63      	ldr	r3, [pc, #396]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ef6:	4b60      	ldr	r3, [pc, #384]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002efc:	485e      	ldr	r0, [pc, #376]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002efe:	f001 f981 	bl	8004204 <HAL_DMA_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_MspInit+0x194>
      Error_Handler();
 8002f08:	f7ff ff12 	bl	8002d30 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a5a      	ldr	r2, [pc, #360]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002f10:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f12:	4a59      	ldr	r2, [pc, #356]	; (8003078 <HAL_I2C_MspInit+0x300>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream4;
 8002f18:	4b59      	ldr	r3, [pc, #356]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f1a:	4a5a      	ldr	r2, [pc, #360]	; (8003084 <HAL_I2C_MspInit+0x30c>)
 8002f1c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8002f1e:	4b58      	ldr	r3, [pc, #352]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f20:	2224      	movs	r2, #36	; 0x24
 8002f22:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f24:	4b56      	ldr	r3, [pc, #344]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f26:	2240      	movs	r2, #64	; 0x40
 8002f28:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2a:	4b55      	ldr	r3, [pc, #340]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f30:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f36:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f38:	4b51      	ldr	r3, [pc, #324]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f3e:	4b50      	ldr	r3, [pc, #320]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002f44:	4b4e      	ldr	r3, [pc, #312]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f4a:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f50:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002f56:	484a      	ldr	r0, [pc, #296]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f58:	f001 f954 	bl	8004204 <HAL_DMA_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_MspInit+0x1ee>
      Error_Handler();
 8002f62:	f7ff fee5 	bl	8002d30 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a45      	ldr	r2, [pc, #276]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f6c:	4a44      	ldr	r2, [pc, #272]	; (8003080 <HAL_I2C_MspInit+0x308>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f72:	e073      	b.n	800305c <HAL_I2C_MspInit+0x2e4>
  else if(hi2c->Instance==I2C3)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a43      	ldr	r2, [pc, #268]	; (8003088 <HAL_I2C_MspInit+0x310>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d16e      	bne.n	800305c <HAL_I2C_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f006 fd9d 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_MspInit+0x224>
      Error_Handler();
 8002f98:	f7ff feca 	bl	8002d30 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f9c:	4b32      	ldr	r3, [pc, #200]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa2:	4a31      	ldr	r2, [pc, #196]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fac:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc0:	4a29      	ldr	r2, [pc, #164]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fca:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8002fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fde:	2312      	movs	r3, #18
 8002fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ff6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	481d      	ldr	r0, [pc, #116]	; (8003074 <HAL_I2C_MspInit+0x2fc>)
 8002ffe:	f005 f9d1 	bl	80083a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800300a:	2312      	movs	r3, #18
 800300c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003010:	2301      	movs	r3, #1
 8003012:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	2303      	movs	r3, #3
 8003018:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800301c:	2304      	movs	r3, #4
 800301e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003022:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003026:	4619      	mov	r1, r3
 8003028:	4818      	ldr	r0, [pc, #96]	; (800308c <HAL_I2C_MspInit+0x314>)
 800302a:	f005 f9bb 	bl	80083a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8003030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003034:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8003036:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800303a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_I2C_MspInit+0x2f0>)
 8003040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	2105      	movs	r1, #5
 8003050:	2048      	movs	r0, #72	; 0x48
 8003052:	f001 f826 	bl	80040a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003056:	2048      	movs	r0, #72	; 0x48
 8003058:	f001 f83d 	bl	80040d6 <HAL_NVIC_EnableIRQ>
}
 800305c:	bf00      	nop
 800305e:	37f8      	adds	r7, #248	; 0xf8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40005400 	.word	0x40005400
 8003068:	58024400 	.word	0x58024400
 800306c:	58020400 	.word	0x58020400
 8003070:	40005800 	.word	0x40005800
 8003074:	58021c00 	.word	0x58021c00
 8003078:	240060e0 	.word	0x240060e0
 800307c:	40020040 	.word	0x40020040
 8003080:	240061f0 	.word	0x240061f0
 8003084:	40020070 	.word	0x40020070
 8003088:	40005c00 	.word	0x40005c00
 800308c:	58020800 	.word	0x58020800

08003090 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b0b2      	sub	sp, #200	; 0xc8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003098:	f107 030c 	add.w	r3, r7, #12
 800309c:	22bc      	movs	r2, #188	; 0xbc
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fa97 	bl	80005d4 <memset>
  if(hrng->Instance==RNG)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <HAL_RNG_MspInit+0x68>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d11e      	bne.n	80030ee <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80030b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	4618      	mov	r0, r3
 80030c2:	f006 fd03 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80030cc:	f7ff fe30 	bl	8002d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RNG_MspInit+0x6c>)
 80030d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <HAL_RNG_MspInit+0x6c>)
 80030d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030dc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RNG_MspInit+0x6c>)
 80030e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80030ee:	bf00      	nop
 80030f0:	37c8      	adds	r7, #200	; 0xc8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	48021800 	.word	0x48021800
 80030fc:	58024400 	.word	0x58024400

08003100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <HAL_TIM_Base_MspInit+0x48>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d116      	bne.n	8003140 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_TIM_Base_MspInit+0x4c>)
 8003114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003118:	4a0c      	ldr	r2, [pc, #48]	; (800314c <HAL_TIM_Base_MspInit+0x4c>)
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_TIM_Base_MspInit+0x4c>)
 8003124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003130:	2200      	movs	r2, #0
 8003132:	2105      	movs	r1, #5
 8003134:	201d      	movs	r0, #29
 8003136:	f000 ffb4 	bl	80040a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800313a:	201d      	movs	r0, #29
 800313c:	f000 ffcb 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40000400 	.word	0x40000400
 800314c:	58024400 	.word	0x58024400

08003150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b0b8      	sub	sp, #224	; 0xe0
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003168:	f107 0310 	add.w	r3, r7, #16
 800316c:	22bc      	movs	r2, #188	; 0xbc
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd fa2f 	bl	80005d4 <memset>
  if(huart->Instance==UART7)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a57      	ldr	r2, [pc, #348]	; (80032d8 <HAL_UART_MspInit+0x188>)
 800317c:	4293      	cmp	r3, r2
 800317e:	f040 80a6 	bne.w	80032ce <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003182:	2302      	movs	r3, #2
 8003184:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	4618      	mov	r0, r3
 8003192:	f006 fc9b 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800319c:	f7ff fdc8 	bl	8002d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80031a0:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <HAL_UART_MspInit+0x18c>)
 80031a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a6:	4a4d      	ldr	r2, [pc, #308]	; (80032dc <HAL_UART_MspInit+0x18c>)
 80031a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031b0:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_UART_MspInit+0x18c>)
 80031b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_UART_MspInit+0x18c>)
 80031c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c4:	4a45      	ldr	r2, [pc, #276]	; (80032dc <HAL_UART_MspInit+0x18c>)
 80031c6:	f043 0320 	orr.w	r3, r3, #32
 80031ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ce:	4b43      	ldr	r3, [pc, #268]	; (80032dc <HAL_UART_MspInit+0x18c>)
 80031d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031dc:	23c0      	movs	r3, #192	; 0xc0
 80031de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80031f4:	2307      	movs	r3, #7
 80031f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031fe:	4619      	mov	r1, r3
 8003200:	4837      	ldr	r0, [pc, #220]	; (80032e0 <HAL_UART_MspInit+0x190>)
 8003202:	f005 f8cf 	bl	80083a4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8003206:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_UART_MspInit+0x194>)
 8003208:	4a37      	ldr	r2, [pc, #220]	; (80032e8 <HAL_UART_MspInit+0x198>)
 800320a:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 800320c:	4b35      	ldr	r3, [pc, #212]	; (80032e4 <HAL_UART_MspInit+0x194>)
 800320e:	224f      	movs	r2, #79	; 0x4f
 8003210:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003212:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_UART_MspInit+0x194>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_UART_MspInit+0x194>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_UART_MspInit+0x194>)
 8003220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003224:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003226:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_UART_MspInit+0x194>)
 8003228:	2200      	movs	r2, #0
 800322a:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_UART_MspInit+0x194>)
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8003232:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_UART_MspInit+0x194>)
 8003234:	2200      	movs	r2, #0
 8003236:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_UART_MspInit+0x194>)
 800323a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800323e:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_UART_MspInit+0x194>)
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8003246:	4827      	ldr	r0, [pc, #156]	; (80032e4 <HAL_UART_MspInit+0x194>)
 8003248:	f000 ffdc 	bl	8004204 <HAL_DMA_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8003252:	f7ff fd6d 	bl	8002d30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_UART_MspInit+0x194>)
 800325a:	67da      	str	r2, [r3, #124]	; 0x7c
 800325c:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <HAL_UART_MspInit+0x194>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 8003262:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_UART_MspInit+0x19c>)
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <HAL_UART_MspInit+0x1a0>)
 8003266:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_UART_MspInit+0x19c>)
 800326a:	2250      	movs	r2, #80	; 0x50
 800326c:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800326e:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <HAL_UART_MspInit+0x19c>)
 8003270:	2240      	movs	r2, #64	; 0x40
 8003272:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_UART_MspInit+0x19c>)
 8003276:	2200      	movs	r2, #0
 8003278:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <HAL_UART_MspInit+0x19c>)
 800327c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003280:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <HAL_UART_MspInit+0x19c>)
 8003284:	2200      	movs	r2, #0
 8003286:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_UART_MspInit+0x19c>)
 800328a:	2200      	movs	r2, #0
 800328c:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <HAL_UART_MspInit+0x19c>)
 8003290:	2200      	movs	r2, #0
 8003292:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_UART_MspInit+0x19c>)
 8003296:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800329a:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_UART_MspInit+0x19c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80032a2:	4812      	ldr	r0, [pc, #72]	; (80032ec <HAL_UART_MspInit+0x19c>)
 80032a4:	f000 ffae 	bl	8004204 <HAL_DMA_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80032ae:	f7ff fd3f 	bl	8002d30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <HAL_UART_MspInit+0x19c>)
 80032b6:	679a      	str	r2, [r3, #120]	; 0x78
 80032b8:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <HAL_UART_MspInit+0x19c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	2105      	movs	r1, #5
 80032c2:	2052      	movs	r0, #82	; 0x52
 80032c4:	f000 feed 	bl	80040a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80032c8:	2052      	movs	r0, #82	; 0x52
 80032ca:	f000 ff04 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80032ce:	bf00      	nop
 80032d0:	37e0      	adds	r7, #224	; 0xe0
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40007800 	.word	0x40007800
 80032dc:	58024400 	.word	0x58024400
 80032e0:	58021400 	.word	0x58021400
 80032e4:	240062e0 	.word	0x240062e0
 80032e8:	40020058 	.word	0x40020058
 80032ec:	24006068 	.word	0x24006068
 80032f0:	40020028 	.word	0x40020028

080032f4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b0b6      	sub	sp, #216	; 0xd8
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80032fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	60da      	str	r2, [r3, #12]
 8003308:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800330a:	4b5a      	ldr	r3, [pc, #360]	; (8003474 <HAL_FMC_MspInit+0x180>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 80ac 	bne.w	800346c <HAL_FMC_MspInit+0x178>
    return;
  }
  FMC_Initialized = 1;
 8003314:	4b57      	ldr	r3, [pc, #348]	; (8003474 <HAL_FMC_MspInit+0x180>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800331a:	f107 0308 	add.w	r3, r7, #8
 800331e:	22bc      	movs	r2, #188	; 0xbc
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f956 	bl	80005d4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800332c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL;
 800332e:	2301      	movs	r3, #1
 8003330:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003332:	f107 0308 	add.w	r3, r7, #8
 8003336:	4618      	mov	r0, r3
 8003338:	f006 fbc8 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 8003342:	f7ff fcf5 	bl	8002d30 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003346:	4b4c      	ldr	r3, [pc, #304]	; (8003478 <HAL_FMC_MspInit+0x184>)
 8003348:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800334c:	4a4a      	ldr	r2, [pc, #296]	; (8003478 <HAL_FMC_MspInit+0x184>)
 800334e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003352:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003356:	4b48      	ldr	r3, [pc, #288]	; (8003478 <HAL_FMC_MspInit+0x184>)
 8003358:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800335c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
  PI4   ------> FMC_NBL2
  PI5   ------> FMC_NBL3
  PI6   ------> FMC_D28
  PI7   ------> FMC_D29
  */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8003364:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003378:	2303      	movs	r3, #3
 800337a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800337e:	230c      	movs	r3, #12
 8003380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003384:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003388:	4619      	mov	r1, r3
 800338a:	483c      	ldr	r0, [pc, #240]	; (800347c <HAL_FMC_MspInit+0x188>)
 800338c:	f005 f80a 	bl	80083a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003390:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8003394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033aa:	230c      	movs	r3, #12
 80033ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4832      	ldr	r0, [pc, #200]	; (8003480 <HAL_FMC_MspInit+0x18c>)
 80033b8:	f004 fff4 	bl	80083a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80033bc:	233f      	movs	r3, #63	; 0x3f
 80033be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ce:	2303      	movs	r3, #3
 80033d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033d4:	230c      	movs	r3, #12
 80033d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033de:	4619      	mov	r1, r3
 80033e0:	4828      	ldr	r0, [pc, #160]	; (8003484 <HAL_FMC_MspInit+0x190>)
 80033e2:	f004 ffdf 	bl	80083a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80033e6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80033ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fa:	2303      	movs	r3, #3
 80033fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003400:	230c      	movs	r3, #12
 8003402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003406:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800340a:	4619      	mov	r1, r3
 800340c:	481e      	ldr	r0, [pc, #120]	; (8003488 <HAL_FMC_MspInit+0x194>)
 800340e:	f004 ffc9 	bl	80083a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003412:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003416:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800342c:	230c      	movs	r3, #12
 800342e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003432:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003436:	4619      	mov	r1, r3
 8003438:	4814      	ldr	r0, [pc, #80]	; (800348c <HAL_FMC_MspInit+0x198>)
 800343a:	f004 ffb3 	bl	80083a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800343e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8003442:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003446:	2302      	movs	r3, #2
 8003448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003452:	2303      	movs	r3, #3
 8003454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003458:	230c      	movs	r3, #12
 800345a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800345e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003462:	4619      	mov	r1, r3
 8003464:	480a      	ldr	r0, [pc, #40]	; (8003490 <HAL_FMC_MspInit+0x19c>)
 8003466:	f004 ff9d 	bl	80083a4 <HAL_GPIO_Init>
 800346a:	e000      	b.n	800346e <HAL_FMC_MspInit+0x17a>
    return;
 800346c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800346e:	37d8      	adds	r7, #216	; 0xd8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	24001bc8 	.word	0x24001bc8
 8003478:	58024400 	.word	0x58024400
 800347c:	58022000 	.word	0x58022000
 8003480:	58021400 	.word	0x58021400
 8003484:	58021800 	.word	0x58021800
 8003488:	58021000 	.word	0x58021000
 800348c:	58021c00 	.word	0x58021c00
 8003490:	58020c00 	.word	0x58020c00

08003494 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800349c:	f7ff ff2a 	bl	80032f4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a6c      	ldr	r2, [pc, #432]	; (8003668 <HAL_SAI_MspInit+0x1c0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d166      	bne.n	8003588 <HAL_SAI_MspInit+0xe0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80034ba:	4b6c      	ldr	r3, [pc, #432]	; (800366c <HAL_SAI_MspInit+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_SAI_MspInit+0x48>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80034c2:	4b6b      	ldr	r3, [pc, #428]	; (8003670 <HAL_SAI_MspInit+0x1c8>)
 80034c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034c8:	4a69      	ldr	r2, [pc, #420]	; (8003670 <HAL_SAI_MspInit+0x1c8>)
 80034ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_SAI_MspInit+0x1c8>)
 80034d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 5, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2105      	movs	r1, #5
 80034e4:	2057      	movs	r0, #87	; 0x57
 80034e6:	f000 fddc 	bl	80040a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80034ea:	2057      	movs	r0, #87	; 0x57
 80034ec:	f000 fdf3 	bl	80040d6 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 80034f0:	4b5e      	ldr	r3, [pc, #376]	; (800366c <HAL_SAI_MspInit+0x1c4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	4a5d      	ldr	r2, [pc, #372]	; (800366c <HAL_SAI_MspInit+0x1c4>)
 80034f8:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80034fa:	2374      	movs	r3, #116	; 0x74
 80034fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003506:	2303      	movs	r3, #3
 8003508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800350a:	2306      	movs	r3, #6
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	4619      	mov	r1, r3
 8003514:	4857      	ldr	r0, [pc, #348]	; (8003674 <HAL_SAI_MspInit+0x1cc>)
 8003516:	f004 ff45 	bl	80083a4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream3;
 800351a:	4b57      	ldr	r3, [pc, #348]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 800351c:	4a57      	ldr	r2, [pc, #348]	; (800367c <HAL_SAI_MspInit+0x1d4>)
 800351e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8003520:	4b55      	ldr	r3, [pc, #340]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 8003522:	2257      	movs	r2, #87	; 0x57
 8003524:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800352c:	4b52      	ldr	r3, [pc, #328]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 800352e:	2200      	movs	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003532:	4b51      	ldr	r3, [pc, #324]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 8003534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003538:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800353a:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 800353c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003540:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003542:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 8003544:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003548:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 800354a:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 800354c:	2200      	movs	r2, #0
 800354e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8003550:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 8003552:	2200      	movs	r2, #0
 8003554:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003556:	4b48      	ldr	r3, [pc, #288]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 8003558:	2200      	movs	r2, #0
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800355c:	4846      	ldr	r0, [pc, #280]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 800355e:	f000 fe51 	bl	8004204 <HAL_DMA_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_SAI_MspInit+0xc4>
    {
      Error_Handler();
 8003568:	f7ff fbe2 	bl	8002d30 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a42      	ldr	r2, [pc, #264]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 8003570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003574:	4a40      	ldr	r2, [pc, #256]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a3e      	ldr	r2, [pc, #248]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 800357e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003582:	4a3d      	ldr	r2, [pc, #244]	; (8003678 <HAL_SAI_MspInit+0x1d0>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a3c      	ldr	r2, [pc, #240]	; (8003680 <HAL_SAI_MspInit+0x1d8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d166      	bne.n	8003660 <HAL_SAI_MspInit+0x1b8>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8003592:	4b36      	ldr	r3, [pc, #216]	; (800366c <HAL_SAI_MspInit+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d116      	bne.n	80035c8 <HAL_SAI_MspInit+0x120>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800359a:	4b35      	ldr	r3, [pc, #212]	; (8003670 <HAL_SAI_MspInit+0x1c8>)
 800359c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035a0:	4a33      	ldr	r2, [pc, #204]	; (8003670 <HAL_SAI_MspInit+0x1c8>)
 80035a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035aa:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_SAI_MspInit+0x1c8>)
 80035ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 5, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2105      	movs	r1, #5
 80035bc:	2057      	movs	r0, #87	; 0x57
 80035be:	f000 fd70 	bl	80040a2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80035c2:	2057      	movs	r0, #87	; 0x57
 80035c4:	f000 fd87 	bl	80040d6 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_SAI_MspInit+0x1c4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	4a27      	ldr	r2, [pc, #156]	; (800366c <HAL_SAI_MspInit+0x1c4>)
 80035d0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035d2:	2308      	movs	r3, #8
 80035d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80035e2:	2306      	movs	r3, #6
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	4821      	ldr	r0, [pc, #132]	; (8003674 <HAL_SAI_MspInit+0x1cc>)
 80035ee:	f004 fed9 	bl	80083a4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 80035f4:	4a24      	ldr	r2, [pc, #144]	; (8003688 <HAL_SAI_MspInit+0x1e0>)
 80035f6:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 80035fa:	2258      	movs	r2, #88	; 0x58
 80035fc:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035fe:	4b21      	ldr	r3, [pc, #132]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003604:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800360a:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 800360c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003610:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 8003614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003618:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 800361c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003620:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 8003624:	2200      	movs	r2, #0
 8003626:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8003628:	4b16      	ldr	r3, [pc, #88]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 800362a:	2200      	movs	r2, #0
 800362c:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 8003630:	2200      	movs	r2, #0
 8003632:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8003634:	4813      	ldr	r0, [pc, #76]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 8003636:	f000 fde5 	bl	8004204 <HAL_DMA_Init>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_SAI_MspInit+0x19c>
    {
      Error_Handler();
 8003640:	f7ff fb76 	bl	8002d30 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0f      	ldr	r2, [pc, #60]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 8003648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800364c:	4a0d      	ldr	r2, [pc, #52]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 8003656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_SAI_MspInit+0x1dc>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003660:	bf00      	nop
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40015804 	.word	0x40015804
 800366c:	24001bcc 	.word	0x24001bcc
 8003670:	58024400 	.word	0x58024400
 8003674:	58021000 	.word	0x58021000
 8003678:	24006268 	.word	0x24006268
 800367c:	40020458 	.word	0x40020458
 8003680:	40015824 	.word	0x40015824
 8003684:	2400636c 	.word	0x2400636c
 8003688:	40020470 	.word	0x40020470

0800368c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003690:	f006 fa00 	bl	8009a94 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003694:	e7fe      	b.n	8003694 <NMI_Handler+0x8>

08003696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800369a:	e7fe      	b.n	800369a <HardFault_Handler+0x4>

0800369c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036a0:	e7fe      	b.n	80036a0 <MemManage_Handler+0x4>

080036a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036a6:	e7fe      	b.n	80036a6 <BusFault_Handler+0x4>

080036a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036ac:	e7fe      	b.n	80036ac <UsageFault_Handler+0x4>

080036ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ae:	b480      	push	{r7}
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036c0:	f000 fbd4 	bl	8003e6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80036c4:	f00e fc02 	bl	8011ecc <xTaskGetSchedulerState>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80036ce:	f00e ffdb 	bl	8012688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <DMA1_Stream1_IRQHandler+0x10>)
 80036de:	f001 fe4f 	bl	8005380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	24006068 	.word	0x24006068

080036ec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80036f0:	4802      	ldr	r0, [pc, #8]	; (80036fc <DMA1_Stream2_IRQHandler+0x10>)
 80036f2:	f001 fe45 	bl	8005380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	240060e0 	.word	0x240060e0

08003700 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <DMA1_Stream3_IRQHandler+0x10>)
 8003706:	f001 fe3b 	bl	8005380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	240062e0 	.word	0x240062e0

08003714 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <DMA1_Stream4_IRQHandler+0x10>)
 800371a:	f001 fe31 	bl	8005380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	240061f0 	.word	0x240061f0

08003728 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800372c:	4802      	ldr	r0, [pc, #8]	; (8003738 <TIM3_IRQHandler+0x10>)
 800372e:	f009 fb26 	bl	800cd7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2400601c 	.word	0x2400601c

0800373c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003740:	4802      	ldr	r0, [pc, #8]	; (800374c <DMA2_Stream3_IRQHandler+0x10>)
 8003742:	f001 fe1d 	bl	8005380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	24006268 	.word	0x24006268

08003750 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8003754:	4802      	ldr	r0, [pc, #8]	; (8003760 <DMA2_Stream4_IRQHandler+0x10>)
 8003756:	f001 fe13 	bl	8005380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	2400636c 	.word	0x2400636c

08003764 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <ETH_IRQHandler+0x10>)
 800376a:	f003 fc49 	bl	8007000 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	240065c0 	.word	0x240065c0

08003778 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <ETH_WKUP_IRQHandler+0x10>)
 800377e:	f003 fc3f 	bl	8007000 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	240065c0 	.word	0x240065c0

0800378c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <I2C3_EV_IRQHandler+0x10>)
 8003792:	f005 f861 	bl	8008858 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	24005e5c 	.word	0x24005e5c

080037a0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <UART7_IRQHandler+0x10>)
 80037a6:	f009 ff67 	bl	800d678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	24005ea8 	.word	0x24005ea8

080037b4 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 80037b8:	4803      	ldr	r0, [pc, #12]	; (80037c8 <SAI1_IRQHandler+0x14>)
 80037ba:	f008 fed1 	bl	800c560 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 80037be:	4803      	ldr	r0, [pc, #12]	; (80037cc <SAI1_IRQHandler+0x18>)
 80037c0:	f008 fece 	bl	800c560 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	240063e4 	.word	0x240063e4
 80037cc:	24006158 	.word	0x24006158

080037d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
	return 1;
 80037d4:	2301      	movs	r3, #1
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <_kill>:

int _kill(int pid, int sig)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <_kill+0x20>)
 80037ec:	2216      	movs	r2, #22
 80037ee:	601a      	str	r2, [r3, #0]
	return -1;
 80037f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	2400931c 	.word	0x2400931c

08003804 <_exit>:

void _exit (int status)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800380c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ffe5 	bl	80037e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003816:	e7fe      	b.n	8003816 <_exit+0x12>

08003818 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e00a      	b.n	8003840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800382a:	f3af 8000 	nop.w
 800382e:	4601      	mov	r1, r0
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	60ba      	str	r2, [r7, #8]
 8003836:	b2ca      	uxtb	r2, r1
 8003838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	dbf0      	blt.n	800382a <_read+0x12>
	}

return len;
 8003848:	687b      	ldr	r3, [r7, #4]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e009      	b.n	8003878 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	60ba      	str	r2, [r7, #8]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	3301      	adds	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	dbf1      	blt.n	8003864 <_write+0x12>
	}
	return len;
 8003880:	687b      	ldr	r3, [r7, #4]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_close>:

int _close(int file)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
	return -1;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038b2:	605a      	str	r2, [r3, #4]
	return 0;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <_isatty>:

int _isatty(int file)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
	return 1;
 80038ca:	2301      	movs	r3, #1
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	return 0;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <_sbrk+0x5c>)
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <_sbrk+0x60>)
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <_sbrk+0x64>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <_sbrk+0x64>)
 8003912:	4a12      	ldr	r2, [pc, #72]	; (800395c <_sbrk+0x68>)
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <_sbrk+0x64>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d205      	bcs.n	8003930 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <_sbrk+0x6c>)
 8003926:	220c      	movs	r2, #12
 8003928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800392e:	e009      	b.n	8003944 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <_sbrk+0x64>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <_sbrk+0x64>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	4a06      	ldr	r2, [pc, #24]	; (8003958 <_sbrk+0x64>)
 8003940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	24080000 	.word	0x24080000
 8003954:	00000400 	.word	0x00000400
 8003958:	24001bd0 	.word	0x24001bd0
 800395c:	24009328 	.word	0x24009328
 8003960:	2400931c 	.word	0x2400931c

08003964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003968:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <SystemInit+0xe4>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	4a36      	ldr	r2, [pc, #216]	; (8003a48 <SystemInit+0xe4>)
 8003970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003978:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <SystemInit+0xe8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	2b06      	cmp	r3, #6
 8003982:	d807      	bhi.n	8003994 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003984:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <SystemInit+0xe8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 030f 	bic.w	r3, r3, #15
 800398c:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <SystemInit+0xe8>)
 800398e:	f043 0307 	orr.w	r3, r3, #7
 8003992:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003994:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <SystemInit+0xec>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <SystemInit+0xec>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039a0:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <SystemInit+0xec>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <SystemInit+0xec>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4929      	ldr	r1, [pc, #164]	; (8003a50 <SystemInit+0xec>)
 80039ac:	4b29      	ldr	r3, [pc, #164]	; (8003a54 <SystemInit+0xf0>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039b2:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <SystemInit+0xe8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039be:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <SystemInit+0xe8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 030f 	bic.w	r3, r3, #15
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <SystemInit+0xe8>)
 80039c8:	f043 0307 	orr.w	r3, r3, #7
 80039cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <SystemInit+0xec>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <SystemInit+0xec>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <SystemInit+0xec>)
 80039dc:	2200      	movs	r2, #0
 80039de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <SystemInit+0xec>)
 80039e2:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <SystemInit+0xf4>)
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <SystemInit+0xec>)
 80039e8:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <SystemInit+0xf8>)
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <SystemInit+0xec>)
 80039ee:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <SystemInit+0xfc>)
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039f2:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <SystemInit+0xec>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <SystemInit+0xec>)
 80039fa:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <SystemInit+0xfc>)
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <SystemInit+0xec>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <SystemInit+0xec>)
 8003a06:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <SystemInit+0xfc>)
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <SystemInit+0xec>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <SystemInit+0xec>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <SystemInit+0xec>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <SystemInit+0xec>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <SystemInit+0x100>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <SystemInit+0x104>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a2e:	d202      	bcs.n	8003a36 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <SystemInit+0x108>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a36:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <SystemInit+0x10c>)
 8003a38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003a3c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a3e:	bf00      	nop
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00
 8003a4c:	52002000 	.word	0x52002000
 8003a50:	58024400 	.word	0x58024400
 8003a54:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a58:	02020200 	.word	0x02020200
 8003a5c:	01ff0000 	.word	0x01ff0000
 8003a60:	01010280 	.word	0x01010280
 8003a64:	5c001000 	.word	0x5c001000
 8003a68:	ffff0000 	.word	0xffff0000
 8003a6c:	51008108 	.word	0x51008108
 8003a70:	52004000 	.word	0x52004000

08003a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a78:	f7ff ff74 	bl	8003964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a7e:	490d      	ldr	r1, [pc, #52]	; (8003ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a84:	e002      	b.n	8003a8c <LoopCopyDataInit>

08003a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a8a:	3304      	adds	r3, #4

08003a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a90:	d3f9      	bcc.n	8003a86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a94:	4c0a      	ldr	r4, [pc, #40]	; (8003ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a98:	e001      	b.n	8003a9e <LoopFillZerobss>

08003a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a9c:	3204      	adds	r2, #4

08003a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa0:	d3fb      	bcc.n	8003a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aa2:	f7fc fc41 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aa6:	f7fe fbf5 	bl	8002294 <main>
  bx  lr
 8003aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003aac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003ab0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ab4:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8003ab8:	08019efc 	.word	0x08019efc
  ldr r2, =_sbss
 8003abc:	24001950 	.word	0x24001950
  ldr r4, =_ebss
 8003ac0:	24009324 	.word	0x24009324

08003ac4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ac4:	e7fe      	b.n	8003ac4 <ADC3_IRQHandler>

08003ac6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <LAN8742_RegisterBusIO+0x28>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <LAN8742_RegisterBusIO+0x28>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <LAN8742_RegisterBusIO+0x28>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d102      	bne.n	8003af4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003af2:	e014      	b.n	8003b1e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d17c      	bne.n	8003c44 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e01c      	b.n	8003b9e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f107 0208 	add.w	r2, r7, #8
 8003b6c:	2112      	movs	r1, #18
 8003b6e:	6978      	ldr	r0, [r7, #20]
 8003b70:	4798      	blx	r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da03      	bge.n	8003b80 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003b78:	f06f 0304 	mvn.w	r3, #4
 8003b7c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003b7e:	e00b      	b.n	8003b98 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d105      	bne.n	8003b98 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
         break;
 8003b96:	e005      	b.n	8003ba4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b1f      	cmp	r3, #31
 8003ba2:	d9df      	bls.n	8003b64 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b1f      	cmp	r3, #31
 8003baa:	d902      	bls.n	8003bb2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003bac:	f06f 0302 	mvn.w	r3, #2
 8003bb0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d145      	bne.n	8003c44 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6810      	ldr	r0, [r2, #0]
 8003bc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4798      	blx	r3
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db37      	blt.n	8003c3e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6810      	ldr	r0, [r2, #0]
 8003bd6:	f107 0208 	add.w	r2, r7, #8
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4798      	blx	r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	db28      	blt.n	8003c36 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	4798      	blx	r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003bee:	e01c      	b.n	8003c2a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4798      	blx	r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c02:	d80e      	bhi.n	8003c22 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6810      	ldr	r0, [r2, #0]
 8003c0c:	f107 0208 	add.w	r2, r7, #8
 8003c10:	2100      	movs	r1, #0
 8003c12:	4798      	blx	r3
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da07      	bge.n	8003c2a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003c1a:	f06f 0304 	mvn.w	r3, #4
 8003c1e:	613b      	str	r3, [r7, #16]
                 break;
 8003c20:	e010      	b.n	8003c44 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003c22:	f06f 0301 	mvn.w	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
               break;
 8003c28:	e00c      	b.n	8003c44 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1dd      	bne.n	8003bf0 <LAN8742_Init+0xc6>
 8003c34:	e006      	b.n	8003c44 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003c36:	f06f 0304 	mvn.w	r3, #4
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e002      	b.n	8003c44 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003c3e:	f06f 0303 	mvn.w	r3, #3
 8003c42:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d112      	bne.n	8003c70 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	4798      	blx	r3
 8003c50:	4603      	mov	r3, r0
 8003c52:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003c54:	bf00      	nop
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	4798      	blx	r3
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c68:	d9f5      	bls.n	8003c56 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003c70:	693b      	ldr	r3, [r7, #16]
 }
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6810      	ldr	r0, [r2, #0]
 8003c8e:	f107 020c 	add.w	r2, r7, #12
 8003c92:	2101      	movs	r1, #1
 8003c94:	4798      	blx	r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da02      	bge.n	8003ca2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003c9c:	f06f 0304 	mvn.w	r3, #4
 8003ca0:	e06e      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6810      	ldr	r0, [r2, #0]
 8003caa:	f107 020c 	add.w	r2, r7, #12
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4798      	blx	r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	da02      	bge.n	8003cbe <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003cb8:	f06f 0304 	mvn.w	r3, #4
 8003cbc:	e060      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e059      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6810      	ldr	r0, [r2, #0]
 8003cd4:	f107 020c 	add.w	r2, r7, #12
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4798      	blx	r3
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	da02      	bge.n	8003ce8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003ce2:	f06f 0304 	mvn.w	r3, #4
 8003ce6:	e04b      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11b      	bne.n	8003d2a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <LAN8742_GetLinkState+0x90>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003d06:	2302      	movs	r3, #2
 8003d08:	e03a      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e033      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d22:	2304      	movs	r3, #4
 8003d24:	e02c      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d26:	2305      	movs	r3, #5
 8003d28:	e02a      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6810      	ldr	r0, [r2, #0]
 8003d32:	f107 020c 	add.w	r2, r7, #12
 8003d36:	211f      	movs	r1, #31
 8003d38:	4798      	blx	r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	da02      	bge.n	8003d46 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003d40:	f06f 0304 	mvn.w	r3, #4
 8003d44:	e01c      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003d50:	2306      	movs	r3, #6
 8003d52:	e015      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 031c 	and.w	r3, r3, #28
 8003d5a:	2b18      	cmp	r3, #24
 8003d5c:	d101      	bne.n	8003d62 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e00e      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 031c 	and.w	r3, r3, #28
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d101      	bne.n	8003d70 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e007      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 031c 	and.w	r3, r3, #28
 8003d76:	2b14      	cmp	r3, #20
 8003d78:	d101      	bne.n	8003d7e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	e000      	b.n	8003d80 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d7e:	2305      	movs	r3, #5
    }				
  }
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d8e:	2003      	movs	r0, #3
 8003d90:	f000 f97c 	bl	800408c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d94:	f005 fca8 	bl	80096e8 <HAL_RCC_GetSysClockFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_Init+0x68>)
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	4913      	ldr	r1, [pc, #76]	; (8003df4 <HAL_Init+0x6c>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
 8003db0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <HAL_Init+0x68>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <HAL_Init+0x6c>)
 8003dbc:	5cd3      	ldrb	r3, [r2, r3]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <HAL_Init+0x70>)
 8003dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <HAL_Init+0x74>)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dd2:	200f      	movs	r0, #15
 8003dd4:	f000 f814 	bl	8003e00 <HAL_InitTick>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e002      	b.n	8003de8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003de2:	f7fe ffab 	bl	8002d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	58024400 	.word	0x58024400
 8003df4:	08019ce4 	.word	0x08019ce4
 8003df8:	24000068 	.word	0x24000068
 8003dfc:	24000064 	.word	0x24000064

08003e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_InitTick+0x60>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e021      	b.n	8003e58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e14:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <HAL_InitTick+0x64>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <HAL_InitTick+0x60>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f961 	bl	80040f2 <HAL_SYSTICK_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e00e      	b.n	8003e58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d80a      	bhi.n	8003e56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e40:	2200      	movs	r2, #0
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e48:	f000 f92b 	bl	80040a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e4c:	4a06      	ldr	r2, [pc, #24]	; (8003e68 <HAL_InitTick+0x68>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	24000070 	.word	0x24000070
 8003e64:	24000064 	.word	0x24000064
 8003e68:	2400006c 	.word	0x2400006c

08003e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_IncTick+0x20>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_IncTick+0x24>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <HAL_IncTick+0x24>)
 8003e7e:	6013      	str	r3, [r2, #0]
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	24000070 	.word	0x24000070
 8003e90:	2400647c 	.word	0x2400647c

08003e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return uwTick;
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_GetTick+0x14>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	2400647c 	.word	0x2400647c

08003eac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_GetREVID+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	5c001000 	.word	0x5c001000

08003ec4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ed4:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	58000400 	.word	0x58000400

08003eec <__NVIC_SetPriorityGrouping>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <__NVIC_SetPriorityGrouping+0x40>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <__NVIC_SetPriorityGrouping+0x44>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f1a:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <__NVIC_SetPriorityGrouping+0x40>)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	60d3      	str	r3, [r2, #12]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	e000ed00 	.word	0xe000ed00
 8003f30:	05fa0000 	.word	0x05fa0000

08003f34 <__NVIC_GetPriorityGrouping>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <__NVIC_GetPriorityGrouping+0x18>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	f003 0307 	and.w	r3, r3, #7
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <__NVIC_EnableIRQ>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	db0b      	blt.n	8003f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	f003 021f 	and.w	r2, r3, #31
 8003f68:	4907      	ldr	r1, [pc, #28]	; (8003f88 <__NVIC_EnableIRQ+0x38>)
 8003f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	2001      	movs	r0, #1
 8003f72:	fa00 f202 	lsl.w	r2, r0, r2
 8003f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	e000e100 	.word	0xe000e100

08003f8c <__NVIC_SetPriority>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	6039      	str	r1, [r7, #0]
 8003f96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	db0a      	blt.n	8003fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	490c      	ldr	r1, [pc, #48]	; (8003fd8 <__NVIC_SetPriority+0x4c>)
 8003fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003faa:	0112      	lsls	r2, r2, #4
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	440b      	add	r3, r1
 8003fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fb4:	e00a      	b.n	8003fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4908      	ldr	r1, [pc, #32]	; (8003fdc <__NVIC_SetPriority+0x50>)
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	3b04      	subs	r3, #4
 8003fc4:	0112      	lsls	r2, r2, #4
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	440b      	add	r3, r1
 8003fca:	761a      	strb	r2, [r3, #24]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000e100 	.word	0xe000e100
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <NVIC_EncodePriority>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f1c3 0307 	rsb	r3, r3, #7
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	bf28      	it	cs
 8003ffe:	2304      	movcs	r3, #4
 8004000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3304      	adds	r3, #4
 8004006:	2b06      	cmp	r3, #6
 8004008:	d902      	bls.n	8004010 <NVIC_EncodePriority+0x30>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3b03      	subs	r3, #3
 800400e:	e000      	b.n	8004012 <NVIC_EncodePriority+0x32>
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	401a      	ands	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004028:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	fa01 f303 	lsl.w	r3, r1, r3
 8004032:	43d9      	mvns	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004038:	4313      	orrs	r3, r2
}
 800403a:	4618      	mov	r0, r3
 800403c:	3724      	adds	r7, #36	; 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3b01      	subs	r3, #1
 8004054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004058:	d301      	bcc.n	800405e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800405a:	2301      	movs	r3, #1
 800405c:	e00f      	b.n	800407e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <SysTick_Config+0x40>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3b01      	subs	r3, #1
 8004064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004066:	210f      	movs	r1, #15
 8004068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800406c:	f7ff ff8e 	bl	8003f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <SysTick_Config+0x40>)
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <SysTick_Config+0x40>)
 8004078:	2207      	movs	r2, #7
 800407a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	e000e010 	.word	0xe000e010

0800408c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ff29 	bl	8003eec <__NVIC_SetPriorityGrouping>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b086      	sub	sp, #24
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	4603      	mov	r3, r0
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
 80040ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040b0:	f7ff ff40 	bl	8003f34 <__NVIC_GetPriorityGrouping>
 80040b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	6978      	ldr	r0, [r7, #20]
 80040bc:	f7ff ff90 	bl	8003fe0 <NVIC_EncodePriority>
 80040c0:	4602      	mov	r2, r0
 80040c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff5f 	bl	8003f8c <__NVIC_SetPriority>
}
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff33 	bl	8003f50 <__NVIC_EnableIRQ>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ffa4 	bl	8004048 <SysTick_Config>
 8004100:	4603      	mov	r3, r0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004110:	f3bf 8f5f 	dmb	sy
}
 8004114:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <HAL_MPU_Disable+0x28>)
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	4a06      	ldr	r2, [pc, #24]	; (8004134 <HAL_MPU_Disable+0x28>)
 800411c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004120:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_MPU_Disable+0x2c>)
 8004124:	2200      	movs	r2, #0
 8004126:	605a      	str	r2, [r3, #4]
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	e000ed00 	.word	0xe000ed00
 8004138:	e000ed90 	.word	0xe000ed90

0800413c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004144:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <HAL_MPU_Enable+0x38>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_MPU_Enable+0x3c>)
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_MPU_Enable+0x3c>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004158:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800415a:	f3bf 8f4f 	dsb	sy
}
 800415e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004160:	f3bf 8f6f 	isb	sy
}
 8004164:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	e000ed90 	.word	0xe000ed90
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	785a      	ldrb	r2, [r3, #1]
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_MPU_ConfigRegion+0x84>)
 800418a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d029      	beq.n	80041e8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004194:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <HAL_MPU_ConfigRegion+0x84>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7b1b      	ldrb	r3, [r3, #12]
 80041a0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7adb      	ldrb	r3, [r3, #11]
 80041a6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7a9b      	ldrb	r3, [r3, #10]
 80041ae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80041b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	7b5b      	ldrb	r3, [r3, #13]
 80041b6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80041b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7b9b      	ldrb	r3, [r3, #14]
 80041be:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80041c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7bdb      	ldrb	r3, [r3, #15]
 80041c6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80041c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	7a5b      	ldrb	r3, [r3, #9]
 80041ce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80041d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7a1b      	ldrb	r3, [r3, #8]
 80041d6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80041d8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041e0:	4a07      	ldr	r2, [pc, #28]	; (8004200 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041e2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041e4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80041e6:	e005      	b.n	80041f4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_MPU_ConfigRegion+0x84>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <HAL_MPU_ConfigRegion+0x84>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	611a      	str	r2, [r3, #16]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	e000ed90 	.word	0xe000ed90

08004204 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800420c:	f7ff fe42 	bl	8003e94 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e316      	b.n	800484a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a66      	ldr	r2, [pc, #408]	; (80043bc <HAL_DMA_Init+0x1b8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d04a      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a65      	ldr	r2, [pc, #404]	; (80043c0 <HAL_DMA_Init+0x1bc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d045      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a63      	ldr	r2, [pc, #396]	; (80043c4 <HAL_DMA_Init+0x1c0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d040      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a62      	ldr	r2, [pc, #392]	; (80043c8 <HAL_DMA_Init+0x1c4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d03b      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a60      	ldr	r2, [pc, #384]	; (80043cc <HAL_DMA_Init+0x1c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d036      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a5f      	ldr	r2, [pc, #380]	; (80043d0 <HAL_DMA_Init+0x1cc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d031      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a5d      	ldr	r2, [pc, #372]	; (80043d4 <HAL_DMA_Init+0x1d0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d02c      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a5c      	ldr	r2, [pc, #368]	; (80043d8 <HAL_DMA_Init+0x1d4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d027      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a5a      	ldr	r2, [pc, #360]	; (80043dc <HAL_DMA_Init+0x1d8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d022      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a59      	ldr	r2, [pc, #356]	; (80043e0 <HAL_DMA_Init+0x1dc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d01d      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a57      	ldr	r2, [pc, #348]	; (80043e4 <HAL_DMA_Init+0x1e0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a56      	ldr	r2, [pc, #344]	; (80043e8 <HAL_DMA_Init+0x1e4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a54      	ldr	r2, [pc, #336]	; (80043ec <HAL_DMA_Init+0x1e8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a53      	ldr	r2, [pc, #332]	; (80043f0 <HAL_DMA_Init+0x1ec>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a51      	ldr	r2, [pc, #324]	; (80043f4 <HAL_DMA_Init+0x1f0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_DMA_Init+0xb8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a50      	ldr	r2, [pc, #320]	; (80043f8 <HAL_DMA_Init+0x1f4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d101      	bne.n	80042c0 <HAL_DMA_Init+0xbc>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_DMA_Init+0xbe>
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 813b 	beq.w	800453e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a37      	ldr	r2, [pc, #220]	; (80043bc <HAL_DMA_Init+0x1b8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d04a      	beq.n	8004378 <HAL_DMA_Init+0x174>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a36      	ldr	r2, [pc, #216]	; (80043c0 <HAL_DMA_Init+0x1bc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d045      	beq.n	8004378 <HAL_DMA_Init+0x174>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a34      	ldr	r2, [pc, #208]	; (80043c4 <HAL_DMA_Init+0x1c0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d040      	beq.n	8004378 <HAL_DMA_Init+0x174>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a33      	ldr	r2, [pc, #204]	; (80043c8 <HAL_DMA_Init+0x1c4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d03b      	beq.n	8004378 <HAL_DMA_Init+0x174>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a31      	ldr	r2, [pc, #196]	; (80043cc <HAL_DMA_Init+0x1c8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d036      	beq.n	8004378 <HAL_DMA_Init+0x174>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a30      	ldr	r2, [pc, #192]	; (80043d0 <HAL_DMA_Init+0x1cc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d031      	beq.n	8004378 <HAL_DMA_Init+0x174>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2e      	ldr	r2, [pc, #184]	; (80043d4 <HAL_DMA_Init+0x1d0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d02c      	beq.n	8004378 <HAL_DMA_Init+0x174>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a2d      	ldr	r2, [pc, #180]	; (80043d8 <HAL_DMA_Init+0x1d4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d027      	beq.n	8004378 <HAL_DMA_Init+0x174>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <HAL_DMA_Init+0x1d8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d022      	beq.n	8004378 <HAL_DMA_Init+0x174>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <HAL_DMA_Init+0x1dc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d01d      	beq.n	8004378 <HAL_DMA_Init+0x174>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a28      	ldr	r2, [pc, #160]	; (80043e4 <HAL_DMA_Init+0x1e0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d018      	beq.n	8004378 <HAL_DMA_Init+0x174>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a27      	ldr	r2, [pc, #156]	; (80043e8 <HAL_DMA_Init+0x1e4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <HAL_DMA_Init+0x174>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a25      	ldr	r2, [pc, #148]	; (80043ec <HAL_DMA_Init+0x1e8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <HAL_DMA_Init+0x174>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <HAL_DMA_Init+0x1ec>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_DMA_Init+0x174>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <HAL_DMA_Init+0x1f0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_DMA_Init+0x174>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <HAL_DMA_Init+0x1f4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d108      	bne.n	800438a <HAL_DMA_Init+0x186>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e007      	b.n	800439a <HAL_DMA_Init+0x196>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800439a:	e02f      	b.n	80043fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800439c:	f7ff fd7a 	bl	8003e94 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d928      	bls.n	80043fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2203      	movs	r2, #3
 80043b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e246      	b.n	800484a <HAL_DMA_Init+0x646>
 80043bc:	40020010 	.word	0x40020010
 80043c0:	40020028 	.word	0x40020028
 80043c4:	40020040 	.word	0x40020040
 80043c8:	40020058 	.word	0x40020058
 80043cc:	40020070 	.word	0x40020070
 80043d0:	40020088 	.word	0x40020088
 80043d4:	400200a0 	.word	0x400200a0
 80043d8:	400200b8 	.word	0x400200b8
 80043dc:	40020410 	.word	0x40020410
 80043e0:	40020428 	.word	0x40020428
 80043e4:	40020440 	.word	0x40020440
 80043e8:	40020458 	.word	0x40020458
 80043ec:	40020470 	.word	0x40020470
 80043f0:	40020488 	.word	0x40020488
 80043f4:	400204a0 	.word	0x400204a0
 80043f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1c8      	bne.n	800439c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4b83      	ldr	r3, [pc, #524]	; (8004624 <HAL_DMA_Init+0x420>)
 8004416:	4013      	ands	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004422:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800443a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b04      	cmp	r3, #4
 800444e:	d107      	bne.n	8004460 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	4313      	orrs	r3, r2
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004460:	4b71      	ldr	r3, [pc, #452]	; (8004628 <HAL_DMA_Init+0x424>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4b71      	ldr	r3, [pc, #452]	; (800462c <HAL_DMA_Init+0x428>)
 8004466:	4013      	ands	r3, r2
 8004468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446c:	d328      	bcc.n	80044c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b28      	cmp	r3, #40	; 0x28
 8004474:	d903      	bls.n	800447e <HAL_DMA_Init+0x27a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b2e      	cmp	r3, #46	; 0x2e
 800447c:	d917      	bls.n	80044ae <HAL_DMA_Init+0x2aa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b3e      	cmp	r3, #62	; 0x3e
 8004484:	d903      	bls.n	800448e <HAL_DMA_Init+0x28a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b42      	cmp	r3, #66	; 0x42
 800448c:	d90f      	bls.n	80044ae <HAL_DMA_Init+0x2aa>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b46      	cmp	r3, #70	; 0x46
 8004494:	d903      	bls.n	800449e <HAL_DMA_Init+0x29a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b48      	cmp	r3, #72	; 0x48
 800449c:	d907      	bls.n	80044ae <HAL_DMA_Init+0x2aa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b4e      	cmp	r3, #78	; 0x4e
 80044a4:	d905      	bls.n	80044b2 <HAL_DMA_Init+0x2ae>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b52      	cmp	r3, #82	; 0x52
 80044ac:	d801      	bhi.n	80044b2 <HAL_DMA_Init+0x2ae>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_DMA_Init+0x2b0>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0307 	bic.w	r3, r3, #7
 80044d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d117      	bne.n	800451a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f001 ff1b 	bl	8006338 <DMA_CheckFifoParam>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2240      	movs	r2, #64	; 0x40
 800450c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e197      	b.n	800484a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f001 fe56 	bl	80061d4 <DMA_CalcBaseAndBitshift>
 8004528:	4603      	mov	r3, r0
 800452a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	223f      	movs	r2, #63	; 0x3f
 8004536:	409a      	lsls	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	e0cd      	b.n	80046da <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a3b      	ldr	r2, [pc, #236]	; (8004630 <HAL_DMA_Init+0x42c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d022      	beq.n	800458e <HAL_DMA_Init+0x38a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a39      	ldr	r2, [pc, #228]	; (8004634 <HAL_DMA_Init+0x430>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01d      	beq.n	800458e <HAL_DMA_Init+0x38a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a38      	ldr	r2, [pc, #224]	; (8004638 <HAL_DMA_Init+0x434>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <HAL_DMA_Init+0x38a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a36      	ldr	r2, [pc, #216]	; (800463c <HAL_DMA_Init+0x438>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_DMA_Init+0x38a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a35      	ldr	r2, [pc, #212]	; (8004640 <HAL_DMA_Init+0x43c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_DMA_Init+0x38a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a33      	ldr	r2, [pc, #204]	; (8004644 <HAL_DMA_Init+0x440>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_DMA_Init+0x38a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a32      	ldr	r2, [pc, #200]	; (8004648 <HAL_DMA_Init+0x444>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_DMA_Init+0x38a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a30      	ldr	r2, [pc, #192]	; (800464c <HAL_DMA_Init+0x448>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d101      	bne.n	8004592 <HAL_DMA_Init+0x38e>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_DMA_Init+0x390>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8097 	beq.w	80046c8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a24      	ldr	r2, [pc, #144]	; (8004630 <HAL_DMA_Init+0x42c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d021      	beq.n	80045e8 <HAL_DMA_Init+0x3e4>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a22      	ldr	r2, [pc, #136]	; (8004634 <HAL_DMA_Init+0x430>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01c      	beq.n	80045e8 <HAL_DMA_Init+0x3e4>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a21      	ldr	r2, [pc, #132]	; (8004638 <HAL_DMA_Init+0x434>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d017      	beq.n	80045e8 <HAL_DMA_Init+0x3e4>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1f      	ldr	r2, [pc, #124]	; (800463c <HAL_DMA_Init+0x438>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d012      	beq.n	80045e8 <HAL_DMA_Init+0x3e4>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1e      	ldr	r2, [pc, #120]	; (8004640 <HAL_DMA_Init+0x43c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00d      	beq.n	80045e8 <HAL_DMA_Init+0x3e4>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <HAL_DMA_Init+0x440>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d008      	beq.n	80045e8 <HAL_DMA_Init+0x3e4>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <HAL_DMA_Init+0x444>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <HAL_DMA_Init+0x3e4>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a19      	ldr	r2, [pc, #100]	; (800464c <HAL_DMA_Init+0x448>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4b12      	ldr	r3, [pc, #72]	; (8004650 <HAL_DMA_Init+0x44c>)
 8004606:	4013      	ands	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d020      	beq.n	8004654 <HAL_DMA_Init+0x450>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d102      	bne.n	8004620 <HAL_DMA_Init+0x41c>
 800461a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800461e:	e01a      	b.n	8004656 <HAL_DMA_Init+0x452>
 8004620:	2300      	movs	r3, #0
 8004622:	e018      	b.n	8004656 <HAL_DMA_Init+0x452>
 8004624:	fe10803f 	.word	0xfe10803f
 8004628:	5c001000 	.word	0x5c001000
 800462c:	ffff0000 	.word	0xffff0000
 8004630:	58025408 	.word	0x58025408
 8004634:	5802541c 	.word	0x5802541c
 8004638:	58025430 	.word	0x58025430
 800463c:	58025444 	.word	0x58025444
 8004640:	58025458 	.word	0x58025458
 8004644:	5802546c 	.word	0x5802546c
 8004648:	58025480 	.word	0x58025480
 800464c:	58025494 	.word	0x58025494
 8004650:	fffe000f 	.word	0xfffe000f
 8004654:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68d2      	ldr	r2, [r2, #12]
 800465a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800465c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004664:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800466c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004674:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800467c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004684:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	4b6e      	ldr	r3, [pc, #440]	; (8004854 <HAL_DMA_Init+0x650>)
 800469c:	4413      	add	r3, r2
 800469e:	4a6e      	ldr	r2, [pc, #440]	; (8004858 <HAL_DMA_Init+0x654>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	091b      	lsrs	r3, r3, #4
 80046a6:	009a      	lsls	r2, r3, #2
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f001 fd91 	bl	80061d4 <DMA_CalcBaseAndBitshift>
 80046b2:	4603      	mov	r3, r0
 80046b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2201      	movs	r2, #1
 80046c0:	409a      	lsls	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	e008      	b.n	80046da <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2240      	movs	r2, #64	; 0x40
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2203      	movs	r2, #3
 80046d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0b7      	b.n	800484a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5f      	ldr	r2, [pc, #380]	; (800485c <HAL_DMA_Init+0x658>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d072      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5d      	ldr	r2, [pc, #372]	; (8004860 <HAL_DMA_Init+0x65c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d06d      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5c      	ldr	r2, [pc, #368]	; (8004864 <HAL_DMA_Init+0x660>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d068      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5a      	ldr	r2, [pc, #360]	; (8004868 <HAL_DMA_Init+0x664>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d063      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a59      	ldr	r2, [pc, #356]	; (800486c <HAL_DMA_Init+0x668>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d05e      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a57      	ldr	r2, [pc, #348]	; (8004870 <HAL_DMA_Init+0x66c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d059      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a56      	ldr	r2, [pc, #344]	; (8004874 <HAL_DMA_Init+0x670>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d054      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a54      	ldr	r2, [pc, #336]	; (8004878 <HAL_DMA_Init+0x674>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d04f      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a53      	ldr	r2, [pc, #332]	; (800487c <HAL_DMA_Init+0x678>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d04a      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a51      	ldr	r2, [pc, #324]	; (8004880 <HAL_DMA_Init+0x67c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d045      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a50      	ldr	r2, [pc, #320]	; (8004884 <HAL_DMA_Init+0x680>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d040      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a4e      	ldr	r2, [pc, #312]	; (8004888 <HAL_DMA_Init+0x684>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d03b      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4d      	ldr	r2, [pc, #308]	; (800488c <HAL_DMA_Init+0x688>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d036      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a4b      	ldr	r2, [pc, #300]	; (8004890 <HAL_DMA_Init+0x68c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d031      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a4a      	ldr	r2, [pc, #296]	; (8004894 <HAL_DMA_Init+0x690>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d02c      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a48      	ldr	r2, [pc, #288]	; (8004898 <HAL_DMA_Init+0x694>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d027      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a47      	ldr	r2, [pc, #284]	; (800489c <HAL_DMA_Init+0x698>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d022      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a45      	ldr	r2, [pc, #276]	; (80048a0 <HAL_DMA_Init+0x69c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01d      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a44      	ldr	r2, [pc, #272]	; (80048a4 <HAL_DMA_Init+0x6a0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d018      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a42      	ldr	r2, [pc, #264]	; (80048a8 <HAL_DMA_Init+0x6a4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a41      	ldr	r2, [pc, #260]	; (80048ac <HAL_DMA_Init+0x6a8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00e      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a3f      	ldr	r2, [pc, #252]	; (80048b0 <HAL_DMA_Init+0x6ac>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a3e      	ldr	r2, [pc, #248]	; (80048b4 <HAL_DMA_Init+0x6b0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_DMA_Init+0x5c6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a3c      	ldr	r2, [pc, #240]	; (80048b8 <HAL_DMA_Init+0x6b4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <HAL_DMA_Init+0x5ca>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_DMA_Init+0x5cc>
 80047ce:	2300      	movs	r3, #0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d032      	beq.n	800483a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 fe2b 	bl	8006430 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d102      	bne.n	80047e8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d010      	beq.n	8004828 <HAL_DMA_Init+0x624>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b08      	cmp	r3, #8
 800480c:	d80c      	bhi.n	8004828 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 fea8 	bl	8006564 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	e008      	b.n	800483a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	a7fdabf8 	.word	0xa7fdabf8
 8004858:	cccccccd 	.word	0xcccccccd
 800485c:	40020010 	.word	0x40020010
 8004860:	40020028 	.word	0x40020028
 8004864:	40020040 	.word	0x40020040
 8004868:	40020058 	.word	0x40020058
 800486c:	40020070 	.word	0x40020070
 8004870:	40020088 	.word	0x40020088
 8004874:	400200a0 	.word	0x400200a0
 8004878:	400200b8 	.word	0x400200b8
 800487c:	40020410 	.word	0x40020410
 8004880:	40020428 	.word	0x40020428
 8004884:	40020440 	.word	0x40020440
 8004888:	40020458 	.word	0x40020458
 800488c:	40020470 	.word	0x40020470
 8004890:	40020488 	.word	0x40020488
 8004894:	400204a0 	.word	0x400204a0
 8004898:	400204b8 	.word	0x400204b8
 800489c:	58025408 	.word	0x58025408
 80048a0:	5802541c 	.word	0x5802541c
 80048a4:	58025430 	.word	0x58025430
 80048a8:	58025444 	.word	0x58025444
 80048ac:	58025458 	.word	0x58025458
 80048b0:	5802546c 	.word	0x5802546c
 80048b4:	58025480 	.word	0x58025480
 80048b8:	58025494 	.word	0x58025494

080048bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80048c4:	f7ff fae6 	bl	8003e94 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e2dc      	b.n	8004e8e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d008      	beq.n	80048f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2280      	movs	r2, #128	; 0x80
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e2cd      	b.n	8004e8e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a76      	ldr	r2, [pc, #472]	; (8004ad0 <HAL_DMA_Abort+0x214>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d04a      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a74      	ldr	r2, [pc, #464]	; (8004ad4 <HAL_DMA_Abort+0x218>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d045      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a73      	ldr	r2, [pc, #460]	; (8004ad8 <HAL_DMA_Abort+0x21c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d040      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a71      	ldr	r2, [pc, #452]	; (8004adc <HAL_DMA_Abort+0x220>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d03b      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a70      	ldr	r2, [pc, #448]	; (8004ae0 <HAL_DMA_Abort+0x224>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d036      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_DMA_Abort+0x228>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d031      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a6d      	ldr	r2, [pc, #436]	; (8004ae8 <HAL_DMA_Abort+0x22c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d02c      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a6b      	ldr	r2, [pc, #428]	; (8004aec <HAL_DMA_Abort+0x230>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d027      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6a      	ldr	r2, [pc, #424]	; (8004af0 <HAL_DMA_Abort+0x234>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d022      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a68      	ldr	r2, [pc, #416]	; (8004af4 <HAL_DMA_Abort+0x238>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01d      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a67      	ldr	r2, [pc, #412]	; (8004af8 <HAL_DMA_Abort+0x23c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d018      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a65      	ldr	r2, [pc, #404]	; (8004afc <HAL_DMA_Abort+0x240>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a64      	ldr	r2, [pc, #400]	; (8004b00 <HAL_DMA_Abort+0x244>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00e      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a62      	ldr	r2, [pc, #392]	; (8004b04 <HAL_DMA_Abort+0x248>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d009      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a61      	ldr	r2, [pc, #388]	; (8004b08 <HAL_DMA_Abort+0x24c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d004      	beq.n	8004992 <HAL_DMA_Abort+0xd6>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5f      	ldr	r2, [pc, #380]	; (8004b0c <HAL_DMA_Abort+0x250>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d101      	bne.n	8004996 <HAL_DMA_Abort+0xda>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_DMA_Abort+0xdc>
 8004996:	2300      	movs	r3, #0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d013      	beq.n	80049c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 021e 	bic.w	r2, r2, #30
 80049aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e00a      	b.n	80049da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 020e 	bic.w	r2, r2, #14
 80049d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3c      	ldr	r2, [pc, #240]	; (8004ad0 <HAL_DMA_Abort+0x214>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d072      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3a      	ldr	r2, [pc, #232]	; (8004ad4 <HAL_DMA_Abort+0x218>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d06d      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a39      	ldr	r2, [pc, #228]	; (8004ad8 <HAL_DMA_Abort+0x21c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d068      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a37      	ldr	r2, [pc, #220]	; (8004adc <HAL_DMA_Abort+0x220>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d063      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a36      	ldr	r2, [pc, #216]	; (8004ae0 <HAL_DMA_Abort+0x224>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d05e      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a34      	ldr	r2, [pc, #208]	; (8004ae4 <HAL_DMA_Abort+0x228>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d059      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a33      	ldr	r2, [pc, #204]	; (8004ae8 <HAL_DMA_Abort+0x22c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d054      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a31      	ldr	r2, [pc, #196]	; (8004aec <HAL_DMA_Abort+0x230>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d04f      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a30      	ldr	r2, [pc, #192]	; (8004af0 <HAL_DMA_Abort+0x234>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d04a      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a2e      	ldr	r2, [pc, #184]	; (8004af4 <HAL_DMA_Abort+0x238>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d045      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2d      	ldr	r2, [pc, #180]	; (8004af8 <HAL_DMA_Abort+0x23c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d040      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2b      	ldr	r2, [pc, #172]	; (8004afc <HAL_DMA_Abort+0x240>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d03b      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <HAL_DMA_Abort+0x244>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d036      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a28      	ldr	r2, [pc, #160]	; (8004b04 <HAL_DMA_Abort+0x248>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d031      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a27      	ldr	r2, [pc, #156]	; (8004b08 <HAL_DMA_Abort+0x24c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d02c      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <HAL_DMA_Abort+0x250>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d027      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <HAL_DMA_Abort+0x254>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d022      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <HAL_DMA_Abort+0x258>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01d      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a21      	ldr	r2, [pc, #132]	; (8004b18 <HAL_DMA_Abort+0x25c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d018      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_DMA_Abort+0x260>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_DMA_Abort+0x264>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <HAL_DMA_Abort+0x268>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_DMA_Abort+0x26c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_DMA_Abort+0x20e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_DMA_Abort+0x270>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d132      	bne.n	8004b30 <HAL_DMA_Abort+0x274>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e031      	b.n	8004b32 <HAL_DMA_Abort+0x276>
 8004ace:	bf00      	nop
 8004ad0:	40020010 	.word	0x40020010
 8004ad4:	40020028 	.word	0x40020028
 8004ad8:	40020040 	.word	0x40020040
 8004adc:	40020058 	.word	0x40020058
 8004ae0:	40020070 	.word	0x40020070
 8004ae4:	40020088 	.word	0x40020088
 8004ae8:	400200a0 	.word	0x400200a0
 8004aec:	400200b8 	.word	0x400200b8
 8004af0:	40020410 	.word	0x40020410
 8004af4:	40020428 	.word	0x40020428
 8004af8:	40020440 	.word	0x40020440
 8004afc:	40020458 	.word	0x40020458
 8004b00:	40020470 	.word	0x40020470
 8004b04:	40020488 	.word	0x40020488
 8004b08:	400204a0 	.word	0x400204a0
 8004b0c:	400204b8 	.word	0x400204b8
 8004b10:	58025408 	.word	0x58025408
 8004b14:	5802541c 	.word	0x5802541c
 8004b18:	58025430 	.word	0x58025430
 8004b1c:	58025444 	.word	0x58025444
 8004b20:	58025458 	.word	0x58025458
 8004b24:	5802546c 	.word	0x5802546c
 8004b28:	58025480 	.word	0x58025480
 8004b2c:	58025494 	.word	0x58025494
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6d      	ldr	r2, [pc, #436]	; (8004d00 <HAL_DMA_Abort+0x444>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d04a      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a6b      	ldr	r2, [pc, #428]	; (8004d04 <HAL_DMA_Abort+0x448>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d045      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a6a      	ldr	r2, [pc, #424]	; (8004d08 <HAL_DMA_Abort+0x44c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d040      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a68      	ldr	r2, [pc, #416]	; (8004d0c <HAL_DMA_Abort+0x450>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d03b      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a67      	ldr	r2, [pc, #412]	; (8004d10 <HAL_DMA_Abort+0x454>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d036      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a65      	ldr	r2, [pc, #404]	; (8004d14 <HAL_DMA_Abort+0x458>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d031      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a64      	ldr	r2, [pc, #400]	; (8004d18 <HAL_DMA_Abort+0x45c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d02c      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a62      	ldr	r2, [pc, #392]	; (8004d1c <HAL_DMA_Abort+0x460>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d027      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a61      	ldr	r2, [pc, #388]	; (8004d20 <HAL_DMA_Abort+0x464>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d022      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5f      	ldr	r2, [pc, #380]	; (8004d24 <HAL_DMA_Abort+0x468>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d01d      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a5e      	ldr	r2, [pc, #376]	; (8004d28 <HAL_DMA_Abort+0x46c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d018      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a5c      	ldr	r2, [pc, #368]	; (8004d2c <HAL_DMA_Abort+0x470>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a5b      	ldr	r2, [pc, #364]	; (8004d30 <HAL_DMA_Abort+0x474>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a59      	ldr	r2, [pc, #356]	; (8004d34 <HAL_DMA_Abort+0x478>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a58      	ldr	r2, [pc, #352]	; (8004d38 <HAL_DMA_Abort+0x47c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_DMA_Abort+0x32a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a56      	ldr	r2, [pc, #344]	; (8004d3c <HAL_DMA_Abort+0x480>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d108      	bne.n	8004bf8 <HAL_DMA_Abort+0x33c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e007      	b.n	8004c08 <HAL_DMA_Abort+0x34c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c08:	e013      	b.n	8004c32 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c0a:	f7ff f943 	bl	8003e94 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d90c      	bls.n	8004c32 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2203      	movs	r2, #3
 8004c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e12d      	b.n	8004e8e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e5      	bne.n	8004c0a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <HAL_DMA_Abort+0x444>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d04a      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2d      	ldr	r2, [pc, #180]	; (8004d04 <HAL_DMA_Abort+0x448>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d045      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2c      	ldr	r2, [pc, #176]	; (8004d08 <HAL_DMA_Abort+0x44c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d040      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <HAL_DMA_Abort+0x450>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d03b      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <HAL_DMA_Abort+0x454>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d036      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <HAL_DMA_Abort+0x458>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d031      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a26      	ldr	r2, [pc, #152]	; (8004d18 <HAL_DMA_Abort+0x45c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d02c      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <HAL_DMA_Abort+0x460>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d027      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a23      	ldr	r2, [pc, #140]	; (8004d20 <HAL_DMA_Abort+0x464>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <HAL_DMA_Abort+0x468>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <HAL_DMA_Abort+0x46c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <HAL_DMA_Abort+0x470>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1d      	ldr	r2, [pc, #116]	; (8004d30 <HAL_DMA_Abort+0x474>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_DMA_Abort+0x478>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <HAL_DMA_Abort+0x47c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_DMA_Abort+0x422>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a18      	ldr	r2, [pc, #96]	; (8004d3c <HAL_DMA_Abort+0x480>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d101      	bne.n	8004ce2 <HAL_DMA_Abort+0x426>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_DMA_Abort+0x428>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02b      	beq.n	8004d40 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	223f      	movs	r2, #63	; 0x3f
 8004cf8:	409a      	lsls	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	609a      	str	r2, [r3, #8]
 8004cfe:	e02a      	b.n	8004d56 <HAL_DMA_Abort+0x49a>
 8004d00:	40020010 	.word	0x40020010
 8004d04:	40020028 	.word	0x40020028
 8004d08:	40020040 	.word	0x40020040
 8004d0c:	40020058 	.word	0x40020058
 8004d10:	40020070 	.word	0x40020070
 8004d14:	40020088 	.word	0x40020088
 8004d18:	400200a0 	.word	0x400200a0
 8004d1c:	400200b8 	.word	0x400200b8
 8004d20:	40020410 	.word	0x40020410
 8004d24:	40020428 	.word	0x40020428
 8004d28:	40020440 	.word	0x40020440
 8004d2c:	40020458 	.word	0x40020458
 8004d30:	40020470 	.word	0x40020470
 8004d34:	40020488 	.word	0x40020488
 8004d38:	400204a0 	.word	0x400204a0
 8004d3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	2201      	movs	r2, #1
 8004d50:	409a      	lsls	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a4f      	ldr	r2, [pc, #316]	; (8004e98 <HAL_DMA_Abort+0x5dc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d072      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a4d      	ldr	r2, [pc, #308]	; (8004e9c <HAL_DMA_Abort+0x5e0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d06d      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a4c      	ldr	r2, [pc, #304]	; (8004ea0 <HAL_DMA_Abort+0x5e4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d068      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a4a      	ldr	r2, [pc, #296]	; (8004ea4 <HAL_DMA_Abort+0x5e8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d063      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a49      	ldr	r2, [pc, #292]	; (8004ea8 <HAL_DMA_Abort+0x5ec>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d05e      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a47      	ldr	r2, [pc, #284]	; (8004eac <HAL_DMA_Abort+0x5f0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d059      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a46      	ldr	r2, [pc, #280]	; (8004eb0 <HAL_DMA_Abort+0x5f4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d054      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a44      	ldr	r2, [pc, #272]	; (8004eb4 <HAL_DMA_Abort+0x5f8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d04f      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a43      	ldr	r2, [pc, #268]	; (8004eb8 <HAL_DMA_Abort+0x5fc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d04a      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a41      	ldr	r2, [pc, #260]	; (8004ebc <HAL_DMA_Abort+0x600>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d045      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a40      	ldr	r2, [pc, #256]	; (8004ec0 <HAL_DMA_Abort+0x604>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d040      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a3e      	ldr	r2, [pc, #248]	; (8004ec4 <HAL_DMA_Abort+0x608>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d03b      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a3d      	ldr	r2, [pc, #244]	; (8004ec8 <HAL_DMA_Abort+0x60c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d036      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <HAL_DMA_Abort+0x610>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d031      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3a      	ldr	r2, [pc, #232]	; (8004ed0 <HAL_DMA_Abort+0x614>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d02c      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a38      	ldr	r2, [pc, #224]	; (8004ed4 <HAL_DMA_Abort+0x618>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d027      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a37      	ldr	r2, [pc, #220]	; (8004ed8 <HAL_DMA_Abort+0x61c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d022      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a35      	ldr	r2, [pc, #212]	; (8004edc <HAL_DMA_Abort+0x620>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01d      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a34      	ldr	r2, [pc, #208]	; (8004ee0 <HAL_DMA_Abort+0x624>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d018      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a32      	ldr	r2, [pc, #200]	; (8004ee4 <HAL_DMA_Abort+0x628>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a31      	ldr	r2, [pc, #196]	; (8004ee8 <HAL_DMA_Abort+0x62c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00e      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <HAL_DMA_Abort+0x630>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d009      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2e      	ldr	r2, [pc, #184]	; (8004ef0 <HAL_DMA_Abort+0x634>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_DMA_Abort+0x58a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2c      	ldr	r2, [pc, #176]	; (8004ef4 <HAL_DMA_Abort+0x638>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_DMA_Abort+0x58e>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <HAL_DMA_Abort+0x590>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d015      	beq.n	8004e7c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e58:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e70:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e7a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40020010 	.word	0x40020010
 8004e9c:	40020028 	.word	0x40020028
 8004ea0:	40020040 	.word	0x40020040
 8004ea4:	40020058 	.word	0x40020058
 8004ea8:	40020070 	.word	0x40020070
 8004eac:	40020088 	.word	0x40020088
 8004eb0:	400200a0 	.word	0x400200a0
 8004eb4:	400200b8 	.word	0x400200b8
 8004eb8:	40020410 	.word	0x40020410
 8004ebc:	40020428 	.word	0x40020428
 8004ec0:	40020440 	.word	0x40020440
 8004ec4:	40020458 	.word	0x40020458
 8004ec8:	40020470 	.word	0x40020470
 8004ecc:	40020488 	.word	0x40020488
 8004ed0:	400204a0 	.word	0x400204a0
 8004ed4:	400204b8 	.word	0x400204b8
 8004ed8:	58025408 	.word	0x58025408
 8004edc:	5802541c 	.word	0x5802541c
 8004ee0:	58025430 	.word	0x58025430
 8004ee4:	58025444 	.word	0x58025444
 8004ee8:	58025458 	.word	0x58025458
 8004eec:	5802546c 	.word	0x5802546c
 8004ef0:	58025480 	.word	0x58025480
 8004ef4:	58025494 	.word	0x58025494

08004ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e205      	b.n	8005316 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d004      	beq.n	8004f20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e1fa      	b.n	8005316 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a8c      	ldr	r2, [pc, #560]	; (8005158 <HAL_DMA_Abort_IT+0x260>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d04a      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a8b      	ldr	r2, [pc, #556]	; (800515c <HAL_DMA_Abort_IT+0x264>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d045      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a89      	ldr	r2, [pc, #548]	; (8005160 <HAL_DMA_Abort_IT+0x268>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d040      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a88      	ldr	r2, [pc, #544]	; (8005164 <HAL_DMA_Abort_IT+0x26c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d03b      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a86      	ldr	r2, [pc, #536]	; (8005168 <HAL_DMA_Abort_IT+0x270>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d036      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a85      	ldr	r2, [pc, #532]	; (800516c <HAL_DMA_Abort_IT+0x274>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d031      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a83      	ldr	r2, [pc, #524]	; (8005170 <HAL_DMA_Abort_IT+0x278>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d02c      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a82      	ldr	r2, [pc, #520]	; (8005174 <HAL_DMA_Abort_IT+0x27c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d027      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a80      	ldr	r2, [pc, #512]	; (8005178 <HAL_DMA_Abort_IT+0x280>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d022      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a7f      	ldr	r2, [pc, #508]	; (800517c <HAL_DMA_Abort_IT+0x284>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d01d      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a7d      	ldr	r2, [pc, #500]	; (8005180 <HAL_DMA_Abort_IT+0x288>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d018      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a7c      	ldr	r2, [pc, #496]	; (8005184 <HAL_DMA_Abort_IT+0x28c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a7a      	ldr	r2, [pc, #488]	; (8005188 <HAL_DMA_Abort_IT+0x290>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a79      	ldr	r2, [pc, #484]	; (800518c <HAL_DMA_Abort_IT+0x294>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a77      	ldr	r2, [pc, #476]	; (8005190 <HAL_DMA_Abort_IT+0x298>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc8>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a76      	ldr	r2, [pc, #472]	; (8005194 <HAL_DMA_Abort_IT+0x29c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d101      	bne.n	8004fc4 <HAL_DMA_Abort_IT+0xcc>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_DMA_Abort_IT+0xce>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d065      	beq.n	8005096 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2204      	movs	r2, #4
 8004fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a60      	ldr	r2, [pc, #384]	; (8005158 <HAL_DMA_Abort_IT+0x260>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d04a      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5e      	ldr	r2, [pc, #376]	; (800515c <HAL_DMA_Abort_IT+0x264>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d045      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a5d      	ldr	r2, [pc, #372]	; (8005160 <HAL_DMA_Abort_IT+0x268>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d040      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a5b      	ldr	r2, [pc, #364]	; (8005164 <HAL_DMA_Abort_IT+0x26c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d03b      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a5a      	ldr	r2, [pc, #360]	; (8005168 <HAL_DMA_Abort_IT+0x270>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d036      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a58      	ldr	r2, [pc, #352]	; (800516c <HAL_DMA_Abort_IT+0x274>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d031      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a57      	ldr	r2, [pc, #348]	; (8005170 <HAL_DMA_Abort_IT+0x278>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d02c      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a55      	ldr	r2, [pc, #340]	; (8005174 <HAL_DMA_Abort_IT+0x27c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d027      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a54      	ldr	r2, [pc, #336]	; (8005178 <HAL_DMA_Abort_IT+0x280>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d022      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a52      	ldr	r2, [pc, #328]	; (800517c <HAL_DMA_Abort_IT+0x284>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01d      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a51      	ldr	r2, [pc, #324]	; (8005180 <HAL_DMA_Abort_IT+0x288>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a4f      	ldr	r2, [pc, #316]	; (8005184 <HAL_DMA_Abort_IT+0x28c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a4e      	ldr	r2, [pc, #312]	; (8005188 <HAL_DMA_Abort_IT+0x290>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a4c      	ldr	r2, [pc, #304]	; (800518c <HAL_DMA_Abort_IT+0x294>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a4b      	ldr	r2, [pc, #300]	; (8005190 <HAL_DMA_Abort_IT+0x298>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_DMA_Abort_IT+0x17a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a49      	ldr	r2, [pc, #292]	; (8005194 <HAL_DMA_Abort_IT+0x29c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d108      	bne.n	8005084 <HAL_DMA_Abort_IT+0x18c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0201 	bic.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e147      	b.n	8005314 <HAL_DMA_Abort_IT+0x41c>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0201 	bic.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e13e      	b.n	8005314 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 020e 	bic.w	r2, r2, #14
 80050a4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <HAL_DMA_Abort_IT+0x260>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d04a      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a29      	ldr	r2, [pc, #164]	; (800515c <HAL_DMA_Abort_IT+0x264>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d045      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a28      	ldr	r2, [pc, #160]	; (8005160 <HAL_DMA_Abort_IT+0x268>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d040      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <HAL_DMA_Abort_IT+0x26c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d03b      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a25      	ldr	r2, [pc, #148]	; (8005168 <HAL_DMA_Abort_IT+0x270>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d036      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a23      	ldr	r2, [pc, #140]	; (800516c <HAL_DMA_Abort_IT+0x274>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d031      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a22      	ldr	r2, [pc, #136]	; (8005170 <HAL_DMA_Abort_IT+0x278>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d02c      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a20      	ldr	r2, [pc, #128]	; (8005174 <HAL_DMA_Abort_IT+0x27c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d027      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <HAL_DMA_Abort_IT+0x280>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d022      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1d      	ldr	r2, [pc, #116]	; (800517c <HAL_DMA_Abort_IT+0x284>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01d      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <HAL_DMA_Abort_IT+0x288>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d018      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1a      	ldr	r2, [pc, #104]	; (8005184 <HAL_DMA_Abort_IT+0x28c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a19      	ldr	r2, [pc, #100]	; (8005188 <HAL_DMA_Abort_IT+0x290>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a17      	ldr	r2, [pc, #92]	; (800518c <HAL_DMA_Abort_IT+0x294>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a16      	ldr	r2, [pc, #88]	; (8005190 <HAL_DMA_Abort_IT+0x298>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_DMA_Abort_IT+0x24e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a14      	ldr	r2, [pc, #80]	; (8005194 <HAL_DMA_Abort_IT+0x29c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d128      	bne.n	8005198 <HAL_DMA_Abort_IT+0x2a0>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e027      	b.n	80051a8 <HAL_DMA_Abort_IT+0x2b0>
 8005158:	40020010 	.word	0x40020010
 800515c:	40020028 	.word	0x40020028
 8005160:	40020040 	.word	0x40020040
 8005164:	40020058 	.word	0x40020058
 8005168:	40020070 	.word	0x40020070
 800516c:	40020088 	.word	0x40020088
 8005170:	400200a0 	.word	0x400200a0
 8005174:	400200b8 	.word	0x400200b8
 8005178:	40020410 	.word	0x40020410
 800517c:	40020428 	.word	0x40020428
 8005180:	40020440 	.word	0x40020440
 8005184:	40020458 	.word	0x40020458
 8005188:	40020470 	.word	0x40020470
 800518c:	40020488 	.word	0x40020488
 8005190:	400204a0 	.word	0x400204a0
 8005194:	400204b8 	.word	0x400204b8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a5c      	ldr	r2, [pc, #368]	; (8005320 <HAL_DMA_Abort_IT+0x428>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d072      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a5b      	ldr	r2, [pc, #364]	; (8005324 <HAL_DMA_Abort_IT+0x42c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d06d      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a59      	ldr	r2, [pc, #356]	; (8005328 <HAL_DMA_Abort_IT+0x430>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d068      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a58      	ldr	r2, [pc, #352]	; (800532c <HAL_DMA_Abort_IT+0x434>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d063      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a56      	ldr	r2, [pc, #344]	; (8005330 <HAL_DMA_Abort_IT+0x438>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d05e      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a55      	ldr	r2, [pc, #340]	; (8005334 <HAL_DMA_Abort_IT+0x43c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d059      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a53      	ldr	r2, [pc, #332]	; (8005338 <HAL_DMA_Abort_IT+0x440>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d054      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a52      	ldr	r2, [pc, #328]	; (800533c <HAL_DMA_Abort_IT+0x444>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d04f      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a50      	ldr	r2, [pc, #320]	; (8005340 <HAL_DMA_Abort_IT+0x448>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d04a      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a4f      	ldr	r2, [pc, #316]	; (8005344 <HAL_DMA_Abort_IT+0x44c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d045      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a4d      	ldr	r2, [pc, #308]	; (8005348 <HAL_DMA_Abort_IT+0x450>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d040      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a4c      	ldr	r2, [pc, #304]	; (800534c <HAL_DMA_Abort_IT+0x454>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d03b      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a4a      	ldr	r2, [pc, #296]	; (8005350 <HAL_DMA_Abort_IT+0x458>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d036      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a49      	ldr	r2, [pc, #292]	; (8005354 <HAL_DMA_Abort_IT+0x45c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d031      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a47      	ldr	r2, [pc, #284]	; (8005358 <HAL_DMA_Abort_IT+0x460>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d02c      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a46      	ldr	r2, [pc, #280]	; (800535c <HAL_DMA_Abort_IT+0x464>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d027      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a44      	ldr	r2, [pc, #272]	; (8005360 <HAL_DMA_Abort_IT+0x468>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d022      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a43      	ldr	r2, [pc, #268]	; (8005364 <HAL_DMA_Abort_IT+0x46c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d01d      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a41      	ldr	r2, [pc, #260]	; (8005368 <HAL_DMA_Abort_IT+0x470>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a40      	ldr	r2, [pc, #256]	; (800536c <HAL_DMA_Abort_IT+0x474>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a3e      	ldr	r2, [pc, #248]	; (8005370 <HAL_DMA_Abort_IT+0x478>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a3d      	ldr	r2, [pc, #244]	; (8005374 <HAL_DMA_Abort_IT+0x47c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3b      	ldr	r2, [pc, #236]	; (8005378 <HAL_DMA_Abort_IT+0x480>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_DMA_Abort_IT+0x3a0>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a3a      	ldr	r2, [pc, #232]	; (800537c <HAL_DMA_Abort_IT+0x484>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_DMA_Abort_IT+0x3a4>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_DMA_Abort_IT+0x3a6>
 800529c:	2300      	movs	r3, #0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d028      	beq.n	80052f4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	2201      	movs	r2, #1
 80052c2:	409a      	lsls	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40020010 	.word	0x40020010
 8005324:	40020028 	.word	0x40020028
 8005328:	40020040 	.word	0x40020040
 800532c:	40020058 	.word	0x40020058
 8005330:	40020070 	.word	0x40020070
 8005334:	40020088 	.word	0x40020088
 8005338:	400200a0 	.word	0x400200a0
 800533c:	400200b8 	.word	0x400200b8
 8005340:	40020410 	.word	0x40020410
 8005344:	40020428 	.word	0x40020428
 8005348:	40020440 	.word	0x40020440
 800534c:	40020458 	.word	0x40020458
 8005350:	40020470 	.word	0x40020470
 8005354:	40020488 	.word	0x40020488
 8005358:	400204a0 	.word	0x400204a0
 800535c:	400204b8 	.word	0x400204b8
 8005360:	58025408 	.word	0x58025408
 8005364:	5802541c 	.word	0x5802541c
 8005368:	58025430 	.word	0x58025430
 800536c:	58025444 	.word	0x58025444
 8005370:	58025458 	.word	0x58025458
 8005374:	5802546c 	.word	0x5802546c
 8005378:	58025480 	.word	0x58025480
 800537c:	58025494 	.word	0x58025494

08005380 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800538c:	4b67      	ldr	r3, [pc, #412]	; (800552c <HAL_DMA_IRQHandler+0x1ac>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a67      	ldr	r2, [pc, #412]	; (8005530 <HAL_DMA_IRQHandler+0x1b0>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	0a9b      	lsrs	r3, r3, #10
 8005398:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a5f      	ldr	r2, [pc, #380]	; (8005534 <HAL_DMA_IRQHandler+0x1b4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d04a      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5d      	ldr	r2, [pc, #372]	; (8005538 <HAL_DMA_IRQHandler+0x1b8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d045      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a5c      	ldr	r2, [pc, #368]	; (800553c <HAL_DMA_IRQHandler+0x1bc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d040      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a5a      	ldr	r2, [pc, #360]	; (8005540 <HAL_DMA_IRQHandler+0x1c0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d03b      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a59      	ldr	r2, [pc, #356]	; (8005544 <HAL_DMA_IRQHandler+0x1c4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d036      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a57      	ldr	r2, [pc, #348]	; (8005548 <HAL_DMA_IRQHandler+0x1c8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d031      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a56      	ldr	r2, [pc, #344]	; (800554c <HAL_DMA_IRQHandler+0x1cc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d02c      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a54      	ldr	r2, [pc, #336]	; (8005550 <HAL_DMA_IRQHandler+0x1d0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d027      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a53      	ldr	r2, [pc, #332]	; (8005554 <HAL_DMA_IRQHandler+0x1d4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a51      	ldr	r2, [pc, #324]	; (8005558 <HAL_DMA_IRQHandler+0x1d8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a50      	ldr	r2, [pc, #320]	; (800555c <HAL_DMA_IRQHandler+0x1dc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a4e      	ldr	r2, [pc, #312]	; (8005560 <HAL_DMA_IRQHandler+0x1e0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a4d      	ldr	r2, [pc, #308]	; (8005564 <HAL_DMA_IRQHandler+0x1e4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a4b      	ldr	r2, [pc, #300]	; (8005568 <HAL_DMA_IRQHandler+0x1e8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a4a      	ldr	r2, [pc, #296]	; (800556c <HAL_DMA_IRQHandler+0x1ec>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_DMA_IRQHandler+0xd2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a48      	ldr	r2, [pc, #288]	; (8005570 <HAL_DMA_IRQHandler+0x1f0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <HAL_DMA_IRQHandler+0xd6>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <HAL_DMA_IRQHandler+0xd8>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 842b 	beq.w	8005cb4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2208      	movs	r2, #8
 8005468:	409a      	lsls	r2, r3
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	4013      	ands	r3, r2
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80a2 	beq.w	80055b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2e      	ldr	r2, [pc, #184]	; (8005534 <HAL_DMA_IRQHandler+0x1b4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d04a      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a2d      	ldr	r2, [pc, #180]	; (8005538 <HAL_DMA_IRQHandler+0x1b8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d045      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a2b      	ldr	r2, [pc, #172]	; (800553c <HAL_DMA_IRQHandler+0x1bc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d040      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2a      	ldr	r2, [pc, #168]	; (8005540 <HAL_DMA_IRQHandler+0x1c0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d03b      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a28      	ldr	r2, [pc, #160]	; (8005544 <HAL_DMA_IRQHandler+0x1c4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d036      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a27      	ldr	r2, [pc, #156]	; (8005548 <HAL_DMA_IRQHandler+0x1c8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d031      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a25      	ldr	r2, [pc, #148]	; (800554c <HAL_DMA_IRQHandler+0x1cc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d02c      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a24      	ldr	r2, [pc, #144]	; (8005550 <HAL_DMA_IRQHandler+0x1d0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d027      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a22      	ldr	r2, [pc, #136]	; (8005554 <HAL_DMA_IRQHandler+0x1d4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d022      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <HAL_DMA_IRQHandler+0x1d8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d01d      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1f      	ldr	r2, [pc, #124]	; (800555c <HAL_DMA_IRQHandler+0x1dc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1e      	ldr	r2, [pc, #120]	; (8005560 <HAL_DMA_IRQHandler+0x1e0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d013      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <HAL_DMA_IRQHandler+0x1e4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <HAL_DMA_IRQHandler+0x1e8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a19      	ldr	r2, [pc, #100]	; (800556c <HAL_DMA_IRQHandler+0x1ec>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_DMA_IRQHandler+0x194>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a18      	ldr	r2, [pc, #96]	; (8005570 <HAL_DMA_IRQHandler+0x1f0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d12f      	bne.n	8005574 <HAL_DMA_IRQHandler+0x1f4>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf14      	ite	ne
 8005522:	2301      	movne	r3, #1
 8005524:	2300      	moveq	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	e02e      	b.n	8005588 <HAL_DMA_IRQHandler+0x208>
 800552a:	bf00      	nop
 800552c:	24000064 	.word	0x24000064
 8005530:	1b4e81b5 	.word	0x1b4e81b5
 8005534:	40020010 	.word	0x40020010
 8005538:	40020028 	.word	0x40020028
 800553c:	40020040 	.word	0x40020040
 8005540:	40020058 	.word	0x40020058
 8005544:	40020070 	.word	0x40020070
 8005548:	40020088 	.word	0x40020088
 800554c:	400200a0 	.word	0x400200a0
 8005550:	400200b8 	.word	0x400200b8
 8005554:	40020410 	.word	0x40020410
 8005558:	40020428 	.word	0x40020428
 800555c:	40020440 	.word	0x40020440
 8005560:	40020458 	.word	0x40020458
 8005564:	40020470 	.word	0x40020470
 8005568:	40020488 	.word	0x40020488
 800556c:	400204a0 	.word	0x400204a0
 8005570:	400204b8 	.word	0x400204b8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d015      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0204 	bic.w	r2, r2, #4
 800559a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	2208      	movs	r2, #8
 80055a6:	409a      	lsls	r2, r3
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	f043 0201 	orr.w	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	fa22 f303 	lsr.w	r3, r2, r3
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d06e      	beq.n	80056ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a69      	ldr	r2, [pc, #420]	; (8005778 <HAL_DMA_IRQHandler+0x3f8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d04a      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a67      	ldr	r2, [pc, #412]	; (800577c <HAL_DMA_IRQHandler+0x3fc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d045      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a66      	ldr	r2, [pc, #408]	; (8005780 <HAL_DMA_IRQHandler+0x400>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d040      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a64      	ldr	r2, [pc, #400]	; (8005784 <HAL_DMA_IRQHandler+0x404>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d03b      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a63      	ldr	r2, [pc, #396]	; (8005788 <HAL_DMA_IRQHandler+0x408>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d036      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a61      	ldr	r2, [pc, #388]	; (800578c <HAL_DMA_IRQHandler+0x40c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d031      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a60      	ldr	r2, [pc, #384]	; (8005790 <HAL_DMA_IRQHandler+0x410>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d02c      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a5e      	ldr	r2, [pc, #376]	; (8005794 <HAL_DMA_IRQHandler+0x414>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d027      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a5d      	ldr	r2, [pc, #372]	; (8005798 <HAL_DMA_IRQHandler+0x418>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d022      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5b      	ldr	r2, [pc, #364]	; (800579c <HAL_DMA_IRQHandler+0x41c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01d      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a5a      	ldr	r2, [pc, #360]	; (80057a0 <HAL_DMA_IRQHandler+0x420>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d018      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a58      	ldr	r2, [pc, #352]	; (80057a4 <HAL_DMA_IRQHandler+0x424>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a57      	ldr	r2, [pc, #348]	; (80057a8 <HAL_DMA_IRQHandler+0x428>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a55      	ldr	r2, [pc, #340]	; (80057ac <HAL_DMA_IRQHandler+0x42c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d009      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a54      	ldr	r2, [pc, #336]	; (80057b0 <HAL_DMA_IRQHandler+0x430>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_DMA_IRQHandler+0x2ee>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a52      	ldr	r2, [pc, #328]	; (80057b4 <HAL_DMA_IRQHandler+0x434>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d10a      	bne.n	8005684 <HAL_DMA_IRQHandler+0x304>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e003      	b.n	800568c <HAL_DMA_IRQHandler+0x30c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00d      	beq.n	80056ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2201      	movs	r2, #1
 800569a:	409a      	lsls	r2, r3
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a4:	f043 0202 	orr.w	r2, r3, #2
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	2204      	movs	r2, #4
 80056b6:	409a      	lsls	r2, r3
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 808f 	beq.w	80057e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a2c      	ldr	r2, [pc, #176]	; (8005778 <HAL_DMA_IRQHandler+0x3f8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d04a      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a2a      	ldr	r2, [pc, #168]	; (800577c <HAL_DMA_IRQHandler+0x3fc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d045      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a29      	ldr	r2, [pc, #164]	; (8005780 <HAL_DMA_IRQHandler+0x400>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d040      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a27      	ldr	r2, [pc, #156]	; (8005784 <HAL_DMA_IRQHandler+0x404>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d03b      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a26      	ldr	r2, [pc, #152]	; (8005788 <HAL_DMA_IRQHandler+0x408>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d036      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a24      	ldr	r2, [pc, #144]	; (800578c <HAL_DMA_IRQHandler+0x40c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d031      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a23      	ldr	r2, [pc, #140]	; (8005790 <HAL_DMA_IRQHandler+0x410>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d02c      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a21      	ldr	r2, [pc, #132]	; (8005794 <HAL_DMA_IRQHandler+0x414>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d027      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a20      	ldr	r2, [pc, #128]	; (8005798 <HAL_DMA_IRQHandler+0x418>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d022      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1e      	ldr	r2, [pc, #120]	; (800579c <HAL_DMA_IRQHandler+0x41c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01d      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <HAL_DMA_IRQHandler+0x420>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d018      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <HAL_DMA_IRQHandler+0x424>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <HAL_DMA_IRQHandler+0x428>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a18      	ldr	r2, [pc, #96]	; (80057ac <HAL_DMA_IRQHandler+0x42c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <HAL_DMA_IRQHandler+0x430>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_DMA_IRQHandler+0x3e2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <HAL_DMA_IRQHandler+0x434>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d12a      	bne.n	80057b8 <HAL_DMA_IRQHandler+0x438>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e023      	b.n	80057c0 <HAL_DMA_IRQHandler+0x440>
 8005778:	40020010 	.word	0x40020010
 800577c:	40020028 	.word	0x40020028
 8005780:	40020040 	.word	0x40020040
 8005784:	40020058 	.word	0x40020058
 8005788:	40020070 	.word	0x40020070
 800578c:	40020088 	.word	0x40020088
 8005790:	400200a0 	.word	0x400200a0
 8005794:	400200b8 	.word	0x400200b8
 8005798:	40020410 	.word	0x40020410
 800579c:	40020428 	.word	0x40020428
 80057a0:	40020440 	.word	0x40020440
 80057a4:	40020458 	.word	0x40020458
 80057a8:	40020470 	.word	0x40020470
 80057ac:	40020488 	.word	0x40020488
 80057b0:	400204a0 	.word	0x400204a0
 80057b4:	400204b8 	.word	0x400204b8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00d      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	2204      	movs	r2, #4
 80057ce:	409a      	lsls	r2, r3
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	f043 0204 	orr.w	r2, r3, #4
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2210      	movs	r2, #16
 80057ea:	409a      	lsls	r2, r3
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80a6 	beq.w	8005942 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a85      	ldr	r2, [pc, #532]	; (8005a10 <HAL_DMA_IRQHandler+0x690>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d04a      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a83      	ldr	r2, [pc, #524]	; (8005a14 <HAL_DMA_IRQHandler+0x694>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d045      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a82      	ldr	r2, [pc, #520]	; (8005a18 <HAL_DMA_IRQHandler+0x698>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d040      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a80      	ldr	r2, [pc, #512]	; (8005a1c <HAL_DMA_IRQHandler+0x69c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d03b      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a7f      	ldr	r2, [pc, #508]	; (8005a20 <HAL_DMA_IRQHandler+0x6a0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d036      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a7d      	ldr	r2, [pc, #500]	; (8005a24 <HAL_DMA_IRQHandler+0x6a4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d031      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a7c      	ldr	r2, [pc, #496]	; (8005a28 <HAL_DMA_IRQHandler+0x6a8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d02c      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a7a      	ldr	r2, [pc, #488]	; (8005a2c <HAL_DMA_IRQHandler+0x6ac>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d027      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a79      	ldr	r2, [pc, #484]	; (8005a30 <HAL_DMA_IRQHandler+0x6b0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d022      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a77      	ldr	r2, [pc, #476]	; (8005a34 <HAL_DMA_IRQHandler+0x6b4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01d      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a76      	ldr	r2, [pc, #472]	; (8005a38 <HAL_DMA_IRQHandler+0x6b8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d018      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a74      	ldr	r2, [pc, #464]	; (8005a3c <HAL_DMA_IRQHandler+0x6bc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a73      	ldr	r2, [pc, #460]	; (8005a40 <HAL_DMA_IRQHandler+0x6c0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a71      	ldr	r2, [pc, #452]	; (8005a44 <HAL_DMA_IRQHandler+0x6c4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a70      	ldr	r2, [pc, #448]	; (8005a48 <HAL_DMA_IRQHandler+0x6c8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_DMA_IRQHandler+0x516>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a6e      	ldr	r2, [pc, #440]	; (8005a4c <HAL_DMA_IRQHandler+0x6cc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d10a      	bne.n	80058ac <HAL_DMA_IRQHandler+0x52c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	e009      	b.n	80058c0 <HAL_DMA_IRQHandler+0x540>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bf14      	ite	ne
 80058ba:	2301      	movne	r3, #1
 80058bc:	2300      	moveq	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d03e      	beq.n	8005942 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	2210      	movs	r2, #16
 80058ce:	409a      	lsls	r2, r3
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d018      	beq.n	8005914 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d108      	bne.n	8005902 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d024      	beq.n	8005942 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
 8005900:	e01f      	b.n	8005942 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01b      	beq.n	8005942 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
 8005912:	e016      	b.n	8005942 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d107      	bne.n	8005932 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0208 	bic.w	r2, r2, #8
 8005930:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2220      	movs	r2, #32
 800594c:	409a      	lsls	r2, r3
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8110 	beq.w	8005b78 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2c      	ldr	r2, [pc, #176]	; (8005a10 <HAL_DMA_IRQHandler+0x690>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d04a      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2b      	ldr	r2, [pc, #172]	; (8005a14 <HAL_DMA_IRQHandler+0x694>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d045      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a29      	ldr	r2, [pc, #164]	; (8005a18 <HAL_DMA_IRQHandler+0x698>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d040      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a28      	ldr	r2, [pc, #160]	; (8005a1c <HAL_DMA_IRQHandler+0x69c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d03b      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a26      	ldr	r2, [pc, #152]	; (8005a20 <HAL_DMA_IRQHandler+0x6a0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d036      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <HAL_DMA_IRQHandler+0x6a4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d031      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a23      	ldr	r2, [pc, #140]	; (8005a28 <HAL_DMA_IRQHandler+0x6a8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d02c      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <HAL_DMA_IRQHandler+0x6ac>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d027      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <HAL_DMA_IRQHandler+0x6b0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d022      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1f      	ldr	r2, [pc, #124]	; (8005a34 <HAL_DMA_IRQHandler+0x6b4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d01d      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <HAL_DMA_IRQHandler+0x6b8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d018      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1c      	ldr	r2, [pc, #112]	; (8005a3c <HAL_DMA_IRQHandler+0x6bc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d013      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <HAL_DMA_IRQHandler+0x6c0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00e      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <HAL_DMA_IRQHandler+0x6c4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d009      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <HAL_DMA_IRQHandler+0x6c8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d004      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x678>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <HAL_DMA_IRQHandler+0x6cc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d12b      	bne.n	8005a50 <HAL_DMA_IRQHandler+0x6d0>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bf14      	ite	ne
 8005a06:	2301      	movne	r3, #1
 8005a08:	2300      	moveq	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	e02a      	b.n	8005a64 <HAL_DMA_IRQHandler+0x6e4>
 8005a0e:	bf00      	nop
 8005a10:	40020010 	.word	0x40020010
 8005a14:	40020028 	.word	0x40020028
 8005a18:	40020040 	.word	0x40020040
 8005a1c:	40020058 	.word	0x40020058
 8005a20:	40020070 	.word	0x40020070
 8005a24:	40020088 	.word	0x40020088
 8005a28:	400200a0 	.word	0x400200a0
 8005a2c:	400200b8 	.word	0x400200b8
 8005a30:	40020410 	.word	0x40020410
 8005a34:	40020428 	.word	0x40020428
 8005a38:	40020440 	.word	0x40020440
 8005a3c:	40020458 	.word	0x40020458
 8005a40:	40020470 	.word	0x40020470
 8005a44:	40020488 	.word	0x40020488
 8005a48:	400204a0 	.word	0x400204a0
 8005a4c:	400204b8 	.word	0x400204b8
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf14      	ite	ne
 8005a5e:	2301      	movne	r3, #1
 8005a60:	2300      	moveq	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8087 	beq.w	8005b78 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2220      	movs	r2, #32
 8005a74:	409a      	lsls	r2, r3
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d139      	bne.n	8005afa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0216 	bic.w	r2, r2, #22
 8005a94:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aa4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <HAL_DMA_IRQHandler+0x736>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0208 	bic.w	r2, r2, #8
 8005ac4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	223f      	movs	r2, #63	; 0x3f
 8005ad0:	409a      	lsls	r2, r3
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 834a 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
          }
          return;
 8005af8:	e344      	b.n	8006184 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d018      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d108      	bne.n	8005b28 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d02c      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
 8005b26:	e027      	b.n	8005b78 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d023      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
 8005b38:	e01e      	b.n	8005b78 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10f      	bne.n	8005b68 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0210 	bic.w	r2, r2, #16
 8005b56:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8306 	beq.w	800618e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8088 	beq.w	8005ca0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2204      	movs	r2, #4
 8005b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a7a      	ldr	r2, [pc, #488]	; (8005d88 <HAL_DMA_IRQHandler+0xa08>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d04a      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a79      	ldr	r2, [pc, #484]	; (8005d8c <HAL_DMA_IRQHandler+0xa0c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d045      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a77      	ldr	r2, [pc, #476]	; (8005d90 <HAL_DMA_IRQHandler+0xa10>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d040      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a76      	ldr	r2, [pc, #472]	; (8005d94 <HAL_DMA_IRQHandler+0xa14>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d03b      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a74      	ldr	r2, [pc, #464]	; (8005d98 <HAL_DMA_IRQHandler+0xa18>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d036      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a73      	ldr	r2, [pc, #460]	; (8005d9c <HAL_DMA_IRQHandler+0xa1c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d031      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a71      	ldr	r2, [pc, #452]	; (8005da0 <HAL_DMA_IRQHandler+0xa20>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d02c      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a70      	ldr	r2, [pc, #448]	; (8005da4 <HAL_DMA_IRQHandler+0xa24>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d027      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a6e      	ldr	r2, [pc, #440]	; (8005da8 <HAL_DMA_IRQHandler+0xa28>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d022      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6d      	ldr	r2, [pc, #436]	; (8005dac <HAL_DMA_IRQHandler+0xa2c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d01d      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a6b      	ldr	r2, [pc, #428]	; (8005db0 <HAL_DMA_IRQHandler+0xa30>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d018      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a6a      	ldr	r2, [pc, #424]	; (8005db4 <HAL_DMA_IRQHandler+0xa34>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d013      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a68      	ldr	r2, [pc, #416]	; (8005db8 <HAL_DMA_IRQHandler+0xa38>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00e      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a67      	ldr	r2, [pc, #412]	; (8005dbc <HAL_DMA_IRQHandler+0xa3c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d009      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a65      	ldr	r2, [pc, #404]	; (8005dc0 <HAL_DMA_IRQHandler+0xa40>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d004      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x8b8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a64      	ldr	r2, [pc, #400]	; (8005dc4 <HAL_DMA_IRQHandler+0xa44>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d108      	bne.n	8005c4a <HAL_DMA_IRQHandler+0x8ca>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	e007      	b.n	8005c5a <HAL_DMA_IRQHandler+0x8da>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d307      	bcc.n	8005c76 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1f2      	bne.n	8005c5a <HAL_DMA_IRQHandler+0x8da>
 8005c74:	e000      	b.n	8005c78 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c76:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005c8e:	e003      	b.n	8005c98 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8272 	beq.w	800618e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
 8005cb2:	e26c      	b.n	800618e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a43      	ldr	r2, [pc, #268]	; (8005dc8 <HAL_DMA_IRQHandler+0xa48>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d022      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x984>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a42      	ldr	r2, [pc, #264]	; (8005dcc <HAL_DMA_IRQHandler+0xa4c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d01d      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x984>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a40      	ldr	r2, [pc, #256]	; (8005dd0 <HAL_DMA_IRQHandler+0xa50>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x984>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a3f      	ldr	r2, [pc, #252]	; (8005dd4 <HAL_DMA_IRQHandler+0xa54>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d013      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x984>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a3d      	ldr	r2, [pc, #244]	; (8005dd8 <HAL_DMA_IRQHandler+0xa58>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x984>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a3c      	ldr	r2, [pc, #240]	; (8005ddc <HAL_DMA_IRQHandler+0xa5c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x984>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a3a      	ldr	r2, [pc, #232]	; (8005de0 <HAL_DMA_IRQHandler+0xa60>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x984>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a39      	ldr	r2, [pc, #228]	; (8005de4 <HAL_DMA_IRQHandler+0xa64>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d101      	bne.n	8005d08 <HAL_DMA_IRQHandler+0x988>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <HAL_DMA_IRQHandler+0x98a>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 823f 	beq.w	800618e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	2204      	movs	r2, #4
 8005d22:	409a      	lsls	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 80cd 	beq.w	8005ec8 <HAL_DMA_IRQHandler+0xb48>
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80c7 	beq.w	8005ec8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2204      	movs	r2, #4
 8005d44:	409a      	lsls	r2, r3
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d049      	beq.n	8005de8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d109      	bne.n	8005d72 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 8210 	beq.w	8006188 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d70:	e20a      	b.n	8006188 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8206 	beq.w	8006188 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d84:	e200      	b.n	8006188 <HAL_DMA_IRQHandler+0xe08>
 8005d86:	bf00      	nop
 8005d88:	40020010 	.word	0x40020010
 8005d8c:	40020028 	.word	0x40020028
 8005d90:	40020040 	.word	0x40020040
 8005d94:	40020058 	.word	0x40020058
 8005d98:	40020070 	.word	0x40020070
 8005d9c:	40020088 	.word	0x40020088
 8005da0:	400200a0 	.word	0x400200a0
 8005da4:	400200b8 	.word	0x400200b8
 8005da8:	40020410 	.word	0x40020410
 8005dac:	40020428 	.word	0x40020428
 8005db0:	40020440 	.word	0x40020440
 8005db4:	40020458 	.word	0x40020458
 8005db8:	40020470 	.word	0x40020470
 8005dbc:	40020488 	.word	0x40020488
 8005dc0:	400204a0 	.word	0x400204a0
 8005dc4:	400204b8 	.word	0x400204b8
 8005dc8:	58025408 	.word	0x58025408
 8005dcc:	5802541c 	.word	0x5802541c
 8005dd0:	58025430 	.word	0x58025430
 8005dd4:	58025444 	.word	0x58025444
 8005dd8:	58025458 	.word	0x58025458
 8005ddc:	5802546c 	.word	0x5802546c
 8005de0:	58025480 	.word	0x58025480
 8005de4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d160      	bne.n	8005eb4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a8c      	ldr	r2, [pc, #560]	; (8006028 <HAL_DMA_IRQHandler+0xca8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d04a      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a8a      	ldr	r2, [pc, #552]	; (800602c <HAL_DMA_IRQHandler+0xcac>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d045      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a89      	ldr	r2, [pc, #548]	; (8006030 <HAL_DMA_IRQHandler+0xcb0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d040      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a87      	ldr	r2, [pc, #540]	; (8006034 <HAL_DMA_IRQHandler+0xcb4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d03b      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a86      	ldr	r2, [pc, #536]	; (8006038 <HAL_DMA_IRQHandler+0xcb8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d036      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a84      	ldr	r2, [pc, #528]	; (800603c <HAL_DMA_IRQHandler+0xcbc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d031      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a83      	ldr	r2, [pc, #524]	; (8006040 <HAL_DMA_IRQHandler+0xcc0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d02c      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a81      	ldr	r2, [pc, #516]	; (8006044 <HAL_DMA_IRQHandler+0xcc4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d027      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a80      	ldr	r2, [pc, #512]	; (8006048 <HAL_DMA_IRQHandler+0xcc8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d022      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a7e      	ldr	r2, [pc, #504]	; (800604c <HAL_DMA_IRQHandler+0xccc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d01d      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7d      	ldr	r2, [pc, #500]	; (8006050 <HAL_DMA_IRQHandler+0xcd0>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d018      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7b      	ldr	r2, [pc, #492]	; (8006054 <HAL_DMA_IRQHandler+0xcd4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d013      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a7a      	ldr	r2, [pc, #488]	; (8006058 <HAL_DMA_IRQHandler+0xcd8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a78      	ldr	r2, [pc, #480]	; (800605c <HAL_DMA_IRQHandler+0xcdc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a77      	ldr	r2, [pc, #476]	; (8006060 <HAL_DMA_IRQHandler+0xce0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xb12>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a75      	ldr	r2, [pc, #468]	; (8006064 <HAL_DMA_IRQHandler+0xce4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d108      	bne.n	8005ea4 <HAL_DMA_IRQHandler+0xb24>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0208 	bic.w	r2, r2, #8
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e007      	b.n	8005eb4 <HAL_DMA_IRQHandler+0xb34>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0204 	bic.w	r2, r2, #4
 8005eb2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8165 	beq.w	8006188 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ec6:	e15f      	b.n	8006188 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80c5 	beq.w	8006068 <HAL_DMA_IRQHandler+0xce8>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80bf 	beq.w	8006068 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	f003 031f 	and.w	r3, r3, #31
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d018      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 813a 	beq.w	800618c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f20:	e134      	b.n	800618c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 8130 	beq.w	800618c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f34:	e12a      	b.n	800618c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d168      	bne.n	8006012 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a38      	ldr	r2, [pc, #224]	; (8006028 <HAL_DMA_IRQHandler+0xca8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d04a      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a37      	ldr	r2, [pc, #220]	; (800602c <HAL_DMA_IRQHandler+0xcac>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d045      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a35      	ldr	r2, [pc, #212]	; (8006030 <HAL_DMA_IRQHandler+0xcb0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d040      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a34      	ldr	r2, [pc, #208]	; (8006034 <HAL_DMA_IRQHandler+0xcb4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d03b      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a32      	ldr	r2, [pc, #200]	; (8006038 <HAL_DMA_IRQHandler+0xcb8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d036      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a31      	ldr	r2, [pc, #196]	; (800603c <HAL_DMA_IRQHandler+0xcbc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d031      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a2f      	ldr	r2, [pc, #188]	; (8006040 <HAL_DMA_IRQHandler+0xcc0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d02c      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2e      	ldr	r2, [pc, #184]	; (8006044 <HAL_DMA_IRQHandler+0xcc4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d027      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a2c      	ldr	r2, [pc, #176]	; (8006048 <HAL_DMA_IRQHandler+0xcc8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d022      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a2b      	ldr	r2, [pc, #172]	; (800604c <HAL_DMA_IRQHandler+0xccc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d01d      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a29      	ldr	r2, [pc, #164]	; (8006050 <HAL_DMA_IRQHandler+0xcd0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a28      	ldr	r2, [pc, #160]	; (8006054 <HAL_DMA_IRQHandler+0xcd4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a26      	ldr	r2, [pc, #152]	; (8006058 <HAL_DMA_IRQHandler+0xcd8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a25      	ldr	r2, [pc, #148]	; (800605c <HAL_DMA_IRQHandler+0xcdc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a23      	ldr	r2, [pc, #140]	; (8006060 <HAL_DMA_IRQHandler+0xce0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xc60>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a22      	ldr	r2, [pc, #136]	; (8006064 <HAL_DMA_IRQHandler+0xce4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <HAL_DMA_IRQHandler+0xc72>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0214 	bic.w	r2, r2, #20
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e007      	b.n	8006002 <HAL_DMA_IRQHandler+0xc82>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 020a 	bic.w	r2, r2, #10
 8006000:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80b8 	beq.w	800618c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006024:	e0b2      	b.n	800618c <HAL_DMA_IRQHandler+0xe0c>
 8006026:	bf00      	nop
 8006028:	40020010 	.word	0x40020010
 800602c:	40020028 	.word	0x40020028
 8006030:	40020040 	.word	0x40020040
 8006034:	40020058 	.word	0x40020058
 8006038:	40020070 	.word	0x40020070
 800603c:	40020088 	.word	0x40020088
 8006040:	400200a0 	.word	0x400200a0
 8006044:	400200b8 	.word	0x400200b8
 8006048:	40020410 	.word	0x40020410
 800604c:	40020428 	.word	0x40020428
 8006050:	40020440 	.word	0x40020440
 8006054:	40020458 	.word	0x40020458
 8006058:	40020470 	.word	0x40020470
 800605c:	40020488 	.word	0x40020488
 8006060:	400204a0 	.word	0x400204a0
 8006064:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	2208      	movs	r2, #8
 8006072:	409a      	lsls	r2, r3
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	4013      	ands	r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8088 	beq.w	800618e <HAL_DMA_IRQHandler+0xe0e>
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8082 	beq.w	800618e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a41      	ldr	r2, [pc, #260]	; (8006194 <HAL_DMA_IRQHandler+0xe14>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d04a      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a3f      	ldr	r2, [pc, #252]	; (8006198 <HAL_DMA_IRQHandler+0xe18>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d045      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a3e      	ldr	r2, [pc, #248]	; (800619c <HAL_DMA_IRQHandler+0xe1c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d040      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a3c      	ldr	r2, [pc, #240]	; (80061a0 <HAL_DMA_IRQHandler+0xe20>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d03b      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a3b      	ldr	r2, [pc, #236]	; (80061a4 <HAL_DMA_IRQHandler+0xe24>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d036      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a39      	ldr	r2, [pc, #228]	; (80061a8 <HAL_DMA_IRQHandler+0xe28>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d031      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a38      	ldr	r2, [pc, #224]	; (80061ac <HAL_DMA_IRQHandler+0xe2c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d02c      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a36      	ldr	r2, [pc, #216]	; (80061b0 <HAL_DMA_IRQHandler+0xe30>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d027      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a35      	ldr	r2, [pc, #212]	; (80061b4 <HAL_DMA_IRQHandler+0xe34>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d022      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a33      	ldr	r2, [pc, #204]	; (80061b8 <HAL_DMA_IRQHandler+0xe38>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01d      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a32      	ldr	r2, [pc, #200]	; (80061bc <HAL_DMA_IRQHandler+0xe3c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a30      	ldr	r2, [pc, #192]	; (80061c0 <HAL_DMA_IRQHandler+0xe40>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a2f      	ldr	r2, [pc, #188]	; (80061c4 <HAL_DMA_IRQHandler+0xe44>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a2d      	ldr	r2, [pc, #180]	; (80061c8 <HAL_DMA_IRQHandler+0xe48>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2c      	ldr	r2, [pc, #176]	; (80061cc <HAL_DMA_IRQHandler+0xe4c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_DMA_IRQHandler+0xdaa>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a2a      	ldr	r2, [pc, #168]	; (80061d0 <HAL_DMA_IRQHandler+0xe50>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d108      	bne.n	800613c <HAL_DMA_IRQHandler+0xdbc>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 021c 	bic.w	r2, r2, #28
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e007      	b.n	800614c <HAL_DMA_IRQHandler+0xdcc>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 020e 	bic.w	r2, r2, #14
 800614a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	2201      	movs	r2, #1
 8006156:	409a      	lsls	r2, r3
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
 8006182:	e004      	b.n	800618e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006184:	bf00      	nop
 8006186:	e002      	b.n	800618e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006188:	bf00      	nop
 800618a:	e000      	b.n	800618e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800618c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800618e:	3728      	adds	r7, #40	; 0x28
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40020010 	.word	0x40020010
 8006198:	40020028 	.word	0x40020028
 800619c:	40020040 	.word	0x40020040
 80061a0:	40020058 	.word	0x40020058
 80061a4:	40020070 	.word	0x40020070
 80061a8:	40020088 	.word	0x40020088
 80061ac:	400200a0 	.word	0x400200a0
 80061b0:	400200b8 	.word	0x400200b8
 80061b4:	40020410 	.word	0x40020410
 80061b8:	40020428 	.word	0x40020428
 80061bc:	40020440 	.word	0x40020440
 80061c0:	40020458 	.word	0x40020458
 80061c4:	40020470 	.word	0x40020470
 80061c8:	40020488 	.word	0x40020488
 80061cc:	400204a0 	.word	0x400204a0
 80061d0:	400204b8 	.word	0x400204b8

080061d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a42      	ldr	r2, [pc, #264]	; (80062ec <DMA_CalcBaseAndBitshift+0x118>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d04a      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a41      	ldr	r2, [pc, #260]	; (80062f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d045      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a3f      	ldr	r2, [pc, #252]	; (80062f4 <DMA_CalcBaseAndBitshift+0x120>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d040      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a3e      	ldr	r2, [pc, #248]	; (80062f8 <DMA_CalcBaseAndBitshift+0x124>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d03b      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a3c      	ldr	r2, [pc, #240]	; (80062fc <DMA_CalcBaseAndBitshift+0x128>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d036      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a3b      	ldr	r2, [pc, #236]	; (8006300 <DMA_CalcBaseAndBitshift+0x12c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d031      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a39      	ldr	r2, [pc, #228]	; (8006304 <DMA_CalcBaseAndBitshift+0x130>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02c      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a38      	ldr	r2, [pc, #224]	; (8006308 <DMA_CalcBaseAndBitshift+0x134>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d027      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a36      	ldr	r2, [pc, #216]	; (800630c <DMA_CalcBaseAndBitshift+0x138>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d022      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a35      	ldr	r2, [pc, #212]	; (8006310 <DMA_CalcBaseAndBitshift+0x13c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d01d      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a33      	ldr	r2, [pc, #204]	; (8006314 <DMA_CalcBaseAndBitshift+0x140>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d018      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a32      	ldr	r2, [pc, #200]	; (8006318 <DMA_CalcBaseAndBitshift+0x144>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d013      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a30      	ldr	r2, [pc, #192]	; (800631c <DMA_CalcBaseAndBitshift+0x148>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00e      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2f      	ldr	r2, [pc, #188]	; (8006320 <DMA_CalcBaseAndBitshift+0x14c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d009      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2d      	ldr	r2, [pc, #180]	; (8006324 <DMA_CalcBaseAndBitshift+0x150>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xa8>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <DMA_CalcBaseAndBitshift+0x154>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d101      	bne.n	8006280 <DMA_CalcBaseAndBitshift+0xac>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <DMA_CalcBaseAndBitshift+0xae>
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d024      	beq.n	80062d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	3b10      	subs	r3, #16
 800628e:	4a27      	ldr	r2, [pc, #156]	; (800632c <DMA_CalcBaseAndBitshift+0x158>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	091b      	lsrs	r3, r3, #4
 8006296:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	4a24      	ldr	r2, [pc, #144]	; (8006330 <DMA_CalcBaseAndBitshift+0x15c>)
 80062a0:	5cd3      	ldrb	r3, [r2, r3]
 80062a2:	461a      	mov	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d908      	bls.n	80062c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	4b1f      	ldr	r3, [pc, #124]	; (8006334 <DMA_CalcBaseAndBitshift+0x160>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	1d1a      	adds	r2, r3, #4
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	659a      	str	r2, [r3, #88]	; 0x58
 80062be:	e00d      	b.n	80062dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <DMA_CalcBaseAndBitshift+0x160>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6593      	str	r3, [r2, #88]	; 0x58
 80062ce:	e005      	b.n	80062dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40020010 	.word	0x40020010
 80062f0:	40020028 	.word	0x40020028
 80062f4:	40020040 	.word	0x40020040
 80062f8:	40020058 	.word	0x40020058
 80062fc:	40020070 	.word	0x40020070
 8006300:	40020088 	.word	0x40020088
 8006304:	400200a0 	.word	0x400200a0
 8006308:	400200b8 	.word	0x400200b8
 800630c:	40020410 	.word	0x40020410
 8006310:	40020428 	.word	0x40020428
 8006314:	40020440 	.word	0x40020440
 8006318:	40020458 	.word	0x40020458
 800631c:	40020470 	.word	0x40020470
 8006320:	40020488 	.word	0x40020488
 8006324:	400204a0 	.word	0x400204a0
 8006328:	400204b8 	.word	0x400204b8
 800632c:	aaaaaaab 	.word	0xaaaaaaab
 8006330:	08019cf4 	.word	0x08019cf4
 8006334:	fffffc00 	.word	0xfffffc00

08006338 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d120      	bne.n	800638e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	2b03      	cmp	r3, #3
 8006352:	d858      	bhi.n	8006406 <DMA_CheckFifoParam+0xce>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <DMA_CheckFifoParam+0x24>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	0800636d 	.word	0x0800636d
 8006360:	0800637f 	.word	0x0800637f
 8006364:	0800636d 	.word	0x0800636d
 8006368:	08006407 	.word	0x08006407
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d048      	beq.n	800640a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800637c:	e045      	b.n	800640a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006386:	d142      	bne.n	800640e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800638c:	e03f      	b.n	800640e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006396:	d123      	bne.n	80063e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	2b03      	cmp	r3, #3
 800639e:	d838      	bhi.n	8006412 <DMA_CheckFifoParam+0xda>
 80063a0:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <DMA_CheckFifoParam+0x70>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063b9 	.word	0x080063b9
 80063ac:	080063bf 	.word	0x080063bf
 80063b0:	080063b9 	.word	0x080063b9
 80063b4:	080063d1 	.word	0x080063d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
        break;
 80063bc:	e030      	b.n	8006420 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d025      	beq.n	8006416 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063ce:	e022      	b.n	8006416 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063d8:	d11f      	bne.n	800641a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063de:	e01c      	b.n	800641a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d902      	bls.n	80063ee <DMA_CheckFifoParam+0xb6>
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d003      	beq.n	80063f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80063ec:	e018      	b.n	8006420 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	73fb      	strb	r3, [r7, #15]
        break;
 80063f2:	e015      	b.n	8006420 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00e      	beq.n	800641e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	73fb      	strb	r3, [r7, #15]
    break;
 8006404:	e00b      	b.n	800641e <DMA_CheckFifoParam+0xe6>
        break;
 8006406:	bf00      	nop
 8006408:	e00a      	b.n	8006420 <DMA_CheckFifoParam+0xe8>
        break;
 800640a:	bf00      	nop
 800640c:	e008      	b.n	8006420 <DMA_CheckFifoParam+0xe8>
        break;
 800640e:	bf00      	nop
 8006410:	e006      	b.n	8006420 <DMA_CheckFifoParam+0xe8>
        break;
 8006412:	bf00      	nop
 8006414:	e004      	b.n	8006420 <DMA_CheckFifoParam+0xe8>
        break;
 8006416:	bf00      	nop
 8006418:	e002      	b.n	8006420 <DMA_CheckFifoParam+0xe8>
        break;
 800641a:	bf00      	nop
 800641c:	e000      	b.n	8006420 <DMA_CheckFifoParam+0xe8>
    break;
 800641e:	bf00      	nop
    }
  }

  return status;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop

08006430 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a38      	ldr	r2, [pc, #224]	; (8006524 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d022      	beq.n	800648e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a36      	ldr	r2, [pc, #216]	; (8006528 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01d      	beq.n	800648e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a35      	ldr	r2, [pc, #212]	; (800652c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d018      	beq.n	800648e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a33      	ldr	r2, [pc, #204]	; (8006530 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a32      	ldr	r2, [pc, #200]	; (8006534 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a30      	ldr	r2, [pc, #192]	; (8006538 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d009      	beq.n	800648e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a2f      	ldr	r2, [pc, #188]	; (800653c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a2d      	ldr	r2, [pc, #180]	; (8006540 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01a      	beq.n	80064ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	3b08      	subs	r3, #8
 80064a0:	4a28      	ldr	r2, [pc, #160]	; (8006544 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80064a2:	fba2 2303 	umull	r2, r3, r2, r3
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4b26      	ldr	r3, [pc, #152]	; (8006548 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a24      	ldr	r2, [pc, #144]	; (800654c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80064bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2201      	movs	r2, #1
 80064c6:	409a      	lsls	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80064cc:	e024      	b.n	8006518 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	3b10      	subs	r3, #16
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80064d8:	fba2 2303 	umull	r2, r3, r2, r3
 80064dc:	091b      	lsrs	r3, r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d806      	bhi.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d902      	bls.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3308      	adds	r3, #8
 80064f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4b18      	ldr	r3, [pc, #96]	; (800655c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	461a      	mov	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a16      	ldr	r2, [pc, #88]	; (8006560 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006508:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2201      	movs	r2, #1
 8006512:	409a      	lsls	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006518:	bf00      	nop
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	58025408 	.word	0x58025408
 8006528:	5802541c 	.word	0x5802541c
 800652c:	58025430 	.word	0x58025430
 8006530:	58025444 	.word	0x58025444
 8006534:	58025458 	.word	0x58025458
 8006538:	5802546c 	.word	0x5802546c
 800653c:	58025480 	.word	0x58025480
 8006540:	58025494 	.word	0x58025494
 8006544:	cccccccd 	.word	0xcccccccd
 8006548:	16009600 	.word	0x16009600
 800654c:	58025880 	.word	0x58025880
 8006550:	aaaaaaab 	.word	0xaaaaaaab
 8006554:	400204b8 	.word	0x400204b8
 8006558:	4002040f 	.word	0x4002040f
 800655c:	10008200 	.word	0x10008200
 8006560:	40020880 	.word	0x40020880

08006564 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d04a      	beq.n	8006610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d847      	bhi.n	8006610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a25      	ldr	r2, [pc, #148]	; (800661c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d022      	beq.n	80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a24      	ldr	r2, [pc, #144]	; (8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d01d      	beq.n	80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a22      	ldr	r2, [pc, #136]	; (8006624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d018      	beq.n	80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a21      	ldr	r2, [pc, #132]	; (8006628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d013      	beq.n	80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1f      	ldr	r2, [pc, #124]	; (800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00e      	beq.n	80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d009      	beq.n	80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1c      	ldr	r2, [pc, #112]	; (8006634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d004      	beq.n	80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1b      	ldr	r2, [pc, #108]	; (8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d101      	bne.n	80065d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4b17      	ldr	r3, [pc, #92]	; (800663c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a15      	ldr	r2, [pc, #84]	; (8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80065ec:	671a      	str	r2, [r3, #112]	; 0x70
 80065ee:	e009      	b.n	8006604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	461a      	mov	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a11      	ldr	r2, [pc, #68]	; (8006648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006602:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3b01      	subs	r3, #1
 8006608:	2201      	movs	r2, #1
 800660a:	409a      	lsls	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	58025408 	.word	0x58025408
 8006620:	5802541c 	.word	0x5802541c
 8006624:	58025430 	.word	0x58025430
 8006628:	58025444 	.word	0x58025444
 800662c:	58025458 	.word	0x58025458
 8006630:	5802546c 	.word	0x5802546c
 8006634:	58025480 	.word	0x58025480
 8006638:	58025494 	.word	0x58025494
 800663c:	1600963f 	.word	0x1600963f
 8006640:	58025940 	.word	0x58025940
 8006644:	1000823f 	.word	0x1000823f
 8006648:	40020940 	.word	0x40020940

0800664c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e0c6      	b.n	80067ec <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f008 ff0c 	bl	800f484 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2223      	movs	r2, #35	; 0x23
 8006670:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006672:	4b60      	ldr	r3, [pc, #384]	; (80067f4 <HAL_ETH_Init+0x1a8>)
 8006674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006678:	4a5e      	ldr	r2, [pc, #376]	; (80067f4 <HAL_ETH_Init+0x1a8>)
 800667a:	f043 0302 	orr.w	r3, r3, #2
 800667e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006682:	4b5c      	ldr	r3, [pc, #368]	; (80067f4 <HAL_ETH_Init+0x1a8>)
 8006684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	60bb      	str	r3, [r7, #8]
 800668e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7a1b      	ldrb	r3, [r3, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006698:	2000      	movs	r0, #0
 800669a:	f7fd fc13 	bl	8003ec4 <HAL_SYSCFG_ETHInterfaceSelect>
 800669e:	e003      	b.n	80066a8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80066a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80066a4:	f7fd fc0e 	bl	8003ec4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066c0:	f7fd fbe8 	bl	8003e94 <HAL_GetTick>
 80066c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80066c6:	e00f      	b.n	80066e8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80066c8:	f7fd fbe4 	bl	8003e94 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80066d6:	d907      	bls.n	80066e8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2204      	movs	r2, #4
 80066dc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	22e0      	movs	r2, #224	; 0xe0
 80066e2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e081      	b.n	80067ec <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e6      	bne.n	80066c8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fad8 	bl	8007cb0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006700:	f003 f96c 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 8006704:	4603      	mov	r3, r0
 8006706:	4a3c      	ldr	r2, [pc, #240]	; (80067f8 <HAL_ETH_Init+0x1ac>)
 8006708:	fba2 2303 	umull	r2, r3, r2, r3
 800670c:	0c9a      	lsrs	r2, r3, #18
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3a01      	subs	r2, #1
 8006714:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 fa2b 	bl	8007b74 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006734:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006738:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	22e0      	movs	r2, #224	; 0xe0
 8006750:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e04a      	b.n	80067ec <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	f241 1308 	movw	r3, #4360	; 0x1108
 800675e:	4413      	add	r3, r2
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b26      	ldr	r3, [pc, #152]	; (80067fc <HAL_ETH_Init+0x1b0>)
 8006764:	4013      	ands	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6952      	ldr	r2, [r2, #20]
 800676a:	0052      	lsls	r2, r2, #1
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	6809      	ldr	r1, [r1, #0]
 8006770:	431a      	orrs	r2, r3
 8006772:	f241 1308 	movw	r3, #4360	; 0x1108
 8006776:	440b      	add	r3, r1
 8006778:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 faf0 	bl	8007d60 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fb34 	bl	8007dee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	3305      	adds	r3, #5
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	021a      	lsls	r2, r3, #8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	3304      	adds	r3, #4
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	4619      	mov	r1, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	3303      	adds	r3, #3
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	061a      	lsls	r2, r3, #24
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	3302      	adds	r3, #2
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	041b      	lsls	r3, r3, #16
 80067b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	3301      	adds	r3, #1
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067d2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2210      	movs	r2, #16
 80067e2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2210      	movs	r2, #16
 80067e8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	58024400 	.word	0x58024400
 80067f8:	431bde83 	.word	0x431bde83
 80067fc:	ffff8001 	.word	0xffff8001

08006800 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	3310      	adds	r3, #16
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <HAL_ETH_DescAssignMemory+0x28>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b03      	cmp	r3, #3
 8006826:	d904      	bls.n	8006832 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e021      	b.n	8006876 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688e:	2b10      	cmp	r3, #16
 8006890:	d174      	bne.n	800697c <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2223      	movs	r2, #35	; 0x23
 8006896:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	e00f      	b.n	80068be <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3310      	adds	r3, #16
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d9ec      	bls.n	800689e <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0202 	orr.w	r2, r2, #2
 80068d8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0201 	orr.w	r2, r2, #1
 80068e8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	f241 1304 	movw	r3, #4356	; 0x1104
 8006906:	4413      	add	r3, r2
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6811      	ldr	r1, [r2, #0]
 800690e:	f043 0201 	orr.w	r2, r3, #1
 8006912:	f241 1304 	movw	r3, #4356	; 0x1104
 8006916:	440b      	add	r3, r1
 8006918:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	f241 1308 	movw	r3, #4360	; 0x1108
 8006922:	4413      	add	r3, r2
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6811      	ldr	r1, [r2, #0]
 800692a:	f043 0201 	orr.w	r2, r3, #1
 800692e:	f241 1308 	movw	r3, #4360	; 0x1108
 8006932:	440b      	add	r3, r1
 8006934:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8006948:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800694c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	f241 1334 	movw	r3, #4404	; 0x1134
 8006956:	4413      	add	r3, r2
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6811      	ldr	r1, [r2, #0]
 800695e:	f24d 0241 	movw	r2, #53313	; 0xd041
 8006962:	431a      	orrs	r2, r3
 8006964:	f241 1334 	movw	r3, #4404	; 0x1134
 8006968:	440b      	add	r3, r1
 800696a:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2210      	movs	r2, #16
 8006970:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2222      	movs	r2, #34	; 0x22
 8006976:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	e000      	b.n	800697e <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
  }
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d067      	beq.n	8006a6c <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2223      	movs	r2, #35	; 0x23
 80069a0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	f241 1334 	movw	r3, #4404	; 0x1134
 80069aa:	4413      	add	r3, r2
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6811      	ldr	r1, [r2, #0]
 80069b2:	4a32      	ldr	r2, [pc, #200]	; (8006a7c <HAL_ETH_Stop_IT+0xf0>)
 80069b4:	401a      	ands	r2, r3
 80069b6:	f241 1334 	movw	r3, #4404	; 0x1134
 80069ba:	440b      	add	r3, r1
 80069bc:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	f241 1304 	movw	r3, #4356	; 0x1104
 80069c6:	4413      	add	r3, r2
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6811      	ldr	r1, [r2, #0]
 80069ce:	f023 0201 	bic.w	r2, r3, #1
 80069d2:	f241 1304 	movw	r3, #4356	; 0x1104
 80069d6:	440b      	add	r3, r1
 80069d8:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	f241 1308 	movw	r3, #4360	; 0x1108
 80069e2:	4413      	add	r3, r2
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6811      	ldr	r1, [r2, #0]
 80069ea:	f023 0201 	bic.w	r2, r3, #1
 80069ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80069f2:	440b      	add	r3, r1
 80069f4:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0201 	bic.w	r2, r2, #1
 8006a04:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0202 	bic.w	r2, r2, #2
 8006a28:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e00f      	b.n	8006a50 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3310      	adds	r3, #16
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d9ec      	bls.n	8006a30 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2210      	movs	r2, #16
 8006a60:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2210      	movs	r2, #16
 8006a66:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e000      	b.n	8006a6e <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
  }
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	ffff2fbe 	.word	0xffff2fbe

08006a80 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d107      	bne.n	8006aa2 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a96:	f043 0201 	orr.w	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e073      	b.n	8006b8a <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d16e      	bne.n	8006b88 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f001 f9fa 	bl	8007ea8 <ETH_Prepare_Tx_Descriptors>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006abe:	f043 0202 	orr.w	r2, r3, #2
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e05f      	b.n	8006b8a <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3206      	adds	r2, #6
 8006ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	629a      	str	r2, [r3, #40]	; 0x28
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d904      	bls.n	8006af4 <HAL_ETH_Transmit+0x74>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	1f1a      	subs	r2, r3, #4
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	3106      	adds	r1, #6
 8006b00:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006b04:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006b08:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8006b0a:	f7fd f9c3 	bl	8003e94 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006b10:	e034      	b.n	8006b7c <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d011      	beq.n	8006b48 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b28:	f043 0208 	orr.w	r2, r3, #8
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	22e0      	movs	r2, #224	; 0xe0
 8006b42:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e020      	b.n	8006b8a <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b4e:	d015      	beq.n	8006b7c <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8006b50:	f7fd f9a0 	bl	8003e94 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d302      	bcc.n	8006b66 <HAL_ETH_Transmit+0xe6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6a:	f043 0204 	orr.w	r2, r3, #4
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	22e0      	movs	r2, #224	; 0xe0
 8006b76:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e006      	b.n	8006b8a <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dbc6      	blt.n	8006b12 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e000      	b.n	8006b8a <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b089      	sub	sp, #36	; 0x24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3344      	adds	r3, #68	; 0x44
 8006b9e:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bae:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d06b      	beq.n	8006c9c <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e0ce      	b.n	8006d66 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d036      	beq.n	8006c48 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d101      	bne.n	8006bea <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	3301      	adds	r3, #1
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d902      	bls.n	8006bfc <HAL_ETH_IsRxDataAvailable+0x6a>
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	3b04      	subs	r3, #4
 8006bfa:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c04:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	db11      	blt.n	8006c32 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00b      	beq.n	8006c32 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	3301      	adds	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d902      	bls.n	8006c32 <HAL_ETH_IsRxDataAvailable+0xa0>
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	3b04      	subs	r3, #4
 8006c30:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e08e      	b.n	8006d66 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d012      	beq.n	8006c7a <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d902      	bls.n	8006c6e <HAL_ETH_IsRxDataAvailable+0xdc>
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	3b04      	subs	r3, #4
 8006c6c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	e010      	b.n	8006c9c <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	3301      	adds	r3, #1
 8006c84:	61fb      	str	r3, [r7, #28]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d902      	bls.n	8006c92 <HAL_ETH_IsRxDataAvailable+0x100>
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	3b04      	subs	r3, #4
 8006c90:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9a:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	db02      	blt.n	8006caa <HAL_ETH_IsRxDataAvailable+0x118>
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d98e      	bls.n	8006bc8 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d056      	beq.n	8006d5e <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc8:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e03b      	b.n	8006d48 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cde:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d009      	beq.n	8006cfc <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d20d      	bcs.n	8006d42 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d902      	bls.n	8006d38 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3b04      	subs	r3, #4
 8006d36:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d40:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	3301      	adds	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d3bf      	bcc.n	8006cd0 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	f241 1328 	movw	r3, #4392	; 0x1128
 8006d5a:	440b      	add	r3, r1
 8006d5c:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2200      	movs	r2, #0
 8006d62:	619a      	str	r2, [r3, #24]

  return 0;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3724      	adds	r7, #36	; 0x24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b08a      	sub	sp, #40	; 0x28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3344      	adds	r3, #68	; 0x44
 8006d80:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d94:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e07d      	b.n	8006ea6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10f      	bne.n	8006dd2 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff feed 	bl	8006b92 <HAL_ETH_IsRxDataAvailable>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e071      	b.n	8006ea6 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	623b      	str	r3, [r7, #32]
 8006dd6:	e031      	b.n	8006e3c <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00b      	beq.n	8006e0a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006e12:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	3301      	adds	r3, #1
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d902      	bls.n	8006e26 <HAL_ETH_GetRxDataBuffer+0xb4>
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	3b04      	subs	r3, #4
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2e:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	623b      	str	r3, [r7, #32]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	6a3a      	ldr	r2, [r7, #32]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d3c7      	bcc.n	8006dd8 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d803      	bhi.n	8006e72 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	605a      	str	r2, [r3, #4]
 8006e70:	e018      	b.n	8006ea4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d012      	beq.n	8006ea0 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695a      	ldr	r2, [r3, #20]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	1ad2      	subs	r2, r2, r3
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	605a      	str	r2, [r3, #4]
 8006e9e:	e001      	b.n	8006ea4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e000      	b.n	8006ea6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3728      	adds	r7, #40	; 0x28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3344      	adds	r3, #68	; 0x44
 8006ebc:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff fe60 	bl	8006b92 <HAL_ETH_IsRxDataAvailable>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e017      	b.n	8006f0c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	699a      	ldr	r2, [r3, #24]
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d902      	bls.n	8006ef4 <HAL_ETH_GetRxDataLength+0x46>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	3b04      	subs	r3, #4
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b089      	sub	sp, #36	; 0x24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3344      	adds	r3, #68	; 0x44
 8006f20:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e057      	b.n	8006ff4 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	e03b      	b.n	8006fd0 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f66:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d009      	beq.n	8006f84 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	695a      	ldr	r2, [r3, #20]
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d20d      	bcs.n	8006fca <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	61fb      	str	r3, [r7, #28]
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d902      	bls.n	8006fc0 <HAL_ETH_BuildRxDescriptors+0xac>
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	613b      	str	r3, [r7, #16]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d3bf      	bcc.n	8006f58 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6819      	ldr	r1, [r3, #0]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	f241 1328 	movw	r3, #4392	; 0x1128
 8006fe2:	440b      	add	r3, r1
 8006fe4:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3724      	adds	r7, #36	; 0x24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d113      	bne.n	8007042 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	f241 1334 	movw	r3, #4404	; 0x1134
 8007022:	4413      	add	r3, r2
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702a:	2b40      	cmp	r3, #64	; 0x40
 800702c:	d109      	bne.n	8007042 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f008 fb04 	bl	800f63c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800703c:	f248 0240 	movw	r2, #32832	; 0x8040
 8007040:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b01      	cmp	r3, #1
 8007052:	d113      	bne.n	800707c <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	f241 1334 	movw	r3, #4404	; 0x1134
 800705c:	4413      	add	r3, r2
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b01      	cmp	r3, #1
 8007066:	d109      	bne.n	800707c <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8b7 	bl	80071dc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007076:	f248 0201 	movw	r2, #32769	; 0x8001
 800707a:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800708e:	d149      	bne.n	8007124 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	f241 1334 	movw	r3, #4404	; 0x1134
 8007098:	4413      	add	r3, r2
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a4:	d13e      	bne.n	8007124 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070aa:	f043 0208 	orr.w	r2, r3, #8
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c4:	d11b      	bne.n	80070fe <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	f241 1302 	movw	r3, #4354	; 0x1102
 80070d4:	4013      	ands	r3, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	f241 1334 	movw	r3, #4404	; 0x1134
 80070e2:	4413      	add	r3, r2
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6811      	ldr	r1, [r2, #0]
 80070ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070ee:	f241 1334 	movw	r3, #4404	; 0x1134
 80070f2:	440b      	add	r3, r1
 80070f4:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	22e0      	movs	r2, #224	; 0xe0
 80070fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80070fc:	e00f      	b.n	800711e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007118:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800711c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f866 	bl	80071f0 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800712c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007130:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007134:	d10e      	bne.n	8007154 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	22e0      	movs	r2, #224	; 0xe0
 8007146:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f85b 	bl	8007204 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b10      	cmp	r3, #16
 8007162:	d10f      	bne.n	8007184 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800716c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f84e 	bl	8007218 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b20      	cmp	r3, #32
 8007192:	d10f      	bne.n	80071b4 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800719c:	f003 020f 	and.w	r2, r3, #15
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f840 	bl	800722c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80071b4:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <HAL_ETH_IRQHandler+0x1d8>)
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d006      	beq.n	80071ce <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <HAL_ETH_IRQHandler+0x1d8>)
 80071c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f839 	bl	8007240 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	58000080 	.word	0x58000080

080071dc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e03e      	b.n	80072f4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800727e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	055b      	lsls	r3, r3, #21
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f043 030c 	orr.w	r3, r3, #12
 80072a2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f043 0301 	orr.w	r3, r3, #1
 80072aa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80072b6:	f7fc fded 	bl	8003e94 <HAL_GetTick>
 80072ba:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80072bc:	e009      	b.n	80072d2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80072be:	f7fc fde9 	bl	8003e94 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072cc:	d901      	bls.n	80072d2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e010      	b.n	80072f4 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1ed      	bne.n	80072be <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e03c      	b.n	8007398 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007326:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	055b      	lsls	r3, r3, #21
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	041b      	lsls	r3, r3, #16
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f023 030c 	bic.w	r3, r3, #12
 800734a:	f043 0304 	orr.w	r3, r3, #4
 800734e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f043 0301 	orr.w	r3, r3, #1
 8007356:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	b29a      	uxth	r2, r3
 800735c:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <HAL_ETH_WritePHYRegister+0xa4>)
 800735e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8007362:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <HAL_ETH_WritePHYRegister+0xa4>)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800736a:	f7fc fd93 	bl	8003e94 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8007370:	e009      	b.n	8007386 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8007372:	f7fc fd8f 	bl	8003e94 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007380:	d901      	bls.n	8007386 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e008      	b.n	8007398 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1ed      	bne.n	8007372 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40028000 	.word	0x40028000

080073a4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e1c3      	b.n	8007740 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 020c 	and.w	r2, r3, #12
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bf14      	ite	ne
 80073d4:	2301      	movne	r3, #1
 80073d6:	2300      	moveq	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	461a      	mov	r2, r3
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf0c      	ite	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	2300      	movne	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007416:	2b00      	cmp	r3, #0
 8007418:	bf14      	ite	ne
 800741a:	2301      	movne	r3, #1
 800741c:	2300      	moveq	r3, #0
 800741e:	b2db      	uxtb	r3, r3
 8007420:	461a      	mov	r2, r3
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007430:	2b00      	cmp	r3, #0
 8007432:	bf0c      	ite	eq
 8007434:	2301      	moveq	r3, #1
 8007436:	2300      	movne	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	461a      	mov	r2, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800744a:	2b00      	cmp	r3, #0
 800744c:	bf14      	ite	ne
 800744e:	2301      	movne	r3, #1
 8007450:	2300      	moveq	r3, #0
 8007452:	b2db      	uxtb	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf14      	ite	ne
 8007468:	2301      	movne	r3, #1
 800746a:	2300      	moveq	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	461a      	mov	r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800749a:	2b00      	cmp	r3, #0
 800749c:	bf14      	ite	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	2300      	moveq	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	bf0c      	ite	eq
 80074b8:	2301      	moveq	r3, #1
 80074ba:	2300      	movne	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bf0c      	ite	eq
 80074d2:	2301      	moveq	r3, #1
 80074d4:	2300      	movne	r3, #0
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bf14      	ite	ne
 80074ec:	2301      	movne	r3, #1
 80074ee:	2300      	moveq	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007502:	2b00      	cmp	r3, #0
 8007504:	bf14      	ite	ne
 8007506:	2301      	movne	r3, #1
 8007508:	2300      	moveq	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800751c:	2b00      	cmp	r3, #0
 800751e:	bf14      	ite	ne
 8007520:	2301      	movne	r3, #1
 8007522:	2300      	moveq	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007536:	2b00      	cmp	r3, #0
 8007538:	bf14      	ite	ne
 800753a:	2301      	movne	r3, #1
 800753c:	2300      	moveq	r3, #0
 800753e:	b2db      	uxtb	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf14      	ite	ne
 8007562:	2301      	movne	r3, #1
 8007564:	2300      	moveq	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf0c      	ite	eq
 8007598:	2301      	moveq	r3, #1
 800759a:	2300      	movne	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	461a      	mov	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bf14      	ite	ne
 80075d0:	2301      	movne	r3, #1
 80075d2:	2300      	moveq	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	461a      	mov	r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bf14      	ite	ne
 80075ec:	2301      	movne	r3, #1
 80075ee:	2300      	moveq	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	0e5b      	lsrs	r3, r3, #25
 8007602:	f003 021f 	and.w	r2, r3, #31
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007614:	2b00      	cmp	r3, #0
 8007616:	bf14      	ite	ne
 8007618:	2301      	movne	r3, #1
 800761a:	2300      	moveq	r3, #0
 800761c:	b2db      	uxtb	r3, r3
 800761e:	461a      	mov	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f003 020f 	and.w	r2, r3, #15
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	bf14      	ite	ne
 8007642:	2301      	movne	r3, #1
 8007644:	2300      	moveq	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf0c      	ite	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	2300      	movne	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007672:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007680:	0c1b      	lsrs	r3, r3, #16
 8007682:	b29a      	uxth	r2, r3
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	bf14      	ite	ne
 8007698:	2301      	movne	r3, #1
 800769a:	2300      	moveq	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bf14      	ite	ne
 80076b6:	2301      	movne	r3, #1
 80076b8:	2300      	moveq	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80076cc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80076dc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bf14      	ite	ne
 80076f4:	2301      	movne	r3, #1
 80076f6:	2300      	moveq	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b00      	cmp	r3, #0
 8007710:	bf14      	ite	ne
 8007712:	2301      	movne	r3, #1
 8007714:	2300      	moveq	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	bf0c      	ite	eq
 8007730:	2301      	moveq	r3, #1
 8007732:	2300      	movne	r3, #0
 8007734:	b2db      	uxtb	r3, r3
 8007736:	461a      	mov	r2, r3
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e00a      	b.n	8007776 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007764:	2b10      	cmp	r3, #16
 8007766:	d105      	bne.n	8007774 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f860 	bl	8007830 <ETH_SetMACConfig>

    return HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	e000      	b.n	8007776 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
  }
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007790:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007798:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800779a:	f002 f91f 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 800779e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d908      	bls.n	80077ba <HAL_ETH_SetMDIOClockRange+0x3a>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	4a1d      	ldr	r2, [pc, #116]	; (8007820 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d804      	bhi.n	80077ba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e027      	b.n	800780a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	4a18      	ldr	r2, [pc, #96]	; (8007820 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d908      	bls.n	80077d4 <HAL_ETH_SetMDIOClockRange+0x54>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	4a17      	ldr	r2, [pc, #92]	; (8007824 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d204      	bcs.n	80077d4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e01a      	b.n	800780a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4a13      	ldr	r2, [pc, #76]	; (8007824 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d303      	bcc.n	80077e4 <HAL_ETH_SetMDIOClockRange+0x64>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4a12      	ldr	r2, [pc, #72]	; (8007828 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d911      	bls.n	8007808 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4a10      	ldr	r2, [pc, #64]	; (8007828 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d908      	bls.n	80077fe <HAL_ETH_SetMDIOClockRange+0x7e>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4a0f      	ldr	r2, [pc, #60]	; (800782c <HAL_ETH_SetMDIOClockRange+0xac>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d804      	bhi.n	80077fe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	e005      	b.n	800780a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e000      	b.n	800780a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007808:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	01312cff 	.word	0x01312cff
 8007820:	02160ebf 	.word	0x02160ebf
 8007824:	03938700 	.word	0x03938700
 8007828:	05f5e0ff 	.word	0x05f5e0ff
 800782c:	08f0d17f 	.word	0x08f0d17f

08007830 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8007842:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	791b      	ldrb	r3, [r3, #4]
 8007848:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800784a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	7b1b      	ldrb	r3, [r3, #12]
 8007850:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8007852:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	7b5b      	ldrb	r3, [r3, #13]
 8007858:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800785a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	7b9b      	ldrb	r3, [r3, #14]
 8007860:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007862:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	7bdb      	ldrb	r3, [r3, #15]
 8007868:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800786a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	7c12      	ldrb	r2, [r2, #16]
 8007870:	2a00      	cmp	r2, #0
 8007872:	d102      	bne.n	800787a <ETH_SetMACConfig+0x4a>
 8007874:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007878:	e000      	b.n	800787c <ETH_SetMACConfig+0x4c>
 800787a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800787c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	7c52      	ldrb	r2, [r2, #17]
 8007882:	2a00      	cmp	r2, #0
 8007884:	d102      	bne.n	800788c <ETH_SetMACConfig+0x5c>
 8007886:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800788a:	e000      	b.n	800788e <ETH_SetMACConfig+0x5e>
 800788c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800788e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	7c9b      	ldrb	r3, [r3, #18]
 8007894:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007896:	431a      	orrs	r2, r3
                                macconf->Speed |
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800789c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80078a2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	7f1b      	ldrb	r3, [r3, #28]
 80078a8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80078aa:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	7f5b      	ldrb	r3, [r3, #29]
 80078b0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80078b2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	7f92      	ldrb	r2, [r2, #30]
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	d102      	bne.n	80078c2 <ETH_SetMACConfig+0x92>
 80078bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078c0:	e000      	b.n	80078c4 <ETH_SetMACConfig+0x94>
 80078c2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80078c4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	7fdb      	ldrb	r3, [r3, #31]
 80078ca:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80078cc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	d102      	bne.n	80078de <ETH_SetMACConfig+0xae>
 80078d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078dc:	e000      	b.n	80078e0 <ETH_SetMACConfig+0xb0>
 80078de:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80078e0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80078e6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ee:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80078f0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	4b56      	ldr	r3, [pc, #344]	; (8007a5c <ETH_SetMACConfig+0x22c>)
 8007902:	4013      	ands	r3, r2
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6812      	ldr	r2, [r2, #0]
 8007908:	68f9      	ldr	r1, [r7, #12]
 800790a:	430b      	orrs	r3, r1
 800790c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800791a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800791c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007924:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007926:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800792e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8007930:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007938:	2a00      	cmp	r2, #0
 800793a:	d102      	bne.n	8007942 <ETH_SetMACConfig+0x112>
 800793c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007940:	e000      	b.n	8007944 <ETH_SetMACConfig+0x114>
 8007942:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8007944:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	4b42      	ldr	r3, [pc, #264]	; (8007a60 <ETH_SetMACConfig+0x230>)
 8007956:	4013      	ands	r3, r2
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6812      	ldr	r2, [r2, #0]
 800795c:	68f9      	ldr	r1, [r7, #12]
 800795e:	430b      	orrs	r3, r1
 8007960:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007968:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	4b3a      	ldr	r3, [pc, #232]	; (8007a64 <ETH_SetMACConfig+0x234>)
 800797a:	4013      	ands	r3, r2
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6812      	ldr	r2, [r2, #0]
 8007980:	68f9      	ldr	r1, [r7, #12]
 8007982:	430b      	orrs	r3, r1
 8007984:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800798c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007992:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800799a:	2a00      	cmp	r2, #0
 800799c:	d101      	bne.n	80079a2 <ETH_SetMACConfig+0x172>
 800799e:	2280      	movs	r2, #128	; 0x80
 80079a0:	e000      	b.n	80079a4 <ETH_SetMACConfig+0x174>
 80079a2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80079a4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079aa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079b6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80079ba:	4013      	ands	r3, r2
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	68f9      	ldr	r1, [r7, #12]
 80079c2:	430b      	orrs	r3, r1
 80079c4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80079cc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80079d4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e2:	f023 0103 	bic.w	r1, r3, #3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80079fa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	d101      	bne.n	8007a1e <ETH_SetMACConfig+0x1ee>
 8007a1a:	2240      	movs	r2, #64	; 0x40
 8007a1c:	e000      	b.n	8007a20 <ETH_SetMACConfig+0x1f0>
 8007a1e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007a20:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007a28:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007a2a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007a32:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007a40:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	00048083 	.word	0x00048083
 8007a60:	c0f88000 	.word	0xc0f88000
 8007a64:	fffffef0 	.word	0xfffffef0

08007a68 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b38      	ldr	r3, [pc, #224]	; (8007b60 <ETH_SetDMAConfig+0xf8>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	6809      	ldr	r1, [r1, #0]
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8007a8e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	791b      	ldrb	r3, [r3, #4]
 8007a94:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007a9a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	7b1b      	ldrb	r3, [r3, #12]
 8007aa0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	f241 0304 	movw	r3, #4100	; 0x1004
 8007aae:	4413      	add	r3, r2
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b2c      	ldr	r3, [pc, #176]	; (8007b64 <ETH_SetDMAConfig+0xfc>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6811      	ldr	r1, [r2, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	f241 0304 	movw	r3, #4100	; 0x1004
 8007ac2:	440b      	add	r3, r1
 8007ac4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	7b5b      	ldrb	r3, [r3, #13]
 8007aca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	4b22      	ldr	r3, [pc, #136]	; (8007b68 <ETH_SetDMAConfig+0x100>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6811      	ldr	r1, [r2, #0]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8007aee:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	7d1b      	ldrb	r3, [r3, #20]
 8007af8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007afa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	7f5b      	ldrb	r3, [r3, #29]
 8007b00:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	f241 1304 	movw	r3, #4356	; 0x1104
 8007b0e:	4413      	add	r3, r2
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b16      	ldr	r3, [pc, #88]	; (8007b6c <ETH_SetDMAConfig+0x104>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6811      	ldr	r1, [r2, #0]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	f241 1304 	movw	r3, #4356	; 0x1104
 8007b22:	440b      	add	r3, r1
 8007b24:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	7f1b      	ldrb	r3, [r3, #28]
 8007b2a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	f241 1308 	movw	r3, #4360	; 0x1108
 8007b3c:	4413      	add	r3, r2
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <ETH_SetDMAConfig+0x108>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6811      	ldr	r1, [r2, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	f241 1308 	movw	r3, #4360	; 0x1108
 8007b50:	440b      	add	r3, r1
 8007b52:	601a      	str	r2, [r3, #0]
}
 8007b54:	bf00      	nop
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	ffff87fd 	.word	0xffff87fd
 8007b64:	ffff2ffe 	.word	0xffff2ffe
 8007b68:	fffec000 	.word	0xfffec000
 8007b6c:	ffc0efef 	.word	0xffc0efef
 8007b70:	7fc0ffff 	.word	0x7fc0ffff

08007b74 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b0a4      	sub	sp, #144	; 0x90
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007b82:	2300      	movs	r3, #0
 8007b84:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bb4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007bcc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007bd0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007c1e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007c24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c28:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007c30:	2302      	movs	r3, #2
 8007c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007c36:	2300      	movs	r3, #0
 8007c38:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007c52:	2301      	movs	r3, #1
 8007c54:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fde6 	bl	8007830 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007c76:	2300      	movs	r3, #0
 8007c78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007c7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c82:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007c88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c8c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8007c94:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007c98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007c9a:	f107 0308 	add.w	r3, r7, #8
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff fee1 	bl	8007a68 <ETH_SetDMAConfig>
}
 8007ca6:	bf00      	nop
 8007ca8:	3790      	adds	r7, #144	; 0x90
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007cca:	f001 fe87 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 8007cce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4a1e      	ldr	r2, [pc, #120]	; (8007d4c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d908      	bls.n	8007cea <ETH_MAC_MDIO_ClkConfig+0x3a>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4a1d      	ldr	r2, [pc, #116]	; (8007d50 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d804      	bhi.n	8007cea <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e027      	b.n	8007d3a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	4a18      	ldr	r2, [pc, #96]	; (8007d50 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d908      	bls.n	8007d04 <ETH_MAC_MDIO_ClkConfig+0x54>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4a17      	ldr	r2, [pc, #92]	; (8007d54 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d204      	bcs.n	8007d04 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d00:	60fb      	str	r3, [r7, #12]
 8007d02:	e01a      	b.n	8007d3a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d303      	bcc.n	8007d14 <ETH_MAC_MDIO_ClkConfig+0x64>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4a12      	ldr	r2, [pc, #72]	; (8007d58 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d911      	bls.n	8007d38 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4a10      	ldr	r2, [pc, #64]	; (8007d58 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d908      	bls.n	8007d2e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4a0f      	ldr	r2, [pc, #60]	; (8007d5c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d804      	bhi.n	8007d2e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	e005      	b.n	8007d3a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	e000      	b.n	8007d3a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007d38:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007d44:	bf00      	nop
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	01312cff 	.word	0x01312cff
 8007d50:	02160ebf 	.word	0x02160ebf
 8007d54:	03938700 	.word	0x03938700
 8007d58:	05f5e0ff 	.word	0x05f5e0ff
 8007d5c:	08f0d17f 	.word	0x08f0d17f

08007d60 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	e01d      	b.n	8007daa <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68d9      	ldr	r1, [r3, #12]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4613      	mov	r3, r2
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	4413      	add	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	440b      	add	r3, r1
 8007d7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2200      	movs	r2, #0
 8007d96:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	3206      	adds	r2, #6
 8007da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d9de      	bls.n	8007d6e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	f241 132c 	movw	r3, #4396	; 0x112c
 8007dbe:	4413      	add	r3, r2
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68d9      	ldr	r1, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	f241 1314 	movw	r3, #4372	; 0x1114
 8007dd0:	4413      	add	r3, r2
 8007dd2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8007de0:	601a      	str	r2, [r3, #0]
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	e024      	b.n	8007e46 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6919      	ldr	r1, [r3, #16]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4613      	mov	r3, r2
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	4413      	add	r3, r2
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	440b      	add	r3, r1
 8007e0c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2200      	movs	r2, #0
 8007e18:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2200      	movs	r2, #0
 8007e24:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3310      	adds	r3, #16
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3301      	adds	r3, #1
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d9d7      	bls.n	8007dfc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	f241 1330 	movw	r3, #4400	; 0x1130
 8007e72:	4413      	add	r3, r2
 8007e74:	2203      	movs	r2, #3
 8007e76:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6919      	ldr	r1, [r3, #16]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	f241 131c 	movw	r3, #4380	; 0x111c
 8007e84:	4413      	add	r3, r2
 8007e86:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	f241 1328 	movw	r3, #4392	; 0x1128
 8007e98:	4413      	add	r3, r2
 8007e9a:	6019      	str	r1, [r3, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b08d      	sub	sp, #52	; 0x34
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3318      	adds	r3, #24
 8007eb8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eea:	d007      	beq.n	8007efc <ETH_Prepare_Tx_Descriptors+0x54>
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8007efc:	2302      	movs	r3, #2
 8007efe:	e24a      	b.n	8008396 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d044      	beq.n	8007f96 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	4b72      	ldr	r3, [pc, #456]	; (80080dc <ETH_Prepare_Tx_Descriptors+0x234>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f38:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d027      	beq.n	8007f96 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	041b      	lsls	r3, r3, #16
 8007f52:	431a      	orrs	r2, r3
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	431a      	orrs	r2, r3
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f84:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007f94:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0310 	and.w	r3, r3, #16
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00e      	beq.n	8007fc0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	4b4e      	ldr	r3, [pc, #312]	; (80080e0 <ETH_Prepare_Tx_Descriptors+0x238>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	6992      	ldr	r2, [r2, #24]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d105      	bne.n	8007fd8 <ETH_Prepare_Tx_Descriptors+0x130>
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d030      	beq.n	800803a <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d902      	bls.n	8008002 <ETH_Prepare_Tx_Descriptors+0x15a>
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	3b04      	subs	r3, #4
 8008000:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	3301      	adds	r3, #1
 8008010:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800801a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800801e:	d10c      	bne.n	800803a <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008028:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8008036:	2302      	movs	r3, #2
 8008038:	e1ad      	b.n	8008396 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	3301      	adds	r3, #1
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <ETH_Prepare_Tx_Descriptors+0x238>)
 8008050:	4013      	ands	r3, r2
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	6852      	ldr	r2, [r2, #4]
 8008056:	431a      	orrs	r2, r3
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d012      	beq.n	800808a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800807a:	4013      	ands	r3, r2
 800807c:	69fa      	ldr	r2, [r7, #28]
 800807e:	6852      	ldr	r2, [r2, #4]
 8008080:	0412      	lsls	r2, r2, #16
 8008082:	431a      	orrs	r2, r3
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	609a      	str	r2, [r3, #8]
 8008088:	e008      	b.n	800809c <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	2200      	movs	r2, #0
 800808e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	4b13      	ldr	r3, [pc, #76]	; (80080e4 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8008096:	4013      	ands	r3, r2
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d021      	beq.n	80080ec <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	04db      	lsls	r3, r3, #19
 80080b6:	431a      	orrs	r2, r3
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <ETH_Prepare_Tx_Descriptors+0x240>)
 80080c2:	4013      	ands	r3, r2
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	69d2      	ldr	r2, [r2, #28]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	60da      	str	r2, [r3, #12]
 80080da:	e02e      	b.n	800813a <ETH_Prepare_Tx_Descriptors+0x292>
 80080dc:	ffff0000 	.word	0xffff0000
 80080e0:	ffffc000 	.word	0xffffc000
 80080e4:	c000ffff 	.word	0xc000ffff
 80080e8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	4b93      	ldr	r3, [pc, #588]	; (8008340 <ETH_Prepare_Tx_Descriptors+0x498>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	6852      	ldr	r2, [r2, #4]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	431a      	orrs	r2, r3
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0320 	and.w	r3, r3, #32
 8008124:	2b00      	cmp	r3, #0
 8008126:	d008      	beq.n	800813a <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	431a      	orrs	r2, r3
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	2b00      	cmp	r3, #0
 8008144:	d008      	beq.n	8008158 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	431a      	orrs	r2, r3
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 80cb 	beq.w	8008320 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	431a      	orrs	r2, r3
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800819c:	e0c0      	b.n	8008320 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	3301      	adds	r3, #1
 80081ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d902      	bls.n	80081bc <ETH_Prepare_Tx_Descriptors+0x314>
 80081b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b8:	3b04      	subs	r3, #4
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081de:	d007      	beq.n	80081f0 <ETH_Prepare_Tx_Descriptors+0x348>
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	3304      	adds	r3, #4
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d026      	beq.n	800823e <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80081fe:	2300      	movs	r3, #0
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
 8008202:	e016      	b.n	8008232 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	3301      	adds	r3, #1
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	2b03      	cmp	r3, #3
 800821a:	d902      	bls.n	8008222 <ETH_Prepare_Tx_Descriptors+0x37a>
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	3b04      	subs	r3, #4
 8008220:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	3301      	adds	r3, #1
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
 8008232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	429a      	cmp	r2, r3
 8008238:	d3e4      	bcc.n	8008204 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 800823a:	2302      	movs	r3, #2
 800823c:	e0ab      	b.n	8008396 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	3301      	adds	r3, #1
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	4b3a      	ldr	r3, [pc, #232]	; (8008344 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800825a:	4013      	ands	r3, r2
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	6852      	ldr	r2, [r2, #4]
 8008260:	431a      	orrs	r2, r3
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d012      	beq.n	8008294 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	4b31      	ldr	r3, [pc, #196]	; (8008348 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8008284:	4013      	ands	r3, r2
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	6852      	ldr	r2, [r2, #4]
 800828a:	0412      	lsls	r2, r2, #16
 800828c:	431a      	orrs	r2, r3
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	609a      	str	r2, [r3, #8]
 8008292:	e008      	b.n	80082a6 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	2200      	movs	r2, #0
 8008298:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	4b2a      	ldr	r3, [pc, #168]	; (8008348 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	6a3a      	ldr	r2, [r7, #32]
 80082a4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00f      	beq.n	80082d2 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	4b25      	ldr	r3, [pc, #148]	; (800834c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	69d2      	ldr	r2, [r2, #28]
 80082be:	431a      	orrs	r2, r3
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	60da      	str	r2, [r3, #12]
 80082d0:	e017      	b.n	8008302 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	4b1a      	ldr	r3, [pc, #104]	; (8008340 <ETH_Prepare_Tx_Descriptors+0x498>)
 80082d8:	4013      	ands	r3, r2
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	6852      	ldr	r2, [r2, #4]
 80082de:	431a      	orrs	r2, r3
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	3301      	adds	r3, #1
 8008306:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f47f af3a 	bne.w	800819e <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00f      	beq.n	8008350 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	609a      	str	r2, [r3, #8]
 800833c:	e00e      	b.n	800835c <ETH_Prepare_Tx_Descriptors+0x4b4>
 800833e:	bf00      	nop
 8008340:	ffff8000 	.word	0xffff8000
 8008344:	ffffc000 	.word	0xffffc000
 8008348:	c000ffff 	.word	0xc000ffff
 800834c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800836c:	6979      	ldr	r1, [r7, #20]
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	3304      	adds	r3, #4
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	440b      	add	r3, r1
 8008376:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800837c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800837e:	b672      	cpsid	i
}
 8008380:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	4413      	add	r3, r2
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8008390:	b662      	cpsie	i
}
 8008392:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3734      	adds	r7, #52	; 0x34
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop

080083a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b089      	sub	sp, #36	; 0x24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80083b2:	4b89      	ldr	r3, [pc, #548]	; (80085d8 <HAL_GPIO_Init+0x234>)
 80083b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083b6:	e194      	b.n	80086e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	2101      	movs	r1, #1
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	fa01 f303 	lsl.w	r3, r1, r3
 80083c4:	4013      	ands	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8186 	beq.w	80086dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f003 0303 	and.w	r3, r3, #3
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d005      	beq.n	80083e8 <HAL_GPIO_Init+0x44>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d130      	bne.n	800844a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	2203      	movs	r2, #3
 80083f4:	fa02 f303 	lsl.w	r3, r2, r3
 80083f8:	43db      	mvns	r3, r3
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4013      	ands	r3, r2
 80083fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	fa02 f303 	lsl.w	r3, r2, r3
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	4313      	orrs	r3, r2
 8008410:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800841e:	2201      	movs	r2, #1
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	fa02 f303 	lsl.w	r3, r2, r3
 8008426:	43db      	mvns	r3, r3
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	4013      	ands	r3, r2
 800842c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	091b      	lsrs	r3, r3, #4
 8008434:	f003 0201 	and.w	r2, r3, #1
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	fa02 f303 	lsl.w	r3, r2, r3
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	4313      	orrs	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d017      	beq.n	8008486 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	2203      	movs	r2, #3
 8008462:	fa02 f303 	lsl.w	r3, r2, r3
 8008466:	43db      	mvns	r3, r3
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	4013      	ands	r3, r2
 800846c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	4313      	orrs	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d123      	bne.n	80084da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	08da      	lsrs	r2, r3, #3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3208      	adds	r2, #8
 800849a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	220f      	movs	r2, #15
 80084aa:	fa02 f303 	lsl.w	r3, r2, r3
 80084ae:	43db      	mvns	r3, r3
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	4013      	ands	r3, r2
 80084b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	f003 0307 	and.w	r3, r3, #7
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	08da      	lsrs	r2, r3, #3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3208      	adds	r2, #8
 80084d4:	69b9      	ldr	r1, [r7, #24]
 80084d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	2203      	movs	r2, #3
 80084e6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ea:	43db      	mvns	r3, r3
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	4013      	ands	r3, r2
 80084f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f003 0203 	and.w	r2, r3, #3
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	4313      	orrs	r3, r2
 8008506:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	69ba      	ldr	r2, [r7, #24]
 800850c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80e0 	beq.w	80086dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800851c:	4b2f      	ldr	r3, [pc, #188]	; (80085dc <HAL_GPIO_Init+0x238>)
 800851e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008522:	4a2e      	ldr	r2, [pc, #184]	; (80085dc <HAL_GPIO_Init+0x238>)
 8008524:	f043 0302 	orr.w	r3, r3, #2
 8008528:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800852c:	4b2b      	ldr	r3, [pc, #172]	; (80085dc <HAL_GPIO_Init+0x238>)
 800852e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800853a:	4a29      	ldr	r2, [pc, #164]	; (80085e0 <HAL_GPIO_Init+0x23c>)
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	089b      	lsrs	r3, r3, #2
 8008540:	3302      	adds	r3, #2
 8008542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	220f      	movs	r2, #15
 8008552:	fa02 f303 	lsl.w	r3, r2, r3
 8008556:	43db      	mvns	r3, r3
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	4013      	ands	r3, r2
 800855c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a20      	ldr	r2, [pc, #128]	; (80085e4 <HAL_GPIO_Init+0x240>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d052      	beq.n	800860c <HAL_GPIO_Init+0x268>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a1f      	ldr	r2, [pc, #124]	; (80085e8 <HAL_GPIO_Init+0x244>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d031      	beq.n	80085d2 <HAL_GPIO_Init+0x22e>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a1e      	ldr	r2, [pc, #120]	; (80085ec <HAL_GPIO_Init+0x248>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d02b      	beq.n	80085ce <HAL_GPIO_Init+0x22a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a1d      	ldr	r2, [pc, #116]	; (80085f0 <HAL_GPIO_Init+0x24c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d025      	beq.n	80085ca <HAL_GPIO_Init+0x226>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a1c      	ldr	r2, [pc, #112]	; (80085f4 <HAL_GPIO_Init+0x250>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d01f      	beq.n	80085c6 <HAL_GPIO_Init+0x222>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1b      	ldr	r2, [pc, #108]	; (80085f8 <HAL_GPIO_Init+0x254>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d019      	beq.n	80085c2 <HAL_GPIO_Init+0x21e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a1a      	ldr	r2, [pc, #104]	; (80085fc <HAL_GPIO_Init+0x258>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d013      	beq.n	80085be <HAL_GPIO_Init+0x21a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a19      	ldr	r2, [pc, #100]	; (8008600 <HAL_GPIO_Init+0x25c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d00d      	beq.n	80085ba <HAL_GPIO_Init+0x216>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a18      	ldr	r2, [pc, #96]	; (8008604 <HAL_GPIO_Init+0x260>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d007      	beq.n	80085b6 <HAL_GPIO_Init+0x212>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a17      	ldr	r2, [pc, #92]	; (8008608 <HAL_GPIO_Init+0x264>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d101      	bne.n	80085b2 <HAL_GPIO_Init+0x20e>
 80085ae:	2309      	movs	r3, #9
 80085b0:	e02d      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085b2:	230a      	movs	r3, #10
 80085b4:	e02b      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085b6:	2308      	movs	r3, #8
 80085b8:	e029      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085ba:	2307      	movs	r3, #7
 80085bc:	e027      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085be:	2306      	movs	r3, #6
 80085c0:	e025      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085c2:	2305      	movs	r3, #5
 80085c4:	e023      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085c6:	2304      	movs	r3, #4
 80085c8:	e021      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085ca:	2303      	movs	r3, #3
 80085cc:	e01f      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e01d      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e01b      	b.n	800860e <HAL_GPIO_Init+0x26a>
 80085d6:	bf00      	nop
 80085d8:	58000080 	.word	0x58000080
 80085dc:	58024400 	.word	0x58024400
 80085e0:	58000400 	.word	0x58000400
 80085e4:	58020000 	.word	0x58020000
 80085e8:	58020400 	.word	0x58020400
 80085ec:	58020800 	.word	0x58020800
 80085f0:	58020c00 	.word	0x58020c00
 80085f4:	58021000 	.word	0x58021000
 80085f8:	58021400 	.word	0x58021400
 80085fc:	58021800 	.word	0x58021800
 8008600:	58021c00 	.word	0x58021c00
 8008604:	58022000 	.word	0x58022000
 8008608:	58022400 	.word	0x58022400
 800860c:	2300      	movs	r3, #0
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	f002 0203 	and.w	r2, r2, #3
 8008614:	0092      	lsls	r2, r2, #2
 8008616:	4093      	lsls	r3, r2
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	4313      	orrs	r3, r2
 800861c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800861e:	4938      	ldr	r1, [pc, #224]	; (8008700 <HAL_GPIO_Init+0x35c>)
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	089b      	lsrs	r3, r3, #2
 8008624:	3302      	adds	r3, #2
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800862c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	43db      	mvns	r3, r3
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	4013      	ands	r3, r2
 800863c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800864a:	69ba      	ldr	r2, [r7, #24]
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	4313      	orrs	r3, r2
 8008650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800865a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	43db      	mvns	r3, r3
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	4013      	ands	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	4313      	orrs	r3, r2
 800867e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	43db      	mvns	r3, r3
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	4013      	ands	r3, r2
 8008696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	43db      	mvns	r3, r3
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	4013      	ands	r3, r2
 80086c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	3301      	adds	r3, #1
 80086e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f47f ae63 	bne.w	80083b8 <HAL_GPIO_Init+0x14>
  }
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	3724      	adds	r7, #36	; 0x24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	58000400 	.word	0x58000400

08008704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	807b      	strh	r3, [r7, #2]
 8008710:	4613      	mov	r3, r2
 8008712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008714:	787b      	ldrb	r3, [r7, #1]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800871a:	887a      	ldrh	r2, [r7, #2]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008720:	e003      	b.n	800872a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008722:	887b      	ldrh	r3, [r7, #2]
 8008724:	041a      	lsls	r2, r3, #16
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	619a      	str	r2, [r3, #24]
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e07f      	b.n	800884a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fa fb0a 	bl	8002d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2224      	movs	r2, #36	; 0x24
 8008768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0201 	bic.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008788:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008798:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d107      	bne.n	80087b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087ae:	609a      	str	r2, [r3, #8]
 80087b0:	e006      	b.n	80087c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689a      	ldr	r2, [r3, #8]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80087be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d104      	bne.n	80087d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6859      	ldr	r1, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <HAL_I2C_Init+0x11c>)
 80087de:	430b      	orrs	r3, r1
 80087e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691a      	ldr	r2, [r3, #16]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	69d9      	ldr	r1, [r3, #28]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1a      	ldr	r2, [r3, #32]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	02008000 	.word	0x02008000

08008858 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	68f9      	ldr	r1, [r7, #12]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
  }
}
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d138      	bne.n	8008914 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d101      	bne.n	80088b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088ac:	2302      	movs	r3, #2
 80088ae:	e032      	b.n	8008916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2224      	movs	r2, #36	; 0x24
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0201 	bic.w	r2, r2, #1
 80088ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80088de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6819      	ldr	r1, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0201 	orr.w	r2, r2, #1
 80088fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	e000      	b.n	8008916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008914:	2302      	movs	r3, #2
  }
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008922:	b480      	push	{r7}
 8008924:	b085      	sub	sp, #20
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b20      	cmp	r3, #32
 8008936:	d139      	bne.n	80089ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008942:	2302      	movs	r3, #2
 8008944:	e033      	b.n	80089ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2224      	movs	r2, #36	; 0x24
 8008952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008974:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0201 	orr.w	r2, r2, #1
 8008996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	e000      	b.n	80089ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089ac:	2302      	movs	r3, #2
  }
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
	...

080089bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80089c4:	4b19      	ldr	r3, [pc, #100]	; (8008a2c <HAL_PWREx_ConfigSupply+0x70>)
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	d00a      	beq.n	80089e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80089d0:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <HAL_PWREx_ConfigSupply+0x70>)
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d001      	beq.n	80089e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e01f      	b.n	8008a22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e01d      	b.n	8008a22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80089e6:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <HAL_PWREx_ConfigSupply+0x70>)
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f023 0207 	bic.w	r2, r3, #7
 80089ee:	490f      	ldr	r1, [pc, #60]	; (8008a2c <HAL_PWREx_ConfigSupply+0x70>)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80089f6:	f7fb fa4d 	bl	8003e94 <HAL_GetTick>
 80089fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80089fc:	e009      	b.n	8008a12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80089fe:	f7fb fa49 	bl	8003e94 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a0c:	d901      	bls.n	8008a12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e007      	b.n	8008a22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a12:	4b06      	ldr	r3, [pc, #24]	; (8008a2c <HAL_PWREx_ConfigSupply+0x70>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a1e:	d1ee      	bne.n	80089fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	58024800 	.word	0x58024800

08008a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08c      	sub	sp, #48	; 0x30
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d102      	bne.n	8008a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f000 bc1c 	b.w	800927c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8087 	beq.w	8008b60 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a52:	4b9e      	ldr	r3, [pc, #632]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a5c:	4b9b      	ldr	r3, [pc, #620]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a60:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	d007      	beq.n	8008a78 <HAL_RCC_OscConfig+0x48>
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	2b18      	cmp	r3, #24
 8008a6c:	d110      	bne.n	8008a90 <HAL_RCC_OscConfig+0x60>
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d10b      	bne.n	8008a90 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a78:	4b94      	ldr	r3, [pc, #592]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d06c      	beq.n	8008b5e <HAL_RCC_OscConfig+0x12e>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d168      	bne.n	8008b5e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e3f5      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a98:	d106      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x78>
 8008a9a:	4b8c      	ldr	r3, [pc, #560]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a8b      	ldr	r2, [pc, #556]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	e02e      	b.n	8008b06 <HAL_RCC_OscConfig+0xd6>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10c      	bne.n	8008aca <HAL_RCC_OscConfig+0x9a>
 8008ab0:	4b86      	ldr	r3, [pc, #536]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a85      	ldr	r2, [pc, #532]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aba:	6013      	str	r3, [r2, #0]
 8008abc:	4b83      	ldr	r3, [pc, #524]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a82      	ldr	r2, [pc, #520]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	e01d      	b.n	8008b06 <HAL_RCC_OscConfig+0xd6>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ad2:	d10c      	bne.n	8008aee <HAL_RCC_OscConfig+0xbe>
 8008ad4:	4b7d      	ldr	r3, [pc, #500]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a7c      	ldr	r2, [pc, #496]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	4b7a      	ldr	r3, [pc, #488]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a79      	ldr	r2, [pc, #484]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	e00b      	b.n	8008b06 <HAL_RCC_OscConfig+0xd6>
 8008aee:	4b77      	ldr	r3, [pc, #476]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a76      	ldr	r2, [pc, #472]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	4b74      	ldr	r3, [pc, #464]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a73      	ldr	r2, [pc, #460]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d013      	beq.n	8008b36 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b0e:	f7fb f9c1 	bl	8003e94 <HAL_GetTick>
 8008b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b14:	e008      	b.n	8008b28 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b16:	f7fb f9bd 	bl	8003e94 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b64      	cmp	r3, #100	; 0x64
 8008b22:	d901      	bls.n	8008b28 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e3a9      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b28:	4b68      	ldr	r3, [pc, #416]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d0f0      	beq.n	8008b16 <HAL_RCC_OscConfig+0xe6>
 8008b34:	e014      	b.n	8008b60 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b36:	f7fb f9ad 	bl	8003e94 <HAL_GetTick>
 8008b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008b3c:	e008      	b.n	8008b50 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b3e:	f7fb f9a9 	bl	8003e94 <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	2b64      	cmp	r3, #100	; 0x64
 8008b4a:	d901      	bls.n	8008b50 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e395      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008b50:	4b5e      	ldr	r3, [pc, #376]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1f0      	bne.n	8008b3e <HAL_RCC_OscConfig+0x10e>
 8008b5c:	e000      	b.n	8008b60 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80ca 	beq.w	8008d02 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b6e:	4b57      	ldr	r3, [pc, #348]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b76:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b78:	4b54      	ldr	r3, [pc, #336]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d007      	beq.n	8008b94 <HAL_RCC_OscConfig+0x164>
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	2b18      	cmp	r3, #24
 8008b88:	d156      	bne.n	8008c38 <HAL_RCC_OscConfig+0x208>
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d151      	bne.n	8008c38 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b94:	4b4d      	ldr	r3, [pc, #308]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <HAL_RCC_OscConfig+0x17c>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e367      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008bac:	4b47      	ldr	r3, [pc, #284]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f023 0219 	bic.w	r2, r3, #25
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	4944      	ldr	r1, [pc, #272]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bbe:	f7fb f969 	bl	8003e94 <HAL_GetTick>
 8008bc2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bc4:	e008      	b.n	8008bd8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bc6:	f7fb f965 	bl	8003e94 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d901      	bls.n	8008bd8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e351      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bd8:	4b3c      	ldr	r3, [pc, #240]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0304 	and.w	r3, r3, #4
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0f0      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008be4:	f7fb f962 	bl	8003eac <HAL_GetREVID>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f241 0203 	movw	r2, #4099	; 0x1003
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d817      	bhi.n	8008c22 <HAL_RCC_OscConfig+0x1f2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b40      	cmp	r3, #64	; 0x40
 8008bf8:	d108      	bne.n	8008c0c <HAL_RCC_OscConfig+0x1dc>
 8008bfa:	4b34      	ldr	r3, [pc, #208]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008c02:	4a32      	ldr	r2, [pc, #200]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c0a:	e07a      	b.n	8008d02 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c0c:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	031b      	lsls	r3, r3, #12
 8008c1a:	492c      	ldr	r1, [pc, #176]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c20:	e06f      	b.n	8008d02 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c22:	4b2a      	ldr	r3, [pc, #168]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	061b      	lsls	r3, r3, #24
 8008c30:	4926      	ldr	r1, [pc, #152]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c36:	e064      	b.n	8008d02 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d047      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c40:	4b22      	ldr	r3, [pc, #136]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f023 0219 	bic.w	r2, r3, #25
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	491f      	ldr	r1, [pc, #124]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c52:	f7fb f91f 	bl	8003e94 <HAL_GetTick>
 8008c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c58:	e008      	b.n	8008c6c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c5a:	f7fb f91b 	bl	8003e94 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d901      	bls.n	8008c6c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e307      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c6c:	4b17      	ldr	r3, [pc, #92]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0f0      	beq.n	8008c5a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c78:	f7fb f918 	bl	8003eac <HAL_GetREVID>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d817      	bhi.n	8008cb6 <HAL_RCC_OscConfig+0x286>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b40      	cmp	r3, #64	; 0x40
 8008c8c:	d108      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x270>
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008c96:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9c:	6053      	str	r3, [r2, #4]
 8008c9e:	e030      	b.n	8008d02 <HAL_RCC_OscConfig+0x2d2>
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	031b      	lsls	r3, r3, #12
 8008cae:	4907      	ldr	r1, [pc, #28]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	604b      	str	r3, [r1, #4]
 8008cb4:	e025      	b.n	8008d02 <HAL_RCC_OscConfig+0x2d2>
 8008cb6:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	061b      	lsls	r3, r3, #24
 8008cc4:	4901      	ldr	r1, [pc, #4]	; (8008ccc <HAL_RCC_OscConfig+0x29c>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	604b      	str	r3, [r1, #4]
 8008cca:	e01a      	b.n	8008d02 <HAL_RCC_OscConfig+0x2d2>
 8008ccc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cd0:	4b9e      	ldr	r3, [pc, #632]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a9d      	ldr	r2, [pc, #628]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008cd6:	f023 0301 	bic.w	r3, r3, #1
 8008cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cdc:	f7fb f8da 	bl	8003e94 <HAL_GetTick>
 8008ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ce4:	f7fb f8d6 	bl	8003e94 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e2c2      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008cf6:	4b95      	ldr	r3, [pc, #596]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f0      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0310 	and.w	r3, r3, #16
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 80a9 	beq.w	8008e62 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d10:	4b8e      	ldr	r3, [pc, #568]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d1a:	4b8c      	ldr	r3, [pc, #560]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d007      	beq.n	8008d36 <HAL_RCC_OscConfig+0x306>
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b18      	cmp	r3, #24
 8008d2a:	d13a      	bne.n	8008da2 <HAL_RCC_OscConfig+0x372>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d135      	bne.n	8008da2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d36:	4b85      	ldr	r3, [pc, #532]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <HAL_RCC_OscConfig+0x31e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	2b80      	cmp	r3, #128	; 0x80
 8008d48:	d001      	beq.n	8008d4e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e296      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d4e:	f7fb f8ad 	bl	8003eac <HAL_GetREVID>
 8008d52:	4603      	mov	r3, r0
 8008d54:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d817      	bhi.n	8008d8c <HAL_RCC_OscConfig+0x35c>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	d108      	bne.n	8008d76 <HAL_RCC_OscConfig+0x346>
 8008d64:	4b79      	ldr	r3, [pc, #484]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008d6c:	4a77      	ldr	r2, [pc, #476]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008d6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d72:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d74:	e075      	b.n	8008e62 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d76:	4b75      	ldr	r3, [pc, #468]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	069b      	lsls	r3, r3, #26
 8008d84:	4971      	ldr	r1, [pc, #452]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d8a:	e06a      	b.n	8008e62 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d8c:	4b6f      	ldr	r3, [pc, #444]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	061b      	lsls	r3, r3, #24
 8008d9a:	496c      	ldr	r1, [pc, #432]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008da0:	e05f      	b.n	8008e62 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d042      	beq.n	8008e30 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008daa:	4b68      	ldr	r3, [pc, #416]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a67      	ldr	r2, [pc, #412]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db6:	f7fb f86d 	bl	8003e94 <HAL_GetTick>
 8008dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dbc:	e008      	b.n	8008dd0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008dbe:	f7fb f869 	bl	8003e94 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d901      	bls.n	8008dd0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e255      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dd0:	4b5e      	ldr	r3, [pc, #376]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0f0      	beq.n	8008dbe <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ddc:	f7fb f866 	bl	8003eac <HAL_GetREVID>
 8008de0:	4603      	mov	r3, r0
 8008de2:	f241 0203 	movw	r2, #4099	; 0x1003
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d817      	bhi.n	8008e1a <HAL_RCC_OscConfig+0x3ea>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	2b20      	cmp	r3, #32
 8008df0:	d108      	bne.n	8008e04 <HAL_RCC_OscConfig+0x3d4>
 8008df2:	4b56      	ldr	r3, [pc, #344]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008dfa:	4a54      	ldr	r2, [pc, #336]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e00:	6053      	str	r3, [r2, #4]
 8008e02:	e02e      	b.n	8008e62 <HAL_RCC_OscConfig+0x432>
 8008e04:	4b51      	ldr	r3, [pc, #324]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	069b      	lsls	r3, r3, #26
 8008e12:	494e      	ldr	r1, [pc, #312]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	604b      	str	r3, [r1, #4]
 8008e18:	e023      	b.n	8008e62 <HAL_RCC_OscConfig+0x432>
 8008e1a:	4b4c      	ldr	r3, [pc, #304]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	061b      	lsls	r3, r3, #24
 8008e28:	4948      	ldr	r1, [pc, #288]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60cb      	str	r3, [r1, #12]
 8008e2e:	e018      	b.n	8008e62 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008e30:	4b46      	ldr	r3, [pc, #280]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a45      	ldr	r2, [pc, #276]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e3c:	f7fb f82a 	bl	8003e94 <HAL_GetTick>
 8008e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008e44:	f7fb f826 	bl	8003e94 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e212      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008e56:	4b3d      	ldr	r3, [pc, #244]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f0      	bne.n	8008e44 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d036      	beq.n	8008edc <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d019      	beq.n	8008eaa <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e76:	4b35      	ldr	r3, [pc, #212]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e7a:	4a34      	ldr	r2, [pc, #208]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e7c:	f043 0301 	orr.w	r3, r3, #1
 8008e80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e82:	f7fb f807 	bl	8003e94 <HAL_GetTick>
 8008e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e88:	e008      	b.n	8008e9c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e8a:	f7fb f803 	bl	8003e94 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d901      	bls.n	8008e9c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e1ef      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e9c:	4b2b      	ldr	r3, [pc, #172]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0f0      	beq.n	8008e8a <HAL_RCC_OscConfig+0x45a>
 8008ea8:	e018      	b.n	8008edc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008eaa:	4b28      	ldr	r3, [pc, #160]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eae:	4a27      	ldr	r2, [pc, #156]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb6:	f7fa ffed 	bl	8003e94 <HAL_GetTick>
 8008eba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ebc:	e008      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ebe:	f7fa ffe9 	bl	8003e94 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e1d5      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ed0:	4b1e      	ldr	r3, [pc, #120]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f0      	bne.n	8008ebe <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0320 	and.w	r3, r3, #32
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d039      	beq.n	8008f5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d019      	beq.n	8008f24 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ef0:	4b16      	ldr	r3, [pc, #88]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008efa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008efc:	f7fa ffca 	bl	8003e94 <HAL_GetTick>
 8008f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f02:	e008      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008f04:	f7fa ffc6 	bl	8003e94 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d901      	bls.n	8008f16 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e1b2      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f16:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0f0      	beq.n	8008f04 <HAL_RCC_OscConfig+0x4d4>
 8008f22:	e01b      	b.n	8008f5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008f24:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a08      	ldr	r2, [pc, #32]	; (8008f4c <HAL_RCC_OscConfig+0x51c>)
 8008f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008f30:	f7fa ffb0 	bl	8003e94 <HAL_GetTick>
 8008f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008f36:	e00b      	b.n	8008f50 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008f38:	f7fa ffac 	bl	8003e94 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d904      	bls.n	8008f50 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e198      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008f50:	4ba3      	ldr	r3, [pc, #652]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1ed      	bne.n	8008f38 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 8081 	beq.w	800906c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f6a:	4b9e      	ldr	r3, [pc, #632]	; (80091e4 <HAL_RCC_OscConfig+0x7b4>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a9d      	ldr	r2, [pc, #628]	; (80091e4 <HAL_RCC_OscConfig+0x7b4>)
 8008f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f76:	f7fa ff8d 	bl	8003e94 <HAL_GetTick>
 8008f7a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f7c:	e008      	b.n	8008f90 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008f7e:	f7fa ff89 	bl	8003e94 <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	2b64      	cmp	r3, #100	; 0x64
 8008f8a:	d901      	bls.n	8008f90 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e175      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f90:	4b94      	ldr	r3, [pc, #592]	; (80091e4 <HAL_RCC_OscConfig+0x7b4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d0f0      	beq.n	8008f7e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d106      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x582>
 8008fa4:	4b8e      	ldr	r3, [pc, #568]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa8:	4a8d      	ldr	r2, [pc, #564]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008faa:	f043 0301 	orr.w	r3, r3, #1
 8008fae:	6713      	str	r3, [r2, #112]	; 0x70
 8008fb0:	e02d      	b.n	800900e <HAL_RCC_OscConfig+0x5de>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10c      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x5a4>
 8008fba:	4b89      	ldr	r3, [pc, #548]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	4a88      	ldr	r2, [pc, #544]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8008fc6:	4b86      	ldr	r3, [pc, #536]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fca:	4a85      	ldr	r2, [pc, #532]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008fcc:	f023 0304 	bic.w	r3, r3, #4
 8008fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8008fd2:	e01c      	b.n	800900e <HAL_RCC_OscConfig+0x5de>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b05      	cmp	r3, #5
 8008fda:	d10c      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x5c6>
 8008fdc:	4b80      	ldr	r3, [pc, #512]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe0:	4a7f      	ldr	r2, [pc, #508]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008fe2:	f043 0304 	orr.w	r3, r3, #4
 8008fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8008fe8:	4b7d      	ldr	r3, [pc, #500]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fec:	4a7c      	ldr	r2, [pc, #496]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ff4:	e00b      	b.n	800900e <HAL_RCC_OscConfig+0x5de>
 8008ff6:	4b7a      	ldr	r3, [pc, #488]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffa:	4a79      	ldr	r2, [pc, #484]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8008ffc:	f023 0301 	bic.w	r3, r3, #1
 8009000:	6713      	str	r3, [r2, #112]	; 0x70
 8009002:	4b77      	ldr	r3, [pc, #476]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009006:	4a76      	ldr	r2, [pc, #472]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009008:	f023 0304 	bic.w	r3, r3, #4
 800900c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d015      	beq.n	8009042 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009016:	f7fa ff3d 	bl	8003e94 <HAL_GetTick>
 800901a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800901c:	e00a      	b.n	8009034 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800901e:	f7fa ff39 	bl	8003e94 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	f241 3288 	movw	r2, #5000	; 0x1388
 800902c:	4293      	cmp	r3, r2
 800902e:	d901      	bls.n	8009034 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e123      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009034:	4b6a      	ldr	r3, [pc, #424]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009038:	f003 0302 	and.w	r3, r3, #2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0ee      	beq.n	800901e <HAL_RCC_OscConfig+0x5ee>
 8009040:	e014      	b.n	800906c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009042:	f7fa ff27 	bl	8003e94 <HAL_GetTick>
 8009046:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009048:	e00a      	b.n	8009060 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800904a:	f7fa ff23 	bl	8003e94 <HAL_GetTick>
 800904e:	4602      	mov	r2, r0
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	f241 3288 	movw	r2, #5000	; 0x1388
 8009058:	4293      	cmp	r3, r2
 800905a:	d901      	bls.n	8009060 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e10d      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009060:	4b5f      	ldr	r3, [pc, #380]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1ee      	bne.n	800904a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8102 	beq.w	800927a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009076:	4b5a      	ldr	r3, [pc, #360]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800907e:	2b18      	cmp	r3, #24
 8009080:	f000 80bd 	beq.w	80091fe <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	2b02      	cmp	r3, #2
 800908a:	f040 8095 	bne.w	80091b8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800908e:	4b54      	ldr	r3, [pc, #336]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a53      	ldr	r2, [pc, #332]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800909a:	f7fa fefb 	bl	8003e94 <HAL_GetTick>
 800909e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80090a0:	e008      	b.n	80090b4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090a2:	f7fa fef7 	bl	8003e94 <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d901      	bls.n	80090b4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e0e3      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80090b4:	4b4a      	ldr	r3, [pc, #296]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1f0      	bne.n	80090a2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090c0:	4b47      	ldr	r3, [pc, #284]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 80090c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090c4:	4b48      	ldr	r3, [pc, #288]	; (80091e8 <HAL_RCC_OscConfig+0x7b8>)
 80090c6:	4013      	ands	r3, r2
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80090d0:	0112      	lsls	r2, r2, #4
 80090d2:	430a      	orrs	r2, r1
 80090d4:	4942      	ldr	r1, [pc, #264]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	628b      	str	r3, [r1, #40]	; 0x28
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	3b01      	subs	r3, #1
 80090e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e8:	3b01      	subs	r3, #1
 80090ea:	025b      	lsls	r3, r3, #9
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	431a      	orrs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	3b01      	subs	r3, #1
 80090f6:	041b      	lsls	r3, r3, #16
 80090f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	3b01      	subs	r3, #1
 8009104:	061b      	lsls	r3, r3, #24
 8009106:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800910a:	4935      	ldr	r1, [pc, #212]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 800910c:	4313      	orrs	r3, r2
 800910e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009110:	4b33      	ldr	r3, [pc, #204]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	4a32      	ldr	r2, [pc, #200]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009116:	f023 0301 	bic.w	r3, r3, #1
 800911a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800911c:	4b30      	ldr	r3, [pc, #192]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 800911e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009120:	4b32      	ldr	r3, [pc, #200]	; (80091ec <HAL_RCC_OscConfig+0x7bc>)
 8009122:	4013      	ands	r3, r2
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009128:	00d2      	lsls	r2, r2, #3
 800912a:	492d      	ldr	r1, [pc, #180]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 800912c:	4313      	orrs	r3, r2
 800912e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009130:	4b2b      	ldr	r3, [pc, #172]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	f023 020c 	bic.w	r2, r3, #12
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	4928      	ldr	r1, [pc, #160]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 800913e:	4313      	orrs	r3, r2
 8009140:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009142:	4b27      	ldr	r3, [pc, #156]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009146:	f023 0202 	bic.w	r2, r3, #2
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914e:	4924      	ldr	r1, [pc, #144]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009150:	4313      	orrs	r3, r2
 8009152:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009154:	4b22      	ldr	r3, [pc, #136]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	4a21      	ldr	r2, [pc, #132]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 800915a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800915e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009160:	4b1f      	ldr	r3, [pc, #124]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800916a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800916c:	4b1c      	ldr	r3, [pc, #112]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	4a1b      	ldr	r2, [pc, #108]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009178:	4b19      	ldr	r3, [pc, #100]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	4a18      	ldr	r2, [pc, #96]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009184:	4b16      	ldr	r3, [pc, #88]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a15      	ldr	r2, [pc, #84]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 800918a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800918e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009190:	f7fa fe80 	bl	8003e94 <HAL_GetTick>
 8009194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009196:	e008      	b.n	80091aa <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009198:	f7fa fe7c 	bl	8003e94 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e068      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091aa:	4b0d      	ldr	r3, [pc, #52]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f0      	beq.n	8009198 <HAL_RCC_OscConfig+0x768>
 80091b6:	e060      	b.n	800927a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091b8:	4b09      	ldr	r3, [pc, #36]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <HAL_RCC_OscConfig+0x7b0>)
 80091be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c4:	f7fa fe66 	bl	8003e94 <HAL_GetTick>
 80091c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091ca:	e011      	b.n	80091f0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091cc:	f7fa fe62 	bl	8003e94 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d90a      	bls.n	80091f0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e04e      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
 80091de:	bf00      	nop
 80091e0:	58024400 	.word	0x58024400
 80091e4:	58024800 	.word	0x58024800
 80091e8:	fffffc0c 	.word	0xfffffc0c
 80091ec:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091f0:	4b24      	ldr	r3, [pc, #144]	; (8009284 <HAL_RCC_OscConfig+0x854>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e7      	bne.n	80091cc <HAL_RCC_OscConfig+0x79c>
 80091fc:	e03d      	b.n	800927a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80091fe:	4b21      	ldr	r3, [pc, #132]	; (8009284 <HAL_RCC_OscConfig+0x854>)
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009204:	4b1f      	ldr	r3, [pc, #124]	; (8009284 <HAL_RCC_OscConfig+0x854>)
 8009206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009208:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	2b01      	cmp	r3, #1
 8009210:	d031      	beq.n	8009276 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f003 0203 	and.w	r2, r3, #3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800921c:	429a      	cmp	r2, r3
 800921e:	d12a      	bne.n	8009276 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	091b      	lsrs	r3, r3, #4
 8009224:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800922c:	429a      	cmp	r2, r3
 800922e:	d122      	bne.n	8009276 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800923c:	429a      	cmp	r2, r3
 800923e:	d11a      	bne.n	8009276 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	0a5b      	lsrs	r3, r3, #9
 8009244:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800924e:	429a      	cmp	r2, r3
 8009250:	d111      	bne.n	8009276 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	0c1b      	lsrs	r3, r3, #16
 8009256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009260:	429a      	cmp	r2, r3
 8009262:	d108      	bne.n	8009276 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	0e1b      	lsrs	r3, r3, #24
 8009268:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009270:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009272:	429a      	cmp	r2, r3
 8009274:	d001      	beq.n	800927a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e000      	b.n	800927c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3730      	adds	r7, #48	; 0x30
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	58024400 	.word	0x58024400

08009288 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e19c      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800929c:	4b8a      	ldr	r3, [pc, #552]	; (80094c8 <HAL_RCC_ClockConfig+0x240>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d910      	bls.n	80092cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092aa:	4b87      	ldr	r3, [pc, #540]	; (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f023 020f 	bic.w	r2, r3, #15
 80092b2:	4985      	ldr	r1, [pc, #532]	; (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ba:	4b83      	ldr	r3, [pc, #524]	; (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 030f 	and.w	r3, r3, #15
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d001      	beq.n	80092cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e184      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d010      	beq.n	80092fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	4b7b      	ldr	r3, [pc, #492]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d908      	bls.n	80092fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092e8:	4b78      	ldr	r3, [pc, #480]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	4975      	ldr	r1, [pc, #468]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d010      	beq.n	8009328 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695a      	ldr	r2, [r3, #20]
 800930a:	4b70      	ldr	r3, [pc, #448]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009312:	429a      	cmp	r2, r3
 8009314:	d908      	bls.n	8009328 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009316:	4b6d      	ldr	r3, [pc, #436]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	496a      	ldr	r1, [pc, #424]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009324:	4313      	orrs	r3, r2
 8009326:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	2b00      	cmp	r3, #0
 8009332:	d010      	beq.n	8009356 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	699a      	ldr	r2, [r3, #24]
 8009338:	4b64      	ldr	r3, [pc, #400]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009340:	429a      	cmp	r2, r3
 8009342:	d908      	bls.n	8009356 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009344:	4b61      	ldr	r3, [pc, #388]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	495e      	ldr	r1, [pc, #376]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009352:	4313      	orrs	r3, r2
 8009354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	d010      	beq.n	8009384 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	69da      	ldr	r2, [r3, #28]
 8009366:	4b59      	ldr	r3, [pc, #356]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800936e:	429a      	cmp	r2, r3
 8009370:	d908      	bls.n	8009384 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009372:	4b56      	ldr	r3, [pc, #344]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	4953      	ldr	r1, [pc, #332]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009380:	4313      	orrs	r3, r2
 8009382:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d010      	beq.n	80093b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	4b4d      	ldr	r3, [pc, #308]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	429a      	cmp	r2, r3
 800939e:	d908      	bls.n	80093b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093a0:	4b4a      	ldr	r3, [pc, #296]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	f023 020f 	bic.w	r2, r3, #15
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	4947      	ldr	r1, [pc, #284]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d055      	beq.n	800946a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80093be:	4b43      	ldr	r3, [pc, #268]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	4940      	ldr	r1, [pc, #256]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d107      	bne.n	80093e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093d8:	4b3c      	ldr	r3, [pc, #240]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d121      	bne.n	8009428 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e0f6      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d107      	bne.n	8009400 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093f0:	4b36      	ldr	r3, [pc, #216]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d115      	bne.n	8009428 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e0ea      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d107      	bne.n	8009418 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009408:	4b30      	ldr	r3, [pc, #192]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009410:	2b00      	cmp	r3, #0
 8009412:	d109      	bne.n	8009428 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e0de      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009418:	4b2c      	ldr	r3, [pc, #176]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e0d6      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009428:	4b28      	ldr	r3, [pc, #160]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f023 0207 	bic.w	r2, r3, #7
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	4925      	ldr	r1, [pc, #148]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009436:	4313      	orrs	r3, r2
 8009438:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800943a:	f7fa fd2b 	bl	8003e94 <HAL_GetTick>
 800943e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009440:	e00a      	b.n	8009458 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009442:	f7fa fd27 	bl	8003e94 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009450:	4293      	cmp	r3, r2
 8009452:	d901      	bls.n	8009458 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e0be      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009458:	4b1c      	ldr	r3, [pc, #112]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	429a      	cmp	r2, r3
 8009468:	d1eb      	bne.n	8009442 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d010      	beq.n	8009498 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	4b14      	ldr	r3, [pc, #80]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	429a      	cmp	r2, r3
 8009484:	d208      	bcs.n	8009498 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009486:	4b11      	ldr	r3, [pc, #68]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f023 020f 	bic.w	r2, r3, #15
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	490e      	ldr	r1, [pc, #56]	; (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009494:	4313      	orrs	r3, r2
 8009496:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009498:	4b0b      	ldr	r3, [pc, #44]	; (80094c8 <HAL_RCC_ClockConfig+0x240>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d214      	bcs.n	80094d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094a6:	4b08      	ldr	r3, [pc, #32]	; (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f023 020f 	bic.w	r2, r3, #15
 80094ae:	4906      	ldr	r1, [pc, #24]	; (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094b6:	4b04      	ldr	r3, [pc, #16]	; (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 030f 	and.w	r3, r3, #15
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d005      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e086      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
 80094c8:	52002000 	.word	0x52002000
 80094cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d010      	beq.n	80094fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	4b3f      	ldr	r3, [pc, #252]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d208      	bcs.n	80094fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094ec:	4b3c      	ldr	r3, [pc, #240]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	4939      	ldr	r1, [pc, #228]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0308 	and.w	r3, r3, #8
 8009506:	2b00      	cmp	r3, #0
 8009508:	d010      	beq.n	800952c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	695a      	ldr	r2, [r3, #20]
 800950e:	4b34      	ldr	r3, [pc, #208]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009516:	429a      	cmp	r2, r3
 8009518:	d208      	bcs.n	800952c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800951a:	4b31      	ldr	r3, [pc, #196]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	492e      	ldr	r1, [pc, #184]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009528:	4313      	orrs	r3, r2
 800952a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0310 	and.w	r3, r3, #16
 8009534:	2b00      	cmp	r3, #0
 8009536:	d010      	beq.n	800955a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699a      	ldr	r2, [r3, #24]
 800953c:	4b28      	ldr	r3, [pc, #160]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009544:	429a      	cmp	r2, r3
 8009546:	d208      	bcs.n	800955a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009548:	4b25      	ldr	r3, [pc, #148]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	4922      	ldr	r1, [pc, #136]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009556:	4313      	orrs	r3, r2
 8009558:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d010      	beq.n	8009588 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69da      	ldr	r2, [r3, #28]
 800956a:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009572:	429a      	cmp	r2, r3
 8009574:	d208      	bcs.n	8009588 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009576:	4b1a      	ldr	r3, [pc, #104]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	4917      	ldr	r1, [pc, #92]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009584:	4313      	orrs	r3, r2
 8009586:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009588:	f000 f8ae 	bl	80096e8 <HAL_RCC_GetSysClockFreq>
 800958c:	4602      	mov	r2, r0
 800958e:	4b14      	ldr	r3, [pc, #80]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	0a1b      	lsrs	r3, r3, #8
 8009594:	f003 030f 	and.w	r3, r3, #15
 8009598:	4912      	ldr	r1, [pc, #72]	; (80095e4 <HAL_RCC_ClockConfig+0x35c>)
 800959a:	5ccb      	ldrb	r3, [r1, r3]
 800959c:	f003 031f 	and.w	r3, r3, #31
 80095a0:	fa22 f303 	lsr.w	r3, r2, r3
 80095a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095a6:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <HAL_RCC_ClockConfig+0x358>)
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	4a0d      	ldr	r2, [pc, #52]	; (80095e4 <HAL_RCC_ClockConfig+0x35c>)
 80095b0:	5cd3      	ldrb	r3, [r2, r3]
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	fa22 f303 	lsr.w	r3, r2, r3
 80095bc:	4a0a      	ldr	r2, [pc, #40]	; (80095e8 <HAL_RCC_ClockConfig+0x360>)
 80095be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095c0:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <HAL_RCC_ClockConfig+0x364>)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80095c6:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <HAL_RCC_ClockConfig+0x368>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fa fc18 	bl	8003e00 <HAL_InitTick>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	58024400 	.word	0x58024400
 80095e4:	08019ce4 	.word	0x08019ce4
 80095e8:	24000068 	.word	0x24000068
 80095ec:	24000064 	.word	0x24000064
 80095f0:	2400006c 	.word	0x2400006c

080095f4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08c      	sub	sp, #48	; 0x30
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d12a      	bne.n	800965c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009606:	4b2d      	ldr	r3, [pc, #180]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 8009608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800960c:	4a2b      	ldr	r2, [pc, #172]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009616:	4b29      	ldr	r3, [pc, #164]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 8009618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	61bb      	str	r3, [r7, #24]
 8009622:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800962a:	2302      	movs	r3, #2
 800962c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800962e:	2303      	movs	r3, #3
 8009630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009632:	2300      	movs	r3, #0
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009636:	2300      	movs	r3, #0
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800963a:	f107 031c 	add.w	r3, r7, #28
 800963e:	4619      	mov	r1, r3
 8009640:	481f      	ldr	r0, [pc, #124]	; (80096c0 <HAL_RCC_MCOConfig+0xcc>)
 8009642:	f7fe feaf 	bl	80083a4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009646:	4b1d      	ldr	r3, [pc, #116]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800964e:	68b9      	ldr	r1, [r7, #8]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	430b      	orrs	r3, r1
 8009654:	4919      	ldr	r1, [pc, #100]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 8009656:	4313      	orrs	r3, r2
 8009658:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800965a:	e02a      	b.n	80096b2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800965c:	4b17      	ldr	r3, [pc, #92]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 800965e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009662:	4a16      	ldr	r2, [pc, #88]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 8009664:	f043 0304 	orr.w	r3, r3, #4
 8009668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800966c:	4b13      	ldr	r3, [pc, #76]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 800966e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009672:	f003 0304 	and.w	r3, r3, #4
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800967a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800967e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009680:	2302      	movs	r3, #2
 8009682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009684:	2303      	movs	r3, #3
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009688:	2300      	movs	r3, #0
 800968a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800968c:	2300      	movs	r3, #0
 800968e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009690:	f107 031c 	add.w	r3, r7, #28
 8009694:	4619      	mov	r1, r3
 8009696:	480b      	ldr	r0, [pc, #44]	; (80096c4 <HAL_RCC_MCOConfig+0xd0>)
 8009698:	f7fe fe84 	bl	80083a4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800969c:	4b07      	ldr	r3, [pc, #28]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	01d9      	lsls	r1, r3, #7
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	430b      	orrs	r3, r1
 80096ac:	4903      	ldr	r1, [pc, #12]	; (80096bc <HAL_RCC_MCOConfig+0xc8>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	610b      	str	r3, [r1, #16]
}
 80096b2:	bf00      	nop
 80096b4:	3730      	adds	r7, #48	; 0x30
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	58024400 	.word	0x58024400
 80096c0:	58020000 	.word	0x58020000
 80096c4:	58020800 	.word	0x58020800

080096c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <HAL_RCC_EnableCSS+0x1c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a04      	ldr	r2, [pc, #16]	; (80096e4 <HAL_RCC_EnableCSS+0x1c>)
 80096d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096d6:	6013      	str	r3, [r2, #0]
}
 80096d8:	bf00      	nop
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	58024400 	.word	0x58024400

080096e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b089      	sub	sp, #36	; 0x24
 80096ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096ee:	4bb3      	ldr	r3, [pc, #716]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096f6:	2b18      	cmp	r3, #24
 80096f8:	f200 8155 	bhi.w	80099a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80096fc:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <HAL_RCC_GetSysClockFreq+0x1c>)
 80096fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009702:	bf00      	nop
 8009704:	08009769 	.word	0x08009769
 8009708:	080099a7 	.word	0x080099a7
 800970c:	080099a7 	.word	0x080099a7
 8009710:	080099a7 	.word	0x080099a7
 8009714:	080099a7 	.word	0x080099a7
 8009718:	080099a7 	.word	0x080099a7
 800971c:	080099a7 	.word	0x080099a7
 8009720:	080099a7 	.word	0x080099a7
 8009724:	0800978f 	.word	0x0800978f
 8009728:	080099a7 	.word	0x080099a7
 800972c:	080099a7 	.word	0x080099a7
 8009730:	080099a7 	.word	0x080099a7
 8009734:	080099a7 	.word	0x080099a7
 8009738:	080099a7 	.word	0x080099a7
 800973c:	080099a7 	.word	0x080099a7
 8009740:	080099a7 	.word	0x080099a7
 8009744:	08009795 	.word	0x08009795
 8009748:	080099a7 	.word	0x080099a7
 800974c:	080099a7 	.word	0x080099a7
 8009750:	080099a7 	.word	0x080099a7
 8009754:	080099a7 	.word	0x080099a7
 8009758:	080099a7 	.word	0x080099a7
 800975c:	080099a7 	.word	0x080099a7
 8009760:	080099a7 	.word	0x080099a7
 8009764:	0800979b 	.word	0x0800979b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009768:	4b94      	ldr	r3, [pc, #592]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0320 	and.w	r3, r3, #32
 8009770:	2b00      	cmp	r3, #0
 8009772:	d009      	beq.n	8009788 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009774:	4b91      	ldr	r3, [pc, #580]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	08db      	lsrs	r3, r3, #3
 800977a:	f003 0303 	and.w	r3, r3, #3
 800977e:	4a90      	ldr	r2, [pc, #576]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009780:	fa22 f303 	lsr.w	r3, r2, r3
 8009784:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009786:	e111      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009788:	4b8d      	ldr	r3, [pc, #564]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800978a:	61bb      	str	r3, [r7, #24]
    break;
 800978c:	e10e      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800978e:	4b8d      	ldr	r3, [pc, #564]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009790:	61bb      	str	r3, [r7, #24]
    break;
 8009792:	e10b      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009794:	4b8c      	ldr	r3, [pc, #560]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009796:	61bb      	str	r3, [r7, #24]
    break;
 8009798:	e108      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800979a:	4b88      	ldr	r3, [pc, #544]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80097a4:	4b85      	ldr	r3, [pc, #532]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	091b      	lsrs	r3, r3, #4
 80097aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80097b0:	4b82      	ldr	r3, [pc, #520]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	f003 0301 	and.w	r3, r3, #1
 80097b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80097ba:	4b80      	ldr	r3, [pc, #512]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097be:	08db      	lsrs	r3, r3, #3
 80097c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	fb02 f303 	mul.w	r3, r2, r3
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 80e1 	beq.w	80099a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	f000 8083 	beq.w	80098ec <HAL_RCC_GetSysClockFreq+0x204>
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	f200 80a1 	bhi.w	8009930 <HAL_RCC_GetSysClockFreq+0x248>
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d003      	beq.n	80097fc <HAL_RCC_GetSysClockFreq+0x114>
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d056      	beq.n	80098a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80097fa:	e099      	b.n	8009930 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097fc:	4b6f      	ldr	r3, [pc, #444]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b00      	cmp	r3, #0
 8009806:	d02d      	beq.n	8009864 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009808:	4b6c      	ldr	r3, [pc, #432]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	08db      	lsrs	r3, r3, #3
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	4a6b      	ldr	r2, [pc, #428]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009814:	fa22 f303 	lsr.w	r3, r2, r3
 8009818:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	ee07 3a90 	vmov	s15, r3
 8009820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009832:	4b62      	ldr	r3, [pc, #392]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009842:	ed97 6a02 	vldr	s12, [r7, #8]
 8009846:	eddf 5a61 	vldr	s11, [pc, #388]	; 80099cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800984a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800984e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800985a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800985e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009862:	e087      	b.n	8009974 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	ee07 3a90 	vmov	s15, r3
 800986a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80099d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009876:	4b51      	ldr	r3, [pc, #324]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009886:	ed97 6a02 	vldr	s12, [r7, #8]
 800988a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80099cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800988e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800989a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800989e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098a6:	e065      	b.n	8009974 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80099d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80098b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ba:	4b40      	ldr	r3, [pc, #256]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c2:	ee07 3a90 	vmov	s15, r3
 80098c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80099cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80098d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ea:	e043      	b.n	8009974 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80099d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80098fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fe:	4b2f      	ldr	r3, [pc, #188]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009906:	ee07 3a90 	vmov	s15, r3
 800990a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009912:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80099cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800992e:	e021      	b.n	8009974 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80099d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800993e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009942:	4b1e      	ldr	r3, [pc, #120]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009952:	ed97 6a02 	vldr	s12, [r7, #8]
 8009956:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80099cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800995a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009972:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009974:	4b11      	ldr	r3, [pc, #68]	; (80099bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	0a5b      	lsrs	r3, r3, #9
 800997a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997e:	3301      	adds	r3, #1
 8009980:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	ee07 3a90 	vmov	s15, r3
 8009988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800998c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009998:	ee17 3a90 	vmov	r3, s15
 800999c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800999e:	e005      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]
    break;
 80099a4:	e002      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80099a6:	4b07      	ldr	r3, [pc, #28]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80099a8:	61bb      	str	r3, [r7, #24]
    break;
 80099aa:	bf00      	nop
  }

  return sysclockfreq;
 80099ac:	69bb      	ldr	r3, [r7, #24]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3724      	adds	r7, #36	; 0x24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	58024400 	.word	0x58024400
 80099c0:	03d09000 	.word	0x03d09000
 80099c4:	003d0900 	.word	0x003d0900
 80099c8:	017d7840 	.word	0x017d7840
 80099cc:	46000000 	.word	0x46000000
 80099d0:	4c742400 	.word	0x4c742400
 80099d4:	4a742400 	.word	0x4a742400
 80099d8:	4bbebc20 	.word	0x4bbebc20

080099dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80099e2:	f7ff fe81 	bl	80096e8 <HAL_RCC_GetSysClockFreq>
 80099e6:	4602      	mov	r2, r0
 80099e8:	4b10      	ldr	r3, [pc, #64]	; (8009a2c <HAL_RCC_GetHCLKFreq+0x50>)
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	0a1b      	lsrs	r3, r3, #8
 80099ee:	f003 030f 	and.w	r3, r3, #15
 80099f2:	490f      	ldr	r1, [pc, #60]	; (8009a30 <HAL_RCC_GetHCLKFreq+0x54>)
 80099f4:	5ccb      	ldrb	r3, [r1, r3]
 80099f6:	f003 031f 	and.w	r3, r3, #31
 80099fa:	fa22 f303 	lsr.w	r3, r2, r3
 80099fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a00:	4b0a      	ldr	r3, [pc, #40]	; (8009a2c <HAL_RCC_GetHCLKFreq+0x50>)
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	f003 030f 	and.w	r3, r3, #15
 8009a08:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a0a:	5cd3      	ldrb	r3, [r2, r3]
 8009a0c:	f003 031f 	and.w	r3, r3, #31
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	fa22 f303 	lsr.w	r3, r2, r3
 8009a16:	4a07      	ldr	r2, [pc, #28]	; (8009a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a1a:	4a07      	ldr	r2, [pc, #28]	; (8009a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a20:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a22:	681b      	ldr	r3, [r3, #0]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	58024400 	.word	0x58024400
 8009a30:	08019ce4 	.word	0x08019ce4
 8009a34:	24000068 	.word	0x24000068
 8009a38:	24000064 	.word	0x24000064

08009a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a40:	f7ff ffcc 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 8009a44:	4602      	mov	r2, r0
 8009a46:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	091b      	lsrs	r3, r3, #4
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	4904      	ldr	r1, [pc, #16]	; (8009a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a52:	5ccb      	ldrb	r3, [r1, r3]
 8009a54:	f003 031f 	and.w	r3, r3, #31
 8009a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	58024400 	.word	0x58024400
 8009a64:	08019ce4 	.word	0x08019ce4

08009a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a6c:	f7ff ffb6 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 8009a70:	4602      	mov	r2, r0
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	0a1b      	lsrs	r3, r3, #8
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	4904      	ldr	r1, [pc, #16]	; (8009a90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a7e:	5ccb      	ldrb	r3, [r1, r3]
 8009a80:	f003 031f 	and.w	r3, r3, #31
 8009a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	58024400 	.word	0x58024400
 8009a90:	08019ce4 	.word	0x08019ce4

08009a94 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009a98:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aa4:	d105      	bne.n	8009ab2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8009aa6:	f000 f809 	bl	8009abc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009aaa:	4b03      	ldr	r3, [pc, #12]	; (8009ab8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ab0:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8009ab2:	bf00      	nop
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	58024400 	.word	0x58024400

08009abc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
	...

08009acc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ad8:	2300      	movs	r3, #0
 8009ada:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d03f      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009af0:	d02a      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009af2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009af6:	d824      	bhi.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009af8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009afc:	d018      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b02:	d81e      	bhi.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d003      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b0c:	d007      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009b0e:	e018      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b10:	4bab      	ldr	r3, [pc, #684]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b14:	4aaa      	ldr	r2, [pc, #680]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b1c:	e015      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3304      	adds	r3, #4
 8009b22:	2102      	movs	r1, #2
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 fff3 	bl	800bb10 <RCCEx_PLL2_Config>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b2e:	e00c      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3324      	adds	r3, #36	; 0x24
 8009b34:	2102      	movs	r1, #2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f002 f89c 	bl	800bc74 <RCCEx_PLL3_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b40:	e003      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	75fb      	strb	r3, [r7, #23]
      break;
 8009b46:	e000      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d109      	bne.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b50:	4b9b      	ldr	r3, [pc, #620]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b5c:	4998      	ldr	r1, [pc, #608]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	650b      	str	r3, [r1, #80]	; 0x50
 8009b62:	e001      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d03d      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	d826      	bhi.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009b7c:	a201      	add	r2, pc, #4	; (adr r2, 8009b84 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009b99 	.word	0x08009b99
 8009b88:	08009ba7 	.word	0x08009ba7
 8009b8c:	08009bb9 	.word	0x08009bb9
 8009b90:	08009bd1 	.word	0x08009bd1
 8009b94:	08009bd1 	.word	0x08009bd1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b98:	4b89      	ldr	r3, [pc, #548]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	4a88      	ldr	r2, [pc, #544]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ba4:	e015      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	2100      	movs	r1, #0
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 ffaf 	bl	800bb10 <RCCEx_PLL2_Config>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bb6:	e00c      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3324      	adds	r3, #36	; 0x24
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f002 f858 	bl	800bc74 <RCCEx_PLL3_Config>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bc8:	e003      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009bce:	e000      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d109      	bne.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bd8:	4b79      	ldr	r3, [pc, #484]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bdc:	f023 0207 	bic.w	r2, r3, #7
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be4:	4976      	ldr	r1, [pc, #472]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	650b      	str	r3, [r1, #80]	; 0x50
 8009bea:	e001      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d042      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c04:	d02b      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0a:	d825      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009c0c:	2bc0      	cmp	r3, #192	; 0xc0
 8009c0e:	d028      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009c10:	2bc0      	cmp	r3, #192	; 0xc0
 8009c12:	d821      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009c14:	2b80      	cmp	r3, #128	; 0x80
 8009c16:	d016      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009c18:	2b80      	cmp	r3, #128	; 0x80
 8009c1a:	d81d      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009c20:	2b40      	cmp	r3, #64	; 0x40
 8009c22:	d007      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009c24:	e018      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c26:	4b66      	ldr	r3, [pc, #408]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	4a65      	ldr	r2, [pc, #404]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009c32:	e017      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	3304      	adds	r3, #4
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f001 ff68 	bl	800bb10 <RCCEx_PLL2_Config>
 8009c40:	4603      	mov	r3, r0
 8009c42:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009c44:	e00e      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3324      	adds	r3, #36	; 0x24
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f002 f811 	bl	800bc74 <RCCEx_PLL3_Config>
 8009c52:	4603      	mov	r3, r0
 8009c54:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009c56:	e005      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c5c:	e002      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009c5e:	bf00      	nop
 8009c60:	e000      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d109      	bne.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009c6a:	4b55      	ldr	r3, [pc, #340]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c6e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c76:	4952      	ldr	r1, [pc, #328]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	650b      	str	r3, [r1, #80]	; 0x50
 8009c7c:	e001      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d049      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c98:	d030      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009c9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c9e:	d82a      	bhi.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009ca0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ca4:	d02c      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009ca6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009caa:	d824      	bhi.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cb0:	d018      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cb6:	d81e      	bhi.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cc0:	d007      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009cc2:	e018      	b.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cc4:	4b3e      	ldr	r3, [pc, #248]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	4a3d      	ldr	r2, [pc, #244]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cd0:	e017      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 ff19 	bl	800bb10 <RCCEx_PLL2_Config>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009ce2:	e00e      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3324      	adds	r3, #36	; 0x24
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f001 ffc2 	bl	800bc74 <RCCEx_PLL3_Config>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cf4:	e005      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfa:	e002      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009cfc:	bf00      	nop
 8009cfe:	e000      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009d08:	4b2d      	ldr	r3, [pc, #180]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d16:	492a      	ldr	r1, [pc, #168]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	658b      	str	r3, [r1, #88]	; 0x58
 8009d1c:	e001      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
 8009d20:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d04c      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d38:	d030      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009d3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d3e:	d82a      	bhi.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009d40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d44:	d02c      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009d46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d4a:	d824      	bhi.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d50:	d018      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d56:	d81e      	bhi.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d60:	d007      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009d62:	e018      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d64:	4b16      	ldr	r3, [pc, #88]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	4a15      	ldr	r2, [pc, #84]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d70:	e017      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3304      	adds	r3, #4
 8009d76:	2100      	movs	r1, #0
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f001 fec9 	bl	800bb10 <RCCEx_PLL2_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d82:	e00e      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3324      	adds	r3, #36	; 0x24
 8009d88:	2100      	movs	r1, #0
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 ff72 	bl	800bc74 <RCCEx_PLL3_Config>
 8009d90:	4603      	mov	r3, r0
 8009d92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d94:	e005      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9a:	e002      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009d9c:	bf00      	nop
 8009d9e:	e000      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10d      	bne.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009da8:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009db6:	4902      	ldr	r1, [pc, #8]	; (8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	658b      	str	r3, [r1, #88]	; 0x58
 8009dbc:	e004      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009dbe:	bf00      	nop
 8009dc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d032      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dd8:	2b30      	cmp	r3, #48	; 0x30
 8009dda:	d01c      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009ddc:	2b30      	cmp	r3, #48	; 0x30
 8009dde:	d817      	bhi.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009de0:	2b20      	cmp	r3, #32
 8009de2:	d00c      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	d813      	bhi.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d016      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009dec:	2b10      	cmp	r3, #16
 8009dee:	d10f      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df0:	4baf      	ldr	r3, [pc, #700]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	4aae      	ldr	r2, [pc, #696]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009dfc:	e00e      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3304      	adds	r3, #4
 8009e02:	2102      	movs	r1, #2
 8009e04:	4618      	mov	r0, r3
 8009e06:	f001 fe83 	bl	800bb10 <RCCEx_PLL2_Config>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009e0e:	e005      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	75fb      	strb	r3, [r7, #23]
      break;
 8009e14:	e002      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009e16:	bf00      	nop
 8009e18:	e000      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d109      	bne.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e22:	4ba3      	ldr	r3, [pc, #652]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2e:	49a0      	ldr	r1, [pc, #640]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e34:	e001      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e36:	7dfb      	ldrb	r3, [r7, #23]
 8009e38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d047      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e4e:	d030      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e54:	d82a      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e5a:	d02c      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009e5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e60:	d824      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e66:	d018      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e6c:	d81e      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e76:	d007      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009e78:	e018      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e7a:	4b8d      	ldr	r3, [pc, #564]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	4a8c      	ldr	r2, [pc, #560]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e86:	e017      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f001 fe3e 	bl	800bb10 <RCCEx_PLL2_Config>
 8009e94:	4603      	mov	r3, r0
 8009e96:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e98:	e00e      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3324      	adds	r3, #36	; 0x24
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 fee7 	bl	800bc74 <RCCEx_PLL3_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009eaa:	e005      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb0:	e002      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009eb2:	bf00      	nop
 8009eb4:	e000      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ebe:	4b7c      	ldr	r3, [pc, #496]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eca:	4979      	ldr	r1, [pc, #484]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	650b      	str	r3, [r1, #80]	; 0x50
 8009ed0:	e001      	b.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d049      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009eea:	d02e      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ef0:	d828      	bhi.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ef6:	d02a      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009ef8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009efc:	d822      	bhi.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009efe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f02:	d026      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009f04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f08:	d81c      	bhi.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f0e:	d010      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f14:	d816      	bhi.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01d      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f1e:	d111      	bne.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3304      	adds	r3, #4
 8009f24:	2101      	movs	r1, #1
 8009f26:	4618      	mov	r0, r3
 8009f28:	f001 fdf2 	bl	800bb10 <RCCEx_PLL2_Config>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f30:	e012      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3324      	adds	r3, #36	; 0x24
 8009f36:	2101      	movs	r1, #1
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 fe9b 	bl	800bc74 <RCCEx_PLL3_Config>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f42:	e009      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
      break;
 8009f48:	e006      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009f4a:	bf00      	nop
 8009f4c:	e004      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009f4e:	bf00      	nop
 8009f50:	e002      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009f52:	bf00      	nop
 8009f54:	e000      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d109      	bne.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f5e:	4b54      	ldr	r3, [pc, #336]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f62:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f6a:	4951      	ldr	r1, [pc, #324]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	650b      	str	r3, [r1, #80]	; 0x50
 8009f70:	e001      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d04b      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f8c:	d02e      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f92:	d828      	bhi.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f98:	d02a      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9e:	d822      	bhi.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009fa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fa4:	d026      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009fa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009faa:	d81c      	bhi.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb0:	d010      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb6:	d816      	bhi.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01d      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fc0:	d111      	bne.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f001 fda1 	bl	800bb10 <RCCEx_PLL2_Config>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fd2:	e012      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3324      	adds	r3, #36	; 0x24
 8009fd8:	2101      	movs	r1, #1
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 fe4a 	bl	800bc74 <RCCEx_PLL3_Config>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fe4:	e009      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fea:	e006      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009fec:	bf00      	nop
 8009fee:	e004      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009ff0:	bf00      	nop
 8009ff2:	e002      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009ff4:	bf00      	nop
 8009ff6:	e000      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10a      	bne.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a000:	4b2b      	ldr	r3, [pc, #172]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a004:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a00e:	4928      	ldr	r1, [pc, #160]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a010:	4313      	orrs	r3, r2
 800a012:	658b      	str	r3, [r1, #88]	; 0x58
 800a014:	e001      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d02f      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a02a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a02e:	d00e      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a034:	d814      	bhi.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a036:	2b00      	cmp	r3, #0
 800a038:	d015      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a03a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a03e:	d10f      	bne.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a040:	4b1b      	ldr	r3, [pc, #108]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	4a1a      	ldr	r2, [pc, #104]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a04a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a04c:	e00c      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3304      	adds	r3, #4
 800a052:	2101      	movs	r1, #1
 800a054:	4618      	mov	r0, r3
 800a056:	f001 fd5b 	bl	800bb10 <RCCEx_PLL2_Config>
 800a05a:	4603      	mov	r3, r0
 800a05c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a05e:	e003      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	75fb      	strb	r3, [r7, #23]
      break;
 800a064:	e000      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a066:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d109      	bne.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a06e:	4b10      	ldr	r3, [pc, #64]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a072:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a07a:	490d      	ldr	r1, [pc, #52]	; (800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	650b      	str	r3, [r1, #80]	; 0x50
 800a080:	e001      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d033      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a096:	2b03      	cmp	r3, #3
 800a098:	d81c      	bhi.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a09a:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a0db 	.word	0x0800a0db
 800a0a4:	0800a0b5 	.word	0x0800a0b5
 800a0a8:	0800a0c3 	.word	0x0800a0c3
 800a0ac:	0800a0db 	.word	0x0800a0db
 800a0b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0b4:	4bb8      	ldr	r3, [pc, #736]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	4ab7      	ldr	r2, [pc, #732]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0c0:	e00c      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f001 fd21 	bl	800bb10 <RCCEx_PLL2_Config>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0d2:	e003      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0d8:	e000      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a0da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d109      	bne.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a0e2:	4bad      	ldr	r3, [pc, #692]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e6:	f023 0203 	bic.w	r2, r3, #3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ee:	49aa      	ldr	r1, [pc, #680]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0f4:	e001      	b.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
 800a0f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 8086 	beq.w	800a214 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a108:	4ba4      	ldr	r3, [pc, #656]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4aa3      	ldr	r2, [pc, #652]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a10e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a114:	f7f9 febe 	bl	8003e94 <HAL_GetTick>
 800a118:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a11a:	e009      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a11c:	f7f9 feba 	bl	8003e94 <HAL_GetTick>
 800a120:	4602      	mov	r2, r0
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	2b64      	cmp	r3, #100	; 0x64
 800a128:	d902      	bls.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	75fb      	strb	r3, [r7, #23]
        break;
 800a12e:	e005      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a130:	4b9a      	ldr	r3, [pc, #616]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d0ef      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d166      	bne.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a142:	4b95      	ldr	r3, [pc, #596]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a14c:	4053      	eors	r3, r2
 800a14e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a152:	2b00      	cmp	r3, #0
 800a154:	d013      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a156:	4b90      	ldr	r3, [pc, #576]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a15e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a160:	4b8d      	ldr	r3, [pc, #564]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a164:	4a8c      	ldr	r2, [pc, #560]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a16a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a16c:	4b8a      	ldr	r3, [pc, #552]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a170:	4a89      	ldr	r2, [pc, #548]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a176:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a178:	4a87      	ldr	r2, [pc, #540]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a188:	d115      	bne.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a18a:	f7f9 fe83 	bl	8003e94 <HAL_GetTick>
 800a18e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a190:	e00b      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a192:	f7f9 fe7f 	bl	8003e94 <HAL_GetTick>
 800a196:	4602      	mov	r2, r0
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d902      	bls.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	75fb      	strb	r3, [r7, #23]
            break;
 800a1a8:	e005      	b.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1aa:	4b7b      	ldr	r3, [pc, #492]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0ed      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d126      	bne.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1ca:	d10d      	bne.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a1cc:	4b72      	ldr	r3, [pc, #456]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1da:	0919      	lsrs	r1, r3, #4
 800a1dc:	4b70      	ldr	r3, [pc, #448]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a1de:	400b      	ands	r3, r1
 800a1e0:	496d      	ldr	r1, [pc, #436]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	610b      	str	r3, [r1, #16]
 800a1e6:	e005      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a1e8:	4b6b      	ldr	r3, [pc, #428]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	4a6a      	ldr	r2, [pc, #424]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1f2:	6113      	str	r3, [r2, #16]
 800a1f4:	4b68      	ldr	r3, [pc, #416]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a202:	4965      	ldr	r1, [pc, #404]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a204:	4313      	orrs	r3, r2
 800a206:	670b      	str	r3, [r1, #112]	; 0x70
 800a208:	e004      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	75bb      	strb	r3, [r7, #22]
 800a20e:	e001      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d07e      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a224:	2b28      	cmp	r3, #40	; 0x28
 800a226:	d867      	bhi.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a228:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22e:	bf00      	nop
 800a230:	0800a2ff 	.word	0x0800a2ff
 800a234:	0800a2f9 	.word	0x0800a2f9
 800a238:	0800a2f9 	.word	0x0800a2f9
 800a23c:	0800a2f9 	.word	0x0800a2f9
 800a240:	0800a2f9 	.word	0x0800a2f9
 800a244:	0800a2f9 	.word	0x0800a2f9
 800a248:	0800a2f9 	.word	0x0800a2f9
 800a24c:	0800a2f9 	.word	0x0800a2f9
 800a250:	0800a2d5 	.word	0x0800a2d5
 800a254:	0800a2f9 	.word	0x0800a2f9
 800a258:	0800a2f9 	.word	0x0800a2f9
 800a25c:	0800a2f9 	.word	0x0800a2f9
 800a260:	0800a2f9 	.word	0x0800a2f9
 800a264:	0800a2f9 	.word	0x0800a2f9
 800a268:	0800a2f9 	.word	0x0800a2f9
 800a26c:	0800a2f9 	.word	0x0800a2f9
 800a270:	0800a2e7 	.word	0x0800a2e7
 800a274:	0800a2f9 	.word	0x0800a2f9
 800a278:	0800a2f9 	.word	0x0800a2f9
 800a27c:	0800a2f9 	.word	0x0800a2f9
 800a280:	0800a2f9 	.word	0x0800a2f9
 800a284:	0800a2f9 	.word	0x0800a2f9
 800a288:	0800a2f9 	.word	0x0800a2f9
 800a28c:	0800a2f9 	.word	0x0800a2f9
 800a290:	0800a2ff 	.word	0x0800a2ff
 800a294:	0800a2f9 	.word	0x0800a2f9
 800a298:	0800a2f9 	.word	0x0800a2f9
 800a29c:	0800a2f9 	.word	0x0800a2f9
 800a2a0:	0800a2f9 	.word	0x0800a2f9
 800a2a4:	0800a2f9 	.word	0x0800a2f9
 800a2a8:	0800a2f9 	.word	0x0800a2f9
 800a2ac:	0800a2f9 	.word	0x0800a2f9
 800a2b0:	0800a2ff 	.word	0x0800a2ff
 800a2b4:	0800a2f9 	.word	0x0800a2f9
 800a2b8:	0800a2f9 	.word	0x0800a2f9
 800a2bc:	0800a2f9 	.word	0x0800a2f9
 800a2c0:	0800a2f9 	.word	0x0800a2f9
 800a2c4:	0800a2f9 	.word	0x0800a2f9
 800a2c8:	0800a2f9 	.word	0x0800a2f9
 800a2cc:	0800a2f9 	.word	0x0800a2f9
 800a2d0:	0800a2ff 	.word	0x0800a2ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	2101      	movs	r1, #1
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f001 fc18 	bl	800bb10 <RCCEx_PLL2_Config>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2e4:	e00c      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3324      	adds	r3, #36	; 0x24
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f001 fcc1 	bl	800bc74 <RCCEx_PLL3_Config>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2f6:	e003      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a2fc:	e000      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a2fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a300:	7dfb      	ldrb	r3, [r7, #23]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d109      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a306:	4b24      	ldr	r3, [pc, #144]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a312:	4921      	ldr	r1, [pc, #132]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a314:	4313      	orrs	r3, r2
 800a316:	654b      	str	r3, [r1, #84]	; 0x54
 800a318:	e001      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b00      	cmp	r3, #0
 800a328:	d03e      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a32e:	2b05      	cmp	r3, #5
 800a330:	d820      	bhi.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a332:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a338:	0800a37b 	.word	0x0800a37b
 800a33c:	0800a351 	.word	0x0800a351
 800a340:	0800a363 	.word	0x0800a363
 800a344:	0800a37b 	.word	0x0800a37b
 800a348:	0800a37b 	.word	0x0800a37b
 800a34c:	0800a37b 	.word	0x0800a37b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	3304      	adds	r3, #4
 800a354:	2101      	movs	r1, #1
 800a356:	4618      	mov	r0, r3
 800a358:	f001 fbda 	bl	800bb10 <RCCEx_PLL2_Config>
 800a35c:	4603      	mov	r3, r0
 800a35e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a360:	e00c      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3324      	adds	r3, #36	; 0x24
 800a366:	2101      	movs	r1, #1
 800a368:	4618      	mov	r0, r3
 800a36a:	f001 fc83 	bl	800bc74 <RCCEx_PLL3_Config>
 800a36e:	4603      	mov	r3, r0
 800a370:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a372:	e003      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	75fb      	strb	r3, [r7, #23]
      break;
 800a378:	e000      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a37a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d110      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a382:	4b05      	ldr	r3, [pc, #20]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a386:	f023 0207 	bic.w	r2, r3, #7
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a38e:	4902      	ldr	r1, [pc, #8]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a390:	4313      	orrs	r3, r2
 800a392:	654b      	str	r3, [r1, #84]	; 0x54
 800a394:	e008      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a396:	bf00      	nop
 800a398:	58024400 	.word	0x58024400
 800a39c:	58024800 	.word	0x58024800
 800a3a0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a4:	7dfb      	ldrb	r3, [r7, #23]
 800a3a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d039      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ba:	2b05      	cmp	r3, #5
 800a3bc:	d820      	bhi.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a3be:	a201      	add	r2, pc, #4	; (adr r2, 800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a407 	.word	0x0800a407
 800a3c8:	0800a3dd 	.word	0x0800a3dd
 800a3cc:	0800a3ef 	.word	0x0800a3ef
 800a3d0:	0800a407 	.word	0x0800a407
 800a3d4:	0800a407 	.word	0x0800a407
 800a3d8:	0800a407 	.word	0x0800a407
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f001 fb94 	bl	800bb10 <RCCEx_PLL2_Config>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a3ec:	e00c      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3324      	adds	r3, #36	; 0x24
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f001 fc3d 	bl	800bc74 <RCCEx_PLL3_Config>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a3fe:	e003      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	75fb      	strb	r3, [r7, #23]
      break;
 800a404:	e000      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a406:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10a      	bne.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a40e:	4bb7      	ldr	r3, [pc, #732]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a412:	f023 0207 	bic.w	r2, r3, #7
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41c:	49b3      	ldr	r1, [pc, #716]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	658b      	str	r3, [r1, #88]	; 0x58
 800a422:	e001      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0320 	and.w	r3, r3, #32
 800a430:	2b00      	cmp	r3, #0
 800a432:	d04b      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a43a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a43e:	d02e      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a444:	d828      	bhi.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44a:	d02a      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a44c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a450:	d822      	bhi.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a456:	d026      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a458:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a45c:	d81c      	bhi.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a462:	d010      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a468:	d816      	bhi.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d01d      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a46e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a472:	d111      	bne.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	3304      	adds	r3, #4
 800a478:	2100      	movs	r1, #0
 800a47a:	4618      	mov	r0, r3
 800a47c:	f001 fb48 	bl	800bb10 <RCCEx_PLL2_Config>
 800a480:	4603      	mov	r3, r0
 800a482:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a484:	e012      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	3324      	adds	r3, #36	; 0x24
 800a48a:	2102      	movs	r1, #2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f001 fbf1 	bl	800bc74 <RCCEx_PLL3_Config>
 800a492:	4603      	mov	r3, r0
 800a494:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a496:	e009      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	75fb      	strb	r3, [r7, #23]
      break;
 800a49c:	e006      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a49e:	bf00      	nop
 800a4a0:	e004      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a4a2:	bf00      	nop
 800a4a4:	e002      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a4a6:	bf00      	nop
 800a4a8:	e000      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a4aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10a      	bne.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4b2:	4b8e      	ldr	r3, [pc, #568]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c0:	498a      	ldr	r1, [pc, #552]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	654b      	str	r3, [r1, #84]	; 0x54
 800a4c6:	e001      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d04b      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4e2:	d02e      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a4e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4e8:	d828      	bhi.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a4ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ee:	d02a      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f4:	d822      	bhi.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a4f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4fa:	d026      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a4fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a500:	d81c      	bhi.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a506:	d010      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a50c:	d816      	bhi.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d01d      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a516:	d111      	bne.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3304      	adds	r3, #4
 800a51c:	2100      	movs	r1, #0
 800a51e:	4618      	mov	r0, r3
 800a520:	f001 faf6 	bl	800bb10 <RCCEx_PLL2_Config>
 800a524:	4603      	mov	r3, r0
 800a526:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a528:	e012      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3324      	adds	r3, #36	; 0x24
 800a52e:	2102      	movs	r1, #2
 800a530:	4618      	mov	r0, r3
 800a532:	f001 fb9f 	bl	800bc74 <RCCEx_PLL3_Config>
 800a536:	4603      	mov	r3, r0
 800a538:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a53a:	e009      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	75fb      	strb	r3, [r7, #23]
      break;
 800a540:	e006      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a542:	bf00      	nop
 800a544:	e004      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a546:	bf00      	nop
 800a548:	e002      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a54a:	bf00      	nop
 800a54c:	e000      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a54e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a550:	7dfb      	ldrb	r3, [r7, #23]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a556:	4b65      	ldr	r3, [pc, #404]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a564:	4961      	ldr	r1, [pc, #388]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a566:	4313      	orrs	r3, r2
 800a568:	658b      	str	r3, [r1, #88]	; 0x58
 800a56a:	e001      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
 800a56e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d04b      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a582:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a586:	d02e      	beq.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a588:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a58c:	d828      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a58e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a592:	d02a      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a598:	d822      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a59a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a59e:	d026      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a5a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5a4:	d81c      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a5a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5aa:	d010      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a5ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5b0:	d816      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d01d      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a5b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ba:	d111      	bne.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f001 faa4 	bl	800bb10 <RCCEx_PLL2_Config>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5cc:	e012      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3324      	adds	r3, #36	; 0x24
 800a5d2:	2102      	movs	r1, #2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 fb4d 	bl	800bc74 <RCCEx_PLL3_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5de:	e009      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5e4:	e006      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a5e6:	bf00      	nop
 800a5e8:	e004      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a5ea:	bf00      	nop
 800a5ec:	e002      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a5ee:	bf00      	nop
 800a5f0:	e000      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a5f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5f4:	7dfb      	ldrb	r3, [r7, #23]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a5fa:	4b3c      	ldr	r3, [pc, #240]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a608:	4938      	ldr	r1, [pc, #224]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	658b      	str	r3, [r1, #88]	; 0x58
 800a60e:	e001      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a610:	7dfb      	ldrb	r3, [r7, #23]
 800a612:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0308 	and.w	r3, r3, #8
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01a      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62a:	d10a      	bne.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3324      	adds	r3, #36	; 0x24
 800a630:	2102      	movs	r1, #2
 800a632:	4618      	mov	r0, r3
 800a634:	f001 fb1e 	bl	800bc74 <RCCEx_PLL3_Config>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a642:	4b2a      	ldr	r3, [pc, #168]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a646:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a650:	4926      	ldr	r1, [pc, #152]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a652:	4313      	orrs	r3, r2
 800a654:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 0310 	and.w	r3, r3, #16
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d01a      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a66c:	d10a      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3324      	adds	r3, #36	; 0x24
 800a672:	2102      	movs	r1, #2
 800a674:	4618      	mov	r0, r3
 800a676:	f001 fafd 	bl	800bc74 <RCCEx_PLL3_Config>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a684:	4b19      	ldr	r3, [pc, #100]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a692:	4916      	ldr	r1, [pc, #88]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a694:	4313      	orrs	r3, r2
 800a696:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d036      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a6aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6ae:	d01f      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a6b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6b4:	d817      	bhi.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a6ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6be:	d009      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a6c0:	e011      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 fa21 	bl	800bb10 <RCCEx_PLL2_Config>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6d2:	e00e      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3324      	adds	r3, #36	; 0x24
 800a6d8:	2102      	movs	r1, #2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 faca 	bl	800bc74 <RCCEx_PLL3_Config>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6e4:	e005      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ea:	e002      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a6ec:	58024400 	.word	0x58024400
      break;
 800a6f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10a      	bne.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6f8:	4b93      	ldr	r3, [pc, #588]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a6fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a706:	4990      	ldr	r1, [pc, #576]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	658b      	str	r3, [r1, #88]	; 0x58
 800a70c:	e001      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d033      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a728:	d01c      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a72a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a72e:	d816      	bhi.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a734:	d003      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a73a:	d007      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a73c:	e00f      	b.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a73e:	4b82      	ldr	r3, [pc, #520]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	4a81      	ldr	r2, [pc, #516]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a74a:	e00c      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3324      	adds	r3, #36	; 0x24
 800a750:	2101      	movs	r1, #1
 800a752:	4618      	mov	r0, r3
 800a754:	f001 fa8e 	bl	800bc74 <RCCEx_PLL3_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a75c:	e003      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	75fb      	strb	r3, [r7, #23]
      break;
 800a762:	e000      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a764:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a76c:	4b76      	ldr	r3, [pc, #472]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a77a:	4973      	ldr	r1, [pc, #460]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	654b      	str	r3, [r1, #84]	; 0x54
 800a780:	e001      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a782:	7dfb      	ldrb	r3, [r7, #23]
 800a784:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d029      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800a79a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a79e:	d007      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800a7a0:	e00f      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7a2:	4b69      	ldr	r3, [pc, #420]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a6:	4a68      	ldr	r2, [pc, #416]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7ae:	e00b      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	2102      	movs	r1, #2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 f9aa 	bl	800bb10 <RCCEx_PLL2_Config>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7c0:	e002      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d109      	bne.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7ce:	4b5e      	ldr	r3, [pc, #376]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7da:	495b      	ldr	r1, [pc, #364]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a7e0:	e001      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
 800a7e4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00a      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	3324      	adds	r3, #36	; 0x24
 800a7f6:	2102      	movs	r1, #2
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f001 fa3b 	bl	800bc74 <RCCEx_PLL3_Config>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d030      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a81c:	d017      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a81e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a822:	d811      	bhi.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a828:	d013      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a82a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a82e:	d80b      	bhi.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a830:	2b00      	cmp	r3, #0
 800a832:	d010      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a838:	d106      	bne.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a83a:	4b43      	ldr	r3, [pc, #268]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83e:	4a42      	ldr	r2, [pc, #264]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a844:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a846:	e007      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	75fb      	strb	r3, [r7, #23]
      break;
 800a84c:	e004      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a84e:	bf00      	nop
 800a850:	e002      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a852:	bf00      	nop
 800a854:	e000      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a856:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d109      	bne.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a85e:	4b3a      	ldr	r3, [pc, #232]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a862:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a86a:	4937      	ldr	r1, [pc, #220]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	654b      	str	r3, [r1, #84]	; 0x54
 800a870:	e001      	b.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d008      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a882:	4b31      	ldr	r3, [pc, #196]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a886:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88e:	492e      	ldr	r1, [pc, #184]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a890:	4313      	orrs	r3, r2
 800a892:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d009      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a8a0:	4b29      	ldr	r3, [pc, #164]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a8ae:	4926      	ldr	r1, [pc, #152]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d008      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8c0:	4b21      	ldr	r3, [pc, #132]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8cc:	491e      	ldr	r1, [pc, #120]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00d      	beq.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8de:	4b1a      	ldr	r3, [pc, #104]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	4a19      	ldr	r2, [pc, #100]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8e8:	6113      	str	r3, [r2, #16]
 800a8ea:	4b17      	ldr	r3, [pc, #92]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8ec:	691a      	ldr	r2, [r3, #16]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a8f4:	4914      	ldr	r1, [pc, #80]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	da08      	bge.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a902:	4b11      	ldr	r3, [pc, #68]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a906:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a90e:	490e      	ldr	r1, [pc, #56]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a910:	4313      	orrs	r3, r2
 800a912:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d009      	beq.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a920:	4b09      	ldr	r3, [pc, #36]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a924:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92e:	4906      	ldr	r1, [pc, #24]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a930:	4313      	orrs	r3, r2
 800a932:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a934:	7dbb      	ldrb	r3, [r7, #22]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	e000      	b.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
}
 800a940:	4618      	mov	r0, r3
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	58024400 	.word	0x58024400

0800a94c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b090      	sub	sp, #64	; 0x40
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a95a:	f040 8095 	bne.w	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a95e:	4bae      	ldr	r3, [pc, #696]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a962:	f003 0307 	and.w	r3, r3, #7
 800a966:	633b      	str	r3, [r7, #48]	; 0x30
 800a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	f200 8088 	bhi.w	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a970:	a201      	add	r2, pc, #4	; (adr r2, 800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a976:	bf00      	nop
 800a978:	0800a98d 	.word	0x0800a98d
 800a97c:	0800a9b5 	.word	0x0800a9b5
 800a980:	0800a9dd 	.word	0x0800a9dd
 800a984:	0800aa79 	.word	0x0800aa79
 800a988:	0800aa05 	.word	0x0800aa05

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a98c:	4ba2      	ldr	r3, [pc, #648]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a998:	d108      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 ff64 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9a8:	f000 bc95 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9b0:	f000 bc91 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9b4:	4b98      	ldr	r3, [pc, #608]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9c0:	d108      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9c2:	f107 0318 	add.w	r3, r7, #24
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 fca8 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9d0:	f000 bc81 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9d8:	f000 bc7d 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9dc:	4b8e      	ldr	r3, [pc, #568]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9e8:	d108      	bne.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ea:	f107 030c 	add.w	r3, r7, #12
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fde8 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9f8:	f000 bc6d 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa00:	f000 bc69 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa04:	4b84      	ldr	r3, [pc, #528]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa0c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa0e:	4b82      	ldr	r3, [pc, #520]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 0304 	and.w	r3, r3, #4
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d10c      	bne.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800aa1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d109      	bne.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa20:	4b7d      	ldr	r3, [pc, #500]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	08db      	lsrs	r3, r3, #3
 800aa26:	f003 0303 	and.w	r3, r3, #3
 800aa2a:	4a7c      	ldr	r2, [pc, #496]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800aa2c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa32:	e01f      	b.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa34:	4b78      	ldr	r3, [pc, #480]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa40:	d106      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800aa42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa48:	d102      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa4a:	4b75      	ldr	r3, [pc, #468]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa4e:	e011      	b.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa50:	4b71      	ldr	r3, [pc, #452]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa5c:	d106      	bne.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800aa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa64:	d102      	bne.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa66:	4b6f      	ldr	r3, [pc, #444]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800aa68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa6a:	e003      	b.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa70:	f000 bc31 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa74:	f000 bc2f 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa78:	4b6b      	ldr	r3, [pc, #428]	; (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800aa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa7c:	f000 bc2b 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800aa80:	2300      	movs	r3, #0
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa84:	f000 bc27 	b.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa8e:	f040 8095 	bne.w	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800aa92:	4b61      	ldr	r3, [pc, #388]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800aa9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa2:	d04d      	beq.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaaa:	f200 8084 	bhi.w	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	2bc0      	cmp	r3, #192	; 0xc0
 800aab2:	d07d      	beq.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2bc0      	cmp	r3, #192	; 0xc0
 800aab8:	d87d      	bhi.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	2b80      	cmp	r3, #128	; 0x80
 800aabe:	d02d      	beq.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	2b80      	cmp	r3, #128	; 0x80
 800aac4:	d877      	bhi.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	2b40      	cmp	r3, #64	; 0x40
 800aad0:	d012      	beq.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800aad2:	e070      	b.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aad4:	4b50      	ldr	r3, [pc, #320]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aadc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aae0:	d107      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fec0 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaf0:	e3f1      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaf6:	e3ee      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaf8:	4b47      	ldr	r3, [pc, #284]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab04:	d107      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab06:	f107 0318 	add.w	r3, r7, #24
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fc06 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab14:	e3df      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab1a:	e3dc      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab1c:	4b3e      	ldr	r3, [pc, #248]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab28:	d107      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab2a:	f107 030c 	add.w	r3, r7, #12
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fd48 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab38:	e3cd      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab3e:	e3ca      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab40:	4b35      	ldr	r3, [pc, #212]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab48:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab4a:	4b33      	ldr	r3, [pc, #204]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	d10c      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d109      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab5c:	4b2e      	ldr	r3, [pc, #184]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	08db      	lsrs	r3, r3, #3
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	4a2d      	ldr	r2, [pc, #180]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800ab68:	fa22 f303 	lsr.w	r3, r2, r3
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab6e:	e01e      	b.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab70:	4b29      	ldr	r3, [pc, #164]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7c:	d106      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800ab7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab84:	d102      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab86:	4b26      	ldr	r3, [pc, #152]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8a:	e010      	b.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab8c:	4b22      	ldr	r3, [pc, #136]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab98:	d106      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aba0:	d102      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aba2:	4b20      	ldr	r3, [pc, #128]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aba6:	e002      	b.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800abac:	e393      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abae:	e392      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800abb0:	4b1d      	ldr	r3, [pc, #116]	; (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800abb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abb4:	e38f      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abba:	e38c      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abc2:	f040 80a7 	bne.w	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800abc6:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800abc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800abce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800abd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abd6:	d05f      	beq.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800abd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abde:	f200 8096 	bhi.w	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abe8:	f000 808e 	beq.w	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abf2:	f200 808c 	bhi.w	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abfc:	d03a      	beq.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac04:	f200 8083 	bhi.w	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00e      	beq.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac14:	d01c      	beq.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800ac16:	e07a      	b.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ac18:	58024400 	.word	0x58024400
 800ac1c:	03d09000 	.word	0x03d09000
 800ac20:	003d0900 	.word	0x003d0900
 800ac24:	017d7840 	.word	0x017d7840
 800ac28:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac2c:	4baa      	ldr	r3, [pc, #680]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac38:	d107      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 fe14 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac48:	e345      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac4e:	e342      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac50:	4ba1      	ldr	r3, [pc, #644]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac5c:	d107      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac5e:	f107 0318 	add.w	r3, r7, #24
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 fb5a 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac6c:	e333      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac72:	e330      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac74:	4b98      	ldr	r3, [pc, #608]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac80:	d107      	bne.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac82:	f107 030c 	add.w	r3, r7, #12
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 fc9c 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac90:	e321      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac96:	e31e      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac98:	4b8f      	ldr	r3, [pc, #572]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ac9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aca2:	4b8d      	ldr	r3, [pc, #564]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0304 	and.w	r3, r3, #4
 800acaa:	2b04      	cmp	r3, #4
 800acac:	d10c      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800acae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d109      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acb4:	4b88      	ldr	r3, [pc, #544]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	08db      	lsrs	r3, r3, #3
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	4a87      	ldr	r2, [pc, #540]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800acc0:	fa22 f303 	lsr.w	r3, r2, r3
 800acc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc6:	e01e      	b.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acc8:	4b83      	ldr	r3, [pc, #524]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acd4:	d106      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800acd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acdc:	d102      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800acde:	4b80      	ldr	r3, [pc, #512]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ace0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace2:	e010      	b.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ace4:	4b7c      	ldr	r3, [pc, #496]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acf0:	d106      	bne.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800acf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf8:	d102      	bne.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800acfa:	4b7a      	ldr	r3, [pc, #488]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800acfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acfe:	e002      	b.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ad04:	e2e7      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad06:	e2e6      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ad08:	4b77      	ldr	r3, [pc, #476]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad0c:	e2e3      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad12:	e2e0      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad1a:	f040 809c 	bne.w	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ad1e:	4b6e      	ldr	r3, [pc, #440]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ad20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad22:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ad26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad2e:	d054      	beq.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad36:	f200 808b 	bhi.w	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad40:	f000 8083 	beq.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad4a:	f200 8081 	bhi.w	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad54:	d02f      	beq.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad5c:	d878      	bhi.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad6a:	d012      	beq.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800ad6c:	e070      	b.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad6e:	4b5a      	ldr	r3, [pc, #360]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad7a:	d107      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 fd73 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad8a:	e2a4      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad90:	e2a1      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad92:	4b51      	ldr	r3, [pc, #324]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada0:	f107 0318 	add.w	r3, r7, #24
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 fab9 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800adae:	e292      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adb4:	e28f      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adb6:	4b48      	ldr	r3, [pc, #288]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adc2:	d107      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adc4:	f107 030c 	add.w	r3, r7, #12
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fbfb 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800add2:	e280      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800add8:	e27d      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800adda:	4b3f      	ldr	r3, [pc, #252]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800addc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ade2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ade4:	4b3c      	ldr	r3, [pc, #240]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 0304 	and.w	r3, r3, #4
 800adec:	2b04      	cmp	r3, #4
 800adee:	d10c      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adf6:	4b38      	ldr	r3, [pc, #224]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	08db      	lsrs	r3, r3, #3
 800adfc:	f003 0303 	and.w	r3, r3, #3
 800ae00:	4a36      	ldr	r2, [pc, #216]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ae02:	fa22 f303 	lsr.w	r3, r2, r3
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae08:	e01e      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae0a:	4b33      	ldr	r3, [pc, #204]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae16:	d106      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae1e:	d102      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae20:	4b2f      	ldr	r3, [pc, #188]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae24:	e010      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae26:	4b2c      	ldr	r3, [pc, #176]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae32:	d106      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800ae34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae3a:	d102      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ae3c:	4b29      	ldr	r3, [pc, #164]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ae3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae40:	e002      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ae46:	e246      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae48:	e245      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae4a:	4b27      	ldr	r3, [pc, #156]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae4e:	e242      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae54:	e23f      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae5c:	f040 80a8 	bne.w	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ae60:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ae62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae64:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ae68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae70:	d060      	beq.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae78:	f200 8097 	bhi.w	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae82:	f000 808f 	beq.w	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800ae86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae8c:	f200 808d 	bhi.w	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800ae90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae96:	d03b      	beq.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800ae98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae9e:	f200 8084 	bhi.w	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d004      	beq.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800aea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeae:	d01d      	beq.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800aeb0:	e07b      	b.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aeb2:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aebe:	d107      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fcd1 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aece:	e202      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aed4:	e1ff      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aed6:	bf00      	nop
 800aed8:	58024400 	.word	0x58024400
 800aedc:	03d09000 	.word	0x03d09000
 800aee0:	003d0900 	.word	0x003d0900
 800aee4:	017d7840 	.word	0x017d7840
 800aee8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeec:	4ba3      	ldr	r3, [pc, #652]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aef8:	d107      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aefa:	f107 0318 	add.w	r3, r7, #24
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 fa0c 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af08:	e1e5      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af0e:	e1e2      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af10:	4b9a      	ldr	r3, [pc, #616]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af1c:	d107      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af1e:	f107 030c 	add.w	r3, r7, #12
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fb4e 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af2c:	e1d3      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af32:	e1d0      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af34:	4b91      	ldr	r3, [pc, #580]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af3c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af3e:	4b8f      	ldr	r3, [pc, #572]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0304 	and.w	r3, r3, #4
 800af46:	2b04      	cmp	r3, #4
 800af48:	d10c      	bne.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800af4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d109      	bne.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af50:	4b8a      	ldr	r3, [pc, #552]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	08db      	lsrs	r3, r3, #3
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	4a89      	ldr	r2, [pc, #548]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800af5c:	fa22 f303 	lsr.w	r3, r2, r3
 800af60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af62:	e01e      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af64:	4b85      	ldr	r3, [pc, #532]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af70:	d106      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800af72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af78:	d102      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af7a:	4b82      	ldr	r3, [pc, #520]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af7e:	e010      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af80:	4b7e      	ldr	r3, [pc, #504]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af8c:	d106      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800af8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af94:	d102      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af96:	4b7c      	ldr	r3, [pc, #496]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af9a:	e002      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800afa0:	e199      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800afa2:	e198      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800afa4:	4b79      	ldr	r3, [pc, #484]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afa8:	e195      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afae:	e192      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800afb6:	d173      	bne.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800afb8:	4b70      	ldr	r3, [pc, #448]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800afba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800afc0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800afc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afc8:	d02f      	beq.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afd0:	d863      	bhi.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d004      	beq.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afde:	d012      	beq.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800afe0:	e05b      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afe2:	4b66      	ldr	r3, [pc, #408]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afee:	d107      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aff0:	f107 0318 	add.w	r3, r7, #24
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 f991 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800affe:	e16a      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b004:	e167      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b006:	4b5d      	ldr	r3, [pc, #372]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b00e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b012:	d107      	bne.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b014:	f107 030c 	add.w	r3, r7, #12
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 fad3 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b022:	e158      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b028:	e155      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b02a:	4b54      	ldr	r3, [pc, #336]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b02e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b032:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b034:	4b51      	ldr	r3, [pc, #324]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d10c      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b042:	2b00      	cmp	r3, #0
 800b044:	d109      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b046:	4b4d      	ldr	r3, [pc, #308]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	08db      	lsrs	r3, r3, #3
 800b04c:	f003 0303 	and.w	r3, r3, #3
 800b050:	4a4b      	ldr	r2, [pc, #300]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b052:	fa22 f303 	lsr.w	r3, r2, r3
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b058:	e01e      	b.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b05a:	4b48      	ldr	r3, [pc, #288]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b066:	d106      	bne.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b06a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b06e:	d102      	bne.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b070:	4b44      	ldr	r3, [pc, #272]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b072:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b074:	e010      	b.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b076:	4b41      	ldr	r3, [pc, #260]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b07e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b082:	d106      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b08a:	d102      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b08c:	4b3e      	ldr	r3, [pc, #248]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b090:	e002      	b.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b096:	e11e      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b098:	e11d      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b09a:	2300      	movs	r3, #0
 800b09c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b09e:	e11a      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0a6:	d133      	bne.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b0a8:	4b34      	ldr	r3, [pc, #208]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b0aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d004      	beq.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0be:	d012      	beq.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b0c0:	e023      	b.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0c2:	4b2e      	ldr	r3, [pc, #184]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0ce:	d107      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 fbc9 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b0de:	e0fa      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0e4:	e0f7      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0e6:	4b25      	ldr	r3, [pc, #148]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0f2:	d107      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0f4:	f107 0318 	add.w	r3, r7, #24
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 f90f 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b0fe:	6a3b      	ldr	r3, [r7, #32]
 800b100:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b102:	e0e8      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b108:	e0e5      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b10e:	e0e2      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b116:	f040 808f 	bne.w	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b11a:	4b18      	ldr	r3, [pc, #96]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b122:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b12a:	d075      	beq.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b132:	d87e      	bhi.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13a:	d060      	beq.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b142:	d876      	bhi.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b14a:	d045      	beq.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b152:	d86e      	bhi.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b15a:	d02b      	beq.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b162:	d866      	bhi.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b166:	2b00      	cmp	r3, #0
 800b168:	d004      	beq.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b170:	d00e      	beq.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b172:	e05e      	b.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b174:	f000 f8bc 	bl	800b2f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b178:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b17a:	e0ac      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b17c:	58024400 	.word	0x58024400
 800b180:	03d09000 	.word	0x03d09000
 800b184:	003d0900 	.word	0x003d0900
 800b188:	017d7840 	.word	0x017d7840
 800b18c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b190:	4b53      	ldr	r3, [pc, #332]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b19c:	d107      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19e:	f107 0318 	add.w	r3, r7, #24
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f8ba 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b1ac:	e093      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1b2:	e090      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1b4:	4b4a      	ldr	r3, [pc, #296]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c0:	d107      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1c2:	f107 030c 	add.w	r3, r7, #12
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 f9fc 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b1d0:	e081      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1d6:	e07e      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1d8:	4b41      	ldr	r3, [pc, #260]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0304 	and.w	r3, r3, #4
 800b1e0:	2b04      	cmp	r3, #4
 800b1e2:	d109      	bne.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1e4:	4b3e      	ldr	r3, [pc, #248]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	08db      	lsrs	r3, r3, #3
 800b1ea:	f003 0303 	and.w	r3, r3, #3
 800b1ee:	4a3d      	ldr	r2, [pc, #244]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b1f6:	e06e      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1fc:	e06b      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b1fe:	4b38      	ldr	r3, [pc, #224]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b20a:	d102      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800b20c:	4b36      	ldr	r3, [pc, #216]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b210:	e061      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b216:	e05e      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b218:	4b31      	ldr	r3, [pc, #196]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b224:	d102      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800b226:	4b31      	ldr	r3, [pc, #196]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b228:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b22a:	e054      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b230:	e051      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b236:	e04e      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b23e:	d148      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b240:	4b27      	ldr	r3, [pc, #156]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b244:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b248:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b250:	d02a      	beq.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b258:	d838      	bhi.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d004      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b266:	d00d      	beq.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b268:	e030      	b.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b26a:	4b1d      	ldr	r3, [pc, #116]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b276:	d102      	bne.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800b278:	4b1c      	ldr	r3, [pc, #112]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b27a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b27c:	e02b      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b282:	e028      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b284:	4b16      	ldr	r3, [pc, #88]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b28c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b290:	d107      	bne.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b296:	4618      	mov	r0, r3
 800b298:	f000 fae8 	bl	800b86c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b2a0:	e019      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2a6:	e016      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2a8:	4b0d      	ldr	r3, [pc, #52]	; (800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2b4:	d107      	bne.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b6:	f107 0318 	add.w	r3, r7, #24
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 f82e 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b2c4:	e007      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2ca:	e004      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2d0:	e001      	b.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3740      	adds	r7, #64	; 0x40
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	58024400 	.word	0x58024400
 800b2e4:	03d09000 	.word	0x03d09000
 800b2e8:	003d0900 	.word	0x003d0900
 800b2ec:	017d7840 	.word	0x017d7840

0800b2f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b2f4:	f7fe fb72 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	4b06      	ldr	r3, [pc, #24]	; (800b314 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	091b      	lsrs	r3, r3, #4
 800b300:	f003 0307 	and.w	r3, r3, #7
 800b304:	4904      	ldr	r1, [pc, #16]	; (800b318 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b306:	5ccb      	ldrb	r3, [r1, r3]
 800b308:	f003 031f 	and.w	r3, r3, #31
 800b30c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b310:	4618      	mov	r0, r3
 800b312:	bd80      	pop	{r7, pc}
 800b314:	58024400 	.word	0x58024400
 800b318:	08019ce4 	.word	0x08019ce4

0800b31c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b089      	sub	sp, #36	; 0x24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b324:	4ba1      	ldr	r3, [pc, #644]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b328:	f003 0303 	and.w	r3, r3, #3
 800b32c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b32e:	4b9f      	ldr	r3, [pc, #636]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b332:	0b1b      	lsrs	r3, r3, #12
 800b334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b338:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b33a:	4b9c      	ldr	r3, [pc, #624]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33e:	091b      	lsrs	r3, r3, #4
 800b340:	f003 0301 	and.w	r3, r3, #1
 800b344:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b346:	4b99      	ldr	r3, [pc, #612]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34a:	08db      	lsrs	r3, r3, #3
 800b34c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	fb02 f303 	mul.w	r3, r2, r3
 800b356:	ee07 3a90 	vmov	s15, r3
 800b35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 8111 	beq.w	800b58c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	f000 8083 	beq.w	800b478 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	2b02      	cmp	r3, #2
 800b376:	f200 80a1 	bhi.w	800b4bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d056      	beq.n	800b434 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b386:	e099      	b.n	800b4bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b388:	4b88      	ldr	r3, [pc, #544]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b00      	cmp	r3, #0
 800b392:	d02d      	beq.n	800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b394:	4b85      	ldr	r3, [pc, #532]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	08db      	lsrs	r3, r3, #3
 800b39a:	f003 0303 	and.w	r3, r3, #3
 800b39e:	4a84      	ldr	r2, [pc, #528]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	ee07 3a90 	vmov	s15, r3
 800b3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	ee07 3a90 	vmov	s15, r3
 800b3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3be:	4b7b      	ldr	r3, [pc, #492]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c6:	ee07 3a90 	vmov	s15, r3
 800b3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b3ee:	e087      	b.n	800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b402:	4b6a      	ldr	r3, [pc, #424]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40a:	ee07 3a90 	vmov	s15, r3
 800b40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b412:	ed97 6a03 	vldr	s12, [r7, #12]
 800b416:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b42e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b432:	e065      	b.n	800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	ee07 3a90 	vmov	s15, r3
 800b43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b5bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b446:	4b59      	ldr	r3, [pc, #356]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b44e:	ee07 3a90 	vmov	s15, r3
 800b452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b456:	ed97 6a03 	vldr	s12, [r7, #12]
 800b45a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b476:	e043      	b.n	800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b482:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48a:	4b48      	ldr	r3, [pc, #288]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b492:	ee07 3a90 	vmov	s15, r3
 800b496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b49e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4ba:	e021      	b.n	800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	ee07 3a90 	vmov	s15, r3
 800b4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b5bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ce:	4b37      	ldr	r3, [pc, #220]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b500:	4b2a      	ldr	r3, [pc, #168]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b504:	0a5b      	lsrs	r3, r3, #9
 800b506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b50a:	ee07 3a90 	vmov	s15, r3
 800b50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b51a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b51e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b526:	ee17 2a90 	vmov	r2, s15
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b52e:	4b1f      	ldr	r3, [pc, #124]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b532:	0c1b      	lsrs	r3, r3, #16
 800b534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b538:	ee07 3a90 	vmov	s15, r3
 800b53c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b544:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b548:	edd7 6a07 	vldr	s13, [r7, #28]
 800b54c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b554:	ee17 2a90 	vmov	r2, s15
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b55c:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b560:	0e1b      	lsrs	r3, r3, #24
 800b562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b566:	ee07 3a90 	vmov	s15, r3
 800b56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b572:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b576:	edd7 6a07 	vldr	s13, [r7, #28]
 800b57a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b57e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b582:	ee17 2a90 	vmov	r2, s15
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b58a:	e008      	b.n	800b59e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	609a      	str	r2, [r3, #8]
}
 800b59e:	bf00      	nop
 800b5a0:	3724      	adds	r7, #36	; 0x24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	58024400 	.word	0x58024400
 800b5b0:	03d09000 	.word	0x03d09000
 800b5b4:	46000000 	.word	0x46000000
 800b5b8:	4c742400 	.word	0x4c742400
 800b5bc:	4a742400 	.word	0x4a742400
 800b5c0:	4bbebc20 	.word	0x4bbebc20

0800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b089      	sub	sp, #36	; 0x24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5cc:	4ba1      	ldr	r3, [pc, #644]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d0:	f003 0303 	and.w	r3, r3, #3
 800b5d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b5d6:	4b9f      	ldr	r3, [pc, #636]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5da:	0d1b      	lsrs	r3, r3, #20
 800b5dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b5e2:	4b9c      	ldr	r3, [pc, #624]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e6:	0a1b      	lsrs	r3, r3, #8
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b5ee:	4b99      	ldr	r3, [pc, #612]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f2:	08db      	lsrs	r3, r3, #3
 800b5f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	fb02 f303 	mul.w	r3, r2, r3
 800b5fe:	ee07 3a90 	vmov	s15, r3
 800b602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b606:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 8111 	beq.w	800b834 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	2b02      	cmp	r3, #2
 800b616:	f000 8083 	beq.w	800b720 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	f200 80a1 	bhi.w	800b764 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d056      	beq.n	800b6dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b62e:	e099      	b.n	800b764 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b630:	4b88      	ldr	r3, [pc, #544]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 0320 	and.w	r3, r3, #32
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d02d      	beq.n	800b698 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b63c:	4b85      	ldr	r3, [pc, #532]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	08db      	lsrs	r3, r3, #3
 800b642:	f003 0303 	and.w	r3, r3, #3
 800b646:	4a84      	ldr	r2, [pc, #528]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b648:	fa22 f303 	lsr.w	r3, r2, r3
 800b64c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	ee07 3a90 	vmov	s15, r3
 800b654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	ee07 3a90 	vmov	s15, r3
 800b65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b666:	4b7b      	ldr	r3, [pc, #492]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b66e:	ee07 3a90 	vmov	s15, r3
 800b672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b676:	ed97 6a03 	vldr	s12, [r7, #12]
 800b67a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b692:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b696:	e087      	b.n	800b7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	ee07 3a90 	vmov	s15, r3
 800b69e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b6a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6aa:	4b6a      	ldr	r3, [pc, #424]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6b2:	ee07 3a90 	vmov	s15, r3
 800b6b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6da:	e065      	b.n	800b7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ee:	4b59      	ldr	r3, [pc, #356]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f6:	ee07 3a90 	vmov	s15, r3
 800b6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b702:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b70e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b71a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b71e:	e043      	b.n	800b7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	ee07 3a90 	vmov	s15, r3
 800b726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b732:	4b48      	ldr	r3, [pc, #288]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b742:	ed97 6a03 	vldr	s12, [r7, #12]
 800b746:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b75e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b762:	e021      	b.n	800b7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	ee07 3a90 	vmov	s15, r3
 800b76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b776:	4b37      	ldr	r3, [pc, #220]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b77e:	ee07 3a90 	vmov	s15, r3
 800b782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b786:	ed97 6a03 	vldr	s12, [r7, #12]
 800b78a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b7a8:	4b2a      	ldr	r3, [pc, #168]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ac:	0a5b      	lsrs	r3, r3, #9
 800b7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b2:	ee07 3a90 	vmov	s15, r3
 800b7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ce:	ee17 2a90 	vmov	r2, s15
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b7d6:	4b1f      	ldr	r3, [pc, #124]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7da:	0c1b      	lsrs	r3, r3, #16
 800b7dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7e0:	ee07 3a90 	vmov	s15, r3
 800b7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7fc:	ee17 2a90 	vmov	r2, s15
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b804:	4b13      	ldr	r3, [pc, #76]	; (800b854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b808:	0e1b      	lsrs	r3, r3, #24
 800b80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b81a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b81e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b82a:	ee17 2a90 	vmov	r2, s15
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b832:	e008      	b.n	800b846 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	609a      	str	r2, [r3, #8]
}
 800b846:	bf00      	nop
 800b848:	3724      	adds	r7, #36	; 0x24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	58024400 	.word	0x58024400
 800b858:	03d09000 	.word	0x03d09000
 800b85c:	46000000 	.word	0x46000000
 800b860:	4c742400 	.word	0x4c742400
 800b864:	4a742400 	.word	0x4a742400
 800b868:	4bbebc20 	.word	0x4bbebc20

0800b86c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b089      	sub	sp, #36	; 0x24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b874:	4ba0      	ldr	r3, [pc, #640]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b878:	f003 0303 	and.w	r3, r3, #3
 800b87c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b87e:	4b9e      	ldr	r3, [pc, #632]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b882:	091b      	lsrs	r3, r3, #4
 800b884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b888:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b88a:	4b9b      	ldr	r3, [pc, #620]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b894:	4b98      	ldr	r3, [pc, #608]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b898:	08db      	lsrs	r3, r3, #3
 800b89a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	fb02 f303 	mul.w	r3, r2, r3
 800b8a4:	ee07 3a90 	vmov	s15, r3
 800b8a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 8111 	beq.w	800bada <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	f000 8083 	beq.w	800b9c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	f200 80a1 	bhi.w	800ba0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d056      	beq.n	800b982 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b8d4:	e099      	b.n	800ba0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8d6:	4b88      	ldr	r3, [pc, #544]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f003 0320 	and.w	r3, r3, #32
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d02d      	beq.n	800b93e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b8e2:	4b85      	ldr	r3, [pc, #532]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	08db      	lsrs	r3, r3, #3
 800b8e8:	f003 0303 	and.w	r3, r3, #3
 800b8ec:	4a83      	ldr	r2, [pc, #524]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b8ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	ee07 3a90 	vmov	s15, r3
 800b904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b90c:	4b7a      	ldr	r3, [pc, #488]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b914:	ee07 3a90 	vmov	s15, r3
 800b918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b91c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b920:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b92c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b934:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b938:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b93c:	e087      	b.n	800ba4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	ee07 3a90 	vmov	s15, r3
 800b944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b948:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b94c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b950:	4b69      	ldr	r3, [pc, #420]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b958:	ee07 3a90 	vmov	s15, r3
 800b95c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b960:	ed97 6a03 	vldr	s12, [r7, #12]
 800b964:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b96c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b97c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b980:	e065      	b.n	800ba4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	ee07 3a90 	vmov	s15, r3
 800b988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bb08 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b994:	4b58      	ldr	r3, [pc, #352]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b99c:	ee07 3a90 	vmov	s15, r3
 800b9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9c4:	e043      	b.n	800ba4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b9d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9d8:	4b47      	ldr	r3, [pc, #284]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e0:	ee07 3a90 	vmov	s15, r3
 800b9e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba08:	e021      	b.n	800ba4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	ee07 3a90 	vmov	s15, r3
 800ba10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba14:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba1c:	4b36      	ldr	r3, [pc, #216]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba24:	ee07 3a90 	vmov	s15, r3
 800ba28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba30:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba4c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ba4e:	4b2a      	ldr	r3, [pc, #168]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba52:	0a5b      	lsrs	r3, r3, #9
 800ba54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba58:	ee07 3a90 	vmov	s15, r3
 800ba5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba74:	ee17 2a90 	vmov	r2, s15
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800ba7c:	4b1e      	ldr	r3, [pc, #120]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba80:	0c1b      	lsrs	r3, r3, #16
 800ba82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba96:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa2:	ee17 2a90 	vmov	r2, s15
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800baaa:	4b13      	ldr	r3, [pc, #76]	; (800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baae:	0e1b      	lsrs	r3, r3, #24
 800bab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bab4:	ee07 3a90 	vmov	s15, r3
 800bab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800babc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bac4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bacc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad0:	ee17 2a90 	vmov	r2, s15
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bad8:	e008      	b.n	800baec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	609a      	str	r2, [r3, #8]
}
 800baec:	bf00      	nop
 800baee:	3724      	adds	r7, #36	; 0x24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	58024400 	.word	0x58024400
 800bafc:	03d09000 	.word	0x03d09000
 800bb00:	46000000 	.word	0x46000000
 800bb04:	4c742400 	.word	0x4c742400
 800bb08:	4a742400 	.word	0x4a742400
 800bb0c:	4bbebc20 	.word	0x4bbebc20

0800bb10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb1e:	4b53      	ldr	r3, [pc, #332]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb22:	f003 0303 	and.w	r3, r3, #3
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d101      	bne.n	800bb2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e099      	b.n	800bc62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb2e:	4b4f      	ldr	r3, [pc, #316]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a4e      	ldr	r2, [pc, #312]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb3a:	f7f8 f9ab 	bl	8003e94 <HAL_GetTick>
 800bb3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb40:	e008      	b.n	800bb54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bb42:	f7f8 f9a7 	bl	8003e94 <HAL_GetTick>
 800bb46:	4602      	mov	r2, r0
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d901      	bls.n	800bb54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e086      	b.n	800bc62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb54:	4b45      	ldr	r3, [pc, #276]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1f0      	bne.n	800bb42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb60:	4b42      	ldr	r3, [pc, #264]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	031b      	lsls	r3, r3, #12
 800bb6e:	493f      	ldr	r1, [pc, #252]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bb70:	4313      	orrs	r3, r2
 800bb72:	628b      	str	r3, [r1, #40]	; 0x28
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	025b      	lsls	r3, r3, #9
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	431a      	orrs	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	041b      	lsls	r3, r3, #16
 800bb92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb96:	431a      	orrs	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	061b      	lsls	r3, r3, #24
 800bba0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bba4:	4931      	ldr	r1, [pc, #196]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbaa:	4b30      	ldr	r3, [pc, #192]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	492d      	ldr	r1, [pc, #180]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bbbc:	4b2b      	ldr	r3, [pc, #172]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc0:	f023 0220 	bic.w	r2, r3, #32
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	4928      	ldr	r1, [pc, #160]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bbce:	4b27      	ldr	r3, [pc, #156]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd2:	4a26      	ldr	r2, [pc, #152]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbd4:	f023 0310 	bic.w	r3, r3, #16
 800bbd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bbda:	4b24      	ldr	r3, [pc, #144]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbde:	4b24      	ldr	r3, [pc, #144]	; (800bc70 <RCCEx_PLL2_Config+0x160>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	69d2      	ldr	r2, [r2, #28]
 800bbe6:	00d2      	lsls	r2, r2, #3
 800bbe8:	4920      	ldr	r1, [pc, #128]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bbee:	4b1f      	ldr	r3, [pc, #124]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf2:	4a1e      	ldr	r2, [pc, #120]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bbf4:	f043 0310 	orr.w	r3, r3, #16
 800bbf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d106      	bne.n	800bc0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc00:	4b1a      	ldr	r3, [pc, #104]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	4a19      	ldr	r2, [pc, #100]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc0c:	e00f      	b.n	800bc2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d106      	bne.n	800bc22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc14:	4b15      	ldr	r3, [pc, #84]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc18:	4a14      	ldr	r2, [pc, #80]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc20:	e005      	b.n	800bc2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc22:	4b12      	ldr	r3, [pc, #72]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc26:	4a11      	ldr	r2, [pc, #68]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc2e:	4b0f      	ldr	r3, [pc, #60]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a0e      	ldr	r2, [pc, #56]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc3a:	f7f8 f92b 	bl	8003e94 <HAL_GetTick>
 800bc3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc40:	e008      	b.n	800bc54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bc42:	f7f8 f927 	bl	8003e94 <HAL_GetTick>
 800bc46:	4602      	mov	r2, r0
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d901      	bls.n	800bc54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc50:	2303      	movs	r3, #3
 800bc52:	e006      	b.n	800bc62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc54:	4b05      	ldr	r3, [pc, #20]	; (800bc6c <RCCEx_PLL2_Config+0x15c>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d0f0      	beq.n	800bc42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	58024400 	.word	0x58024400
 800bc70:	ffff0007 	.word	0xffff0007

0800bc74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc82:	4b53      	ldr	r3, [pc, #332]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc86:	f003 0303 	and.w	r3, r3, #3
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d101      	bne.n	800bc92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e099      	b.n	800bdc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc92:	4b4f      	ldr	r3, [pc, #316]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a4e      	ldr	r2, [pc, #312]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bc98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc9e:	f7f8 f8f9 	bl	8003e94 <HAL_GetTick>
 800bca2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bca4:	e008      	b.n	800bcb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bca6:	f7f8 f8f5 	bl	8003e94 <HAL_GetTick>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d901      	bls.n	800bcb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	e086      	b.n	800bdc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcb8:	4b45      	ldr	r3, [pc, #276]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1f0      	bne.n	800bca6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bcc4:	4b42      	ldr	r3, [pc, #264]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bcc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	051b      	lsls	r3, r3, #20
 800bcd2:	493f      	ldr	r1, [pc, #252]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	628b      	str	r3, [r1, #40]	; 0x28
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	025b      	lsls	r3, r3, #9
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	431a      	orrs	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	041b      	lsls	r3, r3, #16
 800bcf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	061b      	lsls	r3, r3, #24
 800bd04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd08:	4931      	ldr	r1, [pc, #196]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd0e:	4b30      	ldr	r3, [pc, #192]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	492d      	ldr	r1, [pc, #180]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd20:	4b2b      	ldr	r3, [pc, #172]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	699b      	ldr	r3, [r3, #24]
 800bd2c:	4928      	ldr	r1, [pc, #160]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd32:	4b27      	ldr	r3, [pc, #156]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	4a26      	ldr	r2, [pc, #152]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd3e:	4b24      	ldr	r3, [pc, #144]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd42:	4b24      	ldr	r3, [pc, #144]	; (800bdd4 <RCCEx_PLL3_Config+0x160>)
 800bd44:	4013      	ands	r3, r2
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	69d2      	ldr	r2, [r2, #28]
 800bd4a:	00d2      	lsls	r2, r2, #3
 800bd4c:	4920      	ldr	r1, [pc, #128]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd52:	4b1f      	ldr	r3, [pc, #124]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd56:	4a1e      	ldr	r2, [pc, #120]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d106      	bne.n	800bd72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd64:	4b1a      	ldr	r3, [pc, #104]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	4a19      	ldr	r2, [pc, #100]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bd6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd70:	e00f      	b.n	800bd92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d106      	bne.n	800bd86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd78:	4b15      	ldr	r3, [pc, #84]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7c:	4a14      	ldr	r2, [pc, #80]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bd82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd84:	e005      	b.n	800bd92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bd86:	4b12      	ldr	r3, [pc, #72]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8a:	4a11      	ldr	r2, [pc, #68]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bd92:	4b0f      	ldr	r3, [pc, #60]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a0e      	ldr	r2, [pc, #56]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bd98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd9e:	f7f8 f879 	bl	8003e94 <HAL_GetTick>
 800bda2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bda4:	e008      	b.n	800bdb8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bda6:	f7f8 f875 	bl	8003e94 <HAL_GetTick>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d901      	bls.n	800bdb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e006      	b.n	800bdc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdb8:	4b05      	ldr	r3, [pc, #20]	; (800bdd0 <RCCEx_PLL3_Config+0x15c>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0f0      	beq.n	800bda6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	58024400 	.word	0x58024400
 800bdd4:	ffff0007 	.word	0xffff0007

0800bdd8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e054      	b.n	800be94 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7a5b      	ldrb	r3, [r3, #9]
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d105      	bne.n	800be00 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7f7 f948 	bl	8003090 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2202      	movs	r2, #2
 800be04:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f023 0120 	bic.w	r1, r3, #32
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	685a      	ldr	r2, [r3, #4]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	430a      	orrs	r2, r1
 800be1a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f042 0204 	orr.w	r2, r2, #4
 800be2a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be36:	2b40      	cmp	r3, #64	; 0x40
 800be38:	d104      	bne.n	800be44 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2204      	movs	r2, #4
 800be3e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e027      	b.n	800be94 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800be44:	f7f8 f826 	bl	8003e94 <HAL_GetTick>
 800be48:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800be4a:	e015      	b.n	800be78 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800be4c:	f7f8 f822 	bl	8003e94 <HAL_GetTick>
 800be50:	4602      	mov	r2, r0
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	2b02      	cmp	r3, #2
 800be58:	d90e      	bls.n	800be78 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	f003 0304 	and.w	r3, r3, #4
 800be64:	2b04      	cmp	r3, #4
 800be66:	d107      	bne.n	800be78 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2204      	movs	r2, #4
 800be6c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2202      	movs	r2, #2
 800be72:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	e00d      	b.n	800be94 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f003 0304 	and.w	r3, r3, #4
 800be82:	2b04      	cmp	r3, #4
 800be84:	d0e2      	beq.n	800be4c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	2b02      	cmp	r3, #2
 800beae:	d904      	bls.n	800beba <HAL_SAI_InitProtocol+0x1e>
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	3b03      	subs	r3, #3
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d812      	bhi.n	800bede <HAL_SAI_InitProtocol+0x42>
 800beb8:	e008      	b.n	800becc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	68b9      	ldr	r1, [r7, #8]
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 fd0f 	bl	800c8e4 <SAI_InitI2S>
 800bec6:	4603      	mov	r3, r0
 800bec8:	75fb      	strb	r3, [r7, #23]
      break;
 800beca:	e00b      	b.n	800bee4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	68b9      	ldr	r1, [r7, #8]
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f000 fdb8 	bl	800ca48 <SAI_InitPCM>
 800bed8:	4603      	mov	r3, r0
 800beda:	75fb      	strb	r3, [r7, #23]
      break;
 800bedc:	e002      	b.n	800bee4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	75fb      	strb	r3, [r7, #23]
      break;
 800bee2:	bf00      	nop
  }

  if (status == HAL_OK)
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d104      	bne.n	800bef4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f000 f808 	bl	800bf00 <HAL_SAI_Init>
 800bef0:	4603      	mov	r3, r0
 800bef2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
	...

0800bf00 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	; 0x28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d101      	bne.n	800bf12 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e283      	b.n	800c41a <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800bf12:	f7f7 ffcb 	bl	8003eac <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d113      	bne.n	800bf48 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a94      	ldr	r2, [pc, #592]	; (800c178 <HAL_SAI_Init+0x278>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d004      	beq.n	800bf34 <HAL_SAI_Init+0x34>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a93      	ldr	r2, [pc, #588]	; (800c17c <HAL_SAI_Init+0x27c>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d107      	bne.n	800bf44 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d103      	bne.n	800bf44 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d001      	beq.n	800bf48 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e268      	b.n	800c41a <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a8a      	ldr	r2, [pc, #552]	; (800c178 <HAL_SAI_Init+0x278>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d004      	beq.n	800bf5c <HAL_SAI_Init+0x5c>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a8a      	ldr	r2, [pc, #552]	; (800c180 <HAL_SAI_Init+0x280>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d102      	bne.n	800bf62 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800bf5c:	4b89      	ldr	r3, [pc, #548]	; (800c184 <HAL_SAI_Init+0x284>)
 800bf5e:	61bb      	str	r3, [r7, #24]
 800bf60:	e028      	b.n	800bfb4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a88      	ldr	r2, [pc, #544]	; (800c188 <HAL_SAI_Init+0x288>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d004      	beq.n	800bf76 <HAL_SAI_Init+0x76>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a86      	ldr	r2, [pc, #536]	; (800c18c <HAL_SAI_Init+0x28c>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d102      	bne.n	800bf7c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800bf76:	4b86      	ldr	r3, [pc, #536]	; (800c190 <HAL_SAI_Init+0x290>)
 800bf78:	61bb      	str	r3, [r7, #24]
 800bf7a:	e01b      	b.n	800bfb4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a84      	ldr	r2, [pc, #528]	; (800c194 <HAL_SAI_Init+0x294>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d004      	beq.n	800bf90 <HAL_SAI_Init+0x90>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a83      	ldr	r2, [pc, #524]	; (800c198 <HAL_SAI_Init+0x298>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d102      	bne.n	800bf96 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800bf90:	4b82      	ldr	r3, [pc, #520]	; (800c19c <HAL_SAI_Init+0x29c>)
 800bf92:	61bb      	str	r3, [r7, #24]
 800bf94:	e00e      	b.n	800bfb4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a78      	ldr	r2, [pc, #480]	; (800c17c <HAL_SAI_Init+0x27c>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d004      	beq.n	800bfaa <HAL_SAI_Init+0xaa>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a7e      	ldr	r2, [pc, #504]	; (800c1a0 <HAL_SAI_Init+0x2a0>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d102      	bne.n	800bfb0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800bfaa:	4b7e      	ldr	r3, [pc, #504]	; (800c1a4 <HAL_SAI_Init+0x2a4>)
 800bfac:	61bb      	str	r3, [r7, #24]
 800bfae:	e001      	b.n	800bfb4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e232      	b.n	800c41a <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d106      	bne.n	800bfce <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f7f7 fa6d 	bl	80034a8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fdbc 	bl	800cb4c <SAI_Disable>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e21d      	b.n	800c41a <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d00c      	beq.n	800c008 <HAL_SAI_Init+0x108>
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d80d      	bhi.n	800c00e <HAL_SAI_Init+0x10e>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <HAL_SAI_Init+0xfc>
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d003      	beq.n	800c002 <HAL_SAI_Init+0x102>
 800bffa:	e008      	b.n	800c00e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c000:	e008      	b.n	800c014 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c002:	2310      	movs	r3, #16
 800c004:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c006:	e005      	b.n	800c014 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c008:	2320      	movs	r3, #32
 800c00a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c00c:	e002      	b.n	800c014 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c012:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	2b05      	cmp	r3, #5
 800c01a:	d832      	bhi.n	800c082 <HAL_SAI_Init+0x182>
 800c01c:	a201      	add	r2, pc, #4	; (adr r2, 800c024 <HAL_SAI_Init+0x124>)
 800c01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c022:	bf00      	nop
 800c024:	0800c03d 	.word	0x0800c03d
 800c028:	0800c043 	.word	0x0800c043
 800c02c:	0800c04b 	.word	0x0800c04b
 800c030:	0800c053 	.word	0x0800c053
 800c034:	0800c063 	.word	0x0800c063
 800c038:	0800c073 	.word	0x0800c073
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	61fb      	str	r3, [r7, #28]
      break;
 800c040:	e022      	b.n	800c088 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c046:	61fb      	str	r3, [r7, #28]
      break;
 800c048:	e01e      	b.n	800c088 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c04a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c04e:	61fb      	str	r3, [r7, #28]
      break;
 800c050:	e01a      	b.n	800c088 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c052:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c056:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	f043 0301 	orr.w	r3, r3, #1
 800c05e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c060:	e012      	b.n	800c088 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c066:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	f043 0302 	orr.w	r3, r3, #2
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c070:	e00a      	b.n	800c088 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c076:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	f043 0303 	orr.w	r3, r3, #3
 800c07e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c080:	e002      	b.n	800c088 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	61fb      	str	r3, [r7, #28]
      break;
 800c086:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c08c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 80ba 	beq.w	800c20c <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a35      	ldr	r2, [pc, #212]	; (800c178 <HAL_SAI_Init+0x278>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d004      	beq.n	800c0b0 <HAL_SAI_Init+0x1b0>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a35      	ldr	r2, [pc, #212]	; (800c180 <HAL_SAI_Init+0x280>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d104      	bne.n	800c0ba <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c0b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c0b4:	f7fe fc4a 	bl	800a94c <HAL_RCCEx_GetPeriphCLKFreq>
 800c0b8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a32      	ldr	r2, [pc, #200]	; (800c188 <HAL_SAI_Init+0x288>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d004      	beq.n	800c0ce <HAL_SAI_Init+0x1ce>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a30      	ldr	r2, [pc, #192]	; (800c18c <HAL_SAI_Init+0x28c>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d104      	bne.n	800c0d8 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c0ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c0d2:	f7fe fc3b 	bl	800a94c <HAL_RCCEx_GetPeriphCLKFreq>
 800c0d6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a2d      	ldr	r2, [pc, #180]	; (800c194 <HAL_SAI_Init+0x294>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d004      	beq.n	800c0ec <HAL_SAI_Init+0x1ec>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a2c      	ldr	r2, [pc, #176]	; (800c198 <HAL_SAI_Init+0x298>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d104      	bne.n	800c0f6 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800c0ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c0f0:	f7fe fc2c 	bl	800a94c <HAL_RCCEx_GetPeriphCLKFreq>
 800c0f4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a20      	ldr	r2, [pc, #128]	; (800c17c <HAL_SAI_Init+0x27c>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d104      	bne.n	800c10a <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800c100:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c104:	f7fe fc22 	bl	800a94c <HAL_RCCEx_GetPeriphCLKFreq>
 800c108:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a24      	ldr	r2, [pc, #144]	; (800c1a0 <HAL_SAI_Init+0x2a0>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d104      	bne.n	800c11e <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800c114:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c118:	f7fe fc18 	bl	800a94c <HAL_RCCEx_GetPeriphCLKFreq>
 800c11c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c126:	d120      	bne.n	800c16a <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12c:	2b04      	cmp	r3, #4
 800c12e:	d102      	bne.n	800c136 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800c130:	2340      	movs	r3, #64	; 0x40
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	e00a      	b.n	800c14c <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c13a:	2b08      	cmp	r3, #8
 800c13c:	d103      	bne.n	800c146 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800c13e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	e002      	b.n	800c14c <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c14a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	4613      	mov	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4413      	add	r3, r2
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	4619      	mov	r1, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6a1b      	ldr	r3, [r3, #32]
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	fb02 f303 	mul.w	r3, r2, r3
 800c162:	fbb1 f3f3 	udiv	r3, r1, r3
 800c166:	613b      	str	r3, [r7, #16]
 800c168:	e02f      	b.n	800c1ca <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c172:	d119      	bne.n	800c1a8 <HAL_SAI_Init+0x2a8>
 800c174:	2302      	movs	r3, #2
 800c176:	e018      	b.n	800c1aa <HAL_SAI_Init+0x2aa>
 800c178:	40015804 	.word	0x40015804
 800c17c:	58005404 	.word	0x58005404
 800c180:	40015824 	.word	0x40015824
 800c184:	40015800 	.word	0x40015800
 800c188:	40015c04 	.word	0x40015c04
 800c18c:	40015c24 	.word	0x40015c24
 800c190:	40015c00 	.word	0x40015c00
 800c194:	40016004 	.word	0x40016004
 800c198:	40016024 	.word	0x40016024
 800c19c:	40016000 	.word	0x40016000
 800c1a0:	58005424 	.word	0x58005424
 800c1a4:	58005400 	.word	0x58005400
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a1b      	ldr	r3, [r3, #32]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	fb02 f303 	mul.w	r3, r2, r3
 800c1c2:	021b      	lsls	r3, r3, #8
 800c1c4:	fbb1 f3f3 	udiv	r3, r1, r3
 800c1c8:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	4a95      	ldr	r2, [pc, #596]	; (800c424 <HAL_SAI_Init+0x524>)
 800c1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d2:	08da      	lsrs	r2, r3, #3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800c1d8:	6939      	ldr	r1, [r7, #16]
 800c1da:	4b92      	ldr	r3, [pc, #584]	; (800c424 <HAL_SAI_Init+0x524>)
 800c1dc:	fba3 2301 	umull	r2, r3, r3, r1
 800c1e0:	08da      	lsrs	r2, r3, #3
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	4413      	add	r3, r2
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	1aca      	subs	r2, r1, r3
 800c1ec:	2a08      	cmp	r2, #8
 800c1ee:	d904      	bls.n	800c1fa <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	1c5a      	adds	r2, r3, #1
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1fe:	2b04      	cmp	r3, #4
 800c200:	d104      	bne.n	800c20c <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c206:	085a      	lsrs	r2, r3, #1
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <HAL_SAI_Init+0x31c>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d109      	bne.n	800c230 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c220:	2b01      	cmp	r3, #1
 800c222:	d101      	bne.n	800c228 <HAL_SAI_Init+0x328>
 800c224:	2300      	movs	r3, #0
 800c226:	e001      	b.n	800c22c <HAL_SAI_Init+0x32c>
 800c228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c22c:	623b      	str	r3, [r7, #32]
 800c22e:	e008      	b.n	800c242 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c234:	2b01      	cmp	r3, #1
 800c236:	d102      	bne.n	800c23e <HAL_SAI_Init+0x33e>
 800c238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c23c:	e000      	b.n	800c240 <HAL_SAI_Init+0x340>
 800c23e:	2300      	movs	r3, #0
 800c240:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800c242:	f7f7 fe33 	bl	8003eac <HAL_GetREVID>
 800c246:	4603      	mov	r3, r0
 800c248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c24c:	d331      	bcc.n	800c2b2 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6819      	ldr	r1, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	4b73      	ldr	r3, [pc, #460]	; (800c428 <HAL_SAI_Init+0x528>)
 800c25a:	400b      	ands	r3, r1
 800c25c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6819      	ldr	r1, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685a      	ldr	r2, [r3, #4]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c26c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c272:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c278:	431a      	orrs	r2, r3
 800c27a:	6a3b      	ldr	r3, [r7, #32]
 800c27c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800c286:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c292:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c298:	051b      	lsls	r3, r3, #20
 800c29a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c2a0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	430a      	orrs	r2, r1
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	e02d      	b.n	800c30e <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6819      	ldr	r1, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	4b5b      	ldr	r3, [pc, #364]	; (800c42c <HAL_SAI_Init+0x52c>)
 800c2be:	400b      	ands	r3, r1
 800c2c0:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	6819      	ldr	r1, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c2d6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800c2ea:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c2f6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fc:	051b      	lsls	r3, r3, #20
 800c2fe:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c304:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	430a      	orrs	r2, r1
 800c30c:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	6859      	ldr	r1, [r3, #4]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	4b45      	ldr	r3, [pc, #276]	; (800c430 <HAL_SAI_Init+0x530>)
 800c31a:	400b      	ands	r3, r1
 800c31c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	6859      	ldr	r1, [r3, #4]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	69da      	ldr	r2, [r3, #28]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c32c:	431a      	orrs	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c332:	431a      	orrs	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	430a      	orrs	r2, r1
 800c33a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6899      	ldr	r1, [r3, #8]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	4b3b      	ldr	r3, [pc, #236]	; (800c434 <HAL_SAI_Init+0x534>)
 800c348:	400b      	ands	r3, r1
 800c34a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	6899      	ldr	r1, [r3, #8]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c356:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c35c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800c362:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800c368:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c36e:	3b01      	subs	r3, #1
 800c370:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c372:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	430a      	orrs	r2, r1
 800c37a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	68d9      	ldr	r1, [r3, #12]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c38a:	400b      	ands	r3, r1
 800c38c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	68d9      	ldr	r1, [r3, #12]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c39c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3a2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c3a4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	021b      	lsls	r3, r3, #8
 800c3ae:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	430a      	orrs	r2, r1
 800c3b6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a1e      	ldr	r2, [pc, #120]	; (800c438 <HAL_SAI_Init+0x538>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d004      	beq.n	800c3cc <HAL_SAI_Init+0x4cc>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a1d      	ldr	r2, [pc, #116]	; (800c43c <HAL_SAI_Init+0x53c>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d119      	bne.n	800c400 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d0:	f023 0201 	bic.w	r2, r3, #1
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d10e      	bne.n	800c400 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c3ee:	431a      	orrs	r2, r3
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3f8:	f043 0201 	orr.w	r2, r3, #1
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3728      	adds	r7, #40	; 0x28
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	cccccccd 	.word	0xcccccccd
 800c428:	f005c010 	.word	0xf005c010
 800c42c:	f805c010 	.word	0xf805c010
 800c430:	ffff1ff0 	.word	0xffff1ff0
 800c434:	fff88000 	.word	0xfff88000
 800c438:	40015804 	.word	0x40015804
 800c43c:	58005404 	.word	0x58005404

0800c440 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c448:	2300      	movs	r3, #0
 800c44a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c452:	2b01      	cmp	r3, #1
 800c454:	d101      	bne.n	800c45a <HAL_SAI_Abort+0x1a>
 800c456:	2302      	movs	r3, #2
 800c458:	e07d      	b.n	800c556 <HAL_SAI_Abort+0x116>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c46c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c470:	d14f      	bne.n	800c512 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c480:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b12      	cmp	r3, #18
 800c48c:	d11d      	bne.n	800c4ca <HAL_SAI_Abort+0x8a>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c494:	2b00      	cmp	r3, #0
 800c496:	d018      	beq.n	800c4ca <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7f8 fa0c 	bl	80048bc <HAL_DMA_Abort>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00f      	beq.n	800c4ca <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b2:	2b80      	cmp	r3, #128	; 0x80
 800c4b4:	d009      	beq.n	800c4ca <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b22      	cmp	r3, #34	; 0x22
 800c4d4:	d11d      	bne.n	800c512 <HAL_SAI_Abort+0xd2>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d018      	beq.n	800c512 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7f8 f9e8 	bl	80048bc <HAL_DMA_Abort>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00f      	beq.n	800c512 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fa:	2b80      	cmp	r3, #128	; 0x80
 800c4fc:	d009      	beq.n	800c512 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c508:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2200      	movs	r2, #0
 800c518:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c522:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fb11 	bl	800cb4c <SAI_Disable>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d001      	beq.n	800c534 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f042 0208 	orr.w	r2, r2, #8
 800c542:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800c554:	7bfb      	ldrb	r3, [r7, #15]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
	...

0800c560 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b086      	sub	sp, #24
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 81a7 	beq.w	800c8c4 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	695b      	ldr	r3, [r3, #20]
 800c57c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f003 0308 	and.w	r3, r3, #8
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00a      	beq.n	800c5ae <HAL_SAI_IRQHandler+0x4e>
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	f003 0308 	and.w	r3, r3, #8
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d005      	beq.n	800c5ae <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	4798      	blx	r3
 800c5ac:	e18a      	b.n	800c8c4 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	f003 0301 	and.w	r3, r3, #1
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d01e      	beq.n	800c5f6 <HAL_SAI_IRQHandler+0x96>
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d019      	beq.n	800c5f6 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b22      	cmp	r3, #34	; 0x22
 800c5d4:	d101      	bne.n	800c5da <HAL_SAI_IRQHandler+0x7a>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e000      	b.n	800c5dc <HAL_SAI_IRQHandler+0x7c>
 800c5da:	2302      	movs	r3, #2
 800c5dc:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f96e 	bl	800c8d0 <HAL_SAI_ErrorCallback>
 800c5f4:	e166      	b.n	800c8c4 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f003 0302 	and.w	r3, r3, #2
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d013      	beq.n	800c628 <HAL_SAI_IRQHandler+0xc8>
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	f003 0302 	and.w	r3, r3, #2
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00e      	beq.n	800c628 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2202      	movs	r2, #2
 800c610:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 8153 	beq.w	800c8c4 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c624:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800c626:	e14d      	b.n	800c8c4 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f003 0320 	and.w	r3, r3, #32
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d05b      	beq.n	800c6ea <HAL_SAI_IRQHandler+0x18a>
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	f003 0320 	and.w	r3, r3, #32
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d056      	beq.n	800c6ea <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2220      	movs	r2, #32
 800c642:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c64a:	f043 0204 	orr.w	r2, r3, #4
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d03e      	beq.n	800c6dc <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c664:	2b00      	cmp	r3, #0
 800c666:	d018      	beq.n	800c69a <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c66e:	4a97      	ldr	r2, [pc, #604]	; (800c8cc <HAL_SAI_IRQHandler+0x36c>)
 800c670:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c678:	4618      	mov	r0, r3
 800c67a:	f7f8 fc3d 	bl	8004ef8 <HAL_DMA_Abort_IT>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00a      	beq.n	800c69a <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c68a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f91b 	bl	800c8d0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 810a 	beq.w	800c8ba <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6ac:	4a87      	ldr	r2, [pc, #540]	; (800c8cc <HAL_SAI_IRQHandler+0x36c>)
 800c6ae:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7f8 fc1e 	bl	8004ef8 <HAL_DMA_Abort_IT>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 80fb 	beq.w	800c8ba <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f8fb 	bl	800c8d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c6da:	e0ee      	b.n	800c8ba <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7ff feaf 	bl	800c440 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f8f4 	bl	800c8d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c6e8:	e0e7      	b.n	800c8ba <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d05b      	beq.n	800c7ac <HAL_SAI_IRQHandler+0x24c>
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d056      	beq.n	800c7ac <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2240      	movs	r2, #64	; 0x40
 800c704:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c70c:	f043 0208 	orr.w	r2, r3, #8
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d03e      	beq.n	800c79e <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c726:	2b00      	cmp	r3, #0
 800c728:	d018      	beq.n	800c75c <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c730:	4a66      	ldr	r2, [pc, #408]	; (800c8cc <HAL_SAI_IRQHandler+0x36c>)
 800c732:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f8 fbdc 	bl	8004ef8 <HAL_DMA_Abort_IT>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c74c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f8ba 	bl	800c8d0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 80ab 	beq.w	800c8be <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c76e:	4a57      	ldr	r2, [pc, #348]	; (800c8cc <HAL_SAI_IRQHandler+0x36c>)
 800c770:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c778:	4618      	mov	r0, r3
 800c77a:	f7f8 fbbd 	bl	8004ef8 <HAL_DMA_Abort_IT>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	f000 809c 	beq.w	800c8be <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c78c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f89a 	bl	800c8d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c79c:	e08f      	b.n	800c8be <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7ff fe4e 	bl	800c440 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f893 	bl	800c8d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c7aa:	e088      	b.n	800c8be <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f003 0304 	and.w	r3, r3, #4
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d067      	beq.n	800c886 <HAL_SAI_IRQHandler+0x326>
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f003 0304 	and.w	r3, r3, #4
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d062      	beq.n	800c886 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2204      	movs	r2, #4
 800c7c6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7ce:	f043 0220 	orr.w	r2, r3, #32
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d03c      	beq.n	800c85c <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d018      	beq.n	800c81e <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7f2:	4a36      	ldr	r2, [pc, #216]	; (800c8cc <HAL_SAI_IRQHandler+0x36c>)
 800c7f4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7f8 fb7b 	bl	8004ef8 <HAL_DMA_Abort_IT>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00a      	beq.n	800c81e <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c80e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f859 	bl	800c8d0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c824:	2b00      	cmp	r3, #0
 800c826:	d04c      	beq.n	800c8c2 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c82e:	4a27      	ldr	r2, [pc, #156]	; (800c8cc <HAL_SAI_IRQHandler+0x36c>)
 800c830:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c838:	4618      	mov	r0, r3
 800c83a:	f7f8 fb5d 	bl	8004ef8 <HAL_DMA_Abort_IT>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d03e      	beq.n	800c8c2 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c84a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f83b 	bl	800c8d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c85a:	e032      	b.n	800c8c2 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2200      	movs	r2, #0
 800c862:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c86c:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f826 	bl	800c8d0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c884:	e01d      	b.n	800c8c2 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f003 0310 	and.w	r3, r3, #16
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d019      	beq.n	800c8c4 <HAL_SAI_IRQHandler+0x364>
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	f003 0310 	and.w	r3, r3, #16
 800c896:	2b00      	cmp	r3, #0
 800c898:	d014      	beq.n	800c8c4 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2210      	movs	r2, #16
 800c8a0:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8a8:	f043 0210 	orr.w	r2, r3, #16
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f80c 	bl	800c8d0 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800c8b8:	e004      	b.n	800c8c4 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c8ba:	bf00      	nop
 800c8bc:	e002      	b.n	800c8c4 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c8be:	bf00      	nop
 800c8c0:	e000      	b.n	800c8c4 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800c8c2:	bf00      	nop
}
 800c8c4:	bf00      	nop
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	0800cbc1 	.word	0x0800cbc1

0800c8d0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <SAI_InitI2S+0x2e>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d103      	bne.n	800c91a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2200      	movs	r2, #0
 800c916:	651a      	str	r2, [r3, #80]	; 0x50
 800c918:	e002      	b.n	800c920 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2201      	movs	r2, #1
 800c91e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c926:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c92e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	f003 0301 	and.w	r3, r3, #1
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	e077      	b.n	800ca3a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d107      	bne.n	800c960 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c95c:	665a      	str	r2, [r3, #100]	; 0x64
 800c95e:	e006      	b.n	800c96e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c966:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	665a      	str	r2, [r3, #100]	; 0x64
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b03      	cmp	r3, #3
 800c972:	d84f      	bhi.n	800ca14 <SAI_InitI2S+0x130>
 800c974:	a201      	add	r2, pc, #4	; (adr r2, 800c97c <SAI_InitI2S+0x98>)
 800c976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97a:	bf00      	nop
 800c97c:	0800c98d 	.word	0x0800c98d
 800c980:	0800c9af 	.word	0x0800c9af
 800c984:	0800c9d1 	.word	0x0800c9d1
 800c988:	0800c9f3 	.word	0x0800c9f3

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2280      	movs	r2, #128	; 0x80
 800c990:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	085b      	lsrs	r3, r3, #1
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	085b      	lsrs	r3, r3, #1
 800c9a0:	011a      	lsls	r2, r3, #4
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2240      	movs	r2, #64	; 0x40
 800c9aa:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c9ac:	e035      	b.n	800ca1a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2280      	movs	r2, #128	; 0x80
 800c9b2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	085b      	lsrs	r3, r3, #1
 800c9b8:	019a      	lsls	r2, r3, #6
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	085b      	lsrs	r3, r3, #1
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2280      	movs	r2, #128	; 0x80
 800c9cc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c9ce:	e024      	b.n	800ca1a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	22c0      	movs	r2, #192	; 0xc0
 800c9d4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	085b      	lsrs	r3, r3, #1
 800c9da:	019a      	lsls	r2, r3, #6
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	085b      	lsrs	r3, r3, #1
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2280      	movs	r2, #128	; 0x80
 800c9ee:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c9f0:	e013      	b.n	800ca1a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	22e0      	movs	r2, #224	; 0xe0
 800c9f6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	085b      	lsrs	r3, r3, #1
 800c9fc:	019a      	lsls	r2, r3, #6
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	085b      	lsrs	r3, r3, #1
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2280      	movs	r2, #128	; 0x80
 800ca10:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ca12:	e002      	b.n	800ca1a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	75fb      	strb	r3, [r7, #23]
      break;
 800ca18:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d10b      	bne.n	800ca38 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d102      	bne.n	800ca2c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2210      	movs	r2, #16
 800ca2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d102      	bne.n	800ca38 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2208      	movs	r2, #8
 800ca36:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop

0800ca48 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b087      	sub	sp, #28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2200      	movs	r2, #0
 800ca64:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <SAI_InitPCM+0x2e>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d103      	bne.n	800ca7e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	651a      	str	r2, [r3, #80]	; 0x50
 800ca7c:	e002      	b.n	800ca84 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2200      	movs	r2, #0
 800ca88:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ca90:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ca98:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caac:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2b04      	cmp	r3, #4
 800cab2:	d103      	bne.n	800cabc <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2201      	movs	r2, #1
 800cab8:	659a      	str	r2, [r3, #88]	; 0x58
 800caba:	e002      	b.n	800cac2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	220d      	movs	r2, #13
 800cac0:	659a      	str	r2, [r3, #88]	; 0x58
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b03      	cmp	r3, #3
 800cac6:	d837      	bhi.n	800cb38 <SAI_InitPCM+0xf0>
 800cac8:	a201      	add	r2, pc, #4	; (adr r2, 800cad0 <SAI_InitPCM+0x88>)
 800caca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cace:	bf00      	nop
 800cad0:	0800cae1 	.word	0x0800cae1
 800cad4:	0800caf7 	.word	0x0800caf7
 800cad8:	0800cb0d 	.word	0x0800cb0d
 800cadc:	0800cb23 	.word	0x0800cb23
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2280      	movs	r2, #128	; 0x80
 800cae4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	011a      	lsls	r2, r3, #4
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2240      	movs	r2, #64	; 0x40
 800caf2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800caf4:	e023      	b.n	800cb3e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2280      	movs	r2, #128	; 0x80
 800cafa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	015a      	lsls	r2, r3, #5
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2280      	movs	r2, #128	; 0x80
 800cb08:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cb0a:	e018      	b.n	800cb3e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	22c0      	movs	r2, #192	; 0xc0
 800cb10:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	015a      	lsls	r2, r3, #5
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2280      	movs	r2, #128	; 0x80
 800cb1e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cb20:	e00d      	b.n	800cb3e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	22e0      	movs	r2, #224	; 0xe0
 800cb26:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	015a      	lsls	r2, r3, #5
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2280      	movs	r2, #128	; 0x80
 800cb34:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cb36:	e002      	b.n	800cb3e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	75fb      	strb	r3, [r7, #23]
      break;
 800cb3c:	bf00      	nop
  }

  return status;
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	371c      	adds	r7, #28
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800cb54:	4b18      	ldr	r3, [pc, #96]	; (800cbb8 <SAI_Disable+0x6c>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a18      	ldr	r2, [pc, #96]	; (800cbbc <SAI_Disable+0x70>)
 800cb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb5e:	0b1b      	lsrs	r3, r3, #12
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cb76:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10a      	bne.n	800cb94 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800cb8e:	2303      	movs	r3, #3
 800cb90:	72fb      	strb	r3, [r7, #11]
      break;
 800cb92:	e009      	b.n	800cba8 <SAI_Disable+0x5c>
    }
    count--;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1e7      	bne.n	800cb78 <SAI_Disable+0x2c>

  return status;
 800cba8:	7afb      	ldrb	r3, [r7, #11]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	24000064 	.word	0x24000064
 800cbbc:	95cbec1b 	.word	0x95cbec1b

0800cbc0 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800cbdc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbee:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbf6:	2b20      	cmp	r3, #32
 800cbf8:	d00a      	beq.n	800cc10 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f7ff ffa6 	bl	800cb4c <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	685a      	ldr	r2, [r3, #4]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f042 0208 	orr.w	r2, r2, #8
 800cc0e:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f7ff fe55 	bl	800c8d0 <HAL_SAI_ErrorCallback>
#endif
}
 800cc26:	bf00      	nop
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
	...

0800cc30 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e03e      	b.n	800ccc4 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d106      	bne.n	800cc60 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	f7f6 fc1a 	bl	8003494 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3308      	adds	r3, #8
 800cc68:	4619      	mov	r1, r3
 800cc6a:	4610      	mov	r0, r2
 800cc6c:	f002 f9a2 	bl	800efb4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6818      	ldr	r0, [r3, #0]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	461a      	mov	r2, r3
 800cc7a:	68b9      	ldr	r1, [r7, #8]
 800cc7c:	f002 fa2a 	bl	800f0d4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6858      	ldr	r0, [r3, #4]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	689a      	ldr	r2, [r3, #8]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	f002 fa71 	bl	800f174 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	6892      	ldr	r2, [r2, #8]
 800cc9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	6892      	ldr	r2, [r2, #8]
 800cca6:	f041 0101 	orr.w	r1, r1, #1
 800ccaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ccae:	4b07      	ldr	r3, [pc, #28]	; (800cccc <HAL_SRAM_Init+0x9c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a06      	ldr	r2, [pc, #24]	; (800cccc <HAL_SRAM_Init+0x9c>)
 800ccb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ccb8:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	52004000 	.word	0x52004000

0800ccd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d101      	bne.n	800cce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	e049      	b.n	800cd76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d106      	bne.n	800ccfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7f6 fa02 	bl	8003100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2202      	movs	r2, #2
 800cd00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3304      	adds	r3, #4
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	4610      	mov	r0, r2
 800cd10:	f000 fa7e 	bl	800d210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3708      	adds	r7, #8
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b082      	sub	sp, #8
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	691b      	ldr	r3, [r3, #16]
 800cd8c:	f003 0302 	and.w	r3, r3, #2
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d122      	bne.n	800cdda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	f003 0302 	and.w	r3, r3, #2
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d11b      	bne.n	800cdda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f06f 0202 	mvn.w	r2, #2
 800cdaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	699b      	ldr	r3, [r3, #24]
 800cdb8:	f003 0303 	and.w	r3, r3, #3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d003      	beq.n	800cdc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 fa07 	bl	800d1d4 <HAL_TIM_IC_CaptureCallback>
 800cdc6:	e005      	b.n	800cdd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 f9f9 	bl	800d1c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fa0a 	bl	800d1e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	f003 0304 	and.w	r3, r3, #4
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	d122      	bne.n	800ce2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f003 0304 	and.w	r3, r3, #4
 800cdf2:	2b04      	cmp	r3, #4
 800cdf4:	d11b      	bne.n	800ce2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f06f 0204 	mvn.w	r2, #4
 800cdfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2202      	movs	r2, #2
 800ce04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	699b      	ldr	r3, [r3, #24]
 800ce0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d003      	beq.n	800ce1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 f9dd 	bl	800d1d4 <HAL_TIM_IC_CaptureCallback>
 800ce1a:	e005      	b.n	800ce28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f9cf 	bl	800d1c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f9e0 	bl	800d1e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	f003 0308 	and.w	r3, r3, #8
 800ce38:	2b08      	cmp	r3, #8
 800ce3a:	d122      	bne.n	800ce82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	f003 0308 	and.w	r3, r3, #8
 800ce46:	2b08      	cmp	r3, #8
 800ce48:	d11b      	bne.n	800ce82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f06f 0208 	mvn.w	r2, #8
 800ce52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2204      	movs	r2, #4
 800ce58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	69db      	ldr	r3, [r3, #28]
 800ce60:	f003 0303 	and.w	r3, r3, #3
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d003      	beq.n	800ce70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f9b3 	bl	800d1d4 <HAL_TIM_IC_CaptureCallback>
 800ce6e:	e005      	b.n	800ce7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 f9a5 	bl	800d1c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f9b6 	bl	800d1e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	f003 0310 	and.w	r3, r3, #16
 800ce8c:	2b10      	cmp	r3, #16
 800ce8e:	d122      	bne.n	800ced6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	f003 0310 	and.w	r3, r3, #16
 800ce9a:	2b10      	cmp	r3, #16
 800ce9c:	d11b      	bne.n	800ced6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f06f 0210 	mvn.w	r2, #16
 800cea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2208      	movs	r2, #8
 800ceac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	69db      	ldr	r3, [r3, #28]
 800ceb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d003      	beq.n	800cec4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 f989 	bl	800d1d4 <HAL_TIM_IC_CaptureCallback>
 800cec2:	e005      	b.n	800ced0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 f97b 	bl	800d1c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 f98c 	bl	800d1e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d10e      	bne.n	800cf02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d107      	bne.n	800cf02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f06f 0201 	mvn.w	r2, #1
 800cefa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 f955 	bl	800d1ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf0c:	2b80      	cmp	r3, #128	; 0x80
 800cf0e:	d10e      	bne.n	800cf2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf1a:	2b80      	cmp	r3, #128	; 0x80
 800cf1c:	d107      	bne.n	800cf2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cf26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fb41 	bl	800d5b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	691b      	ldr	r3, [r3, #16]
 800cf34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf3c:	d10e      	bne.n	800cf5c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf48:	2b80      	cmp	r3, #128	; 0x80
 800cf4a:	d107      	bne.n	800cf5c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cf54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fb34 	bl	800d5c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf66:	2b40      	cmp	r3, #64	; 0x40
 800cf68:	d10e      	bne.n	800cf88 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf74:	2b40      	cmp	r3, #64	; 0x40
 800cf76:	d107      	bne.n	800cf88 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cf80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f93a 	bl	800d1fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	691b      	ldr	r3, [r3, #16]
 800cf8e:	f003 0320 	and.w	r3, r3, #32
 800cf92:	2b20      	cmp	r3, #32
 800cf94:	d10e      	bne.n	800cfb4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	f003 0320 	and.w	r3, r3, #32
 800cfa0:	2b20      	cmp	r3, #32
 800cfa2:	d107      	bne.n	800cfb4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f06f 0220 	mvn.w	r2, #32
 800cfac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 faf4 	bl	800d59c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d101      	bne.n	800cfd8 <HAL_TIM_ConfigClockSource+0x1c>
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	e0dc      	b.n	800d192 <HAL_TIM_ConfigClockSource+0x1d6>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2202      	movs	r2, #2
 800cfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	4b6a      	ldr	r3, [pc, #424]	; (800d19c <HAL_TIM_ConfigClockSource+0x1e0>)
 800cff4:	4013      	ands	r3, r2
 800cff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	68ba      	ldr	r2, [r7, #8]
 800d006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a64      	ldr	r2, [pc, #400]	; (800d1a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	f000 80a9 	beq.w	800d166 <HAL_TIM_ConfigClockSource+0x1aa>
 800d014:	4a62      	ldr	r2, [pc, #392]	; (800d1a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d016:	4293      	cmp	r3, r2
 800d018:	f200 80ae 	bhi.w	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d01c:	4a61      	ldr	r2, [pc, #388]	; (800d1a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	f000 80a1 	beq.w	800d166 <HAL_TIM_ConfigClockSource+0x1aa>
 800d024:	4a5f      	ldr	r2, [pc, #380]	; (800d1a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d026:	4293      	cmp	r3, r2
 800d028:	f200 80a6 	bhi.w	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d02c:	4a5e      	ldr	r2, [pc, #376]	; (800d1a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	f000 8099 	beq.w	800d166 <HAL_TIM_ConfigClockSource+0x1aa>
 800d034:	4a5c      	ldr	r2, [pc, #368]	; (800d1a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d036:	4293      	cmp	r3, r2
 800d038:	f200 809e 	bhi.w	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d03c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d040:	f000 8091 	beq.w	800d166 <HAL_TIM_ConfigClockSource+0x1aa>
 800d044:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d048:	f200 8096 	bhi.w	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d04c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d050:	f000 8089 	beq.w	800d166 <HAL_TIM_ConfigClockSource+0x1aa>
 800d054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d058:	f200 808e 	bhi.w	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d05c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d060:	d03e      	beq.n	800d0e0 <HAL_TIM_ConfigClockSource+0x124>
 800d062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d066:	f200 8087 	bhi.w	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d06a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d06e:	f000 8086 	beq.w	800d17e <HAL_TIM_ConfigClockSource+0x1c2>
 800d072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d076:	d87f      	bhi.n	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d078:	2b70      	cmp	r3, #112	; 0x70
 800d07a:	d01a      	beq.n	800d0b2 <HAL_TIM_ConfigClockSource+0xf6>
 800d07c:	2b70      	cmp	r3, #112	; 0x70
 800d07e:	d87b      	bhi.n	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d080:	2b60      	cmp	r3, #96	; 0x60
 800d082:	d050      	beq.n	800d126 <HAL_TIM_ConfigClockSource+0x16a>
 800d084:	2b60      	cmp	r3, #96	; 0x60
 800d086:	d877      	bhi.n	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d088:	2b50      	cmp	r3, #80	; 0x50
 800d08a:	d03c      	beq.n	800d106 <HAL_TIM_ConfigClockSource+0x14a>
 800d08c:	2b50      	cmp	r3, #80	; 0x50
 800d08e:	d873      	bhi.n	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d090:	2b40      	cmp	r3, #64	; 0x40
 800d092:	d058      	beq.n	800d146 <HAL_TIM_ConfigClockSource+0x18a>
 800d094:	2b40      	cmp	r3, #64	; 0x40
 800d096:	d86f      	bhi.n	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d098:	2b30      	cmp	r3, #48	; 0x30
 800d09a:	d064      	beq.n	800d166 <HAL_TIM_ConfigClockSource+0x1aa>
 800d09c:	2b30      	cmp	r3, #48	; 0x30
 800d09e:	d86b      	bhi.n	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0a0:	2b20      	cmp	r3, #32
 800d0a2:	d060      	beq.n	800d166 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0a4:	2b20      	cmp	r3, #32
 800d0a6:	d867      	bhi.n	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d05c      	beq.n	800d166 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0ac:	2b10      	cmp	r3, #16
 800d0ae:	d05a      	beq.n	800d166 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0b0:	e062      	b.n	800d178 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6818      	ldr	r0, [r3, #0]
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	6899      	ldr	r1, [r3, #8]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	685a      	ldr	r2, [r3, #4]
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	f000 f9bd 	bl	800d440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d0d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	609a      	str	r2, [r3, #8]
      break;
 800d0de:	e04f      	b.n	800d180 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6818      	ldr	r0, [r3, #0]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	6899      	ldr	r1, [r3, #8]
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	f000 f9a6 	bl	800d440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	689a      	ldr	r2, [r3, #8]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d102:	609a      	str	r2, [r3, #8]
      break;
 800d104:	e03c      	b.n	800d180 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6818      	ldr	r0, [r3, #0]
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	6859      	ldr	r1, [r3, #4]
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	461a      	mov	r2, r3
 800d114:	f000 f916 	bl	800d344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2150      	movs	r1, #80	; 0x50
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 f970 	bl	800d404 <TIM_ITRx_SetConfig>
      break;
 800d124:	e02c      	b.n	800d180 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6818      	ldr	r0, [r3, #0]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	6859      	ldr	r1, [r3, #4]
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	461a      	mov	r2, r3
 800d134:	f000 f935 	bl	800d3a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2160      	movs	r1, #96	; 0x60
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 f960 	bl	800d404 <TIM_ITRx_SetConfig>
      break;
 800d144:	e01c      	b.n	800d180 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6818      	ldr	r0, [r3, #0]
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	6859      	ldr	r1, [r3, #4]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	461a      	mov	r2, r3
 800d154:	f000 f8f6 	bl	800d344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2140      	movs	r1, #64	; 0x40
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 f950 	bl	800d404 <TIM_ITRx_SetConfig>
      break;
 800d164:	e00c      	b.n	800d180 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4619      	mov	r1, r3
 800d170:	4610      	mov	r0, r2
 800d172:	f000 f947 	bl	800d404 <TIM_ITRx_SetConfig>
      break;
 800d176:	e003      	b.n	800d180 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d178:	2301      	movs	r3, #1
 800d17a:	73fb      	strb	r3, [r7, #15]
      break;
 800d17c:	e000      	b.n	800d180 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d17e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d190:	7bfb      	ldrb	r3, [r7, #15]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	ffceff88 	.word	0xffceff88
 800d1a0:	00100040 	.word	0x00100040
 800d1a4:	00100030 	.word	0x00100030
 800d1a8:	00100020 	.word	0x00100020

0800d1ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d1b4:	bf00      	nop
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d1dc:	bf00      	nop
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d204:	bf00      	nop
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4a40      	ldr	r2, [pc, #256]	; (800d324 <TIM_Base_SetConfig+0x114>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d013      	beq.n	800d250 <TIM_Base_SetConfig+0x40>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d22e:	d00f      	beq.n	800d250 <TIM_Base_SetConfig+0x40>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a3d      	ldr	r2, [pc, #244]	; (800d328 <TIM_Base_SetConfig+0x118>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d00b      	beq.n	800d250 <TIM_Base_SetConfig+0x40>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a3c      	ldr	r2, [pc, #240]	; (800d32c <TIM_Base_SetConfig+0x11c>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d007      	beq.n	800d250 <TIM_Base_SetConfig+0x40>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a3b      	ldr	r2, [pc, #236]	; (800d330 <TIM_Base_SetConfig+0x120>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d003      	beq.n	800d250 <TIM_Base_SetConfig+0x40>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	4a3a      	ldr	r2, [pc, #232]	; (800d334 <TIM_Base_SetConfig+0x124>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d108      	bne.n	800d262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	4313      	orrs	r3, r2
 800d260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a2f      	ldr	r2, [pc, #188]	; (800d324 <TIM_Base_SetConfig+0x114>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d01f      	beq.n	800d2aa <TIM_Base_SetConfig+0x9a>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d270:	d01b      	beq.n	800d2aa <TIM_Base_SetConfig+0x9a>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a2c      	ldr	r2, [pc, #176]	; (800d328 <TIM_Base_SetConfig+0x118>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d017      	beq.n	800d2aa <TIM_Base_SetConfig+0x9a>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4a2b      	ldr	r2, [pc, #172]	; (800d32c <TIM_Base_SetConfig+0x11c>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d013      	beq.n	800d2aa <TIM_Base_SetConfig+0x9a>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4a2a      	ldr	r2, [pc, #168]	; (800d330 <TIM_Base_SetConfig+0x120>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d00f      	beq.n	800d2aa <TIM_Base_SetConfig+0x9a>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4a29      	ldr	r2, [pc, #164]	; (800d334 <TIM_Base_SetConfig+0x124>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d00b      	beq.n	800d2aa <TIM_Base_SetConfig+0x9a>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a28      	ldr	r2, [pc, #160]	; (800d338 <TIM_Base_SetConfig+0x128>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d007      	beq.n	800d2aa <TIM_Base_SetConfig+0x9a>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a27      	ldr	r2, [pc, #156]	; (800d33c <TIM_Base_SetConfig+0x12c>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d003      	beq.n	800d2aa <TIM_Base_SetConfig+0x9a>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4a26      	ldr	r2, [pc, #152]	; (800d340 <TIM_Base_SetConfig+0x130>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d108      	bne.n	800d2bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	695b      	ldr	r3, [r3, #20]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	689a      	ldr	r2, [r3, #8]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	4a10      	ldr	r2, [pc, #64]	; (800d324 <TIM_Base_SetConfig+0x114>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d00f      	beq.n	800d308 <TIM_Base_SetConfig+0xf8>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4a12      	ldr	r2, [pc, #72]	; (800d334 <TIM_Base_SetConfig+0x124>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d00b      	beq.n	800d308 <TIM_Base_SetConfig+0xf8>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	4a11      	ldr	r2, [pc, #68]	; (800d338 <TIM_Base_SetConfig+0x128>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d007      	beq.n	800d308 <TIM_Base_SetConfig+0xf8>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4a10      	ldr	r2, [pc, #64]	; (800d33c <TIM_Base_SetConfig+0x12c>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d003      	beq.n	800d308 <TIM_Base_SetConfig+0xf8>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a0f      	ldr	r2, [pc, #60]	; (800d340 <TIM_Base_SetConfig+0x130>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d103      	bne.n	800d310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	691a      	ldr	r2, [r3, #16]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	615a      	str	r2, [r3, #20]
}
 800d316:	bf00      	nop
 800d318:	3714      	adds	r7, #20
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	40010000 	.word	0x40010000
 800d328:	40000400 	.word	0x40000400
 800d32c:	40000800 	.word	0x40000800
 800d330:	40000c00 	.word	0x40000c00
 800d334:	40010400 	.word	0x40010400
 800d338:	40014000 	.word	0x40014000
 800d33c:	40014400 	.word	0x40014400
 800d340:	40014800 	.word	0x40014800

0800d344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d344:	b480      	push	{r7}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6a1b      	ldr	r3, [r3, #32]
 800d354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	f023 0201 	bic.w	r2, r3, #1
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	011b      	lsls	r3, r3, #4
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	4313      	orrs	r3, r2
 800d378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	f023 030a 	bic.w	r3, r3, #10
 800d380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	4313      	orrs	r3, r2
 800d388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	697a      	ldr	r2, [r7, #20]
 800d394:	621a      	str	r2, [r3, #32]
}
 800d396:	bf00      	nop
 800d398:	371c      	adds	r7, #28
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr

0800d3a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3a2:	b480      	push	{r7}
 800d3a4:	b087      	sub	sp, #28
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	60f8      	str	r0, [r7, #12]
 800d3aa:	60b9      	str	r1, [r7, #8]
 800d3ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6a1b      	ldr	r3, [r3, #32]
 800d3b2:	f023 0210 	bic.w	r2, r3, #16
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6a1b      	ldr	r3, [r3, #32]
 800d3c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d3cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	031b      	lsls	r3, r3, #12
 800d3d2:	697a      	ldr	r2, [r7, #20]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d3de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	011b      	lsls	r3, r3, #4
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	621a      	str	r2, [r3, #32]
}
 800d3f6:	bf00      	nop
 800d3f8:	371c      	adds	r7, #28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
	...

0800d404 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	4b09      	ldr	r3, [pc, #36]	; (800d43c <TIM_ITRx_SetConfig+0x38>)
 800d418:	4013      	ands	r3, r2
 800d41a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d41c:	683a      	ldr	r2, [r7, #0]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	4313      	orrs	r3, r2
 800d422:	f043 0307 	orr.w	r3, r3, #7
 800d426:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	609a      	str	r2, [r3, #8]
}
 800d42e:	bf00      	nop
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	ffcfff8f 	.word	0xffcfff8f

0800d440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d440:	b480      	push	{r7}
 800d442:	b087      	sub	sp, #28
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d45a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	021a      	lsls	r2, r3, #8
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	431a      	orrs	r2, r3
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	4313      	orrs	r3, r2
 800d468:	697a      	ldr	r2, [r7, #20]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	697a      	ldr	r2, [r7, #20]
 800d472:	609a      	str	r2, [r3, #8]
}
 800d474:	bf00      	nop
 800d476:	371c      	adds	r7, #28
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d480:	b480      	push	{r7}
 800d482:	b085      	sub	sp, #20
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d490:	2b01      	cmp	r3, #1
 800d492:	d101      	bne.n	800d498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d494:	2302      	movs	r3, #2
 800d496:	e06d      	b.n	800d574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a30      	ldr	r2, [pc, #192]	; (800d580 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d004      	beq.n	800d4cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a2f      	ldr	r2, [pc, #188]	; (800d584 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d108      	bne.n	800d4de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d4d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a20      	ldr	r2, [pc, #128]	; (800d580 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d022      	beq.n	800d548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d50a:	d01d      	beq.n	800d548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a1d      	ldr	r2, [pc, #116]	; (800d588 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d018      	beq.n	800d548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a1c      	ldr	r2, [pc, #112]	; (800d58c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d013      	beq.n	800d548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a1a      	ldr	r2, [pc, #104]	; (800d590 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d00e      	beq.n	800d548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a15      	ldr	r2, [pc, #84]	; (800d584 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d009      	beq.n	800d548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a16      	ldr	r2, [pc, #88]	; (800d594 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d004      	beq.n	800d548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a15      	ldr	r2, [pc, #84]	; (800d598 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d10c      	bne.n	800d562 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d54e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	4313      	orrs	r3, r2
 800d558:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3714      	adds	r7, #20
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr
 800d580:	40010000 	.word	0x40010000
 800d584:	40010400 	.word	0x40010400
 800d588:	40000400 	.word	0x40000400
 800d58c:	40000800 	.word	0x40000800
 800d590:	40000c00 	.word	0x40000c00
 800d594:	40001800 	.word	0x40001800
 800d598:	40014000 	.word	0x40014000

0800d59c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d101      	bne.n	800d5ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e042      	b.n	800d670 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d106      	bne.n	800d602 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7f5 fda7 	bl	8003150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2224      	movs	r2, #36	; 0x24
 800d606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f022 0201 	bic.w	r2, r2, #1
 800d618:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fbea 	bl	800ddf4 <UART_SetConfig>
 800d620:	4603      	mov	r3, r0
 800d622:	2b01      	cmp	r3, #1
 800d624:	d101      	bne.n	800d62a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	e022      	b.n	800d670 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d002      	beq.n	800d638 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f001 f93e 	bl	800e8b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	685a      	ldr	r2, [r3, #4]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	689a      	ldr	r2, [r3, #8]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f042 0201 	orr.w	r2, r2, #1
 800d666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f001 f9c5 	bl	800e9f8 <UART_CheckIdleState>
 800d66e:	4603      	mov	r3, r0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3708      	adds	r7, #8
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b0ba      	sub	sp, #232	; 0xe8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	69db      	ldr	r3, [r3, #28]
 800d686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d69e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d6a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d6ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d11b      	bne.n	800d6ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6b8:	f003 0320 	and.w	r3, r3, #32
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d015      	beq.n	800d6ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6c4:	f003 0320 	and.w	r3, r3, #32
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d105      	bne.n	800d6d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d6cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d009      	beq.n	800d6ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f000 835a 	beq.w	800dd96 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	4798      	blx	r3
      }
      return;
 800d6ea:	e354      	b.n	800dd96 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d6ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f000 811f 	beq.w	800d934 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d6f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d6fa:	4b8b      	ldr	r3, [pc, #556]	; (800d928 <HAL_UART_IRQHandler+0x2b0>)
 800d6fc:	4013      	ands	r3, r2
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d106      	bne.n	800d710 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d702:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d706:	4b89      	ldr	r3, [pc, #548]	; (800d92c <HAL_UART_IRQHandler+0x2b4>)
 800d708:	4013      	ands	r3, r2
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f000 8112 	beq.w	800d934 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d011      	beq.n	800d740 <HAL_UART_IRQHandler+0xc8>
 800d71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00b      	beq.n	800d740 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2201      	movs	r2, #1
 800d72e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d736:	f043 0201 	orr.w	r2, r3, #1
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d744:	f003 0302 	and.w	r3, r3, #2
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d011      	beq.n	800d770 <HAL_UART_IRQHandler+0xf8>
 800d74c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d750:	f003 0301 	and.w	r3, r3, #1
 800d754:	2b00      	cmp	r3, #0
 800d756:	d00b      	beq.n	800d770 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2202      	movs	r2, #2
 800d75e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d766:	f043 0204 	orr.w	r2, r3, #4
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d774:	f003 0304 	and.w	r3, r3, #4
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d011      	beq.n	800d7a0 <HAL_UART_IRQHandler+0x128>
 800d77c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d780:	f003 0301 	and.w	r3, r3, #1
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00b      	beq.n	800d7a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2204      	movs	r2, #4
 800d78e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d796:	f043 0202 	orr.w	r2, r3, #2
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7a4:	f003 0308 	and.w	r3, r3, #8
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d017      	beq.n	800d7dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7b0:	f003 0320 	and.w	r3, r3, #32
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d105      	bne.n	800d7c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d7b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7bc:	4b5a      	ldr	r3, [pc, #360]	; (800d928 <HAL_UART_IRQHandler+0x2b0>)
 800d7be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00b      	beq.n	800d7dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2208      	movs	r2, #8
 800d7ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7d2:	f043 0208 	orr.w	r2, r3, #8
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d012      	beq.n	800d80e <HAL_UART_IRQHandler+0x196>
 800d7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00c      	beq.n	800d80e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d804:	f043 0220 	orr.w	r2, r3, #32
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 82c0 	beq.w	800dd9a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d81e:	f003 0320 	and.w	r3, r3, #32
 800d822:	2b00      	cmp	r3, #0
 800d824:	d013      	beq.n	800d84e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d82a:	f003 0320 	and.w	r3, r3, #32
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d105      	bne.n	800d83e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d007      	beq.n	800d84e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d842:	2b00      	cmp	r3, #0
 800d844:	d003      	beq.n	800d84e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d862:	2b40      	cmp	r3, #64	; 0x40
 800d864:	d005      	beq.n	800d872 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d86a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d04f      	beq.n	800d912 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f001 f9d4 	bl	800ec20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	689b      	ldr	r3, [r3, #8]
 800d87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d882:	2b40      	cmp	r3, #64	; 0x40
 800d884:	d141      	bne.n	800d90a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3308      	adds	r3, #8
 800d88c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d894:	e853 3f00 	ldrex	r3, [r3]
 800d898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d89c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3308      	adds	r3, #8
 800d8ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d8b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d8b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d8be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d8c2:	e841 2300 	strex	r3, r2, [r1]
 800d8c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d8ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d1d9      	bne.n	800d886 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d013      	beq.n	800d902 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8de:	4a14      	ldr	r2, [pc, #80]	; (800d930 <HAL_UART_IRQHandler+0x2b8>)
 800d8e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7f7 fb06 	bl	8004ef8 <HAL_DMA_Abort_IT>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d017      	beq.n	800d922 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d8fc:	4610      	mov	r0, r2
 800d8fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d900:	e00f      	b.n	800d922 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fa60 	bl	800ddc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d908:	e00b      	b.n	800d922 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fa5c 	bl	800ddc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d910:	e007      	b.n	800d922 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 fa58 	bl	800ddc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d920:	e23b      	b.n	800dd9a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d922:	bf00      	nop
    return;
 800d924:	e239      	b.n	800dd9a <HAL_UART_IRQHandler+0x722>
 800d926:	bf00      	nop
 800d928:	10000001 	.word	0x10000001
 800d92c:	04000120 	.word	0x04000120
 800d930:	0800eced 	.word	0x0800eced

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d938:	2b01      	cmp	r3, #1
 800d93a:	f040 81ce 	bne.w	800dcda <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d942:	f003 0310 	and.w	r3, r3, #16
 800d946:	2b00      	cmp	r3, #0
 800d948:	f000 81c7 	beq.w	800dcda <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d94c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d950:	f003 0310 	and.w	r3, r3, #16
 800d954:	2b00      	cmp	r3, #0
 800d956:	f000 81c0 	beq.w	800dcda <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2210      	movs	r2, #16
 800d960:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d96c:	2b40      	cmp	r3, #64	; 0x40
 800d96e:	f040 813b 	bne.w	800dbe8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a8b      	ldr	r2, [pc, #556]	; (800dba8 <HAL_UART_IRQHandler+0x530>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d059      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a89      	ldr	r2, [pc, #548]	; (800dbac <HAL_UART_IRQHandler+0x534>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d053      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a87      	ldr	r2, [pc, #540]	; (800dbb0 <HAL_UART_IRQHandler+0x538>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d04d      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a85      	ldr	r2, [pc, #532]	; (800dbb4 <HAL_UART_IRQHandler+0x53c>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d047      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a83      	ldr	r2, [pc, #524]	; (800dbb8 <HAL_UART_IRQHandler+0x540>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d041      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a81      	ldr	r2, [pc, #516]	; (800dbbc <HAL_UART_IRQHandler+0x544>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d03b      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a7f      	ldr	r2, [pc, #508]	; (800dbc0 <HAL_UART_IRQHandler+0x548>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d035      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a7d      	ldr	r2, [pc, #500]	; (800dbc4 <HAL_UART_IRQHandler+0x54c>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d02f      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a7b      	ldr	r2, [pc, #492]	; (800dbc8 <HAL_UART_IRQHandler+0x550>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d029      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a79      	ldr	r2, [pc, #484]	; (800dbcc <HAL_UART_IRQHandler+0x554>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d023      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a77      	ldr	r2, [pc, #476]	; (800dbd0 <HAL_UART_IRQHandler+0x558>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d01d      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a75      	ldr	r2, [pc, #468]	; (800dbd4 <HAL_UART_IRQHandler+0x55c>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d017      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a73      	ldr	r2, [pc, #460]	; (800dbd8 <HAL_UART_IRQHandler+0x560>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d011      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a71      	ldr	r2, [pc, #452]	; (800dbdc <HAL_UART_IRQHandler+0x564>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d00b      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a6f      	ldr	r2, [pc, #444]	; (800dbe0 <HAL_UART_IRQHandler+0x568>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d005      	beq.n	800da32 <HAL_UART_IRQHandler+0x3ba>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a6d      	ldr	r2, [pc, #436]	; (800dbe4 <HAL_UART_IRQHandler+0x56c>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d105      	bne.n	800da3e <HAL_UART_IRQHandler+0x3c6>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	e004      	b.n	800da48 <HAL_UART_IRQHandler+0x3d0>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	b29b      	uxth	r3, r3
 800da48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800da4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800da50:	2b00      	cmp	r3, #0
 800da52:	f000 81a4 	beq.w	800dd9e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da60:	429a      	cmp	r2, r3
 800da62:	f080 819c 	bcs.w	800dd9e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da74:	69db      	ldr	r3, [r3, #28]
 800da76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da7a:	f000 8086 	beq.w	800db8a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da8a:	e853 3f00 	ldrex	r3, [r3]
 800da8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800da92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800daa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800daac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dab4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dab8:	e841 2300 	strex	r3, r2, [r1]
 800dabc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1da      	bne.n	800da7e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	3308      	adds	r3, #8
 800dace:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dad2:	e853 3f00 	ldrex	r3, [r3]
 800dad6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dada:	f023 0301 	bic.w	r3, r3, #1
 800dade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	3308      	adds	r3, #8
 800dae8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800daec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800daf0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800daf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800daf8:	e841 2300 	strex	r3, r2, [r1]
 800dafc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dafe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db00:	2b00      	cmp	r3, #0
 800db02:	d1e1      	bne.n	800dac8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	3308      	adds	r3, #8
 800db0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db0e:	e853 3f00 	ldrex	r3, [r3]
 800db12:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800db14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	3308      	adds	r3, #8
 800db24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800db28:	66fa      	str	r2, [r7, #108]	; 0x6c
 800db2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db30:	e841 2300 	strex	r3, r2, [r1]
 800db34:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800db36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1e3      	bne.n	800db04 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2220      	movs	r2, #32
 800db40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db52:	e853 3f00 	ldrex	r3, [r3]
 800db56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db5a:	f023 0310 	bic.w	r3, r3, #16
 800db5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	461a      	mov	r2, r3
 800db68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800db6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db74:	e841 2300 	strex	r3, r2, [r1]
 800db78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1e4      	bne.n	800db4a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db84:	4618      	mov	r0, r3
 800db86:	f7f6 fe99 	bl	80048bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db96:	b29b      	uxth	r3, r3
 800db98:	1ad3      	subs	r3, r2, r3
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f91c 	bl	800dddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dba4:	e0fb      	b.n	800dd9e <HAL_UART_IRQHandler+0x726>
 800dba6:	bf00      	nop
 800dba8:	40020010 	.word	0x40020010
 800dbac:	40020028 	.word	0x40020028
 800dbb0:	40020040 	.word	0x40020040
 800dbb4:	40020058 	.word	0x40020058
 800dbb8:	40020070 	.word	0x40020070
 800dbbc:	40020088 	.word	0x40020088
 800dbc0:	400200a0 	.word	0x400200a0
 800dbc4:	400200b8 	.word	0x400200b8
 800dbc8:	40020410 	.word	0x40020410
 800dbcc:	40020428 	.word	0x40020428
 800dbd0:	40020440 	.word	0x40020440
 800dbd4:	40020458 	.word	0x40020458
 800dbd8:	40020470 	.word	0x40020470
 800dbdc:	40020488 	.word	0x40020488
 800dbe0:	400204a0 	.word	0x400204a0
 800dbe4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f000 80cc 	beq.w	800dda2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dc0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f000 80c7 	beq.w	800dda2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1c:	e853 3f00 	ldrex	r3, [r3]
 800dc20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	461a      	mov	r2, r3
 800dc32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dc36:	647b      	str	r3, [r7, #68]	; 0x44
 800dc38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1e4      	bne.n	800dc14 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	3308      	adds	r3, #8
 800dc50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc54:	e853 3f00 	ldrex	r3, [r3]
 800dc58:	623b      	str	r3, [r7, #32]
   return(result);
 800dc5a:	6a3a      	ldr	r2, [r7, #32]
 800dc5c:	4b54      	ldr	r3, [pc, #336]	; (800ddb0 <HAL_UART_IRQHandler+0x738>)
 800dc5e:	4013      	ands	r3, r2
 800dc60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	3308      	adds	r3, #8
 800dc6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dc6e:	633a      	str	r2, [r7, #48]	; 0x30
 800dc70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc76:	e841 2300 	strex	r3, r2, [r1]
 800dc7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1e3      	bne.n	800dc4a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2220      	movs	r2, #32
 800dc86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	e853 3f00 	ldrex	r3, [r3]
 800dca2:	60fb      	str	r3, [r7, #12]
   return(result);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f023 0310 	bic.w	r3, r3, #16
 800dcaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dcb8:	61fb      	str	r3, [r7, #28]
 800dcba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcbc:	69b9      	ldr	r1, [r7, #24]
 800dcbe:	69fa      	ldr	r2, [r7, #28]
 800dcc0:	e841 2300 	strex	r3, r2, [r1]
 800dcc4:	617b      	str	r3, [r7, #20]
   return(result);
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1e4      	bne.n	800dc96 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f882 	bl	800dddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dcd8:	e063      	b.n	800dda2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dcda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00e      	beq.n	800dd04 <HAL_UART_IRQHandler+0x68c>
 800dce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dcea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d008      	beq.n	800dd04 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dcfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f001 f836 	bl	800ed6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd02:	e051      	b.n	800dda8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d014      	beq.n	800dd3a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dd10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d105      	bne.n	800dd28 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dd1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d008      	beq.n	800dd3a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d03a      	beq.n	800dda6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	4798      	blx	r3
    }
    return;
 800dd38:	e035      	b.n	800dda6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dd3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d009      	beq.n	800dd5a <HAL_UART_IRQHandler+0x6e2>
 800dd46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d003      	beq.n	800dd5a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 ffe0 	bl	800ed18 <UART_EndTransmit_IT>
    return;
 800dd58:	e026      	b.n	800dda8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dd5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d009      	beq.n	800dd7a <HAL_UART_IRQHandler+0x702>
 800dd66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f001 f80f 	bl	800ed96 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd78:	e016      	b.n	800dda8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dd7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d010      	beq.n	800dda8 <HAL_UART_IRQHandler+0x730>
 800dd86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	da0c      	bge.n	800dda8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fff7 	bl	800ed82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd94:	e008      	b.n	800dda8 <HAL_UART_IRQHandler+0x730>
      return;
 800dd96:	bf00      	nop
 800dd98:	e006      	b.n	800dda8 <HAL_UART_IRQHandler+0x730>
    return;
 800dd9a:	bf00      	nop
 800dd9c:	e004      	b.n	800dda8 <HAL_UART_IRQHandler+0x730>
      return;
 800dd9e:	bf00      	nop
 800dda0:	e002      	b.n	800dda8 <HAL_UART_IRQHandler+0x730>
      return;
 800dda2:	bf00      	nop
 800dda4:	e000      	b.n	800dda8 <HAL_UART_IRQHandler+0x730>
    return;
 800dda6:	bf00      	nop
  }
}
 800dda8:	37e8      	adds	r7, #232	; 0xe8
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	effffffe 	.word	0xeffffffe

0800ddb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ddd0:	bf00      	nop
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	460b      	mov	r3, r1
 800dde6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dde8:	bf00      	nop
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ddf4:	b5b0      	push	{r4, r5, r7, lr}
 800ddf6:	b08e      	sub	sp, #56	; 0x38
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	689a      	ldr	r2, [r3, #8]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	691b      	ldr	r3, [r3, #16]
 800de0a:	431a      	orrs	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	695b      	ldr	r3, [r3, #20]
 800de10:	431a      	orrs	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	69db      	ldr	r3, [r3, #28]
 800de16:	4313      	orrs	r3, r2
 800de18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	4bbf      	ldr	r3, [pc, #764]	; (800e120 <UART_SetConfig+0x32c>)
 800de22:	4013      	ands	r3, r2
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	6812      	ldr	r2, [r2, #0]
 800de28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de2a:	430b      	orrs	r3, r1
 800de2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	68da      	ldr	r2, [r3, #12]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	430a      	orrs	r2, r1
 800de42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	699b      	ldr	r3, [r3, #24]
 800de48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4ab5      	ldr	r2, [pc, #724]	; (800e124 <UART_SetConfig+0x330>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d004      	beq.n	800de5e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6a1b      	ldr	r3, [r3, #32]
 800de58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de5a:	4313      	orrs	r3, r2
 800de5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	689a      	ldr	r2, [r3, #8]
 800de64:	4bb0      	ldr	r3, [pc, #704]	; (800e128 <UART_SetConfig+0x334>)
 800de66:	4013      	ands	r3, r2
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	6812      	ldr	r2, [r2, #0]
 800de6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de6e:	430b      	orrs	r3, r1
 800de70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de78:	f023 010f 	bic.w	r1, r3, #15
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	430a      	orrs	r2, r1
 800de86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4aa7      	ldr	r2, [pc, #668]	; (800e12c <UART_SetConfig+0x338>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d176      	bne.n	800df80 <UART_SetConfig+0x18c>
 800de92:	4ba7      	ldr	r3, [pc, #668]	; (800e130 <UART_SetConfig+0x33c>)
 800de94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de9a:	2b28      	cmp	r3, #40	; 0x28
 800de9c:	d86c      	bhi.n	800df78 <UART_SetConfig+0x184>
 800de9e:	a201      	add	r2, pc, #4	; (adr r2, 800dea4 <UART_SetConfig+0xb0>)
 800dea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea4:	0800df49 	.word	0x0800df49
 800dea8:	0800df79 	.word	0x0800df79
 800deac:	0800df79 	.word	0x0800df79
 800deb0:	0800df79 	.word	0x0800df79
 800deb4:	0800df79 	.word	0x0800df79
 800deb8:	0800df79 	.word	0x0800df79
 800debc:	0800df79 	.word	0x0800df79
 800dec0:	0800df79 	.word	0x0800df79
 800dec4:	0800df51 	.word	0x0800df51
 800dec8:	0800df79 	.word	0x0800df79
 800decc:	0800df79 	.word	0x0800df79
 800ded0:	0800df79 	.word	0x0800df79
 800ded4:	0800df79 	.word	0x0800df79
 800ded8:	0800df79 	.word	0x0800df79
 800dedc:	0800df79 	.word	0x0800df79
 800dee0:	0800df79 	.word	0x0800df79
 800dee4:	0800df59 	.word	0x0800df59
 800dee8:	0800df79 	.word	0x0800df79
 800deec:	0800df79 	.word	0x0800df79
 800def0:	0800df79 	.word	0x0800df79
 800def4:	0800df79 	.word	0x0800df79
 800def8:	0800df79 	.word	0x0800df79
 800defc:	0800df79 	.word	0x0800df79
 800df00:	0800df79 	.word	0x0800df79
 800df04:	0800df61 	.word	0x0800df61
 800df08:	0800df79 	.word	0x0800df79
 800df0c:	0800df79 	.word	0x0800df79
 800df10:	0800df79 	.word	0x0800df79
 800df14:	0800df79 	.word	0x0800df79
 800df18:	0800df79 	.word	0x0800df79
 800df1c:	0800df79 	.word	0x0800df79
 800df20:	0800df79 	.word	0x0800df79
 800df24:	0800df69 	.word	0x0800df69
 800df28:	0800df79 	.word	0x0800df79
 800df2c:	0800df79 	.word	0x0800df79
 800df30:	0800df79 	.word	0x0800df79
 800df34:	0800df79 	.word	0x0800df79
 800df38:	0800df79 	.word	0x0800df79
 800df3c:	0800df79 	.word	0x0800df79
 800df40:	0800df79 	.word	0x0800df79
 800df44:	0800df71 	.word	0x0800df71
 800df48:	2301      	movs	r3, #1
 800df4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df4e:	e222      	b.n	800e396 <UART_SetConfig+0x5a2>
 800df50:	2304      	movs	r3, #4
 800df52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df56:	e21e      	b.n	800e396 <UART_SetConfig+0x5a2>
 800df58:	2308      	movs	r3, #8
 800df5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df5e:	e21a      	b.n	800e396 <UART_SetConfig+0x5a2>
 800df60:	2310      	movs	r3, #16
 800df62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df66:	e216      	b.n	800e396 <UART_SetConfig+0x5a2>
 800df68:	2320      	movs	r3, #32
 800df6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df6e:	e212      	b.n	800e396 <UART_SetConfig+0x5a2>
 800df70:	2340      	movs	r3, #64	; 0x40
 800df72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df76:	e20e      	b.n	800e396 <UART_SetConfig+0x5a2>
 800df78:	2380      	movs	r3, #128	; 0x80
 800df7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df7e:	e20a      	b.n	800e396 <UART_SetConfig+0x5a2>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a6b      	ldr	r2, [pc, #428]	; (800e134 <UART_SetConfig+0x340>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d130      	bne.n	800dfec <UART_SetConfig+0x1f8>
 800df8a:	4b69      	ldr	r3, [pc, #420]	; (800e130 <UART_SetConfig+0x33c>)
 800df8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df8e:	f003 0307 	and.w	r3, r3, #7
 800df92:	2b05      	cmp	r3, #5
 800df94:	d826      	bhi.n	800dfe4 <UART_SetConfig+0x1f0>
 800df96:	a201      	add	r2, pc, #4	; (adr r2, 800df9c <UART_SetConfig+0x1a8>)
 800df98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df9c:	0800dfb5 	.word	0x0800dfb5
 800dfa0:	0800dfbd 	.word	0x0800dfbd
 800dfa4:	0800dfc5 	.word	0x0800dfc5
 800dfa8:	0800dfcd 	.word	0x0800dfcd
 800dfac:	0800dfd5 	.word	0x0800dfd5
 800dfb0:	0800dfdd 	.word	0x0800dfdd
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfba:	e1ec      	b.n	800e396 <UART_SetConfig+0x5a2>
 800dfbc:	2304      	movs	r3, #4
 800dfbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfc2:	e1e8      	b.n	800e396 <UART_SetConfig+0x5a2>
 800dfc4:	2308      	movs	r3, #8
 800dfc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfca:	e1e4      	b.n	800e396 <UART_SetConfig+0x5a2>
 800dfcc:	2310      	movs	r3, #16
 800dfce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfd2:	e1e0      	b.n	800e396 <UART_SetConfig+0x5a2>
 800dfd4:	2320      	movs	r3, #32
 800dfd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfda:	e1dc      	b.n	800e396 <UART_SetConfig+0x5a2>
 800dfdc:	2340      	movs	r3, #64	; 0x40
 800dfde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfe2:	e1d8      	b.n	800e396 <UART_SetConfig+0x5a2>
 800dfe4:	2380      	movs	r3, #128	; 0x80
 800dfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfea:	e1d4      	b.n	800e396 <UART_SetConfig+0x5a2>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a51      	ldr	r2, [pc, #324]	; (800e138 <UART_SetConfig+0x344>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d130      	bne.n	800e058 <UART_SetConfig+0x264>
 800dff6:	4b4e      	ldr	r3, [pc, #312]	; (800e130 <UART_SetConfig+0x33c>)
 800dff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dffa:	f003 0307 	and.w	r3, r3, #7
 800dffe:	2b05      	cmp	r3, #5
 800e000:	d826      	bhi.n	800e050 <UART_SetConfig+0x25c>
 800e002:	a201      	add	r2, pc, #4	; (adr r2, 800e008 <UART_SetConfig+0x214>)
 800e004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e008:	0800e021 	.word	0x0800e021
 800e00c:	0800e029 	.word	0x0800e029
 800e010:	0800e031 	.word	0x0800e031
 800e014:	0800e039 	.word	0x0800e039
 800e018:	0800e041 	.word	0x0800e041
 800e01c:	0800e049 	.word	0x0800e049
 800e020:	2300      	movs	r3, #0
 800e022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e026:	e1b6      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e028:	2304      	movs	r3, #4
 800e02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e02e:	e1b2      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e030:	2308      	movs	r3, #8
 800e032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e036:	e1ae      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e038:	2310      	movs	r3, #16
 800e03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e03e:	e1aa      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e040:	2320      	movs	r3, #32
 800e042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e046:	e1a6      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e048:	2340      	movs	r3, #64	; 0x40
 800e04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e04e:	e1a2      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e050:	2380      	movs	r3, #128	; 0x80
 800e052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e056:	e19e      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a37      	ldr	r2, [pc, #220]	; (800e13c <UART_SetConfig+0x348>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d130      	bne.n	800e0c4 <UART_SetConfig+0x2d0>
 800e062:	4b33      	ldr	r3, [pc, #204]	; (800e130 <UART_SetConfig+0x33c>)
 800e064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e066:	f003 0307 	and.w	r3, r3, #7
 800e06a:	2b05      	cmp	r3, #5
 800e06c:	d826      	bhi.n	800e0bc <UART_SetConfig+0x2c8>
 800e06e:	a201      	add	r2, pc, #4	; (adr r2, 800e074 <UART_SetConfig+0x280>)
 800e070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e074:	0800e08d 	.word	0x0800e08d
 800e078:	0800e095 	.word	0x0800e095
 800e07c:	0800e09d 	.word	0x0800e09d
 800e080:	0800e0a5 	.word	0x0800e0a5
 800e084:	0800e0ad 	.word	0x0800e0ad
 800e088:	0800e0b5 	.word	0x0800e0b5
 800e08c:	2300      	movs	r3, #0
 800e08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e092:	e180      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e094:	2304      	movs	r3, #4
 800e096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e09a:	e17c      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e09c:	2308      	movs	r3, #8
 800e09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0a2:	e178      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e0a4:	2310      	movs	r3, #16
 800e0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0aa:	e174      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e0ac:	2320      	movs	r3, #32
 800e0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0b2:	e170      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e0b4:	2340      	movs	r3, #64	; 0x40
 800e0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ba:	e16c      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e0bc:	2380      	movs	r3, #128	; 0x80
 800e0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0c2:	e168      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a1d      	ldr	r2, [pc, #116]	; (800e140 <UART_SetConfig+0x34c>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d142      	bne.n	800e154 <UART_SetConfig+0x360>
 800e0ce:	4b18      	ldr	r3, [pc, #96]	; (800e130 <UART_SetConfig+0x33c>)
 800e0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0d2:	f003 0307 	and.w	r3, r3, #7
 800e0d6:	2b05      	cmp	r3, #5
 800e0d8:	d838      	bhi.n	800e14c <UART_SetConfig+0x358>
 800e0da:	a201      	add	r2, pc, #4	; (adr r2, 800e0e0 <UART_SetConfig+0x2ec>)
 800e0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e0:	0800e0f9 	.word	0x0800e0f9
 800e0e4:	0800e101 	.word	0x0800e101
 800e0e8:	0800e109 	.word	0x0800e109
 800e0ec:	0800e111 	.word	0x0800e111
 800e0f0:	0800e119 	.word	0x0800e119
 800e0f4:	0800e145 	.word	0x0800e145
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0fe:	e14a      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e100:	2304      	movs	r3, #4
 800e102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e106:	e146      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e108:	2308      	movs	r3, #8
 800e10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e10e:	e142      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e110:	2310      	movs	r3, #16
 800e112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e116:	e13e      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e118:	2320      	movs	r3, #32
 800e11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e11e:	e13a      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e120:	cfff69f3 	.word	0xcfff69f3
 800e124:	58000c00 	.word	0x58000c00
 800e128:	11fff4ff 	.word	0x11fff4ff
 800e12c:	40011000 	.word	0x40011000
 800e130:	58024400 	.word	0x58024400
 800e134:	40004400 	.word	0x40004400
 800e138:	40004800 	.word	0x40004800
 800e13c:	40004c00 	.word	0x40004c00
 800e140:	40005000 	.word	0x40005000
 800e144:	2340      	movs	r3, #64	; 0x40
 800e146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e14a:	e124      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e14c:	2380      	movs	r3, #128	; 0x80
 800e14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e152:	e120      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4acc      	ldr	r2, [pc, #816]	; (800e48c <UART_SetConfig+0x698>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d176      	bne.n	800e24c <UART_SetConfig+0x458>
 800e15e:	4bcc      	ldr	r3, [pc, #816]	; (800e490 <UART_SetConfig+0x69c>)
 800e160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e166:	2b28      	cmp	r3, #40	; 0x28
 800e168:	d86c      	bhi.n	800e244 <UART_SetConfig+0x450>
 800e16a:	a201      	add	r2, pc, #4	; (adr r2, 800e170 <UART_SetConfig+0x37c>)
 800e16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e170:	0800e215 	.word	0x0800e215
 800e174:	0800e245 	.word	0x0800e245
 800e178:	0800e245 	.word	0x0800e245
 800e17c:	0800e245 	.word	0x0800e245
 800e180:	0800e245 	.word	0x0800e245
 800e184:	0800e245 	.word	0x0800e245
 800e188:	0800e245 	.word	0x0800e245
 800e18c:	0800e245 	.word	0x0800e245
 800e190:	0800e21d 	.word	0x0800e21d
 800e194:	0800e245 	.word	0x0800e245
 800e198:	0800e245 	.word	0x0800e245
 800e19c:	0800e245 	.word	0x0800e245
 800e1a0:	0800e245 	.word	0x0800e245
 800e1a4:	0800e245 	.word	0x0800e245
 800e1a8:	0800e245 	.word	0x0800e245
 800e1ac:	0800e245 	.word	0x0800e245
 800e1b0:	0800e225 	.word	0x0800e225
 800e1b4:	0800e245 	.word	0x0800e245
 800e1b8:	0800e245 	.word	0x0800e245
 800e1bc:	0800e245 	.word	0x0800e245
 800e1c0:	0800e245 	.word	0x0800e245
 800e1c4:	0800e245 	.word	0x0800e245
 800e1c8:	0800e245 	.word	0x0800e245
 800e1cc:	0800e245 	.word	0x0800e245
 800e1d0:	0800e22d 	.word	0x0800e22d
 800e1d4:	0800e245 	.word	0x0800e245
 800e1d8:	0800e245 	.word	0x0800e245
 800e1dc:	0800e245 	.word	0x0800e245
 800e1e0:	0800e245 	.word	0x0800e245
 800e1e4:	0800e245 	.word	0x0800e245
 800e1e8:	0800e245 	.word	0x0800e245
 800e1ec:	0800e245 	.word	0x0800e245
 800e1f0:	0800e235 	.word	0x0800e235
 800e1f4:	0800e245 	.word	0x0800e245
 800e1f8:	0800e245 	.word	0x0800e245
 800e1fc:	0800e245 	.word	0x0800e245
 800e200:	0800e245 	.word	0x0800e245
 800e204:	0800e245 	.word	0x0800e245
 800e208:	0800e245 	.word	0x0800e245
 800e20c:	0800e245 	.word	0x0800e245
 800e210:	0800e23d 	.word	0x0800e23d
 800e214:	2301      	movs	r3, #1
 800e216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e21a:	e0bc      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e21c:	2304      	movs	r3, #4
 800e21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e222:	e0b8      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e224:	2308      	movs	r3, #8
 800e226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e22a:	e0b4      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e22c:	2310      	movs	r3, #16
 800e22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e232:	e0b0      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e234:	2320      	movs	r3, #32
 800e236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e23a:	e0ac      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e23c:	2340      	movs	r3, #64	; 0x40
 800e23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e242:	e0a8      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e244:	2380      	movs	r3, #128	; 0x80
 800e246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e24a:	e0a4      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a90      	ldr	r2, [pc, #576]	; (800e494 <UART_SetConfig+0x6a0>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d130      	bne.n	800e2b8 <UART_SetConfig+0x4c4>
 800e256:	4b8e      	ldr	r3, [pc, #568]	; (800e490 <UART_SetConfig+0x69c>)
 800e258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e25a:	f003 0307 	and.w	r3, r3, #7
 800e25e:	2b05      	cmp	r3, #5
 800e260:	d826      	bhi.n	800e2b0 <UART_SetConfig+0x4bc>
 800e262:	a201      	add	r2, pc, #4	; (adr r2, 800e268 <UART_SetConfig+0x474>)
 800e264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e268:	0800e281 	.word	0x0800e281
 800e26c:	0800e289 	.word	0x0800e289
 800e270:	0800e291 	.word	0x0800e291
 800e274:	0800e299 	.word	0x0800e299
 800e278:	0800e2a1 	.word	0x0800e2a1
 800e27c:	0800e2a9 	.word	0x0800e2a9
 800e280:	2300      	movs	r3, #0
 800e282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e286:	e086      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e288:	2304      	movs	r3, #4
 800e28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e28e:	e082      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e290:	2308      	movs	r3, #8
 800e292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e296:	e07e      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e298:	2310      	movs	r3, #16
 800e29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e29e:	e07a      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e2a0:	2320      	movs	r3, #32
 800e2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2a6:	e076      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e2a8:	2340      	movs	r3, #64	; 0x40
 800e2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2ae:	e072      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e2b0:	2380      	movs	r3, #128	; 0x80
 800e2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2b6:	e06e      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a76      	ldr	r2, [pc, #472]	; (800e498 <UART_SetConfig+0x6a4>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d130      	bne.n	800e324 <UART_SetConfig+0x530>
 800e2c2:	4b73      	ldr	r3, [pc, #460]	; (800e490 <UART_SetConfig+0x69c>)
 800e2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2c6:	f003 0307 	and.w	r3, r3, #7
 800e2ca:	2b05      	cmp	r3, #5
 800e2cc:	d826      	bhi.n	800e31c <UART_SetConfig+0x528>
 800e2ce:	a201      	add	r2, pc, #4	; (adr r2, 800e2d4 <UART_SetConfig+0x4e0>)
 800e2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d4:	0800e2ed 	.word	0x0800e2ed
 800e2d8:	0800e2f5 	.word	0x0800e2f5
 800e2dc:	0800e2fd 	.word	0x0800e2fd
 800e2e0:	0800e305 	.word	0x0800e305
 800e2e4:	0800e30d 	.word	0x0800e30d
 800e2e8:	0800e315 	.word	0x0800e315
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2f2:	e050      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e2f4:	2304      	movs	r3, #4
 800e2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2fa:	e04c      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e2fc:	2308      	movs	r3, #8
 800e2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e302:	e048      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e304:	2310      	movs	r3, #16
 800e306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e30a:	e044      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e30c:	2320      	movs	r3, #32
 800e30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e312:	e040      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e314:	2340      	movs	r3, #64	; 0x40
 800e316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e31a:	e03c      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e31c:	2380      	movs	r3, #128	; 0x80
 800e31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e322:	e038      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a5c      	ldr	r2, [pc, #368]	; (800e49c <UART_SetConfig+0x6a8>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d130      	bne.n	800e390 <UART_SetConfig+0x59c>
 800e32e:	4b58      	ldr	r3, [pc, #352]	; (800e490 <UART_SetConfig+0x69c>)
 800e330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e332:	f003 0307 	and.w	r3, r3, #7
 800e336:	2b05      	cmp	r3, #5
 800e338:	d826      	bhi.n	800e388 <UART_SetConfig+0x594>
 800e33a:	a201      	add	r2, pc, #4	; (adr r2, 800e340 <UART_SetConfig+0x54c>)
 800e33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e340:	0800e359 	.word	0x0800e359
 800e344:	0800e361 	.word	0x0800e361
 800e348:	0800e369 	.word	0x0800e369
 800e34c:	0800e371 	.word	0x0800e371
 800e350:	0800e379 	.word	0x0800e379
 800e354:	0800e381 	.word	0x0800e381
 800e358:	2302      	movs	r3, #2
 800e35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e35e:	e01a      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e360:	2304      	movs	r3, #4
 800e362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e366:	e016      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e368:	2308      	movs	r3, #8
 800e36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e36e:	e012      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e370:	2310      	movs	r3, #16
 800e372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e376:	e00e      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e378:	2320      	movs	r3, #32
 800e37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e37e:	e00a      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e380:	2340      	movs	r3, #64	; 0x40
 800e382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e386:	e006      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e388:	2380      	movs	r3, #128	; 0x80
 800e38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e38e:	e002      	b.n	800e396 <UART_SetConfig+0x5a2>
 800e390:	2380      	movs	r3, #128	; 0x80
 800e392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a40      	ldr	r2, [pc, #256]	; (800e49c <UART_SetConfig+0x6a8>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	f040 80ef 	bne.w	800e580 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e3a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e3a6:	2b20      	cmp	r3, #32
 800e3a8:	dc46      	bgt.n	800e438 <UART_SetConfig+0x644>
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	f2c0 8081 	blt.w	800e4b2 <UART_SetConfig+0x6be>
 800e3b0:	3b02      	subs	r3, #2
 800e3b2:	2b1e      	cmp	r3, #30
 800e3b4:	d87d      	bhi.n	800e4b2 <UART_SetConfig+0x6be>
 800e3b6:	a201      	add	r2, pc, #4	; (adr r2, 800e3bc <UART_SetConfig+0x5c8>)
 800e3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3bc:	0800e43f 	.word	0x0800e43f
 800e3c0:	0800e4b3 	.word	0x0800e4b3
 800e3c4:	0800e447 	.word	0x0800e447
 800e3c8:	0800e4b3 	.word	0x0800e4b3
 800e3cc:	0800e4b3 	.word	0x0800e4b3
 800e3d0:	0800e4b3 	.word	0x0800e4b3
 800e3d4:	0800e457 	.word	0x0800e457
 800e3d8:	0800e4b3 	.word	0x0800e4b3
 800e3dc:	0800e4b3 	.word	0x0800e4b3
 800e3e0:	0800e4b3 	.word	0x0800e4b3
 800e3e4:	0800e4b3 	.word	0x0800e4b3
 800e3e8:	0800e4b3 	.word	0x0800e4b3
 800e3ec:	0800e4b3 	.word	0x0800e4b3
 800e3f0:	0800e4b3 	.word	0x0800e4b3
 800e3f4:	0800e467 	.word	0x0800e467
 800e3f8:	0800e4b3 	.word	0x0800e4b3
 800e3fc:	0800e4b3 	.word	0x0800e4b3
 800e400:	0800e4b3 	.word	0x0800e4b3
 800e404:	0800e4b3 	.word	0x0800e4b3
 800e408:	0800e4b3 	.word	0x0800e4b3
 800e40c:	0800e4b3 	.word	0x0800e4b3
 800e410:	0800e4b3 	.word	0x0800e4b3
 800e414:	0800e4b3 	.word	0x0800e4b3
 800e418:	0800e4b3 	.word	0x0800e4b3
 800e41c:	0800e4b3 	.word	0x0800e4b3
 800e420:	0800e4b3 	.word	0x0800e4b3
 800e424:	0800e4b3 	.word	0x0800e4b3
 800e428:	0800e4b3 	.word	0x0800e4b3
 800e42c:	0800e4b3 	.word	0x0800e4b3
 800e430:	0800e4b3 	.word	0x0800e4b3
 800e434:	0800e4a5 	.word	0x0800e4a5
 800e438:	2b40      	cmp	r3, #64	; 0x40
 800e43a:	d036      	beq.n	800e4aa <UART_SetConfig+0x6b6>
 800e43c:	e039      	b.n	800e4b2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e43e:	f7fc ff57 	bl	800b2f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e442:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e444:	e03b      	b.n	800e4be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e446:	f107 0314 	add.w	r3, r7, #20
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fc ff66 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e454:	e033      	b.n	800e4be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e456:	f107 0308 	add.w	r3, r7, #8
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fd f8b2 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e464:	e02b      	b.n	800e4be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e466:	4b0a      	ldr	r3, [pc, #40]	; (800e490 <UART_SetConfig+0x69c>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f003 0320 	and.w	r3, r3, #32
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d009      	beq.n	800e486 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e472:	4b07      	ldr	r3, [pc, #28]	; (800e490 <UART_SetConfig+0x69c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	08db      	lsrs	r3, r3, #3
 800e478:	f003 0303 	and.w	r3, r3, #3
 800e47c:	4a08      	ldr	r2, [pc, #32]	; (800e4a0 <UART_SetConfig+0x6ac>)
 800e47e:	fa22 f303 	lsr.w	r3, r2, r3
 800e482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e484:	e01b      	b.n	800e4be <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e486:	4b06      	ldr	r3, [pc, #24]	; (800e4a0 <UART_SetConfig+0x6ac>)
 800e488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e48a:	e018      	b.n	800e4be <UART_SetConfig+0x6ca>
 800e48c:	40011400 	.word	0x40011400
 800e490:	58024400 	.word	0x58024400
 800e494:	40007800 	.word	0x40007800
 800e498:	40007c00 	.word	0x40007c00
 800e49c:	58000c00 	.word	0x58000c00
 800e4a0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4a4:	4bc4      	ldr	r3, [pc, #784]	; (800e7b8 <UART_SetConfig+0x9c4>)
 800e4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4a8:	e009      	b.n	800e4be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4b0:	e005      	b.n	800e4be <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e4bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f000 81da 	beq.w	800e87a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ca:	4abc      	ldr	r2, [pc, #752]	; (800e7bc <UART_SetConfig+0x9c8>)
 800e4cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4d8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	685a      	ldr	r2, [r3, #4]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	005b      	lsls	r3, r3, #1
 800e4e2:	4413      	add	r3, r2
 800e4e4:	6a3a      	ldr	r2, [r7, #32]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d305      	bcc.n	800e4f6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e4f0:	6a3a      	ldr	r2, [r7, #32]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d903      	bls.n	800e4fe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e4fc:	e1bd      	b.n	800e87a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	4618      	mov	r0, r3
 800e502:	f04f 0100 	mov.w	r1, #0
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e50a:	4aac      	ldr	r2, [pc, #688]	; (800e7bc <UART_SetConfig+0x9c8>)
 800e50c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e510:	b29a      	uxth	r2, r3
 800e512:	f04f 0300 	mov.w	r3, #0
 800e516:	f7f3 fd27 	bl	8001f68 <__aeabi_uldivmod>
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	4610      	mov	r0, r2
 800e520:	4619      	mov	r1, r3
 800e522:	f04f 0200 	mov.w	r2, #0
 800e526:	f04f 0300 	mov.w	r3, #0
 800e52a:	020b      	lsls	r3, r1, #8
 800e52c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e530:	0202      	lsls	r2, r0, #8
 800e532:	6879      	ldr	r1, [r7, #4]
 800e534:	6849      	ldr	r1, [r1, #4]
 800e536:	0849      	lsrs	r1, r1, #1
 800e538:	4608      	mov	r0, r1
 800e53a:	f04f 0100 	mov.w	r1, #0
 800e53e:	1814      	adds	r4, r2, r0
 800e540:	eb43 0501 	adc.w	r5, r3, r1
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	461a      	mov	r2, r3
 800e54a:	f04f 0300 	mov.w	r3, #0
 800e54e:	4620      	mov	r0, r4
 800e550:	4629      	mov	r1, r5
 800e552:	f7f3 fd09 	bl	8001f68 <__aeabi_uldivmod>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	4613      	mov	r3, r2
 800e55c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e564:	d308      	bcc.n	800e578 <UART_SetConfig+0x784>
 800e566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e56c:	d204      	bcs.n	800e578 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e574:	60da      	str	r2, [r3, #12]
 800e576:	e180      	b.n	800e87a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e57e:	e17c      	b.n	800e87a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	69db      	ldr	r3, [r3, #28]
 800e584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e588:	f040 80be 	bne.w	800e708 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800e58c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e590:	2b20      	cmp	r3, #32
 800e592:	dc49      	bgt.n	800e628 <UART_SetConfig+0x834>
 800e594:	2b00      	cmp	r3, #0
 800e596:	db7c      	blt.n	800e692 <UART_SetConfig+0x89e>
 800e598:	2b20      	cmp	r3, #32
 800e59a:	d87a      	bhi.n	800e692 <UART_SetConfig+0x89e>
 800e59c:	a201      	add	r2, pc, #4	; (adr r2, 800e5a4 <UART_SetConfig+0x7b0>)
 800e59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a2:	bf00      	nop
 800e5a4:	0800e62f 	.word	0x0800e62f
 800e5a8:	0800e637 	.word	0x0800e637
 800e5ac:	0800e693 	.word	0x0800e693
 800e5b0:	0800e693 	.word	0x0800e693
 800e5b4:	0800e63f 	.word	0x0800e63f
 800e5b8:	0800e693 	.word	0x0800e693
 800e5bc:	0800e693 	.word	0x0800e693
 800e5c0:	0800e693 	.word	0x0800e693
 800e5c4:	0800e64f 	.word	0x0800e64f
 800e5c8:	0800e693 	.word	0x0800e693
 800e5cc:	0800e693 	.word	0x0800e693
 800e5d0:	0800e693 	.word	0x0800e693
 800e5d4:	0800e693 	.word	0x0800e693
 800e5d8:	0800e693 	.word	0x0800e693
 800e5dc:	0800e693 	.word	0x0800e693
 800e5e0:	0800e693 	.word	0x0800e693
 800e5e4:	0800e65f 	.word	0x0800e65f
 800e5e8:	0800e693 	.word	0x0800e693
 800e5ec:	0800e693 	.word	0x0800e693
 800e5f0:	0800e693 	.word	0x0800e693
 800e5f4:	0800e693 	.word	0x0800e693
 800e5f8:	0800e693 	.word	0x0800e693
 800e5fc:	0800e693 	.word	0x0800e693
 800e600:	0800e693 	.word	0x0800e693
 800e604:	0800e693 	.word	0x0800e693
 800e608:	0800e693 	.word	0x0800e693
 800e60c:	0800e693 	.word	0x0800e693
 800e610:	0800e693 	.word	0x0800e693
 800e614:	0800e693 	.word	0x0800e693
 800e618:	0800e693 	.word	0x0800e693
 800e61c:	0800e693 	.word	0x0800e693
 800e620:	0800e693 	.word	0x0800e693
 800e624:	0800e685 	.word	0x0800e685
 800e628:	2b40      	cmp	r3, #64	; 0x40
 800e62a:	d02e      	beq.n	800e68a <UART_SetConfig+0x896>
 800e62c:	e031      	b.n	800e692 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e62e:	f7fb fa05 	bl	8009a3c <HAL_RCC_GetPCLK1Freq>
 800e632:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e634:	e033      	b.n	800e69e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e636:	f7fb fa17 	bl	8009a68 <HAL_RCC_GetPCLK2Freq>
 800e63a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e63c:	e02f      	b.n	800e69e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e63e:	f107 0314 	add.w	r3, r7, #20
 800e642:	4618      	mov	r0, r3
 800e644:	f7fc fe6a 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e64c:	e027      	b.n	800e69e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e64e:	f107 0308 	add.w	r3, r7, #8
 800e652:	4618      	mov	r0, r3
 800e654:	f7fc ffb6 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e65c:	e01f      	b.n	800e69e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e65e:	4b58      	ldr	r3, [pc, #352]	; (800e7c0 <UART_SetConfig+0x9cc>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f003 0320 	and.w	r3, r3, #32
 800e666:	2b00      	cmp	r3, #0
 800e668:	d009      	beq.n	800e67e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e66a:	4b55      	ldr	r3, [pc, #340]	; (800e7c0 <UART_SetConfig+0x9cc>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	08db      	lsrs	r3, r3, #3
 800e670:	f003 0303 	and.w	r3, r3, #3
 800e674:	4a53      	ldr	r2, [pc, #332]	; (800e7c4 <UART_SetConfig+0x9d0>)
 800e676:	fa22 f303 	lsr.w	r3, r2, r3
 800e67a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e67c:	e00f      	b.n	800e69e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e67e:	4b51      	ldr	r3, [pc, #324]	; (800e7c4 <UART_SetConfig+0x9d0>)
 800e680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e682:	e00c      	b.n	800e69e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e684:	4b4c      	ldr	r3, [pc, #304]	; (800e7b8 <UART_SetConfig+0x9c4>)
 800e686:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e688:	e009      	b.n	800e69e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e68a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e68e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e690:	e005      	b.n	800e69e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e692:	2300      	movs	r3, #0
 800e694:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e69c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f000 80ea 	beq.w	800e87a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6aa:	4a44      	ldr	r2, [pc, #272]	; (800e7bc <UART_SetConfig+0x9c8>)
 800e6ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6b8:	005a      	lsls	r2, r3, #1
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	085b      	lsrs	r3, r3, #1
 800e6c0:	441a      	add	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ce:	2b0f      	cmp	r3, #15
 800e6d0:	d916      	bls.n	800e700 <UART_SetConfig+0x90c>
 800e6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6d8:	d212      	bcs.n	800e700 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	f023 030f 	bic.w	r3, r3, #15
 800e6e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	085b      	lsrs	r3, r3, #1
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	f003 0307 	and.w	r3, r3, #7
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e6fc:	60da      	str	r2, [r3, #12]
 800e6fe:	e0bc      	b.n	800e87a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e700:	2301      	movs	r3, #1
 800e702:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e706:	e0b8      	b.n	800e87a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e708:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e70c:	2b20      	cmp	r3, #32
 800e70e:	dc4b      	bgt.n	800e7a8 <UART_SetConfig+0x9b4>
 800e710:	2b00      	cmp	r3, #0
 800e712:	f2c0 8087 	blt.w	800e824 <UART_SetConfig+0xa30>
 800e716:	2b20      	cmp	r3, #32
 800e718:	f200 8084 	bhi.w	800e824 <UART_SetConfig+0xa30>
 800e71c:	a201      	add	r2, pc, #4	; (adr r2, 800e724 <UART_SetConfig+0x930>)
 800e71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e722:	bf00      	nop
 800e724:	0800e7af 	.word	0x0800e7af
 800e728:	0800e7c9 	.word	0x0800e7c9
 800e72c:	0800e825 	.word	0x0800e825
 800e730:	0800e825 	.word	0x0800e825
 800e734:	0800e7d1 	.word	0x0800e7d1
 800e738:	0800e825 	.word	0x0800e825
 800e73c:	0800e825 	.word	0x0800e825
 800e740:	0800e825 	.word	0x0800e825
 800e744:	0800e7e1 	.word	0x0800e7e1
 800e748:	0800e825 	.word	0x0800e825
 800e74c:	0800e825 	.word	0x0800e825
 800e750:	0800e825 	.word	0x0800e825
 800e754:	0800e825 	.word	0x0800e825
 800e758:	0800e825 	.word	0x0800e825
 800e75c:	0800e825 	.word	0x0800e825
 800e760:	0800e825 	.word	0x0800e825
 800e764:	0800e7f1 	.word	0x0800e7f1
 800e768:	0800e825 	.word	0x0800e825
 800e76c:	0800e825 	.word	0x0800e825
 800e770:	0800e825 	.word	0x0800e825
 800e774:	0800e825 	.word	0x0800e825
 800e778:	0800e825 	.word	0x0800e825
 800e77c:	0800e825 	.word	0x0800e825
 800e780:	0800e825 	.word	0x0800e825
 800e784:	0800e825 	.word	0x0800e825
 800e788:	0800e825 	.word	0x0800e825
 800e78c:	0800e825 	.word	0x0800e825
 800e790:	0800e825 	.word	0x0800e825
 800e794:	0800e825 	.word	0x0800e825
 800e798:	0800e825 	.word	0x0800e825
 800e79c:	0800e825 	.word	0x0800e825
 800e7a0:	0800e825 	.word	0x0800e825
 800e7a4:	0800e817 	.word	0x0800e817
 800e7a8:	2b40      	cmp	r3, #64	; 0x40
 800e7aa:	d037      	beq.n	800e81c <UART_SetConfig+0xa28>
 800e7ac:	e03a      	b.n	800e824 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7ae:	f7fb f945 	bl	8009a3c <HAL_RCC_GetPCLK1Freq>
 800e7b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e7b4:	e03c      	b.n	800e830 <UART_SetConfig+0xa3c>
 800e7b6:	bf00      	nop
 800e7b8:	003d0900 	.word	0x003d0900
 800e7bc:	08019cfc 	.word	0x08019cfc
 800e7c0:	58024400 	.word	0x58024400
 800e7c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7c8:	f7fb f94e 	bl	8009a68 <HAL_RCC_GetPCLK2Freq>
 800e7cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e7ce:	e02f      	b.n	800e830 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7d0:	f107 0314 	add.w	r3, r7, #20
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fc fda1 	bl	800b31c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e7de:	e027      	b.n	800e830 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7e0:	f107 0308 	add.w	r3, r7, #8
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fc feed 	bl	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e7ee:	e01f      	b.n	800e830 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7f0:	4b2c      	ldr	r3, [pc, #176]	; (800e8a4 <UART_SetConfig+0xab0>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f003 0320 	and.w	r3, r3, #32
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d009      	beq.n	800e810 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e7fc:	4b29      	ldr	r3, [pc, #164]	; (800e8a4 <UART_SetConfig+0xab0>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	08db      	lsrs	r3, r3, #3
 800e802:	f003 0303 	and.w	r3, r3, #3
 800e806:	4a28      	ldr	r2, [pc, #160]	; (800e8a8 <UART_SetConfig+0xab4>)
 800e808:	fa22 f303 	lsr.w	r3, r2, r3
 800e80c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e80e:	e00f      	b.n	800e830 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e810:	4b25      	ldr	r3, [pc, #148]	; (800e8a8 <UART_SetConfig+0xab4>)
 800e812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e814:	e00c      	b.n	800e830 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e816:	4b25      	ldr	r3, [pc, #148]	; (800e8ac <UART_SetConfig+0xab8>)
 800e818:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e81a:	e009      	b.n	800e830 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e81c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e822:	e005      	b.n	800e830 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e824:	2300      	movs	r3, #0
 800e826:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e828:	2301      	movs	r3, #1
 800e82a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e82e:	bf00      	nop
    }

    if (pclk != 0U)
 800e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e832:	2b00      	cmp	r3, #0
 800e834:	d021      	beq.n	800e87a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e83a:	4a1d      	ldr	r2, [pc, #116]	; (800e8b0 <UART_SetConfig+0xabc>)
 800e83c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e840:	461a      	mov	r2, r3
 800e842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e844:	fbb3 f2f2 	udiv	r2, r3, r2
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	085b      	lsrs	r3, r3, #1
 800e84e:	441a      	add	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	fbb2 f3f3 	udiv	r3, r2, r3
 800e858:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	2b0f      	cmp	r3, #15
 800e85e:	d909      	bls.n	800e874 <UART_SetConfig+0xa80>
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e866:	d205      	bcs.n	800e874 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	60da      	str	r2, [r3, #12]
 800e872:	e002      	b.n	800e87a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2201      	movs	r2, #1
 800e87e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e896:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3738      	adds	r7, #56	; 0x38
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	58024400 	.word	0x58024400
 800e8a8:	03d09000 	.word	0x03d09000
 800e8ac:	003d0900 	.word	0x003d0900
 800e8b0:	08019cfc 	.word	0x08019cfc

0800e8b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c0:	f003 0301 	and.w	r3, r3, #1
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00a      	beq.n	800e8de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	430a      	orrs	r2, r1
 800e8dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8e2:	f003 0302 	and.w	r3, r3, #2
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00a      	beq.n	800e900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e904:	f003 0304 	and.w	r3, r3, #4
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00a      	beq.n	800e922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	430a      	orrs	r2, r1
 800e920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e926:	f003 0308 	and.w	r3, r3, #8
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00a      	beq.n	800e944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	430a      	orrs	r2, r1
 800e942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e948:	f003 0310 	and.w	r3, r3, #16
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00a      	beq.n	800e966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	430a      	orrs	r2, r1
 800e964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e96a:	f003 0320 	and.w	r3, r3, #32
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00a      	beq.n	800e988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	430a      	orrs	r2, r1
 800e986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e990:	2b00      	cmp	r3, #0
 800e992:	d01a      	beq.n	800e9ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	430a      	orrs	r2, r1
 800e9a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9b2:	d10a      	bne.n	800e9ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	430a      	orrs	r2, r1
 800e9c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00a      	beq.n	800e9ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	430a      	orrs	r2, r1
 800e9ea:	605a      	str	r2, [r3, #4]
  }
}
 800e9ec:	bf00      	nop
 800e9ee:	370c      	adds	r7, #12
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af02      	add	r7, sp, #8
 800e9fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ea08:	f7f5 fa44 	bl	8003e94 <HAL_GetTick>
 800ea0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f003 0308 	and.w	r3, r3, #8
 800ea18:	2b08      	cmp	r3, #8
 800ea1a:	d10e      	bne.n	800ea3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 f82f 	bl	800ea8e <UART_WaitOnFlagUntilTimeout>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d001      	beq.n	800ea3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea36:	2303      	movs	r3, #3
 800ea38:	e025      	b.n	800ea86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 0304 	and.w	r3, r3, #4
 800ea44:	2b04      	cmp	r3, #4
 800ea46:	d10e      	bne.n	800ea66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea4c:	9300      	str	r3, [sp, #0]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 f819 	bl	800ea8e <UART_WaitOnFlagUntilTimeout>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea62:	2303      	movs	r3, #3
 800ea64:	e00f      	b.n	800ea86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2220      	movs	r2, #32
 800ea6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2220      	movs	r2, #32
 800ea72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b09c      	sub	sp, #112	; 0x70
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	60f8      	str	r0, [r7, #12]
 800ea96:	60b9      	str	r1, [r7, #8]
 800ea98:	603b      	str	r3, [r7, #0]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea9e:	e0a9      	b.n	800ebf4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eaa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaa6:	f000 80a5 	beq.w	800ebf4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eaaa:	f7f5 f9f3 	bl	8003e94 <HAL_GetTick>
 800eaae:	4602      	mov	r2, r0
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d302      	bcc.n	800eac0 <UART_WaitOnFlagUntilTimeout+0x32>
 800eaba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d140      	bne.n	800eb42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eac8:	e853 3f00 	ldrex	r3, [r3]
 800eacc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ead0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ead4:	667b      	str	r3, [r7, #100]	; 0x64
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eade:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eae0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eae6:	e841 2300 	strex	r3, r2, [r1]
 800eaea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eaec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d1e6      	bne.n	800eac0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	3308      	adds	r3, #8
 800eaf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eafc:	e853 3f00 	ldrex	r3, [r3]
 800eb00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb04:	f023 0301 	bic.w	r3, r3, #1
 800eb08:	663b      	str	r3, [r7, #96]	; 0x60
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	3308      	adds	r3, #8
 800eb10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb12:	64ba      	str	r2, [r7, #72]	; 0x48
 800eb14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb1a:	e841 2300 	strex	r3, r2, [r1]
 800eb1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eb20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d1e5      	bne.n	800eaf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2220      	movs	r2, #32
 800eb2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2220      	movs	r2, #32
 800eb32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800eb3e:	2303      	movs	r3, #3
 800eb40:	e069      	b.n	800ec16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f003 0304 	and.w	r3, r3, #4
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d051      	beq.n	800ebf4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	69db      	ldr	r3, [r3, #28]
 800eb56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb5e:	d149      	bne.n	800ebf4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb72:	e853 3f00 	ldrex	r3, [r3]
 800eb76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eb7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	461a      	mov	r2, r3
 800eb86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb88:	637b      	str	r3, [r7, #52]	; 0x34
 800eb8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb90:	e841 2300 	strex	r3, r2, [r1]
 800eb94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d1e6      	bne.n	800eb6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3308      	adds	r3, #8
 800eba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	e853 3f00 	ldrex	r3, [r3]
 800ebaa:	613b      	str	r3, [r7, #16]
   return(result);
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	f023 0301 	bic.w	r3, r3, #1
 800ebb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	3308      	adds	r3, #8
 800ebba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ebbc:	623a      	str	r2, [r7, #32]
 800ebbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc0:	69f9      	ldr	r1, [r7, #28]
 800ebc2:	6a3a      	ldr	r2, [r7, #32]
 800ebc4:	e841 2300 	strex	r3, r2, [r1]
 800ebc8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d1e5      	bne.n	800eb9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2220      	movs	r2, #32
 800ebd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2220      	movs	r2, #32
 800ebdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2220      	movs	r2, #32
 800ebe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	e010      	b.n	800ec16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	69da      	ldr	r2, [r3, #28]
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	4013      	ands	r3, r2
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	bf0c      	ite	eq
 800ec04:	2301      	moveq	r3, #1
 800ec06:	2300      	movne	r3, #0
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	79fb      	ldrb	r3, [r7, #7]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	f43f af46 	beq.w	800eaa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3770      	adds	r7, #112	; 0x70
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b095      	sub	sp, #84	; 0x54
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec30:	e853 3f00 	ldrex	r3, [r3]
 800ec34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec46:	643b      	str	r3, [r7, #64]	; 0x40
 800ec48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec4e:	e841 2300 	strex	r3, r2, [r1]
 800ec52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d1e6      	bne.n	800ec28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	3308      	adds	r3, #8
 800ec60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec62:	6a3b      	ldr	r3, [r7, #32]
 800ec64:	e853 3f00 	ldrex	r3, [r3]
 800ec68:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec6a:	69fa      	ldr	r2, [r7, #28]
 800ec6c:	4b1e      	ldr	r3, [pc, #120]	; (800ece8 <UART_EndRxTransfer+0xc8>)
 800ec6e:	4013      	ands	r3, r2
 800ec70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	3308      	adds	r3, #8
 800ec78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec82:	e841 2300 	strex	r3, r2, [r1]
 800ec86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1e5      	bne.n	800ec5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d118      	bne.n	800ecc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	e853 3f00 	ldrex	r3, [r3]
 800eca2:	60bb      	str	r3, [r7, #8]
   return(result);
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	f023 0310 	bic.w	r3, r3, #16
 800ecaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecb4:	61bb      	str	r3, [r7, #24]
 800ecb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb8:	6979      	ldr	r1, [r7, #20]
 800ecba:	69ba      	ldr	r2, [r7, #24]
 800ecbc:	e841 2300 	strex	r3, r2, [r1]
 800ecc0:	613b      	str	r3, [r7, #16]
   return(result);
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1e6      	bne.n	800ec96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2220      	movs	r2, #32
 800eccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ecdc:	bf00      	nop
 800ecde:	3754      	adds	r7, #84	; 0x54
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	effffffe 	.word	0xeffffffe

0800ecec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	f7ff f85c 	bl	800ddc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed10:	bf00      	nop
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b088      	sub	sp, #32
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	e853 3f00 	ldrex	r3, [r3]
 800ed2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed34:	61fb      	str	r3, [r7, #28]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	61bb      	str	r3, [r7, #24]
 800ed40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed42:	6979      	ldr	r1, [r7, #20]
 800ed44:	69ba      	ldr	r2, [r7, #24]
 800ed46:	e841 2300 	strex	r3, r2, [r1]
 800ed4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1e6      	bne.n	800ed20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2220      	movs	r2, #32
 800ed56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7ff f827 	bl	800ddb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed66:	bf00      	nop
 800ed68:	3720      	adds	r7, #32
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ed6e:	b480      	push	{r7}
 800ed70:	b083      	sub	sp, #12
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ed76:	bf00      	nop
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr

0800ed82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ed82:	b480      	push	{r7}
 800ed84:	b083      	sub	sp, #12
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ed8a:	bf00      	nop
 800ed8c:	370c      	adds	r7, #12
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr

0800ed96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ed96:	b480      	push	{r7}
 800ed98:	b083      	sub	sp, #12
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ed9e:	bf00      	nop
 800eda0:	370c      	adds	r7, #12
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr

0800edaa <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d101      	bne.n	800edc0 <HAL_UARTEx_EnableFifoMode+0x16>
 800edbc:	2302      	movs	r3, #2
 800edbe:	e02b      	b.n	800ee18 <HAL_UARTEx_EnableFifoMode+0x6e>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2224      	movs	r2, #36	; 0x24
 800edcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f022 0201 	bic.w	r2, r2, #1
 800ede6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800edee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800edf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 f889 	bl	800ef18 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2220      	movs	r2, #32
 800ee0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2200      	movs	r2, #0
 800ee12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d101      	bne.n	800ee38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ee34:	2302      	movs	r3, #2
 800ee36:	e02d      	b.n	800ee94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2224      	movs	r2, #36	; 0x24
 800ee44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f022 0201 	bic.w	r2, r2, #1
 800ee5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	683a      	ldr	r2, [r7, #0]
 800ee70:	430a      	orrs	r2, r1
 800ee72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 f84f 	bl	800ef18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2220      	movs	r2, #32
 800ee86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee92:	2300      	movs	r3, #0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d101      	bne.n	800eeb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	e02d      	b.n	800ef10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2224      	movs	r2, #36	; 0x24
 800eec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f022 0201 	bic.w	r2, r2, #1
 800eeda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	683a      	ldr	r2, [r7, #0]
 800eeec:	430a      	orrs	r2, r1
 800eeee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 f811 	bl	800ef18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	68fa      	ldr	r2, [r7, #12]
 800eefc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2220      	movs	r2, #32
 800ef02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b085      	sub	sp, #20
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d108      	bne.n	800ef3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2201      	movs	r2, #1
 800ef34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ef38:	e031      	b.n	800ef9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ef3a:	2310      	movs	r3, #16
 800ef3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef3e:	2310      	movs	r3, #16
 800ef40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	0e5b      	lsrs	r3, r3, #25
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	f003 0307 	and.w	r3, r3, #7
 800ef50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	0f5b      	lsrs	r3, r3, #29
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	f003 0307 	and.w	r3, r3, #7
 800ef60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef62:	7bbb      	ldrb	r3, [r7, #14]
 800ef64:	7b3a      	ldrb	r2, [r7, #12]
 800ef66:	4911      	ldr	r1, [pc, #68]	; (800efac <UARTEx_SetNbDataToProcess+0x94>)
 800ef68:	5c8a      	ldrb	r2, [r1, r2]
 800ef6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ef6e:	7b3a      	ldrb	r2, [r7, #12]
 800ef70:	490f      	ldr	r1, [pc, #60]	; (800efb0 <UARTEx_SetNbDataToProcess+0x98>)
 800ef72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef74:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef80:	7bfb      	ldrb	r3, [r7, #15]
 800ef82:	7b7a      	ldrb	r2, [r7, #13]
 800ef84:	4909      	ldr	r1, [pc, #36]	; (800efac <UARTEx_SetNbDataToProcess+0x94>)
 800ef86:	5c8a      	ldrb	r2, [r1, r2]
 800ef88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ef8c:	7b7a      	ldrb	r2, [r7, #13]
 800ef8e:	4908      	ldr	r1, [pc, #32]	; (800efb0 <UARTEx_SetNbDataToProcess+0x98>)
 800ef90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef92:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ef9e:	bf00      	nop
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	08019d14 	.word	0x08019d14
 800efb0:	08019d1c 	.word	0x08019d1c

0800efb4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b087      	sub	sp, #28
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	6812      	ldr	r2, [r2, #0]
 800efcc:	f023 0101 	bic.w	r1, r3, #1
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	689b      	ldr	r3, [r3, #8]
 800efda:	2b08      	cmp	r3, #8
 800efdc:	d102      	bne.n	800efe4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800efde:	2340      	movs	r3, #64	; 0x40
 800efe0:	617b      	str	r3, [r7, #20]
 800efe2:	e001      	b.n	800efe8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800efe4:	2300      	movs	r3, #0
 800efe6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800eff4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800effa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800f000:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800f006:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800f00c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800f012:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800f018:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800f01e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800f024:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800f02a:	4313      	orrs	r3, r2
 800f02c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f032:	693a      	ldr	r2, [r7, #16]
 800f034:	4313      	orrs	r3, r2
 800f036:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f03c:	693a      	ldr	r2, [r7, #16]
 800f03e:	4313      	orrs	r3, r2
 800f040:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f046:	693a      	ldr	r2, [r7, #16]
 800f048:	4313      	orrs	r3, r2
 800f04a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800f04c:	4b20      	ldr	r3, [pc, #128]	; (800f0d0 <FMC_NORSRAM_Init+0x11c>)
 800f04e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f056:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f05e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800f066:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	43db      	mvns	r3, r3
 800f076:	ea02 0103 	and.w	r1, r2, r3
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	4319      	orrs	r1, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f08c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f090:	d10c      	bne.n	800f0ac <FMC_NORSRAM_Init+0xf8>
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d008      	beq.n	800f0ac <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0a6:	431a      	orrs	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d006      	beq.n	800f0c2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0bc:	431a      	orrs	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f0c2:	2300      	movs	r3, #0
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	371c      	adds	r7, #28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr
 800f0d0:	0008fb7f 	.word	0x0008fb7f

0800f0d4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b087      	sub	sp, #28
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	1c5a      	adds	r2, r3, #1
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ea:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	011b      	lsls	r3, r3, #4
 800f0f8:	431a      	orrs	r2, r3
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	021b      	lsls	r3, r3, #8
 800f100:	431a      	orrs	r2, r3
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	041b      	lsls	r3, r3, #16
 800f108:	431a      	orrs	r2, r3
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	3b01      	subs	r3, #1
 800f110:	051b      	lsls	r3, r3, #20
 800f112:	431a      	orrs	r2, r3
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	695b      	ldr	r3, [r3, #20]
 800f118:	3b02      	subs	r3, #2
 800f11a:	061b      	lsls	r3, r3, #24
 800f11c:	431a      	orrs	r2, r3
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	699b      	ldr	r3, [r3, #24]
 800f122:	4313      	orrs	r3, r2
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	3201      	adds	r2, #1
 800f128:	4319      	orrs	r1, r3
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f13c:	d113      	bne.n	800f166 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f146:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	691b      	ldr	r3, [r3, #16]
 800f14c:	3b01      	subs	r3, #1
 800f14e:	051b      	lsls	r3, r3, #20
 800f150:	697a      	ldr	r2, [r7, #20]
 800f152:	4313      	orrs	r3, r2
 800f154:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	431a      	orrs	r2, r3
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	371c      	adds	r7, #28
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	607a      	str	r2, [r7, #4]
 800f180:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f188:	d11d      	bne.n	800f1c6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f192:	4b13      	ldr	r3, [pc, #76]	; (800f1e0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800f194:	4013      	ands	r3, r2
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	6811      	ldr	r1, [r2, #0]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	6852      	ldr	r2, [r2, #4]
 800f19e:	0112      	lsls	r2, r2, #4
 800f1a0:	4311      	orrs	r1, r2
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	6892      	ldr	r2, [r2, #8]
 800f1a6:	0212      	lsls	r2, r2, #8
 800f1a8:	4311      	orrs	r1, r2
 800f1aa:	68ba      	ldr	r2, [r7, #8]
 800f1ac:	6992      	ldr	r2, [r2, #24]
 800f1ae:	4311      	orrs	r1, r2
 800f1b0:	68ba      	ldr	r2, [r7, #8]
 800f1b2:	68d2      	ldr	r2, [r2, #12]
 800f1b4:	0412      	lsls	r2, r2, #16
 800f1b6:	430a      	orrs	r2, r1
 800f1b8:	ea43 0102 	orr.w	r1, r3, r2
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	687a      	ldr	r2, [r7, #4]
 800f1c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f1c4:	e005      	b.n	800f1d2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f1ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3714      	adds	r7, #20
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr
 800f1e0:	cff00000 	.word	0xcff00000

0800f1e4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f1e4:	b5b0      	push	{r4, r5, r7, lr}
 800f1e6:	b08c      	sub	sp, #48	; 0x30
 800f1e8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f1ea:	4b96      	ldr	r3, [pc, #600]	; (800f444 <MX_LWIP_Init+0x260>)
 800f1ec:	22c0      	movs	r2, #192	; 0xc0
 800f1ee:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f1f0:	4b94      	ldr	r3, [pc, #592]	; (800f444 <MX_LWIP_Init+0x260>)
 800f1f2:	22a8      	movs	r2, #168	; 0xa8
 800f1f4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800f1f6:	4b93      	ldr	r3, [pc, #588]	; (800f444 <MX_LWIP_Init+0x260>)
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 800f1fc:	4b91      	ldr	r3, [pc, #580]	; (800f444 <MX_LWIP_Init+0x260>)
 800f1fe:	2201      	movs	r2, #1
 800f200:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f202:	4b91      	ldr	r3, [pc, #580]	; (800f448 <MX_LWIP_Init+0x264>)
 800f204:	22ff      	movs	r2, #255	; 0xff
 800f206:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f208:	4b8f      	ldr	r3, [pc, #572]	; (800f448 <MX_LWIP_Init+0x264>)
 800f20a:	22ff      	movs	r2, #255	; 0xff
 800f20c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800f20e:	4b8e      	ldr	r3, [pc, #568]	; (800f448 <MX_LWIP_Init+0x264>)
 800f210:	22ff      	movs	r2, #255	; 0xff
 800f212:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f214:	4b8c      	ldr	r3, [pc, #560]	; (800f448 <MX_LWIP_Init+0x264>)
 800f216:	2200      	movs	r2, #0
 800f218:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f21a:	4b8c      	ldr	r3, [pc, #560]	; (800f44c <MX_LWIP_Init+0x268>)
 800f21c:	22c0      	movs	r2, #192	; 0xc0
 800f21e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f220:	4b8a      	ldr	r3, [pc, #552]	; (800f44c <MX_LWIP_Init+0x268>)
 800f222:	22a8      	movs	r2, #168	; 0xa8
 800f224:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800f226:	4b89      	ldr	r3, [pc, #548]	; (800f44c <MX_LWIP_Init+0x268>)
 800f228:	2200      	movs	r2, #0
 800f22a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 253;
 800f22c:	4b87      	ldr	r3, [pc, #540]	; (800f44c <MX_LWIP_Init+0x268>)
 800f22e:	22fd      	movs	r2, #253	; 0xfd
 800f230:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800f232:	2100      	movs	r1, #0
 800f234:	2000      	movs	r0, #0
 800f236:	f003 fdb9 	bl	8012dac <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f23a:	4b82      	ldr	r3, [pc, #520]	; (800f444 <MX_LWIP_Init+0x260>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	061a      	lsls	r2, r3, #24
 800f240:	4b80      	ldr	r3, [pc, #512]	; (800f444 <MX_LWIP_Init+0x260>)
 800f242:	785b      	ldrb	r3, [r3, #1]
 800f244:	041b      	lsls	r3, r3, #16
 800f246:	431a      	orrs	r2, r3
 800f248:	4b7e      	ldr	r3, [pc, #504]	; (800f444 <MX_LWIP_Init+0x260>)
 800f24a:	789b      	ldrb	r3, [r3, #2]
 800f24c:	021b      	lsls	r3, r3, #8
 800f24e:	4313      	orrs	r3, r2
 800f250:	4a7c      	ldr	r2, [pc, #496]	; (800f444 <MX_LWIP_Init+0x260>)
 800f252:	78d2      	ldrb	r2, [r2, #3]
 800f254:	4313      	orrs	r3, r2
 800f256:	061a      	lsls	r2, r3, #24
 800f258:	4b7a      	ldr	r3, [pc, #488]	; (800f444 <MX_LWIP_Init+0x260>)
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	0619      	lsls	r1, r3, #24
 800f25e:	4b79      	ldr	r3, [pc, #484]	; (800f444 <MX_LWIP_Init+0x260>)
 800f260:	785b      	ldrb	r3, [r3, #1]
 800f262:	041b      	lsls	r3, r3, #16
 800f264:	4319      	orrs	r1, r3
 800f266:	4b77      	ldr	r3, [pc, #476]	; (800f444 <MX_LWIP_Init+0x260>)
 800f268:	789b      	ldrb	r3, [r3, #2]
 800f26a:	021b      	lsls	r3, r3, #8
 800f26c:	430b      	orrs	r3, r1
 800f26e:	4975      	ldr	r1, [pc, #468]	; (800f444 <MX_LWIP_Init+0x260>)
 800f270:	78c9      	ldrb	r1, [r1, #3]
 800f272:	430b      	orrs	r3, r1
 800f274:	021b      	lsls	r3, r3, #8
 800f276:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f27a:	431a      	orrs	r2, r3
 800f27c:	4b71      	ldr	r3, [pc, #452]	; (800f444 <MX_LWIP_Init+0x260>)
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	0619      	lsls	r1, r3, #24
 800f282:	4b70      	ldr	r3, [pc, #448]	; (800f444 <MX_LWIP_Init+0x260>)
 800f284:	785b      	ldrb	r3, [r3, #1]
 800f286:	041b      	lsls	r3, r3, #16
 800f288:	4319      	orrs	r1, r3
 800f28a:	4b6e      	ldr	r3, [pc, #440]	; (800f444 <MX_LWIP_Init+0x260>)
 800f28c:	789b      	ldrb	r3, [r3, #2]
 800f28e:	021b      	lsls	r3, r3, #8
 800f290:	430b      	orrs	r3, r1
 800f292:	496c      	ldr	r1, [pc, #432]	; (800f444 <MX_LWIP_Init+0x260>)
 800f294:	78c9      	ldrb	r1, [r1, #3]
 800f296:	430b      	orrs	r3, r1
 800f298:	0a1b      	lsrs	r3, r3, #8
 800f29a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f29e:	431a      	orrs	r2, r3
 800f2a0:	4b68      	ldr	r3, [pc, #416]	; (800f444 <MX_LWIP_Init+0x260>)
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	0619      	lsls	r1, r3, #24
 800f2a6:	4b67      	ldr	r3, [pc, #412]	; (800f444 <MX_LWIP_Init+0x260>)
 800f2a8:	785b      	ldrb	r3, [r3, #1]
 800f2aa:	041b      	lsls	r3, r3, #16
 800f2ac:	4319      	orrs	r1, r3
 800f2ae:	4b65      	ldr	r3, [pc, #404]	; (800f444 <MX_LWIP_Init+0x260>)
 800f2b0:	789b      	ldrb	r3, [r3, #2]
 800f2b2:	021b      	lsls	r3, r3, #8
 800f2b4:	430b      	orrs	r3, r1
 800f2b6:	4963      	ldr	r1, [pc, #396]	; (800f444 <MX_LWIP_Init+0x260>)
 800f2b8:	78c9      	ldrb	r1, [r1, #3]
 800f2ba:	430b      	orrs	r3, r1
 800f2bc:	0e1b      	lsrs	r3, r3, #24
 800f2be:	4313      	orrs	r3, r2
 800f2c0:	4a63      	ldr	r2, [pc, #396]	; (800f450 <MX_LWIP_Init+0x26c>)
 800f2c2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f2c4:	4b60      	ldr	r3, [pc, #384]	; (800f448 <MX_LWIP_Init+0x264>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	061a      	lsls	r2, r3, #24
 800f2ca:	4b5f      	ldr	r3, [pc, #380]	; (800f448 <MX_LWIP_Init+0x264>)
 800f2cc:	785b      	ldrb	r3, [r3, #1]
 800f2ce:	041b      	lsls	r3, r3, #16
 800f2d0:	431a      	orrs	r2, r3
 800f2d2:	4b5d      	ldr	r3, [pc, #372]	; (800f448 <MX_LWIP_Init+0x264>)
 800f2d4:	789b      	ldrb	r3, [r3, #2]
 800f2d6:	021b      	lsls	r3, r3, #8
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	4a5b      	ldr	r2, [pc, #364]	; (800f448 <MX_LWIP_Init+0x264>)
 800f2dc:	78d2      	ldrb	r2, [r2, #3]
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	061a      	lsls	r2, r3, #24
 800f2e2:	4b59      	ldr	r3, [pc, #356]	; (800f448 <MX_LWIP_Init+0x264>)
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	0619      	lsls	r1, r3, #24
 800f2e8:	4b57      	ldr	r3, [pc, #348]	; (800f448 <MX_LWIP_Init+0x264>)
 800f2ea:	785b      	ldrb	r3, [r3, #1]
 800f2ec:	041b      	lsls	r3, r3, #16
 800f2ee:	4319      	orrs	r1, r3
 800f2f0:	4b55      	ldr	r3, [pc, #340]	; (800f448 <MX_LWIP_Init+0x264>)
 800f2f2:	789b      	ldrb	r3, [r3, #2]
 800f2f4:	021b      	lsls	r3, r3, #8
 800f2f6:	430b      	orrs	r3, r1
 800f2f8:	4953      	ldr	r1, [pc, #332]	; (800f448 <MX_LWIP_Init+0x264>)
 800f2fa:	78c9      	ldrb	r1, [r1, #3]
 800f2fc:	430b      	orrs	r3, r1
 800f2fe:	021b      	lsls	r3, r3, #8
 800f300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f304:	431a      	orrs	r2, r3
 800f306:	4b50      	ldr	r3, [pc, #320]	; (800f448 <MX_LWIP_Init+0x264>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	0619      	lsls	r1, r3, #24
 800f30c:	4b4e      	ldr	r3, [pc, #312]	; (800f448 <MX_LWIP_Init+0x264>)
 800f30e:	785b      	ldrb	r3, [r3, #1]
 800f310:	041b      	lsls	r3, r3, #16
 800f312:	4319      	orrs	r1, r3
 800f314:	4b4c      	ldr	r3, [pc, #304]	; (800f448 <MX_LWIP_Init+0x264>)
 800f316:	789b      	ldrb	r3, [r3, #2]
 800f318:	021b      	lsls	r3, r3, #8
 800f31a:	430b      	orrs	r3, r1
 800f31c:	494a      	ldr	r1, [pc, #296]	; (800f448 <MX_LWIP_Init+0x264>)
 800f31e:	78c9      	ldrb	r1, [r1, #3]
 800f320:	430b      	orrs	r3, r1
 800f322:	0a1b      	lsrs	r3, r3, #8
 800f324:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f328:	431a      	orrs	r2, r3
 800f32a:	4b47      	ldr	r3, [pc, #284]	; (800f448 <MX_LWIP_Init+0x264>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	0619      	lsls	r1, r3, #24
 800f330:	4b45      	ldr	r3, [pc, #276]	; (800f448 <MX_LWIP_Init+0x264>)
 800f332:	785b      	ldrb	r3, [r3, #1]
 800f334:	041b      	lsls	r3, r3, #16
 800f336:	4319      	orrs	r1, r3
 800f338:	4b43      	ldr	r3, [pc, #268]	; (800f448 <MX_LWIP_Init+0x264>)
 800f33a:	789b      	ldrb	r3, [r3, #2]
 800f33c:	021b      	lsls	r3, r3, #8
 800f33e:	430b      	orrs	r3, r1
 800f340:	4941      	ldr	r1, [pc, #260]	; (800f448 <MX_LWIP_Init+0x264>)
 800f342:	78c9      	ldrb	r1, [r1, #3]
 800f344:	430b      	orrs	r3, r1
 800f346:	0e1b      	lsrs	r3, r3, #24
 800f348:	4313      	orrs	r3, r2
 800f34a:	4a42      	ldr	r2, [pc, #264]	; (800f454 <MX_LWIP_Init+0x270>)
 800f34c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f34e:	4b3f      	ldr	r3, [pc, #252]	; (800f44c <MX_LWIP_Init+0x268>)
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	061a      	lsls	r2, r3, #24
 800f354:	4b3d      	ldr	r3, [pc, #244]	; (800f44c <MX_LWIP_Init+0x268>)
 800f356:	785b      	ldrb	r3, [r3, #1]
 800f358:	041b      	lsls	r3, r3, #16
 800f35a:	431a      	orrs	r2, r3
 800f35c:	4b3b      	ldr	r3, [pc, #236]	; (800f44c <MX_LWIP_Init+0x268>)
 800f35e:	789b      	ldrb	r3, [r3, #2]
 800f360:	021b      	lsls	r3, r3, #8
 800f362:	4313      	orrs	r3, r2
 800f364:	4a39      	ldr	r2, [pc, #228]	; (800f44c <MX_LWIP_Init+0x268>)
 800f366:	78d2      	ldrb	r2, [r2, #3]
 800f368:	4313      	orrs	r3, r2
 800f36a:	061a      	lsls	r2, r3, #24
 800f36c:	4b37      	ldr	r3, [pc, #220]	; (800f44c <MX_LWIP_Init+0x268>)
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	0619      	lsls	r1, r3, #24
 800f372:	4b36      	ldr	r3, [pc, #216]	; (800f44c <MX_LWIP_Init+0x268>)
 800f374:	785b      	ldrb	r3, [r3, #1]
 800f376:	041b      	lsls	r3, r3, #16
 800f378:	4319      	orrs	r1, r3
 800f37a:	4b34      	ldr	r3, [pc, #208]	; (800f44c <MX_LWIP_Init+0x268>)
 800f37c:	789b      	ldrb	r3, [r3, #2]
 800f37e:	021b      	lsls	r3, r3, #8
 800f380:	430b      	orrs	r3, r1
 800f382:	4932      	ldr	r1, [pc, #200]	; (800f44c <MX_LWIP_Init+0x268>)
 800f384:	78c9      	ldrb	r1, [r1, #3]
 800f386:	430b      	orrs	r3, r1
 800f388:	021b      	lsls	r3, r3, #8
 800f38a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f38e:	431a      	orrs	r2, r3
 800f390:	4b2e      	ldr	r3, [pc, #184]	; (800f44c <MX_LWIP_Init+0x268>)
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	0619      	lsls	r1, r3, #24
 800f396:	4b2d      	ldr	r3, [pc, #180]	; (800f44c <MX_LWIP_Init+0x268>)
 800f398:	785b      	ldrb	r3, [r3, #1]
 800f39a:	041b      	lsls	r3, r3, #16
 800f39c:	4319      	orrs	r1, r3
 800f39e:	4b2b      	ldr	r3, [pc, #172]	; (800f44c <MX_LWIP_Init+0x268>)
 800f3a0:	789b      	ldrb	r3, [r3, #2]
 800f3a2:	021b      	lsls	r3, r3, #8
 800f3a4:	430b      	orrs	r3, r1
 800f3a6:	4929      	ldr	r1, [pc, #164]	; (800f44c <MX_LWIP_Init+0x268>)
 800f3a8:	78c9      	ldrb	r1, [r1, #3]
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	0a1b      	lsrs	r3, r3, #8
 800f3ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3b2:	431a      	orrs	r2, r3
 800f3b4:	4b25      	ldr	r3, [pc, #148]	; (800f44c <MX_LWIP_Init+0x268>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	0619      	lsls	r1, r3, #24
 800f3ba:	4b24      	ldr	r3, [pc, #144]	; (800f44c <MX_LWIP_Init+0x268>)
 800f3bc:	785b      	ldrb	r3, [r3, #1]
 800f3be:	041b      	lsls	r3, r3, #16
 800f3c0:	4319      	orrs	r1, r3
 800f3c2:	4b22      	ldr	r3, [pc, #136]	; (800f44c <MX_LWIP_Init+0x268>)
 800f3c4:	789b      	ldrb	r3, [r3, #2]
 800f3c6:	021b      	lsls	r3, r3, #8
 800f3c8:	430b      	orrs	r3, r1
 800f3ca:	4920      	ldr	r1, [pc, #128]	; (800f44c <MX_LWIP_Init+0x268>)
 800f3cc:	78c9      	ldrb	r1, [r1, #3]
 800f3ce:	430b      	orrs	r3, r1
 800f3d0:	0e1b      	lsrs	r3, r3, #24
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	4a20      	ldr	r2, [pc, #128]	; (800f458 <MX_LWIP_Init+0x274>)
 800f3d6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f3d8:	4b20      	ldr	r3, [pc, #128]	; (800f45c <MX_LWIP_Init+0x278>)
 800f3da:	9302      	str	r3, [sp, #8]
 800f3dc:	4b20      	ldr	r3, [pc, #128]	; (800f460 <MX_LWIP_Init+0x27c>)
 800f3de:	9301      	str	r3, [sp, #4]
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	9300      	str	r3, [sp, #0]
 800f3e4:	4b1c      	ldr	r3, [pc, #112]	; (800f458 <MX_LWIP_Init+0x274>)
 800f3e6:	4a1b      	ldr	r2, [pc, #108]	; (800f454 <MX_LWIP_Init+0x270>)
 800f3e8:	4919      	ldr	r1, [pc, #100]	; (800f450 <MX_LWIP_Init+0x26c>)
 800f3ea:	481e      	ldr	r0, [pc, #120]	; (800f464 <MX_LWIP_Init+0x280>)
 800f3ec:	f004 fb56 	bl	8013a9c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f3f0:	481c      	ldr	r0, [pc, #112]	; (800f464 <MX_LWIP_Init+0x280>)
 800f3f2:	f004 fd19 	bl	8013e28 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f3f6:	4b1b      	ldr	r3, [pc, #108]	; (800f464 <MX_LWIP_Init+0x280>)
 800f3f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f3fc:	089b      	lsrs	r3, r3, #2
 800f3fe:	f003 0301 	and.w	r3, r3, #1
 800f402:	b2db      	uxtb	r3, r3
 800f404:	2b00      	cmp	r3, #0
 800f406:	d003      	beq.n	800f410 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f408:	4816      	ldr	r0, [pc, #88]	; (800f464 <MX_LWIP_Init+0x280>)
 800f40a:	f004 fd1d 	bl	8013e48 <netif_set_up>
 800f40e:	e002      	b.n	800f416 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f410:	4814      	ldr	r0, [pc, #80]	; (800f464 <MX_LWIP_Init+0x280>)
 800f412:	f004 fd8f 	bl	8013f34 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f416:	4914      	ldr	r1, [pc, #80]	; (800f468 <MX_LWIP_Init+0x284>)
 800f418:	4812      	ldr	r0, [pc, #72]	; (800f464 <MX_LWIP_Init+0x280>)
 800f41a:	f004 fe21 	bl	8014060 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800f41e:	4b13      	ldr	r3, [pc, #76]	; (800f46c <MX_LWIP_Init+0x288>)
 800f420:	1d3c      	adds	r4, r7, #4
 800f422:	461d      	mov	r5, r3
 800f424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f428:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f42c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800f430:	1d3b      	adds	r3, r7, #4
 800f432:	490c      	ldr	r1, [pc, #48]	; (800f464 <MX_LWIP_Init+0x280>)
 800f434:	4618      	mov	r0, r3
 800f436:	f000 fcde 	bl	800fdf6 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f43a:	bf00      	nop
 800f43c:	3720      	adds	r7, #32
 800f43e:	46bd      	mov	sp, r7
 800f440:	bdb0      	pop	{r4, r5, r7, pc}
 800f442:	bf00      	nop
 800f444:	240064c8 	.word	0x240064c8
 800f448:	240064c4 	.word	0x240064c4
 800f44c:	24006480 	.word	0x24006480
 800f450:	240064c0 	.word	0x240064c0
 800f454:	240064cc 	.word	0x240064cc
 800f458:	240064d0 	.word	0x240064d0
 800f45c:	08012d69 	.word	0x08012d69
 800f460:	0800fb41 	.word	0x0800fb41
 800f464:	24006484 	.word	0x24006484
 800f468:	0800f471 	.word	0x0800f471
 800f46c:	080181b4 	.word	0x080181b4

0800f470 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f478:	bf00      	nop
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b08e      	sub	sp, #56	; 0x38
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f48c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f490:	2200      	movs	r2, #0
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	605a      	str	r2, [r3, #4]
 800f496:	609a      	str	r2, [r3, #8]
 800f498:	60da      	str	r2, [r3, #12]
 800f49a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4a60      	ldr	r2, [pc, #384]	; (800f624 <HAL_ETH_MspInit+0x1a0>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	f040 80ba 	bne.w	800f61c <HAL_ETH_MspInit+0x198>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f4a8:	4b5f      	ldr	r3, [pc, #380]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f4aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f4ae:	4a5e      	ldr	r2, [pc, #376]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f4b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f4b8:	4b5b      	ldr	r3, [pc, #364]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f4ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f4be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4c2:	623b      	str	r3, [r7, #32]
 800f4c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f4c6:	4b58      	ldr	r3, [pc, #352]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f4c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f4cc:	4a56      	ldr	r2, [pc, #344]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f4ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f4d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f4d6:	4b54      	ldr	r3, [pc, #336]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f4d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f4dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4e0:	61fb      	str	r3, [r7, #28]
 800f4e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f4e4:	4b50      	ldr	r3, [pc, #320]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f4e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f4ea:	4a4f      	ldr	r2, [pc, #316]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f4ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f4f4:	4b4c      	ldr	r3, [pc, #304]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f4f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f4fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4fe:	61bb      	str	r3, [r7, #24]
 800f500:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f502:	4b49      	ldr	r3, [pc, #292]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f508:	4a47      	ldr	r2, [pc, #284]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f50a:	f043 0304 	orr.w	r3, r3, #4
 800f50e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f512:	4b45      	ldr	r3, [pc, #276]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f518:	f003 0304 	and.w	r3, r3, #4
 800f51c:	617b      	str	r3, [r7, #20]
 800f51e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f520:	4b41      	ldr	r3, [pc, #260]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f526:	4a40      	ldr	r2, [pc, #256]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f528:	f043 0301 	orr.w	r3, r3, #1
 800f52c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f530:	4b3d      	ldr	r3, [pc, #244]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f536:	f003 0301 	and.w	r3, r3, #1
 800f53a:	613b      	str	r3, [r7, #16]
 800f53c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800f53e:	4b3a      	ldr	r3, [pc, #232]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f544:	4a38      	ldr	r2, [pc, #224]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f54a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f54e:	4b36      	ldr	r3, [pc, #216]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f558:	60fb      	str	r3, [r7, #12]
 800f55a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f55c:	4b32      	ldr	r3, [pc, #200]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f55e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f562:	4a31      	ldr	r2, [pc, #196]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f564:	f043 0302 	orr.w	r3, r3, #2
 800f568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f56c:	4b2e      	ldr	r3, [pc, #184]	; (800f628 <HAL_ETH_MspInit+0x1a4>)
 800f56e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f572:	f003 0302 	and.w	r3, r3, #2
 800f576:	60bb      	str	r3, [r7, #8]
 800f578:	68bb      	ldr	r3, [r7, #8]
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PB8     ------> ETH_TXD3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800f57a:	233e      	movs	r3, #62	; 0x3e
 800f57c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f57e:	2302      	movs	r3, #2
 800f580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f582:	2300      	movs	r3, #0
 800f584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f586:	2300      	movs	r3, #0
 800f588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f58a:	230b      	movs	r3, #11
 800f58c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f58e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f592:	4619      	mov	r1, r3
 800f594:	4825      	ldr	r0, [pc, #148]	; (800f62c <HAL_ETH_MspInit+0x1a8>)
 800f596:	f7f8 ff05 	bl	80083a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f59a:	2387      	movs	r3, #135	; 0x87
 800f59c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f59e:	2302      	movs	r3, #2
 800f5a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f5aa:	230b      	movs	r3, #11
 800f5ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	481e      	ldr	r0, [pc, #120]	; (800f630 <HAL_ETH_MspInit+0x1ac>)
 800f5b6:	f7f8 fef5 	bl	80083a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f5ba:	2308      	movs	r3, #8
 800f5bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5be:	2302      	movs	r3, #2
 800f5c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f5ca:	230b      	movs	r3, #11
 800f5cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f5ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	4817      	ldr	r0, [pc, #92]	; (800f634 <HAL_ETH_MspInit+0x1b0>)
 800f5d6:	f7f8 fee5 	bl	80083a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800f5da:	f643 5303 	movw	r3, #15619	; 0x3d03
 800f5de:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f5ec:	230b      	movs	r3, #11
 800f5ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f5f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	4810      	ldr	r0, [pc, #64]	; (800f638 <HAL_ETH_MspInit+0x1b4>)
 800f5f8:	f7f8 fed4 	bl	80083a4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	2105      	movs	r1, #5
 800f600:	203d      	movs	r0, #61	; 0x3d
 800f602:	f7f4 fd4e 	bl	80040a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800f606:	203d      	movs	r0, #61	; 0x3d
 800f608:	f7f4 fd65 	bl	80040d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800f60c:	2200      	movs	r2, #0
 800f60e:	2105      	movs	r1, #5
 800f610:	203e      	movs	r0, #62	; 0x3e
 800f612:	f7f4 fd46 	bl	80040a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800f616:	203e      	movs	r0, #62	; 0x3e
 800f618:	f7f4 fd5d 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f61c:	bf00      	nop
 800f61e:	3738      	adds	r7, #56	; 0x38
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	40028000 	.word	0x40028000
 800f628:	58024400 	.word	0x58024400
 800f62c:	58020800 	.word	0x58020800
 800f630:	58020000 	.word	0x58020000
 800f634:	58021c00 	.word	0x58021c00
 800f638:	58020400 	.word	0x58020400

0800f63c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800f644:	4b04      	ldr	r3, [pc, #16]	; (800f658 <HAL_ETH_RxCpltCallback+0x1c>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4618      	mov	r0, r3
 800f64a:	f000 fd51 	bl	80100f0 <osSemaphoreRelease>
}
 800f64e:	bf00      	nop
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	24001bd4 	.word	0x24001bd4

0800f65c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f65c:	b5b0      	push	{r4, r5, r7, lr}
 800f65e:	b0ac      	sub	sp, #176	; 0xb0
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f664:	2300      	movs	r3, #0
 800f666:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800f670:	2300      	movs	r3, #0
 800f672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f676:	4b91      	ldr	r3, [pc, #580]	; (800f8bc <low_level_init+0x260>)
 800f678:	4a91      	ldr	r2, [pc, #580]	; (800f8c0 <low_level_init+0x264>)
 800f67a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x30;
 800f67c:	2330      	movs	r3, #48	; 0x30
 800f67e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x31;
 800f682:	2331      	movs	r3, #49	; 0x31
 800f684:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0x32;
 800f688:	2332      	movs	r3, #50	; 0x32
 800f68a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800f68e:	2300      	movs	r3, #0
 800f690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800f694:	2300      	movs	r3, #0
 800f696:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800f69a:	2300      	movs	r3, #0
 800f69c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800f6a0:	4a86      	ldr	r2, [pc, #536]	; (800f8bc <low_level_init+0x260>)
 800f6a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6a6:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 800f6a8:	4b84      	ldr	r3, [pc, #528]	; (800f8bc <low_level_init+0x260>)
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f6ae:	4b83      	ldr	r3, [pc, #524]	; (800f8bc <low_level_init+0x260>)
 800f6b0:	4a84      	ldr	r2, [pc, #528]	; (800f8c4 <low_level_init+0x268>)
 800f6b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f6b4:	4b81      	ldr	r3, [pc, #516]	; (800f8bc <low_level_init+0x260>)
 800f6b6:	4a84      	ldr	r2, [pc, #528]	; (800f8c8 <low_level_init+0x26c>)
 800f6b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f6ba:	4b80      	ldr	r3, [pc, #512]	; (800f8bc <low_level_init+0x260>)
 800f6bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f6c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f6c2:	487e      	ldr	r0, [pc, #504]	; (800f8bc <low_level_init+0x260>)
 800f6c4:	f7f6 ffc2 	bl	800664c <HAL_ETH_Init>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f6ce:	2234      	movs	r2, #52	; 0x34
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	487e      	ldr	r0, [pc, #504]	; (800f8cc <low_level_init+0x270>)
 800f6d4:	f7f0 ff7e 	bl	80005d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f6d8:	4b7c      	ldr	r3, [pc, #496]	; (800f8cc <low_level_init+0x270>)
 800f6da:	2221      	movs	r2, #33	; 0x21
 800f6dc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f6de:	4b7b      	ldr	r3, [pc, #492]	; (800f8cc <low_level_init+0x270>)
 800f6e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f6e4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f6e6:	4b79      	ldr	r3, [pc, #484]	; (800f8cc <low_level_init+0x270>)
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f6ec:	4878      	ldr	r0, [pc, #480]	; (800f8d0 <low_level_init+0x274>)
 800f6ee:	f004 f88f 	bl	8013810 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2206      	movs	r2, #6
 800f6f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f6fa:	4b70      	ldr	r3, [pc, #448]	; (800f8bc <low_level_init+0x260>)
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	781a      	ldrb	r2, [r3, #0]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f706:	4b6d      	ldr	r3, [pc, #436]	; (800f8bc <low_level_init+0x260>)
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	785a      	ldrb	r2, [r3, #1]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f712:	4b6a      	ldr	r3, [pc, #424]	; (800f8bc <low_level_init+0x260>)
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	789a      	ldrb	r2, [r3, #2]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f71e:	4b67      	ldr	r3, [pc, #412]	; (800f8bc <low_level_init+0x260>)
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	78da      	ldrb	r2, [r3, #3]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f72a:	4b64      	ldr	r3, [pc, #400]	; (800f8bc <low_level_init+0x260>)
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	791a      	ldrb	r2, [r3, #4]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f736:	4b61      	ldr	r3, [pc, #388]	; (800f8bc <low_level_init+0x260>)
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	795a      	ldrb	r2, [r3, #5]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f748:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f750:	f043 030a 	orr.w	r3, r3, #10
 800f754:	b2da      	uxtb	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800f75c:	2300      	movs	r3, #0
 800f75e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f762:	e012      	b.n	800f78a <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800f764:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f768:	4613      	mov	r3, r2
 800f76a:	005b      	lsls	r3, r3, #1
 800f76c:	4413      	add	r3, r2
 800f76e:	025b      	lsls	r3, r3, #9
 800f770:	4a58      	ldr	r2, [pc, #352]	; (800f8d4 <low_level_init+0x278>)
 800f772:	441a      	add	r2, r3
 800f774:	2300      	movs	r3, #0
 800f776:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800f77a:	4850      	ldr	r0, [pc, #320]	; (800f8bc <low_level_init+0x260>)
 800f77c:	f7f7 f840 	bl	8006800 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800f780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f784:	3301      	adds	r3, #1
 800f786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f78a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f78e:	2b03      	cmp	r3, #3
 800f790:	d9e8      	bls.n	800f764 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800f792:	2300      	movs	r3, #0
 800f794:	62bb      	str	r3, [r7, #40]	; 0x28
 800f796:	2300      	movs	r3, #0
 800f798:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800f79a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f79e:	2101      	movs	r1, #1
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f000 fc25 	bl	800fff0 <osSemaphoreCreate>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	4a4b      	ldr	r2, [pc, #300]	; (800f8d8 <low_level_init+0x27c>)
 800f7aa:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800f7ac:	4b4b      	ldr	r3, [pc, #300]	; (800f8dc <low_level_init+0x280>)
 800f7ae:	f107 040c 	add.w	r4, r7, #12
 800f7b2:	461d      	mov	r5, r3
 800f7b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f7bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800f7c0:	f107 030c 	add.w	r3, r7, #12
 800f7c4:	6879      	ldr	r1, [r7, #4]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f000 fb15 	bl	800fdf6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f7cc:	4944      	ldr	r1, [pc, #272]	; (800f8e0 <low_level_init+0x284>)
 800f7ce:	4845      	ldr	r0, [pc, #276]	; (800f8e4 <low_level_init+0x288>)
 800f7d0:	f7f4 f979 	bl	8003ac6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f7d4:	4843      	ldr	r0, [pc, #268]	; (800f8e4 <low_level_init+0x288>)
 800f7d6:	f7f4 f9a8 	bl	8003b2a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f7da:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d165      	bne.n	800f8ae <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f7e2:	4840      	ldr	r0, [pc, #256]	; (800f8e4 <low_level_init+0x288>)
 800f7e4:	f7f4 fa49 	bl	8003c7a <LAN8742_GetLinkState>
 800f7e8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800f7ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	dc06      	bgt.n	800f802 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f004 fc03 	bl	8014000 <netif_set_link_down>
      netif_set_down(netif);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f004 fb9a 	bl	8013f34 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f800:	e057      	b.n	800f8b2 <low_level_init+0x256>
 800f802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f806:	3b02      	subs	r3, #2
 800f808:	2b03      	cmp	r3, #3
 800f80a:	d82b      	bhi.n	800f864 <low_level_init+0x208>
 800f80c:	a201      	add	r2, pc, #4	; (adr r2, 800f814 <low_level_init+0x1b8>)
 800f80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f812:	bf00      	nop
 800f814:	0800f825 	.word	0x0800f825
 800f818:	0800f837 	.word	0x0800f837
 800f81c:	0800f847 	.word	0x0800f847
 800f820:	0800f857 	.word	0x0800f857
        duplex = ETH_FULLDUPLEX_MODE;
 800f824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f828:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800f82c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800f834:	e01f      	b.n	800f876 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800f836:	2300      	movs	r3, #0
 800f838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800f83c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800f844:	e017      	b.n	800f876 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800f846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f84a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800f84e:	2300      	movs	r3, #0
 800f850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800f854:	e00f      	b.n	800f876 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800f856:	2300      	movs	r3, #0
 800f858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800f85c:	2300      	movs	r3, #0
 800f85e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800f862:	e008      	b.n	800f876 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800f864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f868:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800f86c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800f874:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f876:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f87a:	4619      	mov	r1, r3
 800f87c:	480f      	ldr	r0, [pc, #60]	; (800f8bc <low_level_init+0x260>)
 800f87e:	f7f7 fd91 	bl	80073a4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800f882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f886:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800f888:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f88c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f88e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f892:	4619      	mov	r1, r3
 800f894:	4809      	ldr	r0, [pc, #36]	; (800f8bc <low_level_init+0x260>)
 800f896:	f7f7 ff59 	bl	800774c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800f89a:	4808      	ldr	r0, [pc, #32]	; (800f8bc <low_level_init+0x260>)
 800f89c:	f7f6 fff1 	bl	8006882 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f004 fad1 	bl	8013e48 <netif_set_up>
    netif_set_link_up(netif);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f004 fb76 	bl	8013f98 <netif_set_link_up>
}
 800f8ac:	e001      	b.n	800f8b2 <low_level_init+0x256>
    Error_Handler();
 800f8ae:	f7f3 fa3f 	bl	8002d30 <Error_Handler>
}
 800f8b2:	bf00      	nop
 800f8b4:	37b0      	adds	r7, #176	; 0xb0
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bdb0      	pop	{r4, r5, r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	240065c0 	.word	0x240065c0
 800f8c0:	40028000 	.word	0x40028000
 800f8c4:	240000f0 	.word	0x240000f0
 800f8c8:	24000090 	.word	0x24000090
 800f8cc:	24006648 	.word	0x24006648
 800f8d0:	08019d24 	.word	0x08019d24
 800f8d4:	24000150 	.word	0x24000150
 800f8d8:	24001bd4 	.word	0x24001bd4
 800f8dc:	080181d8 	.word	0x080181d8
 800f8e0:	24000074 	.word	0x24000074
 800f8e4:	240065a0 	.word	0x240065a0

0800f8e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b092      	sub	sp, #72	; 0x48
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f8fc:	f107 030c 	add.w	r3, r7, #12
 800f900:	2230      	movs	r2, #48	; 0x30
 800f902:	2100      	movs	r1, #0
 800f904:	4618      	mov	r0, r3
 800f906:	f7f0 fe65 	bl	80005d4 <memset>

  for(q = p; q != NULL; q = q->next)
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	643b      	str	r3, [r7, #64]	; 0x40
 800f90e:	e049      	b.n	800f9a4 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f912:	2b03      	cmp	r3, #3
 800f914:	d902      	bls.n	800f91c <low_level_output+0x34>
      return ERR_IF;
 800f916:	f06f 030b 	mvn.w	r3, #11
 800f91a:	e056      	b.n	800f9ca <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800f91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f91e:	6859      	ldr	r1, [r3, #4]
 800f920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f922:	4613      	mov	r3, r2
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	4413      	add	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f92e:	4413      	add	r3, r2
 800f930:	3b3c      	subs	r3, #60	; 0x3c
 800f932:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f936:	895b      	ldrh	r3, [r3, #10]
 800f938:	4619      	mov	r1, r3
 800f93a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f93c:	4613      	mov	r3, r2
 800f93e:	005b      	lsls	r3, r3, #1
 800f940:	4413      	add	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f948:	4413      	add	r3, r2
 800f94a:	3b38      	subs	r3, #56	; 0x38
 800f94c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f94e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f950:	2b00      	cmp	r3, #0
 800f952:	d012      	beq.n	800f97a <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f956:	1e5a      	subs	r2, r3, #1
 800f958:	f107 000c 	add.w	r0, r7, #12
 800f95c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f95e:	460b      	mov	r3, r1
 800f960:	005b      	lsls	r3, r3, #1
 800f962:	440b      	add	r3, r1
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	18c1      	adds	r1, r0, r3
 800f968:	4613      	mov	r3, r2
 800f96a:	005b      	lsls	r3, r3, #1
 800f96c:	4413      	add	r3, r2
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f974:	4413      	add	r3, r2
 800f976:	3b34      	subs	r3, #52	; 0x34
 800f978:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d10a      	bne.n	800f998 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800f982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f984:	4613      	mov	r3, r2
 800f986:	005b      	lsls	r3, r3, #1
 800f988:	4413      	add	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f990:	4413      	add	r3, r2
 800f992:	3b34      	subs	r3, #52	; 0x34
 800f994:	2200      	movs	r2, #0
 800f996:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f99a:	3301      	adds	r3, #1
 800f99c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	643b      	str	r3, [r7, #64]	; 0x40
 800f9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1b2      	bne.n	800f910 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	891b      	ldrh	r3, [r3, #8]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	4b08      	ldr	r3, [pc, #32]	; (800f9d4 <low_level_output+0xec>)
 800f9b2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f9b4:	4a07      	ldr	r2, [pc, #28]	; (800f9d4 <low_level_output+0xec>)
 800f9b6:	f107 030c 	add.w	r3, r7, #12
 800f9ba:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f9bc:	2214      	movs	r2, #20
 800f9be:	4905      	ldr	r1, [pc, #20]	; (800f9d4 <low_level_output+0xec>)
 800f9c0:	4805      	ldr	r0, [pc, #20]	; (800f9d8 <low_level_output+0xf0>)
 800f9c2:	f7f7 f85d 	bl	8006a80 <HAL_ETH_Transmit>

  return errval;
 800f9c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3748      	adds	r7, #72	; 0x48
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	24006648 	.word	0x24006648
 800f9d8:	240065c0 	.word	0x240065c0

0800f9dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b098      	sub	sp, #96	; 0x60
 800f9e0:	af02      	add	r7, sp, #8
 800f9e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	60bb      	str	r3, [r7, #8]
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f9f0:	f107 030c 	add.w	r3, r7, #12
 800f9f4:	2230      	movs	r2, #48	; 0x30
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7f0 fdeb 	bl	80005d4 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800f9fe:	2300      	movs	r3, #0
 800fa00:	653b      	str	r3, [r7, #80]	; 0x50
 800fa02:	e015      	b.n	800fa30 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800fa04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa06:	1c5a      	adds	r2, r3, #1
 800fa08:	f107 010c 	add.w	r1, r7, #12
 800fa0c:	4613      	mov	r3, r2
 800fa0e:	005b      	lsls	r3, r3, #1
 800fa10:	4413      	add	r3, r2
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	4419      	add	r1, r3
 800fa16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa18:	4613      	mov	r3, r2
 800fa1a:	005b      	lsls	r3, r3, #1
 800fa1c:	4413      	add	r3, r2
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fa24:	4413      	add	r3, r2
 800fa26:	3b44      	subs	r3, #68	; 0x44
 800fa28:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800fa2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	653b      	str	r3, [r7, #80]	; 0x50
 800fa30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d9e6      	bls.n	800fa04 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800fa36:	f107 030c 	add.w	r3, r7, #12
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	4828      	ldr	r0, [pc, #160]	; (800fae0 <low_level_input+0x104>)
 800fa3e:	f7f7 f998 	bl	8006d72 <HAL_ETH_GetRxDataBuffer>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d145      	bne.n	800fad4 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800fa48:	f107 0308 	add.w	r3, r7, #8
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4824      	ldr	r0, [pc, #144]	; (800fae0 <low_level_input+0x104>)
 800fa50:	f7f7 fa2d 	bl	8006eae <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800fa54:	4822      	ldr	r0, [pc, #136]	; (800fae0 <low_level_input+0x104>)
 800fa56:	f7f7 fa5d 	bl	8006f14 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	68ba      	ldr	r2, [r7, #8]
 800fa5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa60:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 800fa62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	dd1d      	ble.n	800faa4 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800fa68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa6a:	f003 021f 	and.w	r2, r3, #31
 800fa6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa70:	4413      	add	r3, r2
 800fa72:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800fa74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800fa78:	f3bf 8f4f 	dsb	sy
}
 800fa7c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800fa7e:	4a19      	ldr	r2, [pc, #100]	; (800fae4 <low_level_input+0x108>)
 800fa80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa82:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800fa86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa88:	3320      	adds	r3, #32
 800fa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800fa8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa8e:	3b20      	subs	r3, #32
 800fa90:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800fa92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	dcf2      	bgt.n	800fa7e <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800fa98:	f3bf 8f4f 	dsb	sy
}
 800fa9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fa9e:	f3bf 8f6f 	isb	sy
}
 800faa2:	bf00      	nop
}
 800faa4:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800faa6:	4810      	ldr	r0, [pc, #64]	; (800fae8 <low_level_input+0x10c>)
 800faa8:	f003 ff2e 	bl	8013908 <memp_malloc_pool>
 800faac:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800faae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00f      	beq.n	800fad4 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800fab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fab6:	4a0d      	ldr	r2, [pc, #52]	; (800faec <low_level_input+0x110>)
 800fab8:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	b299      	uxth	r1, r3
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	b292      	uxth	r2, r2
 800fac4:	9201      	str	r2, [sp, #4]
 800fac6:	9300      	str	r3, [sp, #0]
 800fac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faca:	2241      	movs	r2, #65	; 0x41
 800facc:	2000      	movs	r0, #0
 800face:	f004 fc39 	bl	8014344 <pbuf_alloced_custom>
 800fad2:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800fad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3758      	adds	r7, #88	; 0x58
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	240065c0 	.word	0x240065c0
 800fae4:	e000ed00 	.word	0xe000ed00
 800fae8:	08019d24 	.word	0x08019d24
 800faec:	0800fb9d 	.word	0x0800fb9d

0800faf0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800fafc:	4b0f      	ldr	r3, [pc, #60]	; (800fb3c <ethernetif_input+0x4c>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 faa5 	bl	8010054 <osSemaphoreWait>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1f5      	bne.n	800fafc <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f7ff ff63 	bl	800f9dc <low_level_input>
 800fb16:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00a      	beq.n	800fb34 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	691b      	ldr	r3, [r3, #16]
 800fb22:	68f9      	ldr	r1, [r7, #12]
 800fb24:	68b8      	ldr	r0, [r7, #8]
 800fb26:	4798      	blx	r3
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d002      	beq.n	800fb34 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800fb2e:	68b8      	ldr	r0, [r7, #8]
 800fb30:	f004 fdc2 	bl	80146b8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d1ea      	bne.n	800fb10 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800fb3a:	e7df      	b.n	800fafc <ethernetif_input+0xc>
 800fb3c:	24001bd4 	.word	0x24001bd4

0800fb40 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d106      	bne.n	800fb5c <ethernetif_init+0x1c>
 800fb4e:	4b0e      	ldr	r3, [pc, #56]	; (800fb88 <ethernetif_init+0x48>)
 800fb50:	f240 2261 	movw	r2, #609	; 0x261
 800fb54:	490d      	ldr	r1, [pc, #52]	; (800fb8c <ethernetif_init+0x4c>)
 800fb56:	480e      	ldr	r0, [pc, #56]	; (800fb90 <ethernetif_init+0x50>)
 800fb58:	f7f0 fda4 	bl	80006a4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2273      	movs	r2, #115	; 0x73
 800fb60:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2274      	movs	r2, #116	; 0x74
 800fb68:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	4a09      	ldr	r2, [pc, #36]	; (800fb94 <ethernetif_init+0x54>)
 800fb70:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4a08      	ldr	r2, [pc, #32]	; (800fb98 <ethernetif_init+0x58>)
 800fb76:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f7ff fd6f 	bl	800f65c <low_level_init>

  return ERR_OK;
 800fb7e:	2300      	movs	r3, #0
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3708      	adds	r7, #8
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	080181f4 	.word	0x080181f4
 800fb8c:	08018210 	.word	0x08018210
 800fb90:	08018220 	.word	0x08018220
 800fb94:	08015ba1 	.word	0x08015ba1
 800fb98:	0800f8e9 	.word	0x0800f8e9

0800fb9c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800fba8:	68f9      	ldr	r1, [r7, #12]
 800fbaa:	4803      	ldr	r0, [pc, #12]	; (800fbb8 <pbuf_free_custom+0x1c>)
 800fbac:	f003 ff20 	bl	80139f0 <memp_free_pool>
}
 800fbb0:	bf00      	nop
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	08019d24 	.word	0x08019d24

0800fbbc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fbc0:	f7f4 f968 	bl	8003e94 <HAL_GetTick>
 800fbc4:	4603      	mov	r3, r0
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	bd80      	pop	{r7, pc}
	...

0800fbcc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800fbd0:	4802      	ldr	r0, [pc, #8]	; (800fbdc <ETH_PHY_IO_Init+0x10>)
 800fbd2:	f7f7 fdd5 	bl	8007780 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	240065c0 	.word	0x240065c0

0800fbe0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	af00      	add	r7, sp, #0
  return 0;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	68f9      	ldr	r1, [r7, #12]
 800fc02:	4807      	ldr	r0, [pc, #28]	; (800fc20 <ETH_PHY_IO_ReadReg+0x30>)
 800fc04:	f7f7 fb26 	bl	8007254 <HAL_ETH_ReadPHYRegister>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d002      	beq.n	800fc14 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800fc0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc12:	e000      	b.n	800fc16 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800fc14:	2300      	movs	r3, #0
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	240065c0 	.word	0x240065c0

0800fc24 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	68ba      	ldr	r2, [r7, #8]
 800fc34:	68f9      	ldr	r1, [r7, #12]
 800fc36:	4807      	ldr	r0, [pc, #28]	; (800fc54 <ETH_PHY_IO_WriteReg+0x30>)
 800fc38:	f7f7 fb60 	bl	80072fc <HAL_ETH_WritePHYRegister>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d002      	beq.n	800fc48 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800fc42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc46:	e000      	b.n	800fc4a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800fc48:	2300      	movs	r3, #0
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	240065c0 	.word	0x240065c0

0800fc58 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fc5c:	f7f4 f91a 	bl	8003e94 <HAL_GetTick>
 800fc60:	4603      	mov	r3, r0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	bd80      	pop	{r7, pc}
	...

0800fc68 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b0a0      	sub	sp, #128	; 0x80
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800fc70:	2300      	movs	r3, #0
 800fc72:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fc74:	2300      	movs	r3, #0
 800fc76:	67bb      	str	r3, [r7, #120]	; 0x78
 800fc78:	2300      	movs	r3, #0
 800fc7a:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fc80:	483a      	ldr	r0, [pc, #232]	; (800fd6c <ethernet_link_thread+0x104>)
 800fc82:	f7f3 fffa 	bl	8003c7a <LAN8742_GetLinkState>
 800fc86:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800fc88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fc8e:	089b      	lsrs	r3, r3, #2
 800fc90:	f003 0301 	and.w	r3, r3, #1
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00c      	beq.n	800fcb4 <ethernet_link_thread+0x4c>
 800fc9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	dc09      	bgt.n	800fcb4 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800fca0:	4833      	ldr	r0, [pc, #204]	; (800fd70 <ethernet_link_thread+0x108>)
 800fca2:	f7f6 fe73 	bl	800698c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800fca6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fca8:	f004 f944 	bl	8013f34 <netif_set_down>
    netif_set_link_down(netif);
 800fcac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fcae:	f004 f9a7 	bl	8014000 <netif_set_link_down>
 800fcb2:	e056      	b.n	800fd62 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800fcb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fcb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fcba:	f003 0304 	and.w	r3, r3, #4
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d14f      	bne.n	800fd62 <ethernet_link_thread+0xfa>
 800fcc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	dd4c      	ble.n	800fd62 <ethernet_link_thread+0xfa>
 800fcc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcca:	3b02      	subs	r3, #2
 800fccc:	2b03      	cmp	r3, #3
 800fcce:	d82b      	bhi.n	800fd28 <ethernet_link_thread+0xc0>
 800fcd0:	a201      	add	r2, pc, #4	; (adr r2, 800fcd8 <ethernet_link_thread+0x70>)
 800fcd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd6:	bf00      	nop
 800fcd8:	0800fce9 	.word	0x0800fce9
 800fcdc:	0800fcfb 	.word	0x0800fcfb
 800fce0:	0800fd0b 	.word	0x0800fd0b
 800fce4:	0800fd1b 	.word	0x0800fd1b
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800fce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fcec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fcee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fcf2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fcf8:	e017      	b.n	800fd2a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fcfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd02:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fd04:	2301      	movs	r3, #1
 800fd06:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fd08:	e00f      	b.n	800fd2a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800fd0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fd0e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fd10:	2300      	movs	r3, #0
 800fd12:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fd14:	2301      	movs	r3, #1
 800fd16:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fd18:	e007      	b.n	800fd2a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fd22:	2301      	movs	r3, #1
 800fd24:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fd26:	e000      	b.n	800fd2a <ethernet_link_thread+0xc2>
    default:
      break;
 800fd28:	bf00      	nop
    }

    if(linkchanged)
 800fd2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d018      	beq.n	800fd62 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fd30:	f107 0308 	add.w	r3, r7, #8
 800fd34:	4619      	mov	r1, r3
 800fd36:	480e      	ldr	r0, [pc, #56]	; (800fd70 <ethernet_link_thread+0x108>)
 800fd38:	f7f7 fb34 	bl	80073a4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800fd3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd3e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800fd40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd42:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fd44:	f107 0308 	add.w	r3, r7, #8
 800fd48:	4619      	mov	r1, r3
 800fd4a:	4809      	ldr	r0, [pc, #36]	; (800fd70 <ethernet_link_thread+0x108>)
 800fd4c:	f7f7 fcfe 	bl	800774c <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800fd50:	4807      	ldr	r0, [pc, #28]	; (800fd70 <ethernet_link_thread+0x108>)
 800fd52:	f7f6 fd96 	bl	8006882 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800fd56:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fd58:	f004 f876 	bl	8013e48 <netif_set_up>
      netif_set_link_up(netif);
 800fd5c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fd5e:	f004 f91b 	bl	8013f98 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800fd62:	2064      	movs	r0, #100	; 0x64
 800fd64:	f000 f893 	bl	800fe8e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fd68:	e78a      	b.n	800fc80 <ethernet_link_thread+0x18>
 800fd6a:	bf00      	nop
 800fd6c:	240065a0 	.word	0x240065a0
 800fd70:	240065c0 	.word	0x240065c0

0800fd74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fd82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fd86:	2b84      	cmp	r3, #132	; 0x84
 800fd88:	d005      	beq.n	800fd96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fd8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	4413      	add	r3, r2
 800fd92:	3303      	adds	r3, #3
 800fd94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fd96:	68fb      	ldr	r3, [r7, #12]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdaa:	f3ef 8305 	mrs	r3, IPSR
 800fdae:	607b      	str	r3, [r7, #4]
  return(result);
 800fdb0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	bf14      	ite	ne
 800fdb6:	2301      	movne	r3, #1
 800fdb8:	2300      	moveq	r3, #0
 800fdba:	b2db      	uxtb	r3, r3
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fdcc:	f001 fc5e 	bl	801168c <vTaskStartScheduler>
  
  return osOK;
 800fdd0:	2300      	movs	r3, #0
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	bd80      	pop	{r7, pc}

0800fdd6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800fdd6:	b580      	push	{r7, lr}
 800fdd8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800fdda:	f7ff ffe3 	bl	800fda4 <inHandlerMode>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d003      	beq.n	800fdec <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800fde4:	f001 fd6c 	bl	80118c0 <xTaskGetTickCountFromISR>
 800fde8:	4603      	mov	r3, r0
 800fdea:	e002      	b.n	800fdf2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800fdec:	f001 fd58 	bl	80118a0 <xTaskGetTickCount>
 800fdf0:	4603      	mov	r3, r0
  }
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	bd80      	pop	{r7, pc}

0800fdf6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fdf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdf8:	b089      	sub	sp, #36	; 0x24
 800fdfa:	af04      	add	r7, sp, #16
 800fdfc:	6078      	str	r0, [r7, #4]
 800fdfe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	695b      	ldr	r3, [r3, #20]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d020      	beq.n	800fe4a <osThreadCreate+0x54>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	699b      	ldr	r3, [r3, #24]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d01c      	beq.n	800fe4a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	685c      	ldr	r4, [r3, #4]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681d      	ldr	r5, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	691e      	ldr	r6, [r3, #16]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7ff ffa6 	bl	800fd74 <makeFreeRtosPriority>
 800fe28:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	695b      	ldr	r3, [r3, #20]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe32:	9202      	str	r2, [sp, #8]
 800fe34:	9301      	str	r3, [sp, #4]
 800fe36:	9100      	str	r1, [sp, #0]
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	4632      	mov	r2, r6
 800fe3c:	4629      	mov	r1, r5
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f001 fa5c 	bl	80112fc <xTaskCreateStatic>
 800fe44:	4603      	mov	r3, r0
 800fe46:	60fb      	str	r3, [r7, #12]
 800fe48:	e01c      	b.n	800fe84 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685c      	ldr	r4, [r3, #4]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe56:	b29e      	uxth	r6, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7ff ff88 	bl	800fd74 <makeFreeRtosPriority>
 800fe64:	4602      	mov	r2, r0
 800fe66:	f107 030c 	add.w	r3, r7, #12
 800fe6a:	9301      	str	r3, [sp, #4]
 800fe6c:	9200      	str	r2, [sp, #0]
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	4632      	mov	r2, r6
 800fe72:	4629      	mov	r1, r5
 800fe74:	4620      	mov	r0, r4
 800fe76:	f001 fa9e 	bl	80113b6 <xTaskCreate>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d001      	beq.n	800fe84 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fe80:	2300      	movs	r3, #0
 800fe82:	e000      	b.n	800fe86 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fe84:	68fb      	ldr	r3, [r7, #12]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3714      	adds	r7, #20
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe8e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b084      	sub	sp, #16
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d001      	beq.n	800fea4 <osDelay+0x16>
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	e000      	b.n	800fea6 <osDelay+0x18>
 800fea4:	2301      	movs	r3, #1
 800fea6:	4618      	mov	r0, r3
 800fea8:	f001 fbbc 	bl	8011624 <vTaskDelay>
  
  return osOK;
 800feac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b082      	sub	sp, #8
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d007      	beq.n	800fed6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	4619      	mov	r1, r3
 800fecc:	2001      	movs	r0, #1
 800fece:	f000 fc40 	bl	8010752 <xQueueCreateMutexStatic>
 800fed2:	4603      	mov	r3, r0
 800fed4:	e003      	b.n	800fede <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800fed6:	2001      	movs	r0, #1
 800fed8:	f000 fc23 	bl	8010722 <xQueueCreateMutex>
 800fedc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3708      	adds	r7, #8
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
	...

0800fee8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fef2:	2300      	movs	r3, #0
 800fef4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d101      	bne.n	800ff00 <osMutexWait+0x18>
    return osErrorParameter;
 800fefc:	2380      	movs	r3, #128	; 0x80
 800fefe:	e03a      	b.n	800ff76 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ff00:	2300      	movs	r3, #0
 800ff02:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff0a:	d103      	bne.n	800ff14 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ff0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff10:	60fb      	str	r3, [r7, #12]
 800ff12:	e009      	b.n	800ff28 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d006      	beq.n	800ff28 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d101      	bne.n	800ff28 <osMutexWait+0x40>
      ticks = 1;
 800ff24:	2301      	movs	r3, #1
 800ff26:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ff28:	f7ff ff3c 	bl	800fda4 <inHandlerMode>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d017      	beq.n	800ff62 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ff32:	f107 0308 	add.w	r3, r7, #8
 800ff36:	461a      	mov	r2, r3
 800ff38:	2100      	movs	r1, #0
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f001 f836 	bl	8010fac <xQueueReceiveFromISR>
 800ff40:	4603      	mov	r3, r0
 800ff42:	2b01      	cmp	r3, #1
 800ff44:	d001      	beq.n	800ff4a <osMutexWait+0x62>
      return osErrorOS;
 800ff46:	23ff      	movs	r3, #255	; 0xff
 800ff48:	e015      	b.n	800ff76 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d011      	beq.n	800ff74 <osMutexWait+0x8c>
 800ff50:	4b0b      	ldr	r3, [pc, #44]	; (800ff80 <osMutexWait+0x98>)
 800ff52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff56:	601a      	str	r2, [r3, #0]
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	f3bf 8f6f 	isb	sy
 800ff60:	e008      	b.n	800ff74 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ff62:	68f9      	ldr	r1, [r7, #12]
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 ff15 	bl	8010d94 <xQueueSemaphoreTake>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d001      	beq.n	800ff74 <osMutexWait+0x8c>
    return osErrorOS;
 800ff70:	23ff      	movs	r3, #255	; 0xff
 800ff72:	e000      	b.n	800ff76 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	e000ed04 	.word	0xe000ed04

0800ff84 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ff90:	2300      	movs	r3, #0
 800ff92:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ff94:	f7ff ff06 	bl	800fda4 <inHandlerMode>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d016      	beq.n	800ffcc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ff9e:	f107 0308 	add.w	r3, r7, #8
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f000 fd88 	bl	8010aba <xQueueGiveFromISR>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d001      	beq.n	800ffb4 <osMutexRelease+0x30>
      return osErrorOS;
 800ffb0:	23ff      	movs	r3, #255	; 0xff
 800ffb2:	e017      	b.n	800ffe4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d013      	beq.n	800ffe2 <osMutexRelease+0x5e>
 800ffba:	4b0c      	ldr	r3, [pc, #48]	; (800ffec <osMutexRelease+0x68>)
 800ffbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffc0:	601a      	str	r2, [r3, #0]
 800ffc2:	f3bf 8f4f 	dsb	sy
 800ffc6:	f3bf 8f6f 	isb	sy
 800ffca:	e00a      	b.n	800ffe2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ffcc:	2300      	movs	r3, #0
 800ffce:	2200      	movs	r2, #0
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 fbd8 	bl	8010788 <xQueueGenericSend>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d001      	beq.n	800ffe2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ffde:	23ff      	movs	r3, #255	; 0xff
 800ffe0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3710      	adds	r7, #16
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	e000ed04 	.word	0xe000ed04

0800fff0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b086      	sub	sp, #24
 800fff4:	af02      	add	r7, sp, #8
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00f      	beq.n	8010022 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	2b01      	cmp	r3, #1
 8010006:	d10a      	bne.n	801001e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	2203      	movs	r2, #3
 801000e:	9200      	str	r2, [sp, #0]
 8010010:	2200      	movs	r2, #0
 8010012:	2100      	movs	r1, #0
 8010014:	2001      	movs	r0, #1
 8010016:	f000 fa99 	bl	801054c <xQueueGenericCreateStatic>
 801001a:	4603      	mov	r3, r0
 801001c:	e016      	b.n	801004c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801001e:	2300      	movs	r3, #0
 8010020:	e014      	b.n	801004c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d110      	bne.n	801004a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8010028:	2203      	movs	r2, #3
 801002a:	2100      	movs	r1, #0
 801002c:	2001      	movs	r0, #1
 801002e:	f000 fb05 	bl	801063c <xQueueGenericCreate>
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d005      	beq.n	8010046 <osSemaphoreCreate+0x56>
 801003a:	2300      	movs	r3, #0
 801003c:	2200      	movs	r2, #0
 801003e:	2100      	movs	r1, #0
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f000 fba1 	bl	8010788 <xQueueGenericSend>
      return sema;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	e000      	b.n	801004c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801004a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801004c:	4618      	mov	r0, r3
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801005e:	2300      	movs	r3, #0
 8010060:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d101      	bne.n	801006c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010068:	2380      	movs	r3, #128	; 0x80
 801006a:	e03a      	b.n	80100e2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801006c:	2300      	movs	r3, #0
 801006e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010076:	d103      	bne.n	8010080 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801007c:	60fb      	str	r3, [r7, #12]
 801007e:	e009      	b.n	8010094 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d006      	beq.n	8010094 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d101      	bne.n	8010094 <osSemaphoreWait+0x40>
      ticks = 1;
 8010090:	2301      	movs	r3, #1
 8010092:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010094:	f7ff fe86 	bl	800fda4 <inHandlerMode>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d017      	beq.n	80100ce <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801009e:	f107 0308 	add.w	r3, r7, #8
 80100a2:	461a      	mov	r2, r3
 80100a4:	2100      	movs	r1, #0
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 ff80 	bl	8010fac <xQueueReceiveFromISR>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d001      	beq.n	80100b6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80100b2:	23ff      	movs	r3, #255	; 0xff
 80100b4:	e015      	b.n	80100e2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d011      	beq.n	80100e0 <osSemaphoreWait+0x8c>
 80100bc:	4b0b      	ldr	r3, [pc, #44]	; (80100ec <osSemaphoreWait+0x98>)
 80100be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100c2:	601a      	str	r2, [r3, #0]
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	f3bf 8f6f 	isb	sy
 80100cc:	e008      	b.n	80100e0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80100ce:	68f9      	ldr	r1, [r7, #12]
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f000 fe5f 	bl	8010d94 <xQueueSemaphoreTake>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b01      	cmp	r3, #1
 80100da:	d001      	beq.n	80100e0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80100dc:	23ff      	movs	r3, #255	; 0xff
 80100de:	e000      	b.n	80100e2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80100e0:	2300      	movs	r3, #0
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	e000ed04 	.word	0xe000ed04

080100f0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80100f8:	2300      	movs	r3, #0
 80100fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80100fc:	2300      	movs	r3, #0
 80100fe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010100:	f7ff fe50 	bl	800fda4 <inHandlerMode>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d016      	beq.n	8010138 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801010a:	f107 0308 	add.w	r3, r7, #8
 801010e:	4619      	mov	r1, r3
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fcd2 	bl	8010aba <xQueueGiveFromISR>
 8010116:	4603      	mov	r3, r0
 8010118:	2b01      	cmp	r3, #1
 801011a:	d001      	beq.n	8010120 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801011c:	23ff      	movs	r3, #255	; 0xff
 801011e:	e017      	b.n	8010150 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d013      	beq.n	801014e <osSemaphoreRelease+0x5e>
 8010126:	4b0c      	ldr	r3, [pc, #48]	; (8010158 <osSemaphoreRelease+0x68>)
 8010128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	f3bf 8f6f 	isb	sy
 8010136:	e00a      	b.n	801014e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010138:	2300      	movs	r3, #0
 801013a:	2200      	movs	r2, #0
 801013c:	2100      	movs	r1, #0
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 fb22 	bl	8010788 <xQueueGenericSend>
 8010144:	4603      	mov	r3, r0
 8010146:	2b01      	cmp	r3, #1
 8010148:	d001      	beq.n	801014e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801014a:	23ff      	movs	r3, #255	; 0xff
 801014c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801014e:	68fb      	ldr	r3, [r7, #12]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3710      	adds	r7, #16
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	e000ed04 	.word	0xe000ed04

0801015c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801015c:	b590      	push	{r4, r7, lr}
 801015e:	b085      	sub	sp, #20
 8010160:	af02      	add	r7, sp, #8
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	689b      	ldr	r3, [r3, #8]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d011      	beq.n	8010192 <osMessageCreate+0x36>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00d      	beq.n	8010192 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6818      	ldr	r0, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6859      	ldr	r1, [r3, #4]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	689a      	ldr	r2, [r3, #8]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	2400      	movs	r4, #0
 8010188:	9400      	str	r4, [sp, #0]
 801018a:	f000 f9df 	bl	801054c <xQueueGenericCreateStatic>
 801018e:	4603      	mov	r3, r0
 8010190:	e008      	b.n	80101a4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6818      	ldr	r0, [r3, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	4619      	mov	r1, r3
 801019e:	f000 fa4d 	bl	801063c <xQueueGenericCreate>
 80101a2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd90      	pop	{r4, r7, pc}

080101ac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b086      	sub	sp, #24
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	60f8      	str	r0, [r7, #12]
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80101b8:	2300      	movs	r3, #0
 80101ba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d101      	bne.n	80101ca <osMessagePut+0x1e>
    ticks = 1;
 80101c6:	2301      	movs	r3, #1
 80101c8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80101ca:	f7ff fdeb 	bl	800fda4 <inHandlerMode>
 80101ce:	4603      	mov	r3, r0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d018      	beq.n	8010206 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80101d4:	f107 0210 	add.w	r2, r7, #16
 80101d8:	f107 0108 	add.w	r1, r7, #8
 80101dc:	2300      	movs	r3, #0
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	f000 fbd0 	bl	8010984 <xQueueGenericSendFromISR>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d001      	beq.n	80101ee <osMessagePut+0x42>
      return osErrorOS;
 80101ea:	23ff      	movs	r3, #255	; 0xff
 80101ec:	e018      	b.n	8010220 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d014      	beq.n	801021e <osMessagePut+0x72>
 80101f4:	4b0c      	ldr	r3, [pc, #48]	; (8010228 <osMessagePut+0x7c>)
 80101f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101fa:	601a      	str	r2, [r3, #0]
 80101fc:	f3bf 8f4f 	dsb	sy
 8010200:	f3bf 8f6f 	isb	sy
 8010204:	e00b      	b.n	801021e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010206:	f107 0108 	add.w	r1, r7, #8
 801020a:	2300      	movs	r3, #0
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f000 faba 	bl	8010788 <xQueueGenericSend>
 8010214:	4603      	mov	r3, r0
 8010216:	2b01      	cmp	r3, #1
 8010218:	d001      	beq.n	801021e <osMessagePut+0x72>
      return osErrorOS;
 801021a:	23ff      	movs	r3, #255	; 0xff
 801021c:	e000      	b.n	8010220 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801021e:	2300      	movs	r3, #0
}
 8010220:	4618      	mov	r0, r3
 8010222:	3718      	adds	r7, #24
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	e000ed04 	.word	0xe000ed04

0801022c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801022c:	b590      	push	{r4, r7, lr}
 801022e:	b08b      	sub	sp, #44	; 0x2c
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	60b9      	str	r1, [r7, #8]
 8010236:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801023c:	2300      	movs	r3, #0
 801023e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d10a      	bne.n	801025c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010246:	2380      	movs	r3, #128	; 0x80
 8010248:	617b      	str	r3, [r7, #20]
    return event;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	461c      	mov	r4, r3
 801024e:	f107 0314 	add.w	r3, r7, #20
 8010252:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801025a:	e054      	b.n	8010306 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801025c:	2300      	movs	r3, #0
 801025e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010260:	2300      	movs	r3, #0
 8010262:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801026a:	d103      	bne.n	8010274 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801026c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010270:	627b      	str	r3, [r7, #36]	; 0x24
 8010272:	e009      	b.n	8010288 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d006      	beq.n	8010288 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010280:	2b00      	cmp	r3, #0
 8010282:	d101      	bne.n	8010288 <osMessageGet+0x5c>
      ticks = 1;
 8010284:	2301      	movs	r3, #1
 8010286:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010288:	f7ff fd8c 	bl	800fda4 <inHandlerMode>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d01c      	beq.n	80102cc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010292:	f107 0220 	add.w	r2, r7, #32
 8010296:	f107 0314 	add.w	r3, r7, #20
 801029a:	3304      	adds	r3, #4
 801029c:	4619      	mov	r1, r3
 801029e:	68b8      	ldr	r0, [r7, #8]
 80102a0:	f000 fe84 	bl	8010fac <xQueueReceiveFromISR>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d102      	bne.n	80102b0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80102aa:	2310      	movs	r3, #16
 80102ac:	617b      	str	r3, [r7, #20]
 80102ae:	e001      	b.n	80102b4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80102b0:	2300      	movs	r3, #0
 80102b2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80102b4:	6a3b      	ldr	r3, [r7, #32]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d01d      	beq.n	80102f6 <osMessageGet+0xca>
 80102ba:	4b15      	ldr	r3, [pc, #84]	; (8010310 <osMessageGet+0xe4>)
 80102bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102c0:	601a      	str	r2, [r3, #0]
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	f3bf 8f6f 	isb	sy
 80102ca:	e014      	b.n	80102f6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80102cc:	f107 0314 	add.w	r3, r7, #20
 80102d0:	3304      	adds	r3, #4
 80102d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102d4:	4619      	mov	r1, r3
 80102d6:	68b8      	ldr	r0, [r7, #8]
 80102d8:	f000 fc7c 	bl	8010bd4 <xQueueReceive>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d102      	bne.n	80102e8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80102e2:	2310      	movs	r3, #16
 80102e4:	617b      	str	r3, [r7, #20]
 80102e6:	e006      	b.n	80102f6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80102e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d101      	bne.n	80102f2 <osMessageGet+0xc6>
 80102ee:	2300      	movs	r3, #0
 80102f0:	e000      	b.n	80102f4 <osMessageGet+0xc8>
 80102f2:	2340      	movs	r3, #64	; 0x40
 80102f4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	461c      	mov	r4, r3
 80102fa:	f107 0314 	add.w	r3, r7, #20
 80102fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	372c      	adds	r7, #44	; 0x2c
 801030a:	46bd      	mov	sp, r7
 801030c:	bd90      	pop	{r4, r7, pc}
 801030e:	bf00      	nop
 8010310:	e000ed04 	.word	0xe000ed04

08010314 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f103 0208 	add.w	r2, r3, #8
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801032c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f103 0208 	add.w	r2, r3, #8
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f103 0208 	add.w	r2, r3, #8
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010348:	bf00      	nop
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2200      	movs	r2, #0
 8010360:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010362:	bf00      	nop
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801036e:	b480      	push	{r7}
 8010370:	b085      	sub	sp, #20
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
 8010376:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	689a      	ldr	r2, [r3, #8]
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	683a      	ldr	r2, [r7, #0]
 8010392:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	683a      	ldr	r2, [r7, #0]
 8010398:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	687a      	ldr	r2, [r7, #4]
 801039e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	601a      	str	r2, [r3, #0]
}
 80103aa:	bf00      	nop
 80103ac:	3714      	adds	r7, #20
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr

080103b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80103b6:	b480      	push	{r7}
 80103b8:	b085      	sub	sp, #20
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103cc:	d103      	bne.n	80103d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	60fb      	str	r3, [r7, #12]
 80103d4:	e00c      	b.n	80103f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	3308      	adds	r3, #8
 80103da:	60fb      	str	r3, [r7, #12]
 80103dc:	e002      	b.n	80103e4 <vListInsert+0x2e>
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	60fb      	str	r3, [r7, #12]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	68ba      	ldr	r2, [r7, #8]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d2f6      	bcs.n	80103de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	685a      	ldr	r2, [r3, #4]
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	685b      	ldr	r3, [r3, #4]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	68fa      	ldr	r2, [r7, #12]
 8010404:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	683a      	ldr	r2, [r7, #0]
 801040a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	1c5a      	adds	r2, r3, #1
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	601a      	str	r2, [r3, #0]
}
 801041c:	bf00      	nop
 801041e:	3714      	adds	r7, #20
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010428:	b480      	push	{r7}
 801042a:	b085      	sub	sp, #20
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	6892      	ldr	r2, [r2, #8]
 801043e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	6852      	ldr	r2, [r2, #4]
 8010448:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	429a      	cmp	r2, r3
 8010452:	d103      	bne.n	801045c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	689a      	ldr	r2, [r3, #8]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	1e5a      	subs	r2, r3, #1
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
}
 8010470:	4618      	mov	r0, r3
 8010472:	3714      	adds	r7, #20
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b084      	sub	sp, #16
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d10a      	bne.n	80104a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010494:	f383 8811 	msr	BASEPRI, r3
 8010498:	f3bf 8f6f 	isb	sy
 801049c:	f3bf 8f4f 	dsb	sy
 80104a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80104a2:	bf00      	nop
 80104a4:	e7fe      	b.n	80104a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80104a6:	f002 f85d 	bl	8012564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104b2:	68f9      	ldr	r1, [r7, #12]
 80104b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80104b6:	fb01 f303 	mul.w	r3, r1, r3
 80104ba:	441a      	add	r2, r3
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2200      	movs	r2, #0
 80104c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104d6:	3b01      	subs	r3, #1
 80104d8:	68f9      	ldr	r1, [r7, #12]
 80104da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80104dc:	fb01 f303 	mul.w	r3, r1, r3
 80104e0:	441a      	add	r2, r3
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	22ff      	movs	r2, #255	; 0xff
 80104ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	22ff      	movs	r2, #255	; 0xff
 80104f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d114      	bne.n	8010526 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	691b      	ldr	r3, [r3, #16]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d01a      	beq.n	801053a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	3310      	adds	r3, #16
 8010508:	4618      	mov	r0, r3
 801050a:	f001 fb23 	bl	8011b54 <xTaskRemoveFromEventList>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d012      	beq.n	801053a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010514:	4b0c      	ldr	r3, [pc, #48]	; (8010548 <xQueueGenericReset+0xcc>)
 8010516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801051a:	601a      	str	r2, [r3, #0]
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	f3bf 8f6f 	isb	sy
 8010524:	e009      	b.n	801053a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	3310      	adds	r3, #16
 801052a:	4618      	mov	r0, r3
 801052c:	f7ff fef2 	bl	8010314 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3324      	adds	r3, #36	; 0x24
 8010534:	4618      	mov	r0, r3
 8010536:	f7ff feed 	bl	8010314 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801053a:	f002 f843 	bl	80125c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801053e:	2301      	movs	r3, #1
}
 8010540:	4618      	mov	r0, r3
 8010542:	3710      	adds	r7, #16
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	e000ed04 	.word	0xe000ed04

0801054c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801054c:	b580      	push	{r7, lr}
 801054e:	b08e      	sub	sp, #56	; 0x38
 8010550:	af02      	add	r7, sp, #8
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
 8010558:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d10a      	bne.n	8010576 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010564:	f383 8811 	msr	BASEPRI, r3
 8010568:	f3bf 8f6f 	isb	sy
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010572:	bf00      	nop
 8010574:	e7fe      	b.n	8010574 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10a      	bne.n	8010592 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801058e:	bf00      	nop
 8010590:	e7fe      	b.n	8010590 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d002      	beq.n	801059e <xQueueGenericCreateStatic+0x52>
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d001      	beq.n	80105a2 <xQueueGenericCreateStatic+0x56>
 801059e:	2301      	movs	r3, #1
 80105a0:	e000      	b.n	80105a4 <xQueueGenericCreateStatic+0x58>
 80105a2:	2300      	movs	r3, #0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d10a      	bne.n	80105be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80105a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ac:	f383 8811 	msr	BASEPRI, r3
 80105b0:	f3bf 8f6f 	isb	sy
 80105b4:	f3bf 8f4f 	dsb	sy
 80105b8:	623b      	str	r3, [r7, #32]
}
 80105ba:	bf00      	nop
 80105bc:	e7fe      	b.n	80105bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d102      	bne.n	80105ca <xQueueGenericCreateStatic+0x7e>
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d101      	bne.n	80105ce <xQueueGenericCreateStatic+0x82>
 80105ca:	2301      	movs	r3, #1
 80105cc:	e000      	b.n	80105d0 <xQueueGenericCreateStatic+0x84>
 80105ce:	2300      	movs	r3, #0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d10a      	bne.n	80105ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80105d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d8:	f383 8811 	msr	BASEPRI, r3
 80105dc:	f3bf 8f6f 	isb	sy
 80105e0:	f3bf 8f4f 	dsb	sy
 80105e4:	61fb      	str	r3, [r7, #28]
}
 80105e6:	bf00      	nop
 80105e8:	e7fe      	b.n	80105e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80105ea:	2348      	movs	r3, #72	; 0x48
 80105ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	2b48      	cmp	r3, #72	; 0x48
 80105f2:	d00a      	beq.n	801060a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80105f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f8:	f383 8811 	msr	BASEPRI, r3
 80105fc:	f3bf 8f6f 	isb	sy
 8010600:	f3bf 8f4f 	dsb	sy
 8010604:	61bb      	str	r3, [r7, #24]
}
 8010606:	bf00      	nop
 8010608:	e7fe      	b.n	8010608 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801060a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00d      	beq.n	8010632 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010618:	2201      	movs	r2, #1
 801061a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801061e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010624:	9300      	str	r3, [sp, #0]
 8010626:	4613      	mov	r3, r2
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	68b9      	ldr	r1, [r7, #8]
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f000 f83f 	bl	80106b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010634:	4618      	mov	r0, r3
 8010636:	3730      	adds	r7, #48	; 0x30
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801063c:	b580      	push	{r7, lr}
 801063e:	b08a      	sub	sp, #40	; 0x28
 8010640:	af02      	add	r7, sp, #8
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	4613      	mov	r3, r2
 8010648:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d10a      	bne.n	8010666 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	613b      	str	r3, [r7, #16]
}
 8010662:	bf00      	nop
 8010664:	e7fe      	b.n	8010664 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	68ba      	ldr	r2, [r7, #8]
 801066a:	fb02 f303 	mul.w	r3, r2, r3
 801066e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	3348      	adds	r3, #72	; 0x48
 8010674:	4618      	mov	r0, r3
 8010676:	f002 f897 	bl	80127a8 <pvPortMalloc>
 801067a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d011      	beq.n	80106a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	3348      	adds	r3, #72	; 0x48
 801068a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	2200      	movs	r2, #0
 8010690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010694:	79fa      	ldrb	r2, [r7, #7]
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	4613      	mov	r3, r2
 801069c:	697a      	ldr	r2, [r7, #20]
 801069e:	68b9      	ldr	r1, [r7, #8]
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f000 f805 	bl	80106b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80106a6:	69bb      	ldr	r3, [r7, #24]
	}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3720      	adds	r7, #32
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	607a      	str	r2, [r7, #4]
 80106bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d103      	bne.n	80106cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	69ba      	ldr	r2, [r7, #24]
 80106c8:	601a      	str	r2, [r3, #0]
 80106ca:	e002      	b.n	80106d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	68fa      	ldr	r2, [r7, #12]
 80106d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	68ba      	ldr	r2, [r7, #8]
 80106dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80106de:	2101      	movs	r1, #1
 80106e0:	69b8      	ldr	r0, [r7, #24]
 80106e2:	f7ff fecb 	bl	801047c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80106e6:	bf00      	nop
 80106e8:	3710      	adds	r7, #16
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b082      	sub	sp, #8
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00e      	beq.n	801071a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2200      	movs	r2, #0
 8010706:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2200      	movs	r2, #0
 801070c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801070e:	2300      	movs	r3, #0
 8010710:	2200      	movs	r2, #0
 8010712:	2100      	movs	r1, #0
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 f837 	bl	8010788 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801071a:	bf00      	nop
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}

08010722 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010722:	b580      	push	{r7, lr}
 8010724:	b086      	sub	sp, #24
 8010726:	af00      	add	r7, sp, #0
 8010728:	4603      	mov	r3, r0
 801072a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801072c:	2301      	movs	r3, #1
 801072e:	617b      	str	r3, [r7, #20]
 8010730:	2300      	movs	r3, #0
 8010732:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010734:	79fb      	ldrb	r3, [r7, #7]
 8010736:	461a      	mov	r2, r3
 8010738:	6939      	ldr	r1, [r7, #16]
 801073a:	6978      	ldr	r0, [r7, #20]
 801073c:	f7ff ff7e 	bl	801063c <xQueueGenericCreate>
 8010740:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010742:	68f8      	ldr	r0, [r7, #12]
 8010744:	f7ff ffd3 	bl	80106ee <prvInitialiseMutex>

		return xNewQueue;
 8010748:	68fb      	ldr	r3, [r7, #12]
	}
 801074a:	4618      	mov	r0, r3
 801074c:	3718      	adds	r7, #24
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010752:	b580      	push	{r7, lr}
 8010754:	b088      	sub	sp, #32
 8010756:	af02      	add	r7, sp, #8
 8010758:	4603      	mov	r3, r0
 801075a:	6039      	str	r1, [r7, #0]
 801075c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801075e:	2301      	movs	r3, #1
 8010760:	617b      	str	r3, [r7, #20]
 8010762:	2300      	movs	r3, #0
 8010764:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010766:	79fb      	ldrb	r3, [r7, #7]
 8010768:	9300      	str	r3, [sp, #0]
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	2200      	movs	r2, #0
 801076e:	6939      	ldr	r1, [r7, #16]
 8010770:	6978      	ldr	r0, [r7, #20]
 8010772:	f7ff feeb 	bl	801054c <xQueueGenericCreateStatic>
 8010776:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	f7ff ffb8 	bl	80106ee <prvInitialiseMutex>

		return xNewQueue;
 801077e:	68fb      	ldr	r3, [r7, #12]
	}
 8010780:	4618      	mov	r0, r3
 8010782:	3718      	adds	r7, #24
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b08e      	sub	sp, #56	; 0x38
 801078c:	af00      	add	r7, sp, #0
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	607a      	str	r2, [r7, #4]
 8010794:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010796:	2300      	movs	r3, #0
 8010798:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d10a      	bne.n	80107ba <xQueueGenericSend+0x32>
	__asm volatile
 80107a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a8:	f383 8811 	msr	BASEPRI, r3
 80107ac:	f3bf 8f6f 	isb	sy
 80107b0:	f3bf 8f4f 	dsb	sy
 80107b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80107b6:	bf00      	nop
 80107b8:	e7fe      	b.n	80107b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d103      	bne.n	80107c8 <xQueueGenericSend+0x40>
 80107c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d101      	bne.n	80107cc <xQueueGenericSend+0x44>
 80107c8:	2301      	movs	r3, #1
 80107ca:	e000      	b.n	80107ce <xQueueGenericSend+0x46>
 80107cc:	2300      	movs	r3, #0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d10a      	bne.n	80107e8 <xQueueGenericSend+0x60>
	__asm volatile
 80107d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d6:	f383 8811 	msr	BASEPRI, r3
 80107da:	f3bf 8f6f 	isb	sy
 80107de:	f3bf 8f4f 	dsb	sy
 80107e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80107e4:	bf00      	nop
 80107e6:	e7fe      	b.n	80107e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	2b02      	cmp	r3, #2
 80107ec:	d103      	bne.n	80107f6 <xQueueGenericSend+0x6e>
 80107ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d101      	bne.n	80107fa <xQueueGenericSend+0x72>
 80107f6:	2301      	movs	r3, #1
 80107f8:	e000      	b.n	80107fc <xQueueGenericSend+0x74>
 80107fa:	2300      	movs	r3, #0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d10a      	bne.n	8010816 <xQueueGenericSend+0x8e>
	__asm volatile
 8010800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010804:	f383 8811 	msr	BASEPRI, r3
 8010808:	f3bf 8f6f 	isb	sy
 801080c:	f3bf 8f4f 	dsb	sy
 8010810:	623b      	str	r3, [r7, #32]
}
 8010812:	bf00      	nop
 8010814:	e7fe      	b.n	8010814 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010816:	f001 fb59 	bl	8011ecc <xTaskGetSchedulerState>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d102      	bne.n	8010826 <xQueueGenericSend+0x9e>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d101      	bne.n	801082a <xQueueGenericSend+0xa2>
 8010826:	2301      	movs	r3, #1
 8010828:	e000      	b.n	801082c <xQueueGenericSend+0xa4>
 801082a:	2300      	movs	r3, #0
 801082c:	2b00      	cmp	r3, #0
 801082e:	d10a      	bne.n	8010846 <xQueueGenericSend+0xbe>
	__asm volatile
 8010830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010834:	f383 8811 	msr	BASEPRI, r3
 8010838:	f3bf 8f6f 	isb	sy
 801083c:	f3bf 8f4f 	dsb	sy
 8010840:	61fb      	str	r3, [r7, #28]
}
 8010842:	bf00      	nop
 8010844:	e7fe      	b.n	8010844 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010846:	f001 fe8d 	bl	8012564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010852:	429a      	cmp	r2, r3
 8010854:	d302      	bcc.n	801085c <xQueueGenericSend+0xd4>
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	2b02      	cmp	r3, #2
 801085a:	d129      	bne.n	80108b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801085c:	683a      	ldr	r2, [r7, #0]
 801085e:	68b9      	ldr	r1, [r7, #8]
 8010860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010862:	f000 fc3b 	bl	80110dc <prvCopyDataToQueue>
 8010866:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801086c:	2b00      	cmp	r3, #0
 801086e:	d010      	beq.n	8010892 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010872:	3324      	adds	r3, #36	; 0x24
 8010874:	4618      	mov	r0, r3
 8010876:	f001 f96d 	bl	8011b54 <xTaskRemoveFromEventList>
 801087a:	4603      	mov	r3, r0
 801087c:	2b00      	cmp	r3, #0
 801087e:	d013      	beq.n	80108a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010880:	4b3f      	ldr	r3, [pc, #252]	; (8010980 <xQueueGenericSend+0x1f8>)
 8010882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010886:	601a      	str	r2, [r3, #0]
 8010888:	f3bf 8f4f 	dsb	sy
 801088c:	f3bf 8f6f 	isb	sy
 8010890:	e00a      	b.n	80108a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010894:	2b00      	cmp	r3, #0
 8010896:	d007      	beq.n	80108a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010898:	4b39      	ldr	r3, [pc, #228]	; (8010980 <xQueueGenericSend+0x1f8>)
 801089a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801089e:	601a      	str	r2, [r3, #0]
 80108a0:	f3bf 8f4f 	dsb	sy
 80108a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80108a8:	f001 fe8c 	bl	80125c4 <vPortExitCritical>
				return pdPASS;
 80108ac:	2301      	movs	r3, #1
 80108ae:	e063      	b.n	8010978 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d103      	bne.n	80108be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80108b6:	f001 fe85 	bl	80125c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80108ba:	2300      	movs	r3, #0
 80108bc:	e05c      	b.n	8010978 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d106      	bne.n	80108d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108c4:	f107 0314 	add.w	r3, r7, #20
 80108c8:	4618      	mov	r0, r3
 80108ca:	f001 f9a5 	bl	8011c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108ce:	2301      	movs	r3, #1
 80108d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108d2:	f001 fe77 	bl	80125c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108d6:	f000 ff39 	bl	801174c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108da:	f001 fe43 	bl	8012564 <vPortEnterCritical>
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108e4:	b25b      	sxtb	r3, r3
 80108e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108ea:	d103      	bne.n	80108f4 <xQueueGenericSend+0x16c>
 80108ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ee:	2200      	movs	r2, #0
 80108f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108fa:	b25b      	sxtb	r3, r3
 80108fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010900:	d103      	bne.n	801090a <xQueueGenericSend+0x182>
 8010902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010904:	2200      	movs	r2, #0
 8010906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801090a:	f001 fe5b 	bl	80125c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801090e:	1d3a      	adds	r2, r7, #4
 8010910:	f107 0314 	add.w	r3, r7, #20
 8010914:	4611      	mov	r1, r2
 8010916:	4618      	mov	r0, r3
 8010918:	f001 f994 	bl	8011c44 <xTaskCheckForTimeOut>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d124      	bne.n	801096c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010922:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010924:	f000 fcd2 	bl	80112cc <prvIsQueueFull>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d018      	beq.n	8010960 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801092e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010930:	3310      	adds	r3, #16
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	4611      	mov	r1, r2
 8010936:	4618      	mov	r0, r3
 8010938:	f001 f8e8 	bl	8011b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801093c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801093e:	f000 fc5d 	bl	80111fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010942:	f000 ff11 	bl	8011768 <xTaskResumeAll>
 8010946:	4603      	mov	r3, r0
 8010948:	2b00      	cmp	r3, #0
 801094a:	f47f af7c 	bne.w	8010846 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801094e:	4b0c      	ldr	r3, [pc, #48]	; (8010980 <xQueueGenericSend+0x1f8>)
 8010950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010954:	601a      	str	r2, [r3, #0]
 8010956:	f3bf 8f4f 	dsb	sy
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	e772      	b.n	8010846 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010962:	f000 fc4b 	bl	80111fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010966:	f000 feff 	bl	8011768 <xTaskResumeAll>
 801096a:	e76c      	b.n	8010846 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801096c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801096e:	f000 fc45 	bl	80111fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010972:	f000 fef9 	bl	8011768 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010976:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010978:	4618      	mov	r0, r3
 801097a:	3738      	adds	r7, #56	; 0x38
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	e000ed04 	.word	0xe000ed04

08010984 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b090      	sub	sp, #64	; 0x40
 8010988:	af00      	add	r7, sp, #0
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	60b9      	str	r1, [r7, #8]
 801098e:	607a      	str	r2, [r7, #4]
 8010990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010998:	2b00      	cmp	r3, #0
 801099a:	d10a      	bne.n	80109b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801099c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a0:	f383 8811 	msr	BASEPRI, r3
 80109a4:	f3bf 8f6f 	isb	sy
 80109a8:	f3bf 8f4f 	dsb	sy
 80109ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80109ae:	bf00      	nop
 80109b0:	e7fe      	b.n	80109b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d103      	bne.n	80109c0 <xQueueGenericSendFromISR+0x3c>
 80109b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d101      	bne.n	80109c4 <xQueueGenericSendFromISR+0x40>
 80109c0:	2301      	movs	r3, #1
 80109c2:	e000      	b.n	80109c6 <xQueueGenericSendFromISR+0x42>
 80109c4:	2300      	movs	r3, #0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d10a      	bne.n	80109e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80109ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ce:	f383 8811 	msr	BASEPRI, r3
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	f3bf 8f4f 	dsb	sy
 80109da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80109dc:	bf00      	nop
 80109de:	e7fe      	b.n	80109de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	2b02      	cmp	r3, #2
 80109e4:	d103      	bne.n	80109ee <xQueueGenericSendFromISR+0x6a>
 80109e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ea:	2b01      	cmp	r3, #1
 80109ec:	d101      	bne.n	80109f2 <xQueueGenericSendFromISR+0x6e>
 80109ee:	2301      	movs	r3, #1
 80109f0:	e000      	b.n	80109f4 <xQueueGenericSendFromISR+0x70>
 80109f2:	2300      	movs	r3, #0
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d10a      	bne.n	8010a0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80109f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fc:	f383 8811 	msr	BASEPRI, r3
 8010a00:	f3bf 8f6f 	isb	sy
 8010a04:	f3bf 8f4f 	dsb	sy
 8010a08:	623b      	str	r3, [r7, #32]
}
 8010a0a:	bf00      	nop
 8010a0c:	e7fe      	b.n	8010a0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a0e:	f001 fe8b 	bl	8012728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010a12:	f3ef 8211 	mrs	r2, BASEPRI
 8010a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1a:	f383 8811 	msr	BASEPRI, r3
 8010a1e:	f3bf 8f6f 	isb	sy
 8010a22:	f3bf 8f4f 	dsb	sy
 8010a26:	61fa      	str	r2, [r7, #28]
 8010a28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010a2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d302      	bcc.n	8010a40 <xQueueGenericSendFromISR+0xbc>
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	2b02      	cmp	r3, #2
 8010a3e:	d12f      	bne.n	8010aa0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a50:	683a      	ldr	r2, [r7, #0]
 8010a52:	68b9      	ldr	r1, [r7, #8]
 8010a54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a56:	f000 fb41 	bl	80110dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a62:	d112      	bne.n	8010a8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d016      	beq.n	8010a9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6e:	3324      	adds	r3, #36	; 0x24
 8010a70:	4618      	mov	r0, r3
 8010a72:	f001 f86f 	bl	8011b54 <xTaskRemoveFromEventList>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d00e      	beq.n	8010a9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d00b      	beq.n	8010a9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2201      	movs	r2, #1
 8010a86:	601a      	str	r2, [r3, #0]
 8010a88:	e007      	b.n	8010a9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010a8e:	3301      	adds	r3, #1
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	b25a      	sxtb	r2, r3
 8010a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010a9e:	e001      	b.n	8010aa4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010aae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3740      	adds	r7, #64	; 0x40
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b08e      	sub	sp, #56	; 0x38
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d10a      	bne.n	8010ae4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad2:	f383 8811 	msr	BASEPRI, r3
 8010ad6:	f3bf 8f6f 	isb	sy
 8010ada:	f3bf 8f4f 	dsb	sy
 8010ade:	623b      	str	r3, [r7, #32]
}
 8010ae0:	bf00      	nop
 8010ae2:	e7fe      	b.n	8010ae2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00a      	beq.n	8010b02 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af0:	f383 8811 	msr	BASEPRI, r3
 8010af4:	f3bf 8f6f 	isb	sy
 8010af8:	f3bf 8f4f 	dsb	sy
 8010afc:	61fb      	str	r3, [r7, #28]
}
 8010afe:	bf00      	nop
 8010b00:	e7fe      	b.n	8010b00 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d103      	bne.n	8010b12 <xQueueGiveFromISR+0x58>
 8010b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0c:	689b      	ldr	r3, [r3, #8]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d101      	bne.n	8010b16 <xQueueGiveFromISR+0x5c>
 8010b12:	2301      	movs	r3, #1
 8010b14:	e000      	b.n	8010b18 <xQueueGiveFromISR+0x5e>
 8010b16:	2300      	movs	r3, #0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d10a      	bne.n	8010b32 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b20:	f383 8811 	msr	BASEPRI, r3
 8010b24:	f3bf 8f6f 	isb	sy
 8010b28:	f3bf 8f4f 	dsb	sy
 8010b2c:	61bb      	str	r3, [r7, #24]
}
 8010b2e:	bf00      	nop
 8010b30:	e7fe      	b.n	8010b30 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b32:	f001 fdf9 	bl	8012728 <vPortValidateInterruptPriority>
	__asm volatile
 8010b36:	f3ef 8211 	mrs	r2, BASEPRI
 8010b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b3e:	f383 8811 	msr	BASEPRI, r3
 8010b42:	f3bf 8f6f 	isb	sy
 8010b46:	f3bf 8f4f 	dsb	sy
 8010b4a:	617a      	str	r2, [r7, #20]
 8010b4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010b4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d22b      	bcs.n	8010bba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6e:	1c5a      	adds	r2, r3, #1
 8010b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b72:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b7c:	d112      	bne.n	8010ba4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d016      	beq.n	8010bb4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b88:	3324      	adds	r3, #36	; 0x24
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f000 ffe2 	bl	8011b54 <xTaskRemoveFromEventList>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00e      	beq.n	8010bb4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00b      	beq.n	8010bb4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	601a      	str	r2, [r3, #0]
 8010ba2:	e007      	b.n	8010bb4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ba8:	3301      	adds	r3, #1
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	b25a      	sxtb	r2, r3
 8010bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8010bb8:	e001      	b.n	8010bbe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8010bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	f383 8811 	msr	BASEPRI, r3
}
 8010bc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3738      	adds	r7, #56	; 0x38
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b08c      	sub	sp, #48	; 0x30
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010be0:	2300      	movs	r3, #0
 8010be2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d10a      	bne.n	8010c04 <xQueueReceive+0x30>
	__asm volatile
 8010bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf2:	f383 8811 	msr	BASEPRI, r3
 8010bf6:	f3bf 8f6f 	isb	sy
 8010bfa:	f3bf 8f4f 	dsb	sy
 8010bfe:	623b      	str	r3, [r7, #32]
}
 8010c00:	bf00      	nop
 8010c02:	e7fe      	b.n	8010c02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d103      	bne.n	8010c12 <xQueueReceive+0x3e>
 8010c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d101      	bne.n	8010c16 <xQueueReceive+0x42>
 8010c12:	2301      	movs	r3, #1
 8010c14:	e000      	b.n	8010c18 <xQueueReceive+0x44>
 8010c16:	2300      	movs	r3, #0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10a      	bne.n	8010c32 <xQueueReceive+0x5e>
	__asm volatile
 8010c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c20:	f383 8811 	msr	BASEPRI, r3
 8010c24:	f3bf 8f6f 	isb	sy
 8010c28:	f3bf 8f4f 	dsb	sy
 8010c2c:	61fb      	str	r3, [r7, #28]
}
 8010c2e:	bf00      	nop
 8010c30:	e7fe      	b.n	8010c30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c32:	f001 f94b 	bl	8011ecc <xTaskGetSchedulerState>
 8010c36:	4603      	mov	r3, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d102      	bne.n	8010c42 <xQueueReceive+0x6e>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d101      	bne.n	8010c46 <xQueueReceive+0x72>
 8010c42:	2301      	movs	r3, #1
 8010c44:	e000      	b.n	8010c48 <xQueueReceive+0x74>
 8010c46:	2300      	movs	r3, #0
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d10a      	bne.n	8010c62 <xQueueReceive+0x8e>
	__asm volatile
 8010c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c50:	f383 8811 	msr	BASEPRI, r3
 8010c54:	f3bf 8f6f 	isb	sy
 8010c58:	f3bf 8f4f 	dsb	sy
 8010c5c:	61bb      	str	r3, [r7, #24]
}
 8010c5e:	bf00      	nop
 8010c60:	e7fe      	b.n	8010c60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010c62:	f001 fc7f 	bl	8012564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d01f      	beq.n	8010cb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010c72:	68b9      	ldr	r1, [r7, #8]
 8010c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c76:	f000 fa9b 	bl	80111b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7c:	1e5a      	subs	r2, r3, #1
 8010c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d00f      	beq.n	8010caa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8c:	3310      	adds	r3, #16
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f000 ff60 	bl	8011b54 <xTaskRemoveFromEventList>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d007      	beq.n	8010caa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010c9a:	4b3d      	ldr	r3, [pc, #244]	; (8010d90 <xQueueReceive+0x1bc>)
 8010c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ca0:	601a      	str	r2, [r3, #0]
 8010ca2:	f3bf 8f4f 	dsb	sy
 8010ca6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010caa:	f001 fc8b 	bl	80125c4 <vPortExitCritical>
				return pdPASS;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	e069      	b.n	8010d86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d103      	bne.n	8010cc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010cb8:	f001 fc84 	bl	80125c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e062      	b.n	8010d86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d106      	bne.n	8010cd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010cc6:	f107 0310 	add.w	r3, r7, #16
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f000 ffa4 	bl	8011c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010cd4:	f001 fc76 	bl	80125c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010cd8:	f000 fd38 	bl	801174c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010cdc:	f001 fc42 	bl	8012564 <vPortEnterCritical>
 8010ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ce6:	b25b      	sxtb	r3, r3
 8010ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cec:	d103      	bne.n	8010cf6 <xQueueReceive+0x122>
 8010cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cfc:	b25b      	sxtb	r3, r3
 8010cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d02:	d103      	bne.n	8010d0c <xQueueReceive+0x138>
 8010d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d06:	2200      	movs	r2, #0
 8010d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d0c:	f001 fc5a 	bl	80125c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d10:	1d3a      	adds	r2, r7, #4
 8010d12:	f107 0310 	add.w	r3, r7, #16
 8010d16:	4611      	mov	r1, r2
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f000 ff93 	bl	8011c44 <xTaskCheckForTimeOut>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d123      	bne.n	8010d6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d26:	f000 fabb 	bl	80112a0 <prvIsQueueEmpty>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d017      	beq.n	8010d60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d32:	3324      	adds	r3, #36	; 0x24
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	4611      	mov	r1, r2
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f000 fee7 	bl	8011b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d40:	f000 fa5c 	bl	80111fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010d44:	f000 fd10 	bl	8011768 <xTaskResumeAll>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d189      	bne.n	8010c62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010d4e:	4b10      	ldr	r3, [pc, #64]	; (8010d90 <xQueueReceive+0x1bc>)
 8010d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d54:	601a      	str	r2, [r3, #0]
 8010d56:	f3bf 8f4f 	dsb	sy
 8010d5a:	f3bf 8f6f 	isb	sy
 8010d5e:	e780      	b.n	8010c62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d62:	f000 fa4b 	bl	80111fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010d66:	f000 fcff 	bl	8011768 <xTaskResumeAll>
 8010d6a:	e77a      	b.n	8010c62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d6e:	f000 fa45 	bl	80111fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010d72:	f000 fcf9 	bl	8011768 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d78:	f000 fa92 	bl	80112a0 <prvIsQueueEmpty>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	f43f af6f 	beq.w	8010c62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3730      	adds	r7, #48	; 0x30
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	e000ed04 	.word	0xe000ed04

08010d94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b08e      	sub	sp, #56	; 0x38
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010da6:	2300      	movs	r3, #0
 8010da8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d10a      	bne.n	8010dc6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db4:	f383 8811 	msr	BASEPRI, r3
 8010db8:	f3bf 8f6f 	isb	sy
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	623b      	str	r3, [r7, #32]
}
 8010dc2:	bf00      	nop
 8010dc4:	e7fe      	b.n	8010dc4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00a      	beq.n	8010de4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd2:	f383 8811 	msr	BASEPRI, r3
 8010dd6:	f3bf 8f6f 	isb	sy
 8010dda:	f3bf 8f4f 	dsb	sy
 8010dde:	61fb      	str	r3, [r7, #28]
}
 8010de0:	bf00      	nop
 8010de2:	e7fe      	b.n	8010de2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010de4:	f001 f872 	bl	8011ecc <xTaskGetSchedulerState>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d102      	bne.n	8010df4 <xQueueSemaphoreTake+0x60>
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d101      	bne.n	8010df8 <xQueueSemaphoreTake+0x64>
 8010df4:	2301      	movs	r3, #1
 8010df6:	e000      	b.n	8010dfa <xQueueSemaphoreTake+0x66>
 8010df8:	2300      	movs	r3, #0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d10a      	bne.n	8010e14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e02:	f383 8811 	msr	BASEPRI, r3
 8010e06:	f3bf 8f6f 	isb	sy
 8010e0a:	f3bf 8f4f 	dsb	sy
 8010e0e:	61bb      	str	r3, [r7, #24]
}
 8010e10:	bf00      	nop
 8010e12:	e7fe      	b.n	8010e12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e14:	f001 fba6 	bl	8012564 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d024      	beq.n	8010e6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e26:	1e5a      	subs	r2, r3, #1
 8010e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d104      	bne.n	8010e3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010e34:	f001 f9f2 	bl	801221c <pvTaskIncrementMutexHeldCount>
 8010e38:	4602      	mov	r2, r0
 8010e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e40:	691b      	ldr	r3, [r3, #16]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d00f      	beq.n	8010e66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e48:	3310      	adds	r3, #16
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f000 fe82 	bl	8011b54 <xTaskRemoveFromEventList>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d007      	beq.n	8010e66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e56:	4b54      	ldr	r3, [pc, #336]	; (8010fa8 <xQueueSemaphoreTake+0x214>)
 8010e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e5c:	601a      	str	r2, [r3, #0]
 8010e5e:	f3bf 8f4f 	dsb	sy
 8010e62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e66:	f001 fbad 	bl	80125c4 <vPortExitCritical>
				return pdPASS;
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	e097      	b.n	8010f9e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d111      	bne.n	8010e98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d00a      	beq.n	8010e90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e7e:	f383 8811 	msr	BASEPRI, r3
 8010e82:	f3bf 8f6f 	isb	sy
 8010e86:	f3bf 8f4f 	dsb	sy
 8010e8a:	617b      	str	r3, [r7, #20]
}
 8010e8c:	bf00      	nop
 8010e8e:	e7fe      	b.n	8010e8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010e90:	f001 fb98 	bl	80125c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e94:	2300      	movs	r3, #0
 8010e96:	e082      	b.n	8010f9e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d106      	bne.n	8010eac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e9e:	f107 030c 	add.w	r3, r7, #12
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f000 feb8 	bl	8011c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010eac:	f001 fb8a 	bl	80125c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010eb0:	f000 fc4c 	bl	801174c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010eb4:	f001 fb56 	bl	8012564 <vPortEnterCritical>
 8010eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ebe:	b25b      	sxtb	r3, r3
 8010ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ec4:	d103      	bne.n	8010ece <xQueueSemaphoreTake+0x13a>
 8010ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec8:	2200      	movs	r2, #0
 8010eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ed4:	b25b      	sxtb	r3, r3
 8010ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010eda:	d103      	bne.n	8010ee4 <xQueueSemaphoreTake+0x150>
 8010edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ede:	2200      	movs	r2, #0
 8010ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010ee4:	f001 fb6e 	bl	80125c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ee8:	463a      	mov	r2, r7
 8010eea:	f107 030c 	add.w	r3, r7, #12
 8010eee:	4611      	mov	r1, r2
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f000 fea7 	bl	8011c44 <xTaskCheckForTimeOut>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d132      	bne.n	8010f62 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010efe:	f000 f9cf 	bl	80112a0 <prvIsQueueEmpty>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d026      	beq.n	8010f56 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d109      	bne.n	8010f24 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010f10:	f001 fb28 	bl	8012564 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f16:	689b      	ldr	r3, [r3, #8]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f000 fff5 	bl	8011f08 <xTaskPriorityInherit>
 8010f1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010f20:	f001 fb50 	bl	80125c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f26:	3324      	adds	r3, #36	; 0x24
 8010f28:	683a      	ldr	r2, [r7, #0]
 8010f2a:	4611      	mov	r1, r2
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f000 fded 	bl	8011b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f34:	f000 f962 	bl	80111fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010f38:	f000 fc16 	bl	8011768 <xTaskResumeAll>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	f47f af68 	bne.w	8010e14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010f44:	4b18      	ldr	r3, [pc, #96]	; (8010fa8 <xQueueSemaphoreTake+0x214>)
 8010f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f4a:	601a      	str	r2, [r3, #0]
 8010f4c:	f3bf 8f4f 	dsb	sy
 8010f50:	f3bf 8f6f 	isb	sy
 8010f54:	e75e      	b.n	8010e14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010f56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f58:	f000 f950 	bl	80111fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f5c:	f000 fc04 	bl	8011768 <xTaskResumeAll>
 8010f60:	e758      	b.n	8010e14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f64:	f000 f94a 	bl	80111fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f68:	f000 fbfe 	bl	8011768 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f6e:	f000 f997 	bl	80112a0 <prvIsQueueEmpty>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f43f af4d 	beq.w	8010e14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00d      	beq.n	8010f9c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010f80:	f001 faf0 	bl	8012564 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f86:	f000 f891 	bl	80110ac <prvGetDisinheritPriorityAfterTimeout>
 8010f8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f8e:	689b      	ldr	r3, [r3, #8]
 8010f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f92:	4618      	mov	r0, r3
 8010f94:	f001 f8b4 	bl	8012100 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010f98:	f001 fb14 	bl	80125c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3738      	adds	r7, #56	; 0x38
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	e000ed04 	.word	0xe000ed04

08010fac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b08e      	sub	sp, #56	; 0x38
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d10a      	bne.n	8010fd8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc6:	f383 8811 	msr	BASEPRI, r3
 8010fca:	f3bf 8f6f 	isb	sy
 8010fce:	f3bf 8f4f 	dsb	sy
 8010fd2:	623b      	str	r3, [r7, #32]
}
 8010fd4:	bf00      	nop
 8010fd6:	e7fe      	b.n	8010fd6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d103      	bne.n	8010fe6 <xQueueReceiveFromISR+0x3a>
 8010fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d101      	bne.n	8010fea <xQueueReceiveFromISR+0x3e>
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e000      	b.n	8010fec <xQueueReceiveFromISR+0x40>
 8010fea:	2300      	movs	r3, #0
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10a      	bne.n	8011006 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff4:	f383 8811 	msr	BASEPRI, r3
 8010ff8:	f3bf 8f6f 	isb	sy
 8010ffc:	f3bf 8f4f 	dsb	sy
 8011000:	61fb      	str	r3, [r7, #28]
}
 8011002:	bf00      	nop
 8011004:	e7fe      	b.n	8011004 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011006:	f001 fb8f 	bl	8012728 <vPortValidateInterruptPriority>
	__asm volatile
 801100a:	f3ef 8211 	mrs	r2, BASEPRI
 801100e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011012:	f383 8811 	msr	BASEPRI, r3
 8011016:	f3bf 8f6f 	isb	sy
 801101a:	f3bf 8f4f 	dsb	sy
 801101e:	61ba      	str	r2, [r7, #24]
 8011020:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011022:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011024:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102e:	2b00      	cmp	r3, #0
 8011030:	d02f      	beq.n	8011092 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801103c:	68b9      	ldr	r1, [r7, #8]
 801103e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011040:	f000 f8b6 	bl	80111b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011046:	1e5a      	subs	r2, r3, #1
 8011048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801104c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011054:	d112      	bne.n	801107c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011058:	691b      	ldr	r3, [r3, #16]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d016      	beq.n	801108c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801105e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011060:	3310      	adds	r3, #16
 8011062:	4618      	mov	r0, r3
 8011064:	f000 fd76 	bl	8011b54 <xTaskRemoveFromEventList>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d00e      	beq.n	801108c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d00b      	beq.n	801108c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2201      	movs	r2, #1
 8011078:	601a      	str	r2, [r3, #0]
 801107a:	e007      	b.n	801108c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801107c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011080:	3301      	adds	r3, #1
 8011082:	b2db      	uxtb	r3, r3
 8011084:	b25a      	sxtb	r2, r3
 8011086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801108c:	2301      	movs	r3, #1
 801108e:	637b      	str	r3, [r7, #52]	; 0x34
 8011090:	e001      	b.n	8011096 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011092:	2300      	movs	r3, #0
 8011094:	637b      	str	r3, [r7, #52]	; 0x34
 8011096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011098:	613b      	str	r3, [r7, #16]
	__asm volatile
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	f383 8811 	msr	BASEPRI, r3
}
 80110a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80110a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3738      	adds	r7, #56	; 0x38
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}

080110ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80110ac:	b480      	push	{r7}
 80110ae:	b085      	sub	sp, #20
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d006      	beq.n	80110ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	f1c3 0307 	rsb	r3, r3, #7
 80110c6:	60fb      	str	r3, [r7, #12]
 80110c8:	e001      	b.n	80110ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80110ca:	2300      	movs	r3, #0
 80110cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80110ce:	68fb      	ldr	r3, [r7, #12]
	}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3714      	adds	r7, #20
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80110e8:	2300      	movs	r3, #0
 80110ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d10d      	bne.n	8011116 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d14d      	bne.n	801119e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	689b      	ldr	r3, [r3, #8]
 8011106:	4618      	mov	r0, r3
 8011108:	f000 ff74 	bl	8011ff4 <xTaskPriorityDisinherit>
 801110c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2200      	movs	r2, #0
 8011112:	609a      	str	r2, [r3, #8]
 8011114:	e043      	b.n	801119e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d119      	bne.n	8011150 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	6858      	ldr	r0, [r3, #4]
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011124:	461a      	mov	r2, r3
 8011126:	68b9      	ldr	r1, [r7, #8]
 8011128:	f7ef f952 	bl	80003d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	685a      	ldr	r2, [r3, #4]
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011134:	441a      	add	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	685a      	ldr	r2, [r3, #4]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	689b      	ldr	r3, [r3, #8]
 8011142:	429a      	cmp	r2, r3
 8011144:	d32b      	bcc.n	801119e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	605a      	str	r2, [r3, #4]
 801114e:	e026      	b.n	801119e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	68d8      	ldr	r0, [r3, #12]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011158:	461a      	mov	r2, r3
 801115a:	68b9      	ldr	r1, [r7, #8]
 801115c:	f7ef f938 	bl	80003d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	68da      	ldr	r2, [r3, #12]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011168:	425b      	negs	r3, r3
 801116a:	441a      	add	r2, r3
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	68da      	ldr	r2, [r3, #12]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	429a      	cmp	r2, r3
 801117a:	d207      	bcs.n	801118c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	689a      	ldr	r2, [r3, #8]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011184:	425b      	negs	r3, r3
 8011186:	441a      	add	r2, r3
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2b02      	cmp	r3, #2
 8011190:	d105      	bne.n	801119e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d002      	beq.n	801119e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	3b01      	subs	r3, #1
 801119c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	1c5a      	adds	r2, r3, #1
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80111a6:	697b      	ldr	r3, [r7, #20]
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3718      	adds	r7, #24
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}

080111b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d018      	beq.n	80111f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	68da      	ldr	r2, [r3, #12]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ca:	441a      	add	r2, r3
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	68da      	ldr	r2, [r3, #12]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d303      	bcc.n	80111e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	68d9      	ldr	r1, [r3, #12]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ec:	461a      	mov	r2, r3
 80111ee:	6838      	ldr	r0, [r7, #0]
 80111f0:	f7ef f8ee 	bl	80003d0 <memcpy>
	}
}
 80111f4:	bf00      	nop
 80111f6:	3708      	adds	r7, #8
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011204:	f001 f9ae 	bl	8012564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801120e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011210:	e011      	b.n	8011236 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011216:	2b00      	cmp	r3, #0
 8011218:	d012      	beq.n	8011240 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	3324      	adds	r3, #36	; 0x24
 801121e:	4618      	mov	r0, r3
 8011220:	f000 fc98 	bl	8011b54 <xTaskRemoveFromEventList>
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d001      	beq.n	801122e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801122a:	f000 fd6d 	bl	8011d08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801122e:	7bfb      	ldrb	r3, [r7, #15]
 8011230:	3b01      	subs	r3, #1
 8011232:	b2db      	uxtb	r3, r3
 8011234:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801123a:	2b00      	cmp	r3, #0
 801123c:	dce9      	bgt.n	8011212 <prvUnlockQueue+0x16>
 801123e:	e000      	b.n	8011242 <prvUnlockQueue+0x46>
					break;
 8011240:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	22ff      	movs	r2, #255	; 0xff
 8011246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801124a:	f001 f9bb 	bl	80125c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801124e:	f001 f989 	bl	8012564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011258:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801125a:	e011      	b.n	8011280 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	691b      	ldr	r3, [r3, #16]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d012      	beq.n	801128a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	3310      	adds	r3, #16
 8011268:	4618      	mov	r0, r3
 801126a:	f000 fc73 	bl	8011b54 <xTaskRemoveFromEventList>
 801126e:	4603      	mov	r3, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011274:	f000 fd48 	bl	8011d08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011278:	7bbb      	ldrb	r3, [r7, #14]
 801127a:	3b01      	subs	r3, #1
 801127c:	b2db      	uxtb	r3, r3
 801127e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011284:	2b00      	cmp	r3, #0
 8011286:	dce9      	bgt.n	801125c <prvUnlockQueue+0x60>
 8011288:	e000      	b.n	801128c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801128a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	22ff      	movs	r2, #255	; 0xff
 8011290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011294:	f001 f996 	bl	80125c4 <vPortExitCritical>
}
 8011298:	bf00      	nop
 801129a:	3710      	adds	r7, #16
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112a8:	f001 f95c 	bl	8012564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d102      	bne.n	80112ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80112b4:	2301      	movs	r3, #1
 80112b6:	60fb      	str	r3, [r7, #12]
 80112b8:	e001      	b.n	80112be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80112ba:	2300      	movs	r3, #0
 80112bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112be:	f001 f981 	bl	80125c4 <vPortExitCritical>

	return xReturn;
 80112c2:	68fb      	ldr	r3, [r7, #12]
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3710      	adds	r7, #16
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112d4:	f001 f946 	bl	8012564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d102      	bne.n	80112ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80112e4:	2301      	movs	r3, #1
 80112e6:	60fb      	str	r3, [r7, #12]
 80112e8:	e001      	b.n	80112ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80112ea:	2300      	movs	r3, #0
 80112ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112ee:	f001 f969 	bl	80125c4 <vPortExitCritical>

	return xReturn;
 80112f2:	68fb      	ldr	r3, [r7, #12]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3710      	adds	r7, #16
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b08e      	sub	sp, #56	; 0x38
 8011300:	af04      	add	r7, sp, #16
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	607a      	str	r2, [r7, #4]
 8011308:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801130a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130c:	2b00      	cmp	r3, #0
 801130e:	d10a      	bne.n	8011326 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011314:	f383 8811 	msr	BASEPRI, r3
 8011318:	f3bf 8f6f 	isb	sy
 801131c:	f3bf 8f4f 	dsb	sy
 8011320:	623b      	str	r3, [r7, #32]
}
 8011322:	bf00      	nop
 8011324:	e7fe      	b.n	8011324 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011328:	2b00      	cmp	r3, #0
 801132a:	d10a      	bne.n	8011342 <xTaskCreateStatic+0x46>
	__asm volatile
 801132c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011330:	f383 8811 	msr	BASEPRI, r3
 8011334:	f3bf 8f6f 	isb	sy
 8011338:	f3bf 8f4f 	dsb	sy
 801133c:	61fb      	str	r3, [r7, #28]
}
 801133e:	bf00      	nop
 8011340:	e7fe      	b.n	8011340 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011342:	2354      	movs	r3, #84	; 0x54
 8011344:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	2b54      	cmp	r3, #84	; 0x54
 801134a:	d00a      	beq.n	8011362 <xTaskCreateStatic+0x66>
	__asm volatile
 801134c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011350:	f383 8811 	msr	BASEPRI, r3
 8011354:	f3bf 8f6f 	isb	sy
 8011358:	f3bf 8f4f 	dsb	sy
 801135c:	61bb      	str	r3, [r7, #24]
}
 801135e:	bf00      	nop
 8011360:	e7fe      	b.n	8011360 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011362:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011366:	2b00      	cmp	r3, #0
 8011368:	d01e      	beq.n	80113a8 <xTaskCreateStatic+0xac>
 801136a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801136c:	2b00      	cmp	r3, #0
 801136e:	d01b      	beq.n	80113a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011372:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011378:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	2202      	movs	r2, #2
 801137e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011382:	2300      	movs	r3, #0
 8011384:	9303      	str	r3, [sp, #12]
 8011386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011388:	9302      	str	r3, [sp, #8]
 801138a:	f107 0314 	add.w	r3, r7, #20
 801138e:	9301      	str	r3, [sp, #4]
 8011390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	68b9      	ldr	r1, [r7, #8]
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f000 f850 	bl	8011440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113a2:	f000 f8d5 	bl	8011550 <prvAddNewTaskToReadyList>
 80113a6:	e001      	b.n	80113ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80113a8:	2300      	movs	r3, #0
 80113aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80113ac:	697b      	ldr	r3, [r7, #20]
	}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3728      	adds	r7, #40	; 0x28
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}

080113b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80113b6:	b580      	push	{r7, lr}
 80113b8:	b08c      	sub	sp, #48	; 0x30
 80113ba:	af04      	add	r7, sp, #16
 80113bc:	60f8      	str	r0, [r7, #12]
 80113be:	60b9      	str	r1, [r7, #8]
 80113c0:	603b      	str	r3, [r7, #0]
 80113c2:	4613      	mov	r3, r2
 80113c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80113c6:	88fb      	ldrh	r3, [r7, #6]
 80113c8:	009b      	lsls	r3, r3, #2
 80113ca:	4618      	mov	r0, r3
 80113cc:	f001 f9ec 	bl	80127a8 <pvPortMalloc>
 80113d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d00e      	beq.n	80113f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80113d8:	2054      	movs	r0, #84	; 0x54
 80113da:	f001 f9e5 	bl	80127a8 <pvPortMalloc>
 80113de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80113e0:	69fb      	ldr	r3, [r7, #28]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d003      	beq.n	80113ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	697a      	ldr	r2, [r7, #20]
 80113ea:	631a      	str	r2, [r3, #48]	; 0x30
 80113ec:	e005      	b.n	80113fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80113ee:	6978      	ldr	r0, [r7, #20]
 80113f0:	f001 faa6 	bl	8012940 <vPortFree>
 80113f4:	e001      	b.n	80113fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80113f6:	2300      	movs	r3, #0
 80113f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d017      	beq.n	8011430 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	2200      	movs	r2, #0
 8011404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011408:	88fa      	ldrh	r2, [r7, #6]
 801140a:	2300      	movs	r3, #0
 801140c:	9303      	str	r3, [sp, #12]
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	9302      	str	r3, [sp, #8]
 8011412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011414:	9301      	str	r3, [sp, #4]
 8011416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011418:	9300      	str	r3, [sp, #0]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	68b9      	ldr	r1, [r7, #8]
 801141e:	68f8      	ldr	r0, [r7, #12]
 8011420:	f000 f80e 	bl	8011440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011424:	69f8      	ldr	r0, [r7, #28]
 8011426:	f000 f893 	bl	8011550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801142a:	2301      	movs	r3, #1
 801142c:	61bb      	str	r3, [r7, #24]
 801142e:	e002      	b.n	8011436 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011434:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011436:	69bb      	ldr	r3, [r7, #24]
	}
 8011438:	4618      	mov	r0, r3
 801143a:	3720      	adds	r7, #32
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b088      	sub	sp, #32
 8011444:	af00      	add	r7, sp, #0
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	60b9      	str	r1, [r7, #8]
 801144a:	607a      	str	r2, [r7, #4]
 801144c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011452:	6879      	ldr	r1, [r7, #4]
 8011454:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011458:	440b      	add	r3, r1
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	4413      	add	r3, r2
 801145e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	f023 0307 	bic.w	r3, r3, #7
 8011466:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011468:	69bb      	ldr	r3, [r7, #24]
 801146a:	f003 0307 	and.w	r3, r3, #7
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00a      	beq.n	8011488 <prvInitialiseNewTask+0x48>
	__asm volatile
 8011472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011476:	f383 8811 	msr	BASEPRI, r3
 801147a:	f3bf 8f6f 	isb	sy
 801147e:	f3bf 8f4f 	dsb	sy
 8011482:	617b      	str	r3, [r7, #20]
}
 8011484:	bf00      	nop
 8011486:	e7fe      	b.n	8011486 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d01f      	beq.n	80114ce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801148e:	2300      	movs	r3, #0
 8011490:	61fb      	str	r3, [r7, #28]
 8011492:	e012      	b.n	80114ba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011494:	68ba      	ldr	r2, [r7, #8]
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	4413      	add	r3, r2
 801149a:	7819      	ldrb	r1, [r3, #0]
 801149c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	4413      	add	r3, r2
 80114a2:	3334      	adds	r3, #52	; 0x34
 80114a4:	460a      	mov	r2, r1
 80114a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80114a8:	68ba      	ldr	r2, [r7, #8]
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	4413      	add	r3, r2
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d006      	beq.n	80114c2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	3301      	adds	r3, #1
 80114b8:	61fb      	str	r3, [r7, #28]
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	2b0f      	cmp	r3, #15
 80114be:	d9e9      	bls.n	8011494 <prvInitialiseNewTask+0x54>
 80114c0:	e000      	b.n	80114c4 <prvInitialiseNewTask+0x84>
			{
				break;
 80114c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80114c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c6:	2200      	movs	r2, #0
 80114c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80114cc:	e003      	b.n	80114d6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80114ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d0:	2200      	movs	r2, #0
 80114d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80114d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d8:	2b06      	cmp	r3, #6
 80114da:	d901      	bls.n	80114e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80114dc:	2306      	movs	r3, #6
 80114de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80114e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80114e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80114ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ee:	2200      	movs	r2, #0
 80114f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80114f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f4:	3304      	adds	r3, #4
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fe ff2c 	bl	8010354 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80114fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fe:	3318      	adds	r3, #24
 8011500:	4618      	mov	r0, r3
 8011502:	f7fe ff27 	bl	8010354 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801150a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150e:	f1c3 0207 	rsb	r2, r3, #7
 8011512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011514:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801151a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151e:	2200      	movs	r2, #0
 8011520:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011524:	2200      	movs	r2, #0
 8011526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801152a:	683a      	ldr	r2, [r7, #0]
 801152c:	68f9      	ldr	r1, [r7, #12]
 801152e:	69b8      	ldr	r0, [r7, #24]
 8011530:	f000 feee 	bl	8012310 <pxPortInitialiseStack>
 8011534:	4602      	mov	r2, r0
 8011536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011538:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153c:	2b00      	cmp	r3, #0
 801153e:	d002      	beq.n	8011546 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011546:	bf00      	nop
 8011548:	3720      	adds	r7, #32
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
	...

08011550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b082      	sub	sp, #8
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011558:	f001 f804 	bl	8012564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801155c:	4b2a      	ldr	r3, [pc, #168]	; (8011608 <prvAddNewTaskToReadyList+0xb8>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	3301      	adds	r3, #1
 8011562:	4a29      	ldr	r2, [pc, #164]	; (8011608 <prvAddNewTaskToReadyList+0xb8>)
 8011564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011566:	4b29      	ldr	r3, [pc, #164]	; (801160c <prvAddNewTaskToReadyList+0xbc>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d109      	bne.n	8011582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801156e:	4a27      	ldr	r2, [pc, #156]	; (801160c <prvAddNewTaskToReadyList+0xbc>)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011574:	4b24      	ldr	r3, [pc, #144]	; (8011608 <prvAddNewTaskToReadyList+0xb8>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b01      	cmp	r3, #1
 801157a:	d110      	bne.n	801159e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801157c:	f000 fbe8 	bl	8011d50 <prvInitialiseTaskLists>
 8011580:	e00d      	b.n	801159e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011582:	4b23      	ldr	r3, [pc, #140]	; (8011610 <prvAddNewTaskToReadyList+0xc0>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d109      	bne.n	801159e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801158a:	4b20      	ldr	r3, [pc, #128]	; (801160c <prvAddNewTaskToReadyList+0xbc>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011594:	429a      	cmp	r2, r3
 8011596:	d802      	bhi.n	801159e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011598:	4a1c      	ldr	r2, [pc, #112]	; (801160c <prvAddNewTaskToReadyList+0xbc>)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801159e:	4b1d      	ldr	r3, [pc, #116]	; (8011614 <prvAddNewTaskToReadyList+0xc4>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	3301      	adds	r3, #1
 80115a4:	4a1b      	ldr	r2, [pc, #108]	; (8011614 <prvAddNewTaskToReadyList+0xc4>)
 80115a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ac:	2201      	movs	r2, #1
 80115ae:	409a      	lsls	r2, r3
 80115b0:	4b19      	ldr	r3, [pc, #100]	; (8011618 <prvAddNewTaskToReadyList+0xc8>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4313      	orrs	r3, r2
 80115b6:	4a18      	ldr	r2, [pc, #96]	; (8011618 <prvAddNewTaskToReadyList+0xc8>)
 80115b8:	6013      	str	r3, [r2, #0]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115be:	4613      	mov	r3, r2
 80115c0:	009b      	lsls	r3, r3, #2
 80115c2:	4413      	add	r3, r2
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	4a15      	ldr	r2, [pc, #84]	; (801161c <prvAddNewTaskToReadyList+0xcc>)
 80115c8:	441a      	add	r2, r3
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	3304      	adds	r3, #4
 80115ce:	4619      	mov	r1, r3
 80115d0:	4610      	mov	r0, r2
 80115d2:	f7fe fecc 	bl	801036e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80115d6:	f000 fff5 	bl	80125c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80115da:	4b0d      	ldr	r3, [pc, #52]	; (8011610 <prvAddNewTaskToReadyList+0xc0>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d00e      	beq.n	8011600 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80115e2:	4b0a      	ldr	r3, [pc, #40]	; (801160c <prvAddNewTaskToReadyList+0xbc>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d207      	bcs.n	8011600 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80115f0:	4b0b      	ldr	r3, [pc, #44]	; (8011620 <prvAddNewTaskToReadyList+0xd0>)
 80115f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115f6:	601a      	str	r2, [r3, #0]
 80115f8:	f3bf 8f4f 	dsb	sy
 80115fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011600:	bf00      	nop
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	24001cdc 	.word	0x24001cdc
 801160c:	24001bdc 	.word	0x24001bdc
 8011610:	24001ce8 	.word	0x24001ce8
 8011614:	24001cf8 	.word	0x24001cf8
 8011618:	24001ce4 	.word	0x24001ce4
 801161c:	24001be0 	.word	0x24001be0
 8011620:	e000ed04 	.word	0xe000ed04

08011624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801162c:	2300      	movs	r3, #0
 801162e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d017      	beq.n	8011666 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011636:	4b13      	ldr	r3, [pc, #76]	; (8011684 <vTaskDelay+0x60>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d00a      	beq.n	8011654 <vTaskDelay+0x30>
	__asm volatile
 801163e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011642:	f383 8811 	msr	BASEPRI, r3
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	f3bf 8f4f 	dsb	sy
 801164e:	60bb      	str	r3, [r7, #8]
}
 8011650:	bf00      	nop
 8011652:	e7fe      	b.n	8011652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011654:	f000 f87a 	bl	801174c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011658:	2100      	movs	r1, #0
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f000 fdf2 	bl	8012244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011660:	f000 f882 	bl	8011768 <xTaskResumeAll>
 8011664:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d107      	bne.n	801167c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801166c:	4b06      	ldr	r3, [pc, #24]	; (8011688 <vTaskDelay+0x64>)
 801166e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011672:	601a      	str	r2, [r3, #0]
 8011674:	f3bf 8f4f 	dsb	sy
 8011678:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801167c:	bf00      	nop
 801167e:	3710      	adds	r7, #16
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	24001d04 	.word	0x24001d04
 8011688:	e000ed04 	.word	0xe000ed04

0801168c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b08a      	sub	sp, #40	; 0x28
 8011690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011692:	2300      	movs	r3, #0
 8011694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011696:	2300      	movs	r3, #0
 8011698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801169a:	463a      	mov	r2, r7
 801169c:	1d39      	adds	r1, r7, #4
 801169e:	f107 0308 	add.w	r3, r7, #8
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7f0 fddc 	bl	8002260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80116a8:	6839      	ldr	r1, [r7, #0]
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	68ba      	ldr	r2, [r7, #8]
 80116ae:	9202      	str	r2, [sp, #8]
 80116b0:	9301      	str	r3, [sp, #4]
 80116b2:	2300      	movs	r3, #0
 80116b4:	9300      	str	r3, [sp, #0]
 80116b6:	2300      	movs	r3, #0
 80116b8:	460a      	mov	r2, r1
 80116ba:	491e      	ldr	r1, [pc, #120]	; (8011734 <vTaskStartScheduler+0xa8>)
 80116bc:	481e      	ldr	r0, [pc, #120]	; (8011738 <vTaskStartScheduler+0xac>)
 80116be:	f7ff fe1d 	bl	80112fc <xTaskCreateStatic>
 80116c2:	4603      	mov	r3, r0
 80116c4:	4a1d      	ldr	r2, [pc, #116]	; (801173c <vTaskStartScheduler+0xb0>)
 80116c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80116c8:	4b1c      	ldr	r3, [pc, #112]	; (801173c <vTaskStartScheduler+0xb0>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d002      	beq.n	80116d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80116d0:	2301      	movs	r3, #1
 80116d2:	617b      	str	r3, [r7, #20]
 80116d4:	e001      	b.n	80116da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80116d6:	2300      	movs	r3, #0
 80116d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d116      	bne.n	801170e <vTaskStartScheduler+0x82>
	__asm volatile
 80116e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e4:	f383 8811 	msr	BASEPRI, r3
 80116e8:	f3bf 8f6f 	isb	sy
 80116ec:	f3bf 8f4f 	dsb	sy
 80116f0:	613b      	str	r3, [r7, #16]
}
 80116f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80116f4:	4b12      	ldr	r3, [pc, #72]	; (8011740 <vTaskStartScheduler+0xb4>)
 80116f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80116fc:	4b11      	ldr	r3, [pc, #68]	; (8011744 <vTaskStartScheduler+0xb8>)
 80116fe:	2201      	movs	r2, #1
 8011700:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011702:	4b11      	ldr	r3, [pc, #68]	; (8011748 <vTaskStartScheduler+0xbc>)
 8011704:	2200      	movs	r2, #0
 8011706:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011708:	f000 fe8a 	bl	8012420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801170c:	e00e      	b.n	801172c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011714:	d10a      	bne.n	801172c <vTaskStartScheduler+0xa0>
	__asm volatile
 8011716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801171a:	f383 8811 	msr	BASEPRI, r3
 801171e:	f3bf 8f6f 	isb	sy
 8011722:	f3bf 8f4f 	dsb	sy
 8011726:	60fb      	str	r3, [r7, #12]
}
 8011728:	bf00      	nop
 801172a:	e7fe      	b.n	801172a <vTaskStartScheduler+0x9e>
}
 801172c:	bf00      	nop
 801172e:	3718      	adds	r7, #24
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	08018248 	.word	0x08018248
 8011738:	08011d21 	.word	0x08011d21
 801173c:	24001d00 	.word	0x24001d00
 8011740:	24001cfc 	.word	0x24001cfc
 8011744:	24001ce8 	.word	0x24001ce8
 8011748:	24001ce0 	.word	0x24001ce0

0801174c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801174c:	b480      	push	{r7}
 801174e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011750:	4b04      	ldr	r3, [pc, #16]	; (8011764 <vTaskSuspendAll+0x18>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	3301      	adds	r3, #1
 8011756:	4a03      	ldr	r2, [pc, #12]	; (8011764 <vTaskSuspendAll+0x18>)
 8011758:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801175a:	bf00      	nop
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr
 8011764:	24001d04 	.word	0x24001d04

08011768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801176e:	2300      	movs	r3, #0
 8011770:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011772:	2300      	movs	r3, #0
 8011774:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011776:	4b41      	ldr	r3, [pc, #260]	; (801187c <xTaskResumeAll+0x114>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d10a      	bne.n	8011794 <xTaskResumeAll+0x2c>
	__asm volatile
 801177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011782:	f383 8811 	msr	BASEPRI, r3
 8011786:	f3bf 8f6f 	isb	sy
 801178a:	f3bf 8f4f 	dsb	sy
 801178e:	603b      	str	r3, [r7, #0]
}
 8011790:	bf00      	nop
 8011792:	e7fe      	b.n	8011792 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011794:	f000 fee6 	bl	8012564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011798:	4b38      	ldr	r3, [pc, #224]	; (801187c <xTaskResumeAll+0x114>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	3b01      	subs	r3, #1
 801179e:	4a37      	ldr	r2, [pc, #220]	; (801187c <xTaskResumeAll+0x114>)
 80117a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117a2:	4b36      	ldr	r3, [pc, #216]	; (801187c <xTaskResumeAll+0x114>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d161      	bne.n	801186e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80117aa:	4b35      	ldr	r3, [pc, #212]	; (8011880 <xTaskResumeAll+0x118>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d05d      	beq.n	801186e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80117b2:	e02e      	b.n	8011812 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117b4:	4b33      	ldr	r3, [pc, #204]	; (8011884 <xTaskResumeAll+0x11c>)
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	68db      	ldr	r3, [r3, #12]
 80117ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	3318      	adds	r3, #24
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7fe fe31 	bl	8010428 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3304      	adds	r3, #4
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7fe fe2c 	bl	8010428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117d4:	2201      	movs	r2, #1
 80117d6:	409a      	lsls	r2, r3
 80117d8:	4b2b      	ldr	r3, [pc, #172]	; (8011888 <xTaskResumeAll+0x120>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	4313      	orrs	r3, r2
 80117de:	4a2a      	ldr	r2, [pc, #168]	; (8011888 <xTaskResumeAll+0x120>)
 80117e0:	6013      	str	r3, [r2, #0]
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e6:	4613      	mov	r3, r2
 80117e8:	009b      	lsls	r3, r3, #2
 80117ea:	4413      	add	r3, r2
 80117ec:	009b      	lsls	r3, r3, #2
 80117ee:	4a27      	ldr	r2, [pc, #156]	; (801188c <xTaskResumeAll+0x124>)
 80117f0:	441a      	add	r2, r3
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	3304      	adds	r3, #4
 80117f6:	4619      	mov	r1, r3
 80117f8:	4610      	mov	r0, r2
 80117fa:	f7fe fdb8 	bl	801036e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011802:	4b23      	ldr	r3, [pc, #140]	; (8011890 <xTaskResumeAll+0x128>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011808:	429a      	cmp	r2, r3
 801180a:	d302      	bcc.n	8011812 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801180c:	4b21      	ldr	r3, [pc, #132]	; (8011894 <xTaskResumeAll+0x12c>)
 801180e:	2201      	movs	r2, #1
 8011810:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011812:	4b1c      	ldr	r3, [pc, #112]	; (8011884 <xTaskResumeAll+0x11c>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d1cc      	bne.n	80117b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d001      	beq.n	8011824 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011820:	f000 fb34 	bl	8011e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011824:	4b1c      	ldr	r3, [pc, #112]	; (8011898 <xTaskResumeAll+0x130>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d010      	beq.n	8011852 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011830:	f000 f858 	bl	80118e4 <xTaskIncrementTick>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d002      	beq.n	8011840 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801183a:	4b16      	ldr	r3, [pc, #88]	; (8011894 <xTaskResumeAll+0x12c>)
 801183c:	2201      	movs	r2, #1
 801183e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	3b01      	subs	r3, #1
 8011844:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1f1      	bne.n	8011830 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801184c:	4b12      	ldr	r3, [pc, #72]	; (8011898 <xTaskResumeAll+0x130>)
 801184e:	2200      	movs	r2, #0
 8011850:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011852:	4b10      	ldr	r3, [pc, #64]	; (8011894 <xTaskResumeAll+0x12c>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d009      	beq.n	801186e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801185a:	2301      	movs	r3, #1
 801185c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801185e:	4b0f      	ldr	r3, [pc, #60]	; (801189c <xTaskResumeAll+0x134>)
 8011860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011864:	601a      	str	r2, [r3, #0]
 8011866:	f3bf 8f4f 	dsb	sy
 801186a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801186e:	f000 fea9 	bl	80125c4 <vPortExitCritical>

	return xAlreadyYielded;
 8011872:	68bb      	ldr	r3, [r7, #8]
}
 8011874:	4618      	mov	r0, r3
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	24001d04 	.word	0x24001d04
 8011880:	24001cdc 	.word	0x24001cdc
 8011884:	24001c9c 	.word	0x24001c9c
 8011888:	24001ce4 	.word	0x24001ce4
 801188c:	24001be0 	.word	0x24001be0
 8011890:	24001bdc 	.word	0x24001bdc
 8011894:	24001cf0 	.word	0x24001cf0
 8011898:	24001cec 	.word	0x24001cec
 801189c:	e000ed04 	.word	0xe000ed04

080118a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80118a6:	4b05      	ldr	r3, [pc, #20]	; (80118bc <xTaskGetTickCount+0x1c>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80118ac:	687b      	ldr	r3, [r7, #4]
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	370c      	adds	r7, #12
 80118b2:	46bd      	mov	sp, r7
 80118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	24001ce0 	.word	0x24001ce0

080118c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118c6:	f000 ff2f 	bl	8012728 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80118ca:	2300      	movs	r3, #0
 80118cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80118ce:	4b04      	ldr	r3, [pc, #16]	; (80118e0 <xTaskGetTickCountFromISR+0x20>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80118d4:	683b      	ldr	r3, [r7, #0]
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
 80118de:	bf00      	nop
 80118e0:	24001ce0 	.word	0x24001ce0

080118e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b086      	sub	sp, #24
 80118e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80118ea:	2300      	movs	r3, #0
 80118ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118ee:	4b4e      	ldr	r3, [pc, #312]	; (8011a28 <xTaskIncrementTick+0x144>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f040 808e 	bne.w	8011a14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80118f8:	4b4c      	ldr	r3, [pc, #304]	; (8011a2c <xTaskIncrementTick+0x148>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	3301      	adds	r3, #1
 80118fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011900:	4a4a      	ldr	r2, [pc, #296]	; (8011a2c <xTaskIncrementTick+0x148>)
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d120      	bne.n	801194e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801190c:	4b48      	ldr	r3, [pc, #288]	; (8011a30 <xTaskIncrementTick+0x14c>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00a      	beq.n	801192c <xTaskIncrementTick+0x48>
	__asm volatile
 8011916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191a:	f383 8811 	msr	BASEPRI, r3
 801191e:	f3bf 8f6f 	isb	sy
 8011922:	f3bf 8f4f 	dsb	sy
 8011926:	603b      	str	r3, [r7, #0]
}
 8011928:	bf00      	nop
 801192a:	e7fe      	b.n	801192a <xTaskIncrementTick+0x46>
 801192c:	4b40      	ldr	r3, [pc, #256]	; (8011a30 <xTaskIncrementTick+0x14c>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	60fb      	str	r3, [r7, #12]
 8011932:	4b40      	ldr	r3, [pc, #256]	; (8011a34 <xTaskIncrementTick+0x150>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4a3e      	ldr	r2, [pc, #248]	; (8011a30 <xTaskIncrementTick+0x14c>)
 8011938:	6013      	str	r3, [r2, #0]
 801193a:	4a3e      	ldr	r2, [pc, #248]	; (8011a34 <xTaskIncrementTick+0x150>)
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	6013      	str	r3, [r2, #0]
 8011940:	4b3d      	ldr	r3, [pc, #244]	; (8011a38 <xTaskIncrementTick+0x154>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	3301      	adds	r3, #1
 8011946:	4a3c      	ldr	r2, [pc, #240]	; (8011a38 <xTaskIncrementTick+0x154>)
 8011948:	6013      	str	r3, [r2, #0]
 801194a:	f000 fa9f 	bl	8011e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801194e:	4b3b      	ldr	r3, [pc, #236]	; (8011a3c <xTaskIncrementTick+0x158>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	693a      	ldr	r2, [r7, #16]
 8011954:	429a      	cmp	r2, r3
 8011956:	d348      	bcc.n	80119ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011958:	4b35      	ldr	r3, [pc, #212]	; (8011a30 <xTaskIncrementTick+0x14c>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d104      	bne.n	801196c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011962:	4b36      	ldr	r3, [pc, #216]	; (8011a3c <xTaskIncrementTick+0x158>)
 8011964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011968:	601a      	str	r2, [r3, #0]
					break;
 801196a:	e03e      	b.n	80119ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801196c:	4b30      	ldr	r3, [pc, #192]	; (8011a30 <xTaskIncrementTick+0x14c>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	68db      	ldr	r3, [r3, #12]
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801197c:	693a      	ldr	r2, [r7, #16]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	429a      	cmp	r2, r3
 8011982:	d203      	bcs.n	801198c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011984:	4a2d      	ldr	r2, [pc, #180]	; (8011a3c <xTaskIncrementTick+0x158>)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801198a:	e02e      	b.n	80119ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	3304      	adds	r3, #4
 8011990:	4618      	mov	r0, r3
 8011992:	f7fe fd49 	bl	8010428 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801199a:	2b00      	cmp	r3, #0
 801199c:	d004      	beq.n	80119a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	3318      	adds	r3, #24
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7fe fd40 	bl	8010428 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ac:	2201      	movs	r2, #1
 80119ae:	409a      	lsls	r2, r3
 80119b0:	4b23      	ldr	r3, [pc, #140]	; (8011a40 <xTaskIncrementTick+0x15c>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4313      	orrs	r3, r2
 80119b6:	4a22      	ldr	r2, [pc, #136]	; (8011a40 <xTaskIncrementTick+0x15c>)
 80119b8:	6013      	str	r3, [r2, #0]
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119be:	4613      	mov	r3, r2
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	4413      	add	r3, r2
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	4a1f      	ldr	r2, [pc, #124]	; (8011a44 <xTaskIncrementTick+0x160>)
 80119c8:	441a      	add	r2, r3
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	3304      	adds	r3, #4
 80119ce:	4619      	mov	r1, r3
 80119d0:	4610      	mov	r0, r2
 80119d2:	f7fe fccc 	bl	801036e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119da:	4b1b      	ldr	r3, [pc, #108]	; (8011a48 <xTaskIncrementTick+0x164>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d3b9      	bcc.n	8011958 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80119e4:	2301      	movs	r3, #1
 80119e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119e8:	e7b6      	b.n	8011958 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80119ea:	4b17      	ldr	r3, [pc, #92]	; (8011a48 <xTaskIncrementTick+0x164>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119f0:	4914      	ldr	r1, [pc, #80]	; (8011a44 <xTaskIncrementTick+0x160>)
 80119f2:	4613      	mov	r3, r2
 80119f4:	009b      	lsls	r3, r3, #2
 80119f6:	4413      	add	r3, r2
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	440b      	add	r3, r1
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d901      	bls.n	8011a06 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8011a02:	2301      	movs	r3, #1
 8011a04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011a06:	4b11      	ldr	r3, [pc, #68]	; (8011a4c <xTaskIncrementTick+0x168>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d007      	beq.n	8011a1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	617b      	str	r3, [r7, #20]
 8011a12:	e004      	b.n	8011a1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011a14:	4b0e      	ldr	r3, [pc, #56]	; (8011a50 <xTaskIncrementTick+0x16c>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	3301      	adds	r3, #1
 8011a1a:	4a0d      	ldr	r2, [pc, #52]	; (8011a50 <xTaskIncrementTick+0x16c>)
 8011a1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011a1e:	697b      	ldr	r3, [r7, #20]
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3718      	adds	r7, #24
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	24001d04 	.word	0x24001d04
 8011a2c:	24001ce0 	.word	0x24001ce0
 8011a30:	24001c94 	.word	0x24001c94
 8011a34:	24001c98 	.word	0x24001c98
 8011a38:	24001cf4 	.word	0x24001cf4
 8011a3c:	24001cfc 	.word	0x24001cfc
 8011a40:	24001ce4 	.word	0x24001ce4
 8011a44:	24001be0 	.word	0x24001be0
 8011a48:	24001bdc 	.word	0x24001bdc
 8011a4c:	24001cf0 	.word	0x24001cf0
 8011a50:	24001cec 	.word	0x24001cec

08011a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011a54:	b480      	push	{r7}
 8011a56:	b087      	sub	sp, #28
 8011a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011a5a:	4b27      	ldr	r3, [pc, #156]	; (8011af8 <vTaskSwitchContext+0xa4>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d003      	beq.n	8011a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011a62:	4b26      	ldr	r3, [pc, #152]	; (8011afc <vTaskSwitchContext+0xa8>)
 8011a64:	2201      	movs	r2, #1
 8011a66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011a68:	e03f      	b.n	8011aea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8011a6a:	4b24      	ldr	r3, [pc, #144]	; (8011afc <vTaskSwitchContext+0xa8>)
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a70:	4b23      	ldr	r3, [pc, #140]	; (8011b00 <vTaskSwitchContext+0xac>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	fab3 f383 	clz	r3, r3
 8011a7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011a7e:	7afb      	ldrb	r3, [r7, #11]
 8011a80:	f1c3 031f 	rsb	r3, r3, #31
 8011a84:	617b      	str	r3, [r7, #20]
 8011a86:	491f      	ldr	r1, [pc, #124]	; (8011b04 <vTaskSwitchContext+0xb0>)
 8011a88:	697a      	ldr	r2, [r7, #20]
 8011a8a:	4613      	mov	r3, r2
 8011a8c:	009b      	lsls	r3, r3, #2
 8011a8e:	4413      	add	r3, r2
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	440b      	add	r3, r1
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d10a      	bne.n	8011ab0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9e:	f383 8811 	msr	BASEPRI, r3
 8011aa2:	f3bf 8f6f 	isb	sy
 8011aa6:	f3bf 8f4f 	dsb	sy
 8011aaa:	607b      	str	r3, [r7, #4]
}
 8011aac:	bf00      	nop
 8011aae:	e7fe      	b.n	8011aae <vTaskSwitchContext+0x5a>
 8011ab0:	697a      	ldr	r2, [r7, #20]
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	4413      	add	r3, r2
 8011ab8:	009b      	lsls	r3, r3, #2
 8011aba:	4a12      	ldr	r2, [pc, #72]	; (8011b04 <vTaskSwitchContext+0xb0>)
 8011abc:	4413      	add	r3, r2
 8011abe:	613b      	str	r3, [r7, #16]
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	685a      	ldr	r2, [r3, #4]
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	605a      	str	r2, [r3, #4]
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	685a      	ldr	r2, [r3, #4]
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	3308      	adds	r3, #8
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d104      	bne.n	8011ae0 <vTaskSwitchContext+0x8c>
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	685a      	ldr	r2, [r3, #4]
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	605a      	str	r2, [r3, #4]
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	68db      	ldr	r3, [r3, #12]
 8011ae6:	4a08      	ldr	r2, [pc, #32]	; (8011b08 <vTaskSwitchContext+0xb4>)
 8011ae8:	6013      	str	r3, [r2, #0]
}
 8011aea:	bf00      	nop
 8011aec:	371c      	adds	r7, #28
 8011aee:	46bd      	mov	sp, r7
 8011af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af4:	4770      	bx	lr
 8011af6:	bf00      	nop
 8011af8:	24001d04 	.word	0x24001d04
 8011afc:	24001cf0 	.word	0x24001cf0
 8011b00:	24001ce4 	.word	0x24001ce4
 8011b04:	24001be0 	.word	0x24001be0
 8011b08:	24001bdc 	.word	0x24001bdc

08011b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d10a      	bne.n	8011b32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b20:	f383 8811 	msr	BASEPRI, r3
 8011b24:	f3bf 8f6f 	isb	sy
 8011b28:	f3bf 8f4f 	dsb	sy
 8011b2c:	60fb      	str	r3, [r7, #12]
}
 8011b2e:	bf00      	nop
 8011b30:	e7fe      	b.n	8011b30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b32:	4b07      	ldr	r3, [pc, #28]	; (8011b50 <vTaskPlaceOnEventList+0x44>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	3318      	adds	r3, #24
 8011b38:	4619      	mov	r1, r3
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7fe fc3b 	bl	80103b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b40:	2101      	movs	r1, #1
 8011b42:	6838      	ldr	r0, [r7, #0]
 8011b44:	f000 fb7e 	bl	8012244 <prvAddCurrentTaskToDelayedList>
}
 8011b48:	bf00      	nop
 8011b4a:	3710      	adds	r7, #16
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}
 8011b50:	24001bdc 	.word	0x24001bdc

08011b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b086      	sub	sp, #24
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	68db      	ldr	r3, [r3, #12]
 8011b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d10a      	bne.n	8011b80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6e:	f383 8811 	msr	BASEPRI, r3
 8011b72:	f3bf 8f6f 	isb	sy
 8011b76:	f3bf 8f4f 	dsb	sy
 8011b7a:	60fb      	str	r3, [r7, #12]
}
 8011b7c:	bf00      	nop
 8011b7e:	e7fe      	b.n	8011b7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	3318      	adds	r3, #24
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fe fc4f 	bl	8010428 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b8a:	4b1d      	ldr	r3, [pc, #116]	; (8011c00 <xTaskRemoveFromEventList+0xac>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d11c      	bne.n	8011bcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	3304      	adds	r3, #4
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fe fc46 	bl	8010428 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	409a      	lsls	r2, r3
 8011ba4:	4b17      	ldr	r3, [pc, #92]	; (8011c04 <xTaskRemoveFromEventList+0xb0>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	4a16      	ldr	r2, [pc, #88]	; (8011c04 <xTaskRemoveFromEventList+0xb0>)
 8011bac:	6013      	str	r3, [r2, #0]
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4413      	add	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	4a13      	ldr	r2, [pc, #76]	; (8011c08 <xTaskRemoveFromEventList+0xb4>)
 8011bbc:	441a      	add	r2, r3
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	3304      	adds	r3, #4
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	4610      	mov	r0, r2
 8011bc6:	f7fe fbd2 	bl	801036e <vListInsertEnd>
 8011bca:	e005      	b.n	8011bd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	3318      	adds	r3, #24
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	480e      	ldr	r0, [pc, #56]	; (8011c0c <xTaskRemoveFromEventList+0xb8>)
 8011bd4:	f7fe fbcb 	bl	801036e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011bd8:	693b      	ldr	r3, [r7, #16]
 8011bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bdc:	4b0c      	ldr	r3, [pc, #48]	; (8011c10 <xTaskRemoveFromEventList+0xbc>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d905      	bls.n	8011bf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011be6:	2301      	movs	r3, #1
 8011be8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011bea:	4b0a      	ldr	r3, [pc, #40]	; (8011c14 <xTaskRemoveFromEventList+0xc0>)
 8011bec:	2201      	movs	r2, #1
 8011bee:	601a      	str	r2, [r3, #0]
 8011bf0:	e001      	b.n	8011bf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011bf6:	697b      	ldr	r3, [r7, #20]
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3718      	adds	r7, #24
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	24001d04 	.word	0x24001d04
 8011c04:	24001ce4 	.word	0x24001ce4
 8011c08:	24001be0 	.word	0x24001be0
 8011c0c:	24001c9c 	.word	0x24001c9c
 8011c10:	24001bdc 	.word	0x24001bdc
 8011c14:	24001cf0 	.word	0x24001cf0

08011c18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011c20:	4b06      	ldr	r3, [pc, #24]	; (8011c3c <vTaskInternalSetTimeOutState+0x24>)
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011c28:	4b05      	ldr	r3, [pc, #20]	; (8011c40 <vTaskInternalSetTimeOutState+0x28>)
 8011c2a:	681a      	ldr	r2, [r3, #0]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	605a      	str	r2, [r3, #4]
}
 8011c30:	bf00      	nop
 8011c32:	370c      	adds	r7, #12
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr
 8011c3c:	24001cf4 	.word	0x24001cf4
 8011c40:	24001ce0 	.word	0x24001ce0

08011c44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b088      	sub	sp, #32
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d10a      	bne.n	8011c6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c58:	f383 8811 	msr	BASEPRI, r3
 8011c5c:	f3bf 8f6f 	isb	sy
 8011c60:	f3bf 8f4f 	dsb	sy
 8011c64:	613b      	str	r3, [r7, #16]
}
 8011c66:	bf00      	nop
 8011c68:	e7fe      	b.n	8011c68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d10a      	bne.n	8011c86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c74:	f383 8811 	msr	BASEPRI, r3
 8011c78:	f3bf 8f6f 	isb	sy
 8011c7c:	f3bf 8f4f 	dsb	sy
 8011c80:	60fb      	str	r3, [r7, #12]
}
 8011c82:	bf00      	nop
 8011c84:	e7fe      	b.n	8011c84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011c86:	f000 fc6d 	bl	8012564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011c8a:	4b1d      	ldr	r3, [pc, #116]	; (8011d00 <xTaskCheckForTimeOut+0xbc>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	69ba      	ldr	r2, [r7, #24]
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ca2:	d102      	bne.n	8011caa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	61fb      	str	r3, [r7, #28]
 8011ca8:	e023      	b.n	8011cf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	4b15      	ldr	r3, [pc, #84]	; (8011d04 <xTaskCheckForTimeOut+0xc0>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d007      	beq.n	8011cc6 <xTaskCheckForTimeOut+0x82>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	69ba      	ldr	r2, [r7, #24]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d302      	bcc.n	8011cc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	61fb      	str	r3, [r7, #28]
 8011cc4:	e015      	b.n	8011cf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	697a      	ldr	r2, [r7, #20]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d20b      	bcs.n	8011ce8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	1ad2      	subs	r2, r2, r3
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f7ff ff9b 	bl	8011c18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	61fb      	str	r3, [r7, #28]
 8011ce6:	e004      	b.n	8011cf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	2200      	movs	r2, #0
 8011cec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011cee:	2301      	movs	r3, #1
 8011cf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011cf2:	f000 fc67 	bl	80125c4 <vPortExitCritical>

	return xReturn;
 8011cf6:	69fb      	ldr	r3, [r7, #28]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3720      	adds	r7, #32
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	24001ce0 	.word	0x24001ce0
 8011d04:	24001cf4 	.word	0x24001cf4

08011d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011d08:	b480      	push	{r7}
 8011d0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011d0c:	4b03      	ldr	r3, [pc, #12]	; (8011d1c <vTaskMissedYield+0x14>)
 8011d0e:	2201      	movs	r2, #1
 8011d10:	601a      	str	r2, [r3, #0]
}
 8011d12:	bf00      	nop
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr
 8011d1c:	24001cf0 	.word	0x24001cf0

08011d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011d28:	f000 f852 	bl	8011dd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011d2c:	4b06      	ldr	r3, [pc, #24]	; (8011d48 <prvIdleTask+0x28>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d9f9      	bls.n	8011d28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011d34:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <prvIdleTask+0x2c>)
 8011d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d3a:	601a      	str	r2, [r3, #0]
 8011d3c:	f3bf 8f4f 	dsb	sy
 8011d40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011d44:	e7f0      	b.n	8011d28 <prvIdleTask+0x8>
 8011d46:	bf00      	nop
 8011d48:	24001be0 	.word	0x24001be0
 8011d4c:	e000ed04 	.word	0xe000ed04

08011d50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b082      	sub	sp, #8
 8011d54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d56:	2300      	movs	r3, #0
 8011d58:	607b      	str	r3, [r7, #4]
 8011d5a:	e00c      	b.n	8011d76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011d5c:	687a      	ldr	r2, [r7, #4]
 8011d5e:	4613      	mov	r3, r2
 8011d60:	009b      	lsls	r3, r3, #2
 8011d62:	4413      	add	r3, r2
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	4a12      	ldr	r2, [pc, #72]	; (8011db0 <prvInitialiseTaskLists+0x60>)
 8011d68:	4413      	add	r3, r2
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7fe fad2 	bl	8010314 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	3301      	adds	r3, #1
 8011d74:	607b      	str	r3, [r7, #4]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2b06      	cmp	r3, #6
 8011d7a:	d9ef      	bls.n	8011d5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011d7c:	480d      	ldr	r0, [pc, #52]	; (8011db4 <prvInitialiseTaskLists+0x64>)
 8011d7e:	f7fe fac9 	bl	8010314 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011d82:	480d      	ldr	r0, [pc, #52]	; (8011db8 <prvInitialiseTaskLists+0x68>)
 8011d84:	f7fe fac6 	bl	8010314 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011d88:	480c      	ldr	r0, [pc, #48]	; (8011dbc <prvInitialiseTaskLists+0x6c>)
 8011d8a:	f7fe fac3 	bl	8010314 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011d8e:	480c      	ldr	r0, [pc, #48]	; (8011dc0 <prvInitialiseTaskLists+0x70>)
 8011d90:	f7fe fac0 	bl	8010314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011d94:	480b      	ldr	r0, [pc, #44]	; (8011dc4 <prvInitialiseTaskLists+0x74>)
 8011d96:	f7fe fabd 	bl	8010314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011d9a:	4b0b      	ldr	r3, [pc, #44]	; (8011dc8 <prvInitialiseTaskLists+0x78>)
 8011d9c:	4a05      	ldr	r2, [pc, #20]	; (8011db4 <prvInitialiseTaskLists+0x64>)
 8011d9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011da0:	4b0a      	ldr	r3, [pc, #40]	; (8011dcc <prvInitialiseTaskLists+0x7c>)
 8011da2:	4a05      	ldr	r2, [pc, #20]	; (8011db8 <prvInitialiseTaskLists+0x68>)
 8011da4:	601a      	str	r2, [r3, #0]
}
 8011da6:	bf00      	nop
 8011da8:	3708      	adds	r7, #8
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	24001be0 	.word	0x24001be0
 8011db4:	24001c6c 	.word	0x24001c6c
 8011db8:	24001c80 	.word	0x24001c80
 8011dbc:	24001c9c 	.word	0x24001c9c
 8011dc0:	24001cb0 	.word	0x24001cb0
 8011dc4:	24001cc8 	.word	0x24001cc8
 8011dc8:	24001c94 	.word	0x24001c94
 8011dcc:	24001c98 	.word	0x24001c98

08011dd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011dd6:	e019      	b.n	8011e0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011dd8:	f000 fbc4 	bl	8012564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ddc:	4b10      	ldr	r3, [pc, #64]	; (8011e20 <prvCheckTasksWaitingTermination+0x50>)
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	3304      	adds	r3, #4
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fe fb1d 	bl	8010428 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011dee:	4b0d      	ldr	r3, [pc, #52]	; (8011e24 <prvCheckTasksWaitingTermination+0x54>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	3b01      	subs	r3, #1
 8011df4:	4a0b      	ldr	r2, [pc, #44]	; (8011e24 <prvCheckTasksWaitingTermination+0x54>)
 8011df6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011df8:	4b0b      	ldr	r3, [pc, #44]	; (8011e28 <prvCheckTasksWaitingTermination+0x58>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	3b01      	subs	r3, #1
 8011dfe:	4a0a      	ldr	r2, [pc, #40]	; (8011e28 <prvCheckTasksWaitingTermination+0x58>)
 8011e00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011e02:	f000 fbdf 	bl	80125c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 f810 	bl	8011e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e0c:	4b06      	ldr	r3, [pc, #24]	; (8011e28 <prvCheckTasksWaitingTermination+0x58>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1e1      	bne.n	8011dd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011e14:	bf00      	nop
 8011e16:	bf00      	nop
 8011e18:	3708      	adds	r7, #8
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
 8011e1e:	bf00      	nop
 8011e20:	24001cb0 	.word	0x24001cb0
 8011e24:	24001cdc 	.word	0x24001cdc
 8011e28:	24001cc4 	.word	0x24001cc4

08011e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d108      	bne.n	8011e50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e42:	4618      	mov	r0, r3
 8011e44:	f000 fd7c 	bl	8012940 <vPortFree>
				vPortFree( pxTCB );
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f000 fd79 	bl	8012940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011e4e:	e018      	b.n	8011e82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d103      	bne.n	8011e62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 fd70 	bl	8012940 <vPortFree>
	}
 8011e60:	e00f      	b.n	8011e82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011e68:	2b02      	cmp	r3, #2
 8011e6a:	d00a      	beq.n	8011e82 <prvDeleteTCB+0x56>
	__asm volatile
 8011e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e70:	f383 8811 	msr	BASEPRI, r3
 8011e74:	f3bf 8f6f 	isb	sy
 8011e78:	f3bf 8f4f 	dsb	sy
 8011e7c:	60fb      	str	r3, [r7, #12]
}
 8011e7e:	bf00      	nop
 8011e80:	e7fe      	b.n	8011e80 <prvDeleteTCB+0x54>
	}
 8011e82:	bf00      	nop
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
	...

08011e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e92:	4b0c      	ldr	r3, [pc, #48]	; (8011ec4 <prvResetNextTaskUnblockTime+0x38>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d104      	bne.n	8011ea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e9c:	4b0a      	ldr	r3, [pc, #40]	; (8011ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8011e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011ea4:	e008      	b.n	8011eb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ea6:	4b07      	ldr	r3, [pc, #28]	; (8011ec4 <prvResetNextTaskUnblockTime+0x38>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	4a04      	ldr	r2, [pc, #16]	; (8011ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8011eb6:	6013      	str	r3, [r2, #0]
}
 8011eb8:	bf00      	nop
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr
 8011ec4:	24001c94 	.word	0x24001c94
 8011ec8:	24001cfc 	.word	0x24001cfc

08011ecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ecc:	b480      	push	{r7}
 8011ece:	b083      	sub	sp, #12
 8011ed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011ed2:	4b0b      	ldr	r3, [pc, #44]	; (8011f00 <xTaskGetSchedulerState+0x34>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011eda:	2301      	movs	r3, #1
 8011edc:	607b      	str	r3, [r7, #4]
 8011ede:	e008      	b.n	8011ef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ee0:	4b08      	ldr	r3, [pc, #32]	; (8011f04 <xTaskGetSchedulerState+0x38>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d102      	bne.n	8011eee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011ee8:	2302      	movs	r3, #2
 8011eea:	607b      	str	r3, [r7, #4]
 8011eec:	e001      	b.n	8011ef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011ef2:	687b      	ldr	r3, [r7, #4]
	}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	370c      	adds	r7, #12
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr
 8011f00:	24001ce8 	.word	0x24001ce8
 8011f04:	24001d04 	.word	0x24001d04

08011f08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011f14:	2300      	movs	r3, #0
 8011f16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d05e      	beq.n	8011fdc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f22:	4b31      	ldr	r3, [pc, #196]	; (8011fe8 <xTaskPriorityInherit+0xe0>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d24e      	bcs.n	8011fca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	699b      	ldr	r3, [r3, #24]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	db06      	blt.n	8011f42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f34:	4b2c      	ldr	r3, [pc, #176]	; (8011fe8 <xTaskPriorityInherit+0xe0>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f3a:	f1c3 0207 	rsb	r2, r3, #7
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	6959      	ldr	r1, [r3, #20]
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f4a:	4613      	mov	r3, r2
 8011f4c:	009b      	lsls	r3, r3, #2
 8011f4e:	4413      	add	r3, r2
 8011f50:	009b      	lsls	r3, r3, #2
 8011f52:	4a26      	ldr	r2, [pc, #152]	; (8011fec <xTaskPriorityInherit+0xe4>)
 8011f54:	4413      	add	r3, r2
 8011f56:	4299      	cmp	r1, r3
 8011f58:	d12f      	bne.n	8011fba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	3304      	adds	r3, #4
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7fe fa62 	bl	8010428 <uxListRemove>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d10a      	bne.n	8011f80 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f6e:	2201      	movs	r2, #1
 8011f70:	fa02 f303 	lsl.w	r3, r2, r3
 8011f74:	43da      	mvns	r2, r3
 8011f76:	4b1e      	ldr	r3, [pc, #120]	; (8011ff0 <xTaskPriorityInherit+0xe8>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	4013      	ands	r3, r2
 8011f7c:	4a1c      	ldr	r2, [pc, #112]	; (8011ff0 <xTaskPriorityInherit+0xe8>)
 8011f7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f80:	4b19      	ldr	r3, [pc, #100]	; (8011fe8 <xTaskPriorityInherit+0xe0>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f8e:	2201      	movs	r2, #1
 8011f90:	409a      	lsls	r2, r3
 8011f92:	4b17      	ldr	r3, [pc, #92]	; (8011ff0 <xTaskPriorityInherit+0xe8>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	4313      	orrs	r3, r2
 8011f98:	4a15      	ldr	r2, [pc, #84]	; (8011ff0 <xTaskPriorityInherit+0xe8>)
 8011f9a:	6013      	str	r3, [r2, #0]
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fa0:	4613      	mov	r3, r2
 8011fa2:	009b      	lsls	r3, r3, #2
 8011fa4:	4413      	add	r3, r2
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	4a10      	ldr	r2, [pc, #64]	; (8011fec <xTaskPriorityInherit+0xe4>)
 8011faa:	441a      	add	r2, r3
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	3304      	adds	r3, #4
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	4610      	mov	r0, r2
 8011fb4:	f7fe f9db 	bl	801036e <vListInsertEnd>
 8011fb8:	e004      	b.n	8011fc4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011fba:	4b0b      	ldr	r3, [pc, #44]	; (8011fe8 <xTaskPriorityInherit+0xe0>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	60fb      	str	r3, [r7, #12]
 8011fc8:	e008      	b.n	8011fdc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011fce:	4b06      	ldr	r3, [pc, #24]	; (8011fe8 <xTaskPriorityInherit+0xe0>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d201      	bcs.n	8011fdc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011fd8:	2301      	movs	r3, #1
 8011fda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
	}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3710      	adds	r7, #16
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	24001bdc 	.word	0x24001bdc
 8011fec:	24001be0 	.word	0x24001be0
 8011ff0:	24001ce4 	.word	0x24001ce4

08011ff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b086      	sub	sp, #24
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012000:	2300      	movs	r3, #0
 8012002:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d06e      	beq.n	80120e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801200a:	4b3a      	ldr	r3, [pc, #232]	; (80120f4 <xTaskPriorityDisinherit+0x100>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	693a      	ldr	r2, [r7, #16]
 8012010:	429a      	cmp	r2, r3
 8012012:	d00a      	beq.n	801202a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012018:	f383 8811 	msr	BASEPRI, r3
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f3bf 8f4f 	dsb	sy
 8012024:	60fb      	str	r3, [r7, #12]
}
 8012026:	bf00      	nop
 8012028:	e7fe      	b.n	8012028 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801202e:	2b00      	cmp	r3, #0
 8012030:	d10a      	bne.n	8012048 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012036:	f383 8811 	msr	BASEPRI, r3
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	60bb      	str	r3, [r7, #8]
}
 8012044:	bf00      	nop
 8012046:	e7fe      	b.n	8012046 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801204c:	1e5a      	subs	r2, r3, #1
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801205a:	429a      	cmp	r2, r3
 801205c:	d044      	beq.n	80120e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012062:	2b00      	cmp	r3, #0
 8012064:	d140      	bne.n	80120e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	3304      	adds	r3, #4
 801206a:	4618      	mov	r0, r3
 801206c:	f7fe f9dc 	bl	8010428 <uxListRemove>
 8012070:	4603      	mov	r3, r0
 8012072:	2b00      	cmp	r3, #0
 8012074:	d115      	bne.n	80120a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801207a:	491f      	ldr	r1, [pc, #124]	; (80120f8 <xTaskPriorityDisinherit+0x104>)
 801207c:	4613      	mov	r3, r2
 801207e:	009b      	lsls	r3, r3, #2
 8012080:	4413      	add	r3, r2
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	440b      	add	r3, r1
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d10a      	bne.n	80120a2 <xTaskPriorityDisinherit+0xae>
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012090:	2201      	movs	r2, #1
 8012092:	fa02 f303 	lsl.w	r3, r2, r3
 8012096:	43da      	mvns	r2, r3
 8012098:	4b18      	ldr	r3, [pc, #96]	; (80120fc <xTaskPriorityDisinherit+0x108>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	4013      	ands	r3, r2
 801209e:	4a17      	ldr	r2, [pc, #92]	; (80120fc <xTaskPriorityDisinherit+0x108>)
 80120a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ae:	f1c3 0207 	rsb	r2, r3, #7
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ba:	2201      	movs	r2, #1
 80120bc:	409a      	lsls	r2, r3
 80120be:	4b0f      	ldr	r3, [pc, #60]	; (80120fc <xTaskPriorityDisinherit+0x108>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	4313      	orrs	r3, r2
 80120c4:	4a0d      	ldr	r2, [pc, #52]	; (80120fc <xTaskPriorityDisinherit+0x108>)
 80120c6:	6013      	str	r3, [r2, #0]
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120cc:	4613      	mov	r3, r2
 80120ce:	009b      	lsls	r3, r3, #2
 80120d0:	4413      	add	r3, r2
 80120d2:	009b      	lsls	r3, r3, #2
 80120d4:	4a08      	ldr	r2, [pc, #32]	; (80120f8 <xTaskPriorityDisinherit+0x104>)
 80120d6:	441a      	add	r2, r3
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	3304      	adds	r3, #4
 80120dc:	4619      	mov	r1, r3
 80120de:	4610      	mov	r0, r2
 80120e0:	f7fe f945 	bl	801036e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80120e4:	2301      	movs	r3, #1
 80120e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80120e8:	697b      	ldr	r3, [r7, #20]
	}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3718      	adds	r7, #24
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	24001bdc 	.word	0x24001bdc
 80120f8:	24001be0 	.word	0x24001be0
 80120fc:	24001ce4 	.word	0x24001ce4

08012100 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012100:	b580      	push	{r7, lr}
 8012102:	b088      	sub	sp, #32
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801210e:	2301      	movs	r3, #1
 8012110:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d077      	beq.n	8012208 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012118:	69bb      	ldr	r3, [r7, #24]
 801211a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801211c:	2b00      	cmp	r3, #0
 801211e:	d10a      	bne.n	8012136 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012124:	f383 8811 	msr	BASEPRI, r3
 8012128:	f3bf 8f6f 	isb	sy
 801212c:	f3bf 8f4f 	dsb	sy
 8012130:	60fb      	str	r3, [r7, #12]
}
 8012132:	bf00      	nop
 8012134:	e7fe      	b.n	8012134 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012136:	69bb      	ldr	r3, [r7, #24]
 8012138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801213a:	683a      	ldr	r2, [r7, #0]
 801213c:	429a      	cmp	r2, r3
 801213e:	d902      	bls.n	8012146 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	61fb      	str	r3, [r7, #28]
 8012144:	e002      	b.n	801214c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801214a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801214c:	69bb      	ldr	r3, [r7, #24]
 801214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012150:	69fa      	ldr	r2, [r7, #28]
 8012152:	429a      	cmp	r2, r3
 8012154:	d058      	beq.n	8012208 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801215a:	697a      	ldr	r2, [r7, #20]
 801215c:	429a      	cmp	r2, r3
 801215e:	d153      	bne.n	8012208 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012160:	4b2b      	ldr	r3, [pc, #172]	; (8012210 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	69ba      	ldr	r2, [r7, #24]
 8012166:	429a      	cmp	r2, r3
 8012168:	d10a      	bne.n	8012180 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801216e:	f383 8811 	msr	BASEPRI, r3
 8012172:	f3bf 8f6f 	isb	sy
 8012176:	f3bf 8f4f 	dsb	sy
 801217a:	60bb      	str	r3, [r7, #8]
}
 801217c:	bf00      	nop
 801217e:	e7fe      	b.n	801217e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012184:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012186:	69bb      	ldr	r3, [r7, #24]
 8012188:	69fa      	ldr	r2, [r7, #28]
 801218a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	699b      	ldr	r3, [r3, #24]
 8012190:	2b00      	cmp	r3, #0
 8012192:	db04      	blt.n	801219e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	f1c3 0207 	rsb	r2, r3, #7
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	6959      	ldr	r1, [r3, #20]
 80121a2:	693a      	ldr	r2, [r7, #16]
 80121a4:	4613      	mov	r3, r2
 80121a6:	009b      	lsls	r3, r3, #2
 80121a8:	4413      	add	r3, r2
 80121aa:	009b      	lsls	r3, r3, #2
 80121ac:	4a19      	ldr	r2, [pc, #100]	; (8012214 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80121ae:	4413      	add	r3, r2
 80121b0:	4299      	cmp	r1, r3
 80121b2:	d129      	bne.n	8012208 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121b4:	69bb      	ldr	r3, [r7, #24]
 80121b6:	3304      	adds	r3, #4
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fe f935 	bl	8010428 <uxListRemove>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d10a      	bne.n	80121da <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80121c4:	69bb      	ldr	r3, [r7, #24]
 80121c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121c8:	2201      	movs	r2, #1
 80121ca:	fa02 f303 	lsl.w	r3, r2, r3
 80121ce:	43da      	mvns	r2, r3
 80121d0:	4b11      	ldr	r3, [pc, #68]	; (8012218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	4013      	ands	r3, r2
 80121d6:	4a10      	ldr	r2, [pc, #64]	; (8012218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80121d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121de:	2201      	movs	r2, #1
 80121e0:	409a      	lsls	r2, r3
 80121e2:	4b0d      	ldr	r3, [pc, #52]	; (8012218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4313      	orrs	r3, r2
 80121e8:	4a0b      	ldr	r2, [pc, #44]	; (8012218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80121ea:	6013      	str	r3, [r2, #0]
 80121ec:	69bb      	ldr	r3, [r7, #24]
 80121ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121f0:	4613      	mov	r3, r2
 80121f2:	009b      	lsls	r3, r3, #2
 80121f4:	4413      	add	r3, r2
 80121f6:	009b      	lsls	r3, r3, #2
 80121f8:	4a06      	ldr	r2, [pc, #24]	; (8012214 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80121fa:	441a      	add	r2, r3
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	3304      	adds	r3, #4
 8012200:	4619      	mov	r1, r3
 8012202:	4610      	mov	r0, r2
 8012204:	f7fe f8b3 	bl	801036e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012208:	bf00      	nop
 801220a:	3720      	adds	r7, #32
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	24001bdc 	.word	0x24001bdc
 8012214:	24001be0 	.word	0x24001be0
 8012218:	24001ce4 	.word	0x24001ce4

0801221c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801221c:	b480      	push	{r7}
 801221e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012220:	4b07      	ldr	r3, [pc, #28]	; (8012240 <pvTaskIncrementMutexHeldCount+0x24>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d004      	beq.n	8012232 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012228:	4b05      	ldr	r3, [pc, #20]	; (8012240 <pvTaskIncrementMutexHeldCount+0x24>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801222e:	3201      	adds	r2, #1
 8012230:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012232:	4b03      	ldr	r3, [pc, #12]	; (8012240 <pvTaskIncrementMutexHeldCount+0x24>)
 8012234:	681b      	ldr	r3, [r3, #0]
	}
 8012236:	4618      	mov	r0, r3
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr
 8012240:	24001bdc 	.word	0x24001bdc

08012244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801224e:	4b29      	ldr	r3, [pc, #164]	; (80122f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012254:	4b28      	ldr	r3, [pc, #160]	; (80122f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	3304      	adds	r3, #4
 801225a:	4618      	mov	r0, r3
 801225c:	f7fe f8e4 	bl	8010428 <uxListRemove>
 8012260:	4603      	mov	r3, r0
 8012262:	2b00      	cmp	r3, #0
 8012264:	d10b      	bne.n	801227e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012266:	4b24      	ldr	r3, [pc, #144]	; (80122f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801226c:	2201      	movs	r2, #1
 801226e:	fa02 f303 	lsl.w	r3, r2, r3
 8012272:	43da      	mvns	r2, r3
 8012274:	4b21      	ldr	r3, [pc, #132]	; (80122fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4013      	ands	r3, r2
 801227a:	4a20      	ldr	r2, [pc, #128]	; (80122fc <prvAddCurrentTaskToDelayedList+0xb8>)
 801227c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012284:	d10a      	bne.n	801229c <prvAddCurrentTaskToDelayedList+0x58>
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d007      	beq.n	801229c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801228c:	4b1a      	ldr	r3, [pc, #104]	; (80122f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	3304      	adds	r3, #4
 8012292:	4619      	mov	r1, r3
 8012294:	481a      	ldr	r0, [pc, #104]	; (8012300 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012296:	f7fe f86a 	bl	801036e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801229a:	e026      	b.n	80122ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801229c:	68fa      	ldr	r2, [r7, #12]
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	4413      	add	r3, r2
 80122a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80122a4:	4b14      	ldr	r3, [pc, #80]	; (80122f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	68ba      	ldr	r2, [r7, #8]
 80122aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80122ac:	68ba      	ldr	r2, [r7, #8]
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d209      	bcs.n	80122c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80122b4:	4b13      	ldr	r3, [pc, #76]	; (8012304 <prvAddCurrentTaskToDelayedList+0xc0>)
 80122b6:	681a      	ldr	r2, [r3, #0]
 80122b8:	4b0f      	ldr	r3, [pc, #60]	; (80122f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	3304      	adds	r3, #4
 80122be:	4619      	mov	r1, r3
 80122c0:	4610      	mov	r0, r2
 80122c2:	f7fe f878 	bl	80103b6 <vListInsert>
}
 80122c6:	e010      	b.n	80122ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80122c8:	4b0f      	ldr	r3, [pc, #60]	; (8012308 <prvAddCurrentTaskToDelayedList+0xc4>)
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	4b0a      	ldr	r3, [pc, #40]	; (80122f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	3304      	adds	r3, #4
 80122d2:	4619      	mov	r1, r3
 80122d4:	4610      	mov	r0, r2
 80122d6:	f7fe f86e 	bl	80103b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80122da:	4b0c      	ldr	r3, [pc, #48]	; (801230c <prvAddCurrentTaskToDelayedList+0xc8>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	68ba      	ldr	r2, [r7, #8]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d202      	bcs.n	80122ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80122e4:	4a09      	ldr	r2, [pc, #36]	; (801230c <prvAddCurrentTaskToDelayedList+0xc8>)
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	6013      	str	r3, [r2, #0]
}
 80122ea:	bf00      	nop
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	24001ce0 	.word	0x24001ce0
 80122f8:	24001bdc 	.word	0x24001bdc
 80122fc:	24001ce4 	.word	0x24001ce4
 8012300:	24001cc8 	.word	0x24001cc8
 8012304:	24001c98 	.word	0x24001c98
 8012308:	24001c94 	.word	0x24001c94
 801230c:	24001cfc 	.word	0x24001cfc

08012310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012310:	b480      	push	{r7}
 8012312:	b085      	sub	sp, #20
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	3b04      	subs	r3, #4
 8012320:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	3b04      	subs	r3, #4
 801232e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	f023 0201 	bic.w	r2, r3, #1
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	3b04      	subs	r3, #4
 801233e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012340:	4a0c      	ldr	r2, [pc, #48]	; (8012374 <pxPortInitialiseStack+0x64>)
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	3b14      	subs	r3, #20
 801234a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	3b04      	subs	r3, #4
 8012356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	f06f 0202 	mvn.w	r2, #2
 801235e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	3b20      	subs	r3, #32
 8012364:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012366:	68fb      	ldr	r3, [r7, #12]
}
 8012368:	4618      	mov	r0, r3
 801236a:	3714      	adds	r7, #20
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr
 8012374:	08012379 	.word	0x08012379

08012378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012378:	b480      	push	{r7}
 801237a:	b085      	sub	sp, #20
 801237c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801237e:	2300      	movs	r3, #0
 8012380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012382:	4b12      	ldr	r3, [pc, #72]	; (80123cc <prvTaskExitError+0x54>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801238a:	d00a      	beq.n	80123a2 <prvTaskExitError+0x2a>
	__asm volatile
 801238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012390:	f383 8811 	msr	BASEPRI, r3
 8012394:	f3bf 8f6f 	isb	sy
 8012398:	f3bf 8f4f 	dsb	sy
 801239c:	60fb      	str	r3, [r7, #12]
}
 801239e:	bf00      	nop
 80123a0:	e7fe      	b.n	80123a0 <prvTaskExitError+0x28>
	__asm volatile
 80123a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a6:	f383 8811 	msr	BASEPRI, r3
 80123aa:	f3bf 8f6f 	isb	sy
 80123ae:	f3bf 8f4f 	dsb	sy
 80123b2:	60bb      	str	r3, [r7, #8]
}
 80123b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80123b6:	bf00      	nop
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d0fc      	beq.n	80123b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80123be:	bf00      	nop
 80123c0:	bf00      	nop
 80123c2:	3714      	adds	r7, #20
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr
 80123cc:	24000088 	.word	0x24000088

080123d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80123d0:	4b07      	ldr	r3, [pc, #28]	; (80123f0 <pxCurrentTCBConst2>)
 80123d2:	6819      	ldr	r1, [r3, #0]
 80123d4:	6808      	ldr	r0, [r1, #0]
 80123d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123da:	f380 8809 	msr	PSP, r0
 80123de:	f3bf 8f6f 	isb	sy
 80123e2:	f04f 0000 	mov.w	r0, #0
 80123e6:	f380 8811 	msr	BASEPRI, r0
 80123ea:	4770      	bx	lr
 80123ec:	f3af 8000 	nop.w

080123f0 <pxCurrentTCBConst2>:
 80123f0:	24001bdc 	.word	0x24001bdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80123f4:	bf00      	nop
 80123f6:	bf00      	nop

080123f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80123f8:	4808      	ldr	r0, [pc, #32]	; (801241c <prvPortStartFirstTask+0x24>)
 80123fa:	6800      	ldr	r0, [r0, #0]
 80123fc:	6800      	ldr	r0, [r0, #0]
 80123fe:	f380 8808 	msr	MSP, r0
 8012402:	f04f 0000 	mov.w	r0, #0
 8012406:	f380 8814 	msr	CONTROL, r0
 801240a:	b662      	cpsie	i
 801240c:	b661      	cpsie	f
 801240e:	f3bf 8f4f 	dsb	sy
 8012412:	f3bf 8f6f 	isb	sy
 8012416:	df00      	svc	0
 8012418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801241a:	bf00      	nop
 801241c:	e000ed08 	.word	0xe000ed08

08012420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b086      	sub	sp, #24
 8012424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012426:	4b46      	ldr	r3, [pc, #280]	; (8012540 <xPortStartScheduler+0x120>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	4a46      	ldr	r2, [pc, #280]	; (8012544 <xPortStartScheduler+0x124>)
 801242c:	4293      	cmp	r3, r2
 801242e:	d10a      	bne.n	8012446 <xPortStartScheduler+0x26>
	__asm volatile
 8012430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012434:	f383 8811 	msr	BASEPRI, r3
 8012438:	f3bf 8f6f 	isb	sy
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	613b      	str	r3, [r7, #16]
}
 8012442:	bf00      	nop
 8012444:	e7fe      	b.n	8012444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012446:	4b3e      	ldr	r3, [pc, #248]	; (8012540 <xPortStartScheduler+0x120>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	4a3f      	ldr	r2, [pc, #252]	; (8012548 <xPortStartScheduler+0x128>)
 801244c:	4293      	cmp	r3, r2
 801244e:	d10a      	bne.n	8012466 <xPortStartScheduler+0x46>
	__asm volatile
 8012450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012454:	f383 8811 	msr	BASEPRI, r3
 8012458:	f3bf 8f6f 	isb	sy
 801245c:	f3bf 8f4f 	dsb	sy
 8012460:	60fb      	str	r3, [r7, #12]
}
 8012462:	bf00      	nop
 8012464:	e7fe      	b.n	8012464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012466:	4b39      	ldr	r3, [pc, #228]	; (801254c <xPortStartScheduler+0x12c>)
 8012468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	b2db      	uxtb	r3, r3
 8012470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	22ff      	movs	r2, #255	; 0xff
 8012476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	b2db      	uxtb	r3, r3
 801247e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012480:	78fb      	ldrb	r3, [r7, #3]
 8012482:	b2db      	uxtb	r3, r3
 8012484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012488:	b2da      	uxtb	r2, r3
 801248a:	4b31      	ldr	r3, [pc, #196]	; (8012550 <xPortStartScheduler+0x130>)
 801248c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801248e:	4b31      	ldr	r3, [pc, #196]	; (8012554 <xPortStartScheduler+0x134>)
 8012490:	2207      	movs	r2, #7
 8012492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012494:	e009      	b.n	80124aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012496:	4b2f      	ldr	r3, [pc, #188]	; (8012554 <xPortStartScheduler+0x134>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	3b01      	subs	r3, #1
 801249c:	4a2d      	ldr	r2, [pc, #180]	; (8012554 <xPortStartScheduler+0x134>)
 801249e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80124a0:	78fb      	ldrb	r3, [r7, #3]
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	005b      	lsls	r3, r3, #1
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80124aa:	78fb      	ldrb	r3, [r7, #3]
 80124ac:	b2db      	uxtb	r3, r3
 80124ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124b2:	2b80      	cmp	r3, #128	; 0x80
 80124b4:	d0ef      	beq.n	8012496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80124b6:	4b27      	ldr	r3, [pc, #156]	; (8012554 <xPortStartScheduler+0x134>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f1c3 0307 	rsb	r3, r3, #7
 80124be:	2b04      	cmp	r3, #4
 80124c0:	d00a      	beq.n	80124d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80124c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c6:	f383 8811 	msr	BASEPRI, r3
 80124ca:	f3bf 8f6f 	isb	sy
 80124ce:	f3bf 8f4f 	dsb	sy
 80124d2:	60bb      	str	r3, [r7, #8]
}
 80124d4:	bf00      	nop
 80124d6:	e7fe      	b.n	80124d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80124d8:	4b1e      	ldr	r3, [pc, #120]	; (8012554 <xPortStartScheduler+0x134>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	021b      	lsls	r3, r3, #8
 80124de:	4a1d      	ldr	r2, [pc, #116]	; (8012554 <xPortStartScheduler+0x134>)
 80124e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80124e2:	4b1c      	ldr	r3, [pc, #112]	; (8012554 <xPortStartScheduler+0x134>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80124ea:	4a1a      	ldr	r2, [pc, #104]	; (8012554 <xPortStartScheduler+0x134>)
 80124ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	b2da      	uxtb	r2, r3
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80124f6:	4b18      	ldr	r3, [pc, #96]	; (8012558 <xPortStartScheduler+0x138>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	4a17      	ldr	r2, [pc, #92]	; (8012558 <xPortStartScheduler+0x138>)
 80124fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012502:	4b15      	ldr	r3, [pc, #84]	; (8012558 <xPortStartScheduler+0x138>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	4a14      	ldr	r2, [pc, #80]	; (8012558 <xPortStartScheduler+0x138>)
 8012508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801250c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801250e:	f000 f8dd 	bl	80126cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012512:	4b12      	ldr	r3, [pc, #72]	; (801255c <xPortStartScheduler+0x13c>)
 8012514:	2200      	movs	r2, #0
 8012516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012518:	f000 f8fc 	bl	8012714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801251c:	4b10      	ldr	r3, [pc, #64]	; (8012560 <xPortStartScheduler+0x140>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4a0f      	ldr	r2, [pc, #60]	; (8012560 <xPortStartScheduler+0x140>)
 8012522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012528:	f7ff ff66 	bl	80123f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801252c:	f7ff fa92 	bl	8011a54 <vTaskSwitchContext>
	prvTaskExitError();
 8012530:	f7ff ff22 	bl	8012378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012534:	2300      	movs	r3, #0
}
 8012536:	4618      	mov	r0, r3
 8012538:	3718      	adds	r7, #24
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	e000ed00 	.word	0xe000ed00
 8012544:	410fc271 	.word	0x410fc271
 8012548:	410fc270 	.word	0x410fc270
 801254c:	e000e400 	.word	0xe000e400
 8012550:	24001d08 	.word	0x24001d08
 8012554:	24001d0c 	.word	0x24001d0c
 8012558:	e000ed20 	.word	0xe000ed20
 801255c:	24000088 	.word	0x24000088
 8012560:	e000ef34 	.word	0xe000ef34

08012564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
	__asm volatile
 801256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256e:	f383 8811 	msr	BASEPRI, r3
 8012572:	f3bf 8f6f 	isb	sy
 8012576:	f3bf 8f4f 	dsb	sy
 801257a:	607b      	str	r3, [r7, #4]
}
 801257c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801257e:	4b0f      	ldr	r3, [pc, #60]	; (80125bc <vPortEnterCritical+0x58>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	3301      	adds	r3, #1
 8012584:	4a0d      	ldr	r2, [pc, #52]	; (80125bc <vPortEnterCritical+0x58>)
 8012586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012588:	4b0c      	ldr	r3, [pc, #48]	; (80125bc <vPortEnterCritical+0x58>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	2b01      	cmp	r3, #1
 801258e:	d10f      	bne.n	80125b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012590:	4b0b      	ldr	r3, [pc, #44]	; (80125c0 <vPortEnterCritical+0x5c>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	b2db      	uxtb	r3, r3
 8012596:	2b00      	cmp	r3, #0
 8012598:	d00a      	beq.n	80125b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801259e:	f383 8811 	msr	BASEPRI, r3
 80125a2:	f3bf 8f6f 	isb	sy
 80125a6:	f3bf 8f4f 	dsb	sy
 80125aa:	603b      	str	r3, [r7, #0]
}
 80125ac:	bf00      	nop
 80125ae:	e7fe      	b.n	80125ae <vPortEnterCritical+0x4a>
	}
}
 80125b0:	bf00      	nop
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr
 80125bc:	24000088 	.word	0x24000088
 80125c0:	e000ed04 	.word	0xe000ed04

080125c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80125c4:	b480      	push	{r7}
 80125c6:	b083      	sub	sp, #12
 80125c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80125ca:	4b12      	ldr	r3, [pc, #72]	; (8012614 <vPortExitCritical+0x50>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d10a      	bne.n	80125e8 <vPortExitCritical+0x24>
	__asm volatile
 80125d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d6:	f383 8811 	msr	BASEPRI, r3
 80125da:	f3bf 8f6f 	isb	sy
 80125de:	f3bf 8f4f 	dsb	sy
 80125e2:	607b      	str	r3, [r7, #4]
}
 80125e4:	bf00      	nop
 80125e6:	e7fe      	b.n	80125e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80125e8:	4b0a      	ldr	r3, [pc, #40]	; (8012614 <vPortExitCritical+0x50>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	3b01      	subs	r3, #1
 80125ee:	4a09      	ldr	r2, [pc, #36]	; (8012614 <vPortExitCritical+0x50>)
 80125f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80125f2:	4b08      	ldr	r3, [pc, #32]	; (8012614 <vPortExitCritical+0x50>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d105      	bne.n	8012606 <vPortExitCritical+0x42>
 80125fa:	2300      	movs	r3, #0
 80125fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	f383 8811 	msr	BASEPRI, r3
}
 8012604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012606:	bf00      	nop
 8012608:	370c      	adds	r7, #12
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	24000088 	.word	0x24000088
	...

08012620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012620:	f3ef 8009 	mrs	r0, PSP
 8012624:	f3bf 8f6f 	isb	sy
 8012628:	4b15      	ldr	r3, [pc, #84]	; (8012680 <pxCurrentTCBConst>)
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	f01e 0f10 	tst.w	lr, #16
 8012630:	bf08      	it	eq
 8012632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801263a:	6010      	str	r0, [r2, #0]
 801263c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012644:	f380 8811 	msr	BASEPRI, r0
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	f7ff fa00 	bl	8011a54 <vTaskSwitchContext>
 8012654:	f04f 0000 	mov.w	r0, #0
 8012658:	f380 8811 	msr	BASEPRI, r0
 801265c:	bc09      	pop	{r0, r3}
 801265e:	6819      	ldr	r1, [r3, #0]
 8012660:	6808      	ldr	r0, [r1, #0]
 8012662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012666:	f01e 0f10 	tst.w	lr, #16
 801266a:	bf08      	it	eq
 801266c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012670:	f380 8809 	msr	PSP, r0
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	4770      	bx	lr
 801267a:	bf00      	nop
 801267c:	f3af 8000 	nop.w

08012680 <pxCurrentTCBConst>:
 8012680:	24001bdc 	.word	0x24001bdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012684:	bf00      	nop
 8012686:	bf00      	nop

08012688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
	__asm volatile
 801268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012692:	f383 8811 	msr	BASEPRI, r3
 8012696:	f3bf 8f6f 	isb	sy
 801269a:	f3bf 8f4f 	dsb	sy
 801269e:	607b      	str	r3, [r7, #4]
}
 80126a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80126a2:	f7ff f91f 	bl	80118e4 <xTaskIncrementTick>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d003      	beq.n	80126b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80126ac:	4b06      	ldr	r3, [pc, #24]	; (80126c8 <xPortSysTickHandler+0x40>)
 80126ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126b2:	601a      	str	r2, [r3, #0]
 80126b4:	2300      	movs	r3, #0
 80126b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	f383 8811 	msr	BASEPRI, r3
}
 80126be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80126c0:	bf00      	nop
 80126c2:	3708      	adds	r7, #8
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	e000ed04 	.word	0xe000ed04

080126cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80126cc:	b480      	push	{r7}
 80126ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80126d0:	4b0b      	ldr	r3, [pc, #44]	; (8012700 <vPortSetupTimerInterrupt+0x34>)
 80126d2:	2200      	movs	r2, #0
 80126d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80126d6:	4b0b      	ldr	r3, [pc, #44]	; (8012704 <vPortSetupTimerInterrupt+0x38>)
 80126d8:	2200      	movs	r2, #0
 80126da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80126dc:	4b0a      	ldr	r3, [pc, #40]	; (8012708 <vPortSetupTimerInterrupt+0x3c>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a0a      	ldr	r2, [pc, #40]	; (801270c <vPortSetupTimerInterrupt+0x40>)
 80126e2:	fba2 2303 	umull	r2, r3, r2, r3
 80126e6:	099b      	lsrs	r3, r3, #6
 80126e8:	4a09      	ldr	r2, [pc, #36]	; (8012710 <vPortSetupTimerInterrupt+0x44>)
 80126ea:	3b01      	subs	r3, #1
 80126ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80126ee:	4b04      	ldr	r3, [pc, #16]	; (8012700 <vPortSetupTimerInterrupt+0x34>)
 80126f0:	2207      	movs	r2, #7
 80126f2:	601a      	str	r2, [r3, #0]
}
 80126f4:	bf00      	nop
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop
 8012700:	e000e010 	.word	0xe000e010
 8012704:	e000e018 	.word	0xe000e018
 8012708:	24000064 	.word	0x24000064
 801270c:	10624dd3 	.word	0x10624dd3
 8012710:	e000e014 	.word	0xe000e014

08012714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012724 <vPortEnableVFP+0x10>
 8012718:	6801      	ldr	r1, [r0, #0]
 801271a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801271e:	6001      	str	r1, [r0, #0]
 8012720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012722:	bf00      	nop
 8012724:	e000ed88 	.word	0xe000ed88

08012728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012728:	b480      	push	{r7}
 801272a:	b085      	sub	sp, #20
 801272c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801272e:	f3ef 8305 	mrs	r3, IPSR
 8012732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	2b0f      	cmp	r3, #15
 8012738:	d914      	bls.n	8012764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801273a:	4a17      	ldr	r2, [pc, #92]	; (8012798 <vPortValidateInterruptPriority+0x70>)
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	4413      	add	r3, r2
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012744:	4b15      	ldr	r3, [pc, #84]	; (801279c <vPortValidateInterruptPriority+0x74>)
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	7afa      	ldrb	r2, [r7, #11]
 801274a:	429a      	cmp	r2, r3
 801274c:	d20a      	bcs.n	8012764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012752:	f383 8811 	msr	BASEPRI, r3
 8012756:	f3bf 8f6f 	isb	sy
 801275a:	f3bf 8f4f 	dsb	sy
 801275e:	607b      	str	r3, [r7, #4]
}
 8012760:	bf00      	nop
 8012762:	e7fe      	b.n	8012762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012764:	4b0e      	ldr	r3, [pc, #56]	; (80127a0 <vPortValidateInterruptPriority+0x78>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801276c:	4b0d      	ldr	r3, [pc, #52]	; (80127a4 <vPortValidateInterruptPriority+0x7c>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	429a      	cmp	r2, r3
 8012772:	d90a      	bls.n	801278a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012778:	f383 8811 	msr	BASEPRI, r3
 801277c:	f3bf 8f6f 	isb	sy
 8012780:	f3bf 8f4f 	dsb	sy
 8012784:	603b      	str	r3, [r7, #0]
}
 8012786:	bf00      	nop
 8012788:	e7fe      	b.n	8012788 <vPortValidateInterruptPriority+0x60>
	}
 801278a:	bf00      	nop
 801278c:	3714      	adds	r7, #20
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop
 8012798:	e000e3f0 	.word	0xe000e3f0
 801279c:	24001d08 	.word	0x24001d08
 80127a0:	e000ed0c 	.word	0xe000ed0c
 80127a4:	24001d0c 	.word	0x24001d0c

080127a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b08a      	sub	sp, #40	; 0x28
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80127b0:	2300      	movs	r3, #0
 80127b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80127b4:	f7fe ffca 	bl	801174c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80127b8:	4b5b      	ldr	r3, [pc, #364]	; (8012928 <pvPortMalloc+0x180>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d101      	bne.n	80127c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80127c0:	f000 f920 	bl	8012a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80127c4:	4b59      	ldr	r3, [pc, #356]	; (801292c <pvPortMalloc+0x184>)
 80127c6:	681a      	ldr	r2, [r3, #0]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	4013      	ands	r3, r2
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f040 8093 	bne.w	80128f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d01d      	beq.n	8012814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80127d8:	2208      	movs	r2, #8
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	4413      	add	r3, r2
 80127de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f003 0307 	and.w	r3, r3, #7
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d014      	beq.n	8012814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f023 0307 	bic.w	r3, r3, #7
 80127f0:	3308      	adds	r3, #8
 80127f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f003 0307 	and.w	r3, r3, #7
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d00a      	beq.n	8012814 <pvPortMalloc+0x6c>
	__asm volatile
 80127fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012802:	f383 8811 	msr	BASEPRI, r3
 8012806:	f3bf 8f6f 	isb	sy
 801280a:	f3bf 8f4f 	dsb	sy
 801280e:	617b      	str	r3, [r7, #20]
}
 8012810:	bf00      	nop
 8012812:	e7fe      	b.n	8012812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d06e      	beq.n	80128f8 <pvPortMalloc+0x150>
 801281a:	4b45      	ldr	r3, [pc, #276]	; (8012930 <pvPortMalloc+0x188>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	429a      	cmp	r2, r3
 8012822:	d869      	bhi.n	80128f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012824:	4b43      	ldr	r3, [pc, #268]	; (8012934 <pvPortMalloc+0x18c>)
 8012826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012828:	4b42      	ldr	r3, [pc, #264]	; (8012934 <pvPortMalloc+0x18c>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801282e:	e004      	b.n	801283a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	429a      	cmp	r2, r3
 8012842:	d903      	bls.n	801284c <pvPortMalloc+0xa4>
 8012844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d1f1      	bne.n	8012830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801284c:	4b36      	ldr	r3, [pc, #216]	; (8012928 <pvPortMalloc+0x180>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012852:	429a      	cmp	r2, r3
 8012854:	d050      	beq.n	80128f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012856:	6a3b      	ldr	r3, [r7, #32]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	2208      	movs	r2, #8
 801285c:	4413      	add	r3, r2
 801285e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	6a3b      	ldr	r3, [r7, #32]
 8012866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286a:	685a      	ldr	r2, [r3, #4]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	1ad2      	subs	r2, r2, r3
 8012870:	2308      	movs	r3, #8
 8012872:	005b      	lsls	r3, r3, #1
 8012874:	429a      	cmp	r2, r3
 8012876:	d91f      	bls.n	80128b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	4413      	add	r3, r2
 801287e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012880:	69bb      	ldr	r3, [r7, #24]
 8012882:	f003 0307 	and.w	r3, r3, #7
 8012886:	2b00      	cmp	r3, #0
 8012888:	d00a      	beq.n	80128a0 <pvPortMalloc+0xf8>
	__asm volatile
 801288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801288e:	f383 8811 	msr	BASEPRI, r3
 8012892:	f3bf 8f6f 	isb	sy
 8012896:	f3bf 8f4f 	dsb	sy
 801289a:	613b      	str	r3, [r7, #16]
}
 801289c:	bf00      	nop
 801289e:	e7fe      	b.n	801289e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80128a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a2:	685a      	ldr	r2, [r3, #4]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	1ad2      	subs	r2, r2, r3
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80128ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80128b2:	69b8      	ldr	r0, [r7, #24]
 80128b4:	f000 f908 	bl	8012ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80128b8:	4b1d      	ldr	r3, [pc, #116]	; (8012930 <pvPortMalloc+0x188>)
 80128ba:	681a      	ldr	r2, [r3, #0]
 80128bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128be:	685b      	ldr	r3, [r3, #4]
 80128c0:	1ad3      	subs	r3, r2, r3
 80128c2:	4a1b      	ldr	r2, [pc, #108]	; (8012930 <pvPortMalloc+0x188>)
 80128c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80128c6:	4b1a      	ldr	r3, [pc, #104]	; (8012930 <pvPortMalloc+0x188>)
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	4b1b      	ldr	r3, [pc, #108]	; (8012938 <pvPortMalloc+0x190>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d203      	bcs.n	80128da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80128d2:	4b17      	ldr	r3, [pc, #92]	; (8012930 <pvPortMalloc+0x188>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	4a18      	ldr	r2, [pc, #96]	; (8012938 <pvPortMalloc+0x190>)
 80128d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80128da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128dc:	685a      	ldr	r2, [r3, #4]
 80128de:	4b13      	ldr	r3, [pc, #76]	; (801292c <pvPortMalloc+0x184>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	431a      	orrs	r2, r3
 80128e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80128e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ea:	2200      	movs	r2, #0
 80128ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80128ee:	4b13      	ldr	r3, [pc, #76]	; (801293c <pvPortMalloc+0x194>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	3301      	adds	r3, #1
 80128f4:	4a11      	ldr	r2, [pc, #68]	; (801293c <pvPortMalloc+0x194>)
 80128f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80128f8:	f7fe ff36 	bl	8011768 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80128fc:	69fb      	ldr	r3, [r7, #28]
 80128fe:	f003 0307 	and.w	r3, r3, #7
 8012902:	2b00      	cmp	r3, #0
 8012904:	d00a      	beq.n	801291c <pvPortMalloc+0x174>
	__asm volatile
 8012906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801290a:	f383 8811 	msr	BASEPRI, r3
 801290e:	f3bf 8f6f 	isb	sy
 8012912:	f3bf 8f4f 	dsb	sy
 8012916:	60fb      	str	r3, [r7, #12]
}
 8012918:	bf00      	nop
 801291a:	e7fe      	b.n	801291a <pvPortMalloc+0x172>
	return pvReturn;
 801291c:	69fb      	ldr	r3, [r7, #28]
}
 801291e:	4618      	mov	r0, r3
 8012920:	3728      	adds	r7, #40	; 0x28
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	24005918 	.word	0x24005918
 801292c:	2400592c 	.word	0x2400592c
 8012930:	2400591c 	.word	0x2400591c
 8012934:	24005910 	.word	0x24005910
 8012938:	24005920 	.word	0x24005920
 801293c:	24005924 	.word	0x24005924

08012940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b086      	sub	sp, #24
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d04d      	beq.n	80129ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012952:	2308      	movs	r3, #8
 8012954:	425b      	negs	r3, r3
 8012956:	697a      	ldr	r2, [r7, #20]
 8012958:	4413      	add	r3, r2
 801295a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	685a      	ldr	r2, [r3, #4]
 8012964:	4b24      	ldr	r3, [pc, #144]	; (80129f8 <vPortFree+0xb8>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4013      	ands	r3, r2
 801296a:	2b00      	cmp	r3, #0
 801296c:	d10a      	bne.n	8012984 <vPortFree+0x44>
	__asm volatile
 801296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012972:	f383 8811 	msr	BASEPRI, r3
 8012976:	f3bf 8f6f 	isb	sy
 801297a:	f3bf 8f4f 	dsb	sy
 801297e:	60fb      	str	r3, [r7, #12]
}
 8012980:	bf00      	nop
 8012982:	e7fe      	b.n	8012982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d00a      	beq.n	80129a2 <vPortFree+0x62>
	__asm volatile
 801298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012990:	f383 8811 	msr	BASEPRI, r3
 8012994:	f3bf 8f6f 	isb	sy
 8012998:	f3bf 8f4f 	dsb	sy
 801299c:	60bb      	str	r3, [r7, #8]
}
 801299e:	bf00      	nop
 80129a0:	e7fe      	b.n	80129a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	685a      	ldr	r2, [r3, #4]
 80129a6:	4b14      	ldr	r3, [pc, #80]	; (80129f8 <vPortFree+0xb8>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4013      	ands	r3, r2
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d01e      	beq.n	80129ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d11a      	bne.n	80129ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	685a      	ldr	r2, [r3, #4]
 80129bc:	4b0e      	ldr	r3, [pc, #56]	; (80129f8 <vPortFree+0xb8>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	43db      	mvns	r3, r3
 80129c2:	401a      	ands	r2, r3
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80129c8:	f7fe fec0 	bl	801174c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	685a      	ldr	r2, [r3, #4]
 80129d0:	4b0a      	ldr	r3, [pc, #40]	; (80129fc <vPortFree+0xbc>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	4413      	add	r3, r2
 80129d6:	4a09      	ldr	r2, [pc, #36]	; (80129fc <vPortFree+0xbc>)
 80129d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80129da:	6938      	ldr	r0, [r7, #16]
 80129dc:	f000 f874 	bl	8012ac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80129e0:	4b07      	ldr	r3, [pc, #28]	; (8012a00 <vPortFree+0xc0>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	3301      	adds	r3, #1
 80129e6:	4a06      	ldr	r2, [pc, #24]	; (8012a00 <vPortFree+0xc0>)
 80129e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80129ea:	f7fe febd 	bl	8011768 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80129ee:	bf00      	nop
 80129f0:	3718      	adds	r7, #24
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	2400592c 	.word	0x2400592c
 80129fc:	2400591c 	.word	0x2400591c
 8012a00:	24005928 	.word	0x24005928

08012a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012a04:	b480      	push	{r7}
 8012a06:	b085      	sub	sp, #20
 8012a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012a0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012a10:	4b27      	ldr	r3, [pc, #156]	; (8012ab0 <prvHeapInit+0xac>)
 8012a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	f003 0307 	and.w	r3, r3, #7
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d00c      	beq.n	8012a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	3307      	adds	r3, #7
 8012a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	f023 0307 	bic.w	r3, r3, #7
 8012a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012a2c:	68ba      	ldr	r2, [r7, #8]
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	1ad3      	subs	r3, r2, r3
 8012a32:	4a1f      	ldr	r2, [pc, #124]	; (8012ab0 <prvHeapInit+0xac>)
 8012a34:	4413      	add	r3, r2
 8012a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012a3c:	4a1d      	ldr	r2, [pc, #116]	; (8012ab4 <prvHeapInit+0xb0>)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012a42:	4b1c      	ldr	r3, [pc, #112]	; (8012ab4 <prvHeapInit+0xb0>)
 8012a44:	2200      	movs	r2, #0
 8012a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	68ba      	ldr	r2, [r7, #8]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012a50:	2208      	movs	r2, #8
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	1a9b      	subs	r3, r3, r2
 8012a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	f023 0307 	bic.w	r3, r3, #7
 8012a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	4a15      	ldr	r2, [pc, #84]	; (8012ab8 <prvHeapInit+0xb4>)
 8012a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012a66:	4b14      	ldr	r3, [pc, #80]	; (8012ab8 <prvHeapInit+0xb4>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012a6e:	4b12      	ldr	r3, [pc, #72]	; (8012ab8 <prvHeapInit+0xb4>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2200      	movs	r2, #0
 8012a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	68fa      	ldr	r2, [r7, #12]
 8012a7e:	1ad2      	subs	r2, r2, r3
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012a84:	4b0c      	ldr	r3, [pc, #48]	; (8012ab8 <prvHeapInit+0xb4>)
 8012a86:	681a      	ldr	r2, [r3, #0]
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	4a0a      	ldr	r2, [pc, #40]	; (8012abc <prvHeapInit+0xb8>)
 8012a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	4a09      	ldr	r2, [pc, #36]	; (8012ac0 <prvHeapInit+0xbc>)
 8012a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012a9c:	4b09      	ldr	r3, [pc, #36]	; (8012ac4 <prvHeapInit+0xc0>)
 8012a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012aa2:	601a      	str	r2, [r3, #0]
}
 8012aa4:	bf00      	nop
 8012aa6:	3714      	adds	r7, #20
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr
 8012ab0:	24001d10 	.word	0x24001d10
 8012ab4:	24005910 	.word	0x24005910
 8012ab8:	24005918 	.word	0x24005918
 8012abc:	24005920 	.word	0x24005920
 8012ac0:	2400591c 	.word	0x2400591c
 8012ac4:	2400592c 	.word	0x2400592c

08012ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b085      	sub	sp, #20
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012ad0:	4b28      	ldr	r3, [pc, #160]	; (8012b74 <prvInsertBlockIntoFreeList+0xac>)
 8012ad2:	60fb      	str	r3, [r7, #12]
 8012ad4:	e002      	b.n	8012adc <prvInsertBlockIntoFreeList+0x14>
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	60fb      	str	r3, [r7, #12]
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d8f7      	bhi.n	8012ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	68ba      	ldr	r2, [r7, #8]
 8012af0:	4413      	add	r3, r2
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d108      	bne.n	8012b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	685a      	ldr	r2, [r3, #4]
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	441a      	add	r2, r3
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	68ba      	ldr	r2, [r7, #8]
 8012b14:	441a      	add	r2, r3
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d118      	bne.n	8012b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	681a      	ldr	r2, [r3, #0]
 8012b22:	4b15      	ldr	r3, [pc, #84]	; (8012b78 <prvInsertBlockIntoFreeList+0xb0>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d00d      	beq.n	8012b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	685a      	ldr	r2, [r3, #4]
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	441a      	add	r2, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	681a      	ldr	r2, [r3, #0]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	601a      	str	r2, [r3, #0]
 8012b44:	e008      	b.n	8012b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012b46:	4b0c      	ldr	r3, [pc, #48]	; (8012b78 <prvInsertBlockIntoFreeList+0xb0>)
 8012b48:	681a      	ldr	r2, [r3, #0]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	601a      	str	r2, [r3, #0]
 8012b4e:	e003      	b.n	8012b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	681a      	ldr	r2, [r3, #0]
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012b58:	68fa      	ldr	r2, [r7, #12]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d002      	beq.n	8012b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	687a      	ldr	r2, [r7, #4]
 8012b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b66:	bf00      	nop
 8012b68:	3714      	adds	r7, #20
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop
 8012b74:	24005910 	.word	0x24005910
 8012b78:	24005918 	.word	0x24005918

08012b7c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b084      	sub	sp, #16
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012b86:	f002 f9cd 	bl	8014f24 <sys_timeouts_sleeptime>
 8012b8a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b92:	d10b      	bne.n	8012bac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012b94:	4813      	ldr	r0, [pc, #76]	; (8012be4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012b96:	f005 fa98 	bl	80180ca <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	6839      	ldr	r1, [r7, #0]
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f005 fa0a 	bl	8017fb8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012ba4:	480f      	ldr	r0, [pc, #60]	; (8012be4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012ba6:	f005 fa81 	bl	80180ac <sys_mutex_lock>
    return;
 8012baa:	e018      	b.n	8012bde <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d102      	bne.n	8012bb8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012bb2:	f002 f97d 	bl	8014eb0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012bb6:	e7e6      	b.n	8012b86 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012bb8:	480a      	ldr	r0, [pc, #40]	; (8012be4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012bba:	f005 fa86 	bl	80180ca <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	6839      	ldr	r1, [r7, #0]
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f005 f9f8 	bl	8017fb8 <sys_arch_mbox_fetch>
 8012bc8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012bca:	4806      	ldr	r0, [pc, #24]	; (8012be4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012bcc:	f005 fa6e 	bl	80180ac <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012bd6:	d102      	bne.n	8012bde <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012bd8:	f002 f96a 	bl	8014eb0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012bdc:	e7d3      	b.n	8012b86 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012bde:	3710      	adds	r7, #16
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	2400667c 	.word	0x2400667c

08012be8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b084      	sub	sp, #16
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012bf0:	4810      	ldr	r0, [pc, #64]	; (8012c34 <tcpip_thread+0x4c>)
 8012bf2:	f005 fa5b 	bl	80180ac <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012bf6:	4b10      	ldr	r3, [pc, #64]	; (8012c38 <tcpip_thread+0x50>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d005      	beq.n	8012c0a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012bfe:	4b0e      	ldr	r3, [pc, #56]	; (8012c38 <tcpip_thread+0x50>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	4a0e      	ldr	r2, [pc, #56]	; (8012c3c <tcpip_thread+0x54>)
 8012c04:	6812      	ldr	r2, [r2, #0]
 8012c06:	4610      	mov	r0, r2
 8012c08:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012c0a:	f107 030c 	add.w	r3, r7, #12
 8012c0e:	4619      	mov	r1, r3
 8012c10:	480b      	ldr	r0, [pc, #44]	; (8012c40 <tcpip_thread+0x58>)
 8012c12:	f7ff ffb3 	bl	8012b7c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d106      	bne.n	8012c2a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012c1c:	4b09      	ldr	r3, [pc, #36]	; (8012c44 <tcpip_thread+0x5c>)
 8012c1e:	2291      	movs	r2, #145	; 0x91
 8012c20:	4909      	ldr	r1, [pc, #36]	; (8012c48 <tcpip_thread+0x60>)
 8012c22:	480a      	ldr	r0, [pc, #40]	; (8012c4c <tcpip_thread+0x64>)
 8012c24:	f7ed fd3e 	bl	80006a4 <iprintf>
      continue;
 8012c28:	e003      	b.n	8012c32 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f000 f80f 	bl	8012c50 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012c32:	e7ea      	b.n	8012c0a <tcpip_thread+0x22>
 8012c34:	2400667c 	.word	0x2400667c
 8012c38:	24005930 	.word	0x24005930
 8012c3c:	24005934 	.word	0x24005934
 8012c40:	24005938 	.word	0x24005938
 8012c44:	08018250 	.word	0x08018250
 8012c48:	08018280 	.word	0x08018280
 8012c4c:	080182a0 	.word	0x080182a0

08012c50 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b082      	sub	sp, #8
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	2b02      	cmp	r3, #2
 8012c5e:	d026      	beq.n	8012cae <tcpip_thread_handle_msg+0x5e>
 8012c60:	2b02      	cmp	r3, #2
 8012c62:	dc2b      	bgt.n	8012cbc <tcpip_thread_handle_msg+0x6c>
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d002      	beq.n	8012c6e <tcpip_thread_handle_msg+0x1e>
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	d015      	beq.n	8012c98 <tcpip_thread_handle_msg+0x48>
 8012c6c:	e026      	b.n	8012cbc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	6850      	ldr	r0, [r2, #4]
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	6892      	ldr	r2, [r2, #8]
 8012c7a:	4611      	mov	r1, r2
 8012c7c:	4798      	blx	r3
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d004      	beq.n	8012c8e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f001 fd15 	bl	80146b8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012c8e:	6879      	ldr	r1, [r7, #4]
 8012c90:	2007      	movs	r0, #7
 8012c92:	f000 fed1 	bl	8013a38 <memp_free>
      break;
 8012c96:	e018      	b.n	8012cca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	6892      	ldr	r2, [r2, #8]
 8012ca0:	4610      	mov	r0, r2
 8012ca2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012ca4:	6879      	ldr	r1, [r7, #4]
 8012ca6:	2006      	movs	r0, #6
 8012ca8:	f000 fec6 	bl	8013a38 <memp_free>
      break;
 8012cac:	e00d      	b.n	8012cca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	6892      	ldr	r2, [r2, #8]
 8012cb6:	4610      	mov	r0, r2
 8012cb8:	4798      	blx	r3
      break;
 8012cba:	e006      	b.n	8012cca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012cbc:	4b05      	ldr	r3, [pc, #20]	; (8012cd4 <tcpip_thread_handle_msg+0x84>)
 8012cbe:	22cf      	movs	r2, #207	; 0xcf
 8012cc0:	4905      	ldr	r1, [pc, #20]	; (8012cd8 <tcpip_thread_handle_msg+0x88>)
 8012cc2:	4806      	ldr	r0, [pc, #24]	; (8012cdc <tcpip_thread_handle_msg+0x8c>)
 8012cc4:	f7ed fcee 	bl	80006a4 <iprintf>
      break;
 8012cc8:	bf00      	nop
  }
}
 8012cca:	bf00      	nop
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	08018250 	.word	0x08018250
 8012cd8:	08018280 	.word	0x08018280
 8012cdc:	080182a0 	.word	0x080182a0

08012ce0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b086      	sub	sp, #24
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	60b9      	str	r1, [r7, #8]
 8012cea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012cec:	481a      	ldr	r0, [pc, #104]	; (8012d58 <tcpip_inpkt+0x78>)
 8012cee:	f005 f9a2 	bl	8018036 <sys_mbox_valid>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d105      	bne.n	8012d04 <tcpip_inpkt+0x24>
 8012cf8:	4b18      	ldr	r3, [pc, #96]	; (8012d5c <tcpip_inpkt+0x7c>)
 8012cfa:	22fc      	movs	r2, #252	; 0xfc
 8012cfc:	4918      	ldr	r1, [pc, #96]	; (8012d60 <tcpip_inpkt+0x80>)
 8012cfe:	4819      	ldr	r0, [pc, #100]	; (8012d64 <tcpip_inpkt+0x84>)
 8012d00:	f7ed fcd0 	bl	80006a4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012d04:	2007      	movs	r0, #7
 8012d06:	f000 fe21 	bl	801394c <memp_malloc>
 8012d0a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d102      	bne.n	8012d18 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d16:	e01a      	b.n	8012d4e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	68fa      	ldr	r2, [r7, #12]
 8012d22:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	68ba      	ldr	r2, [r7, #8]
 8012d28:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012d30:	6979      	ldr	r1, [r7, #20]
 8012d32:	4809      	ldr	r0, [pc, #36]	; (8012d58 <tcpip_inpkt+0x78>)
 8012d34:	f005 f926 	bl	8017f84 <sys_mbox_trypost>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d006      	beq.n	8012d4c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012d3e:	6979      	ldr	r1, [r7, #20]
 8012d40:	2007      	movs	r0, #7
 8012d42:	f000 fe79 	bl	8013a38 <memp_free>
    return ERR_MEM;
 8012d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d4a:	e000      	b.n	8012d4e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012d4c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	3718      	adds	r7, #24
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	24005938 	.word	0x24005938
 8012d5c:	08018250 	.word	0x08018250
 8012d60:	080182c8 	.word	0x080182c8
 8012d64:	080182a0 	.word	0x080182a0

08012d68 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012d78:	f003 0318 	and.w	r3, r3, #24
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d006      	beq.n	8012d8e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012d80:	4a08      	ldr	r2, [pc, #32]	; (8012da4 <tcpip_input+0x3c>)
 8012d82:	6839      	ldr	r1, [r7, #0]
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f7ff ffab 	bl	8012ce0 <tcpip_inpkt>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	e005      	b.n	8012d9a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012d8e:	4a06      	ldr	r2, [pc, #24]	; (8012da8 <tcpip_input+0x40>)
 8012d90:	6839      	ldr	r1, [r7, #0]
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f7ff ffa4 	bl	8012ce0 <tcpip_inpkt>
 8012d98:	4603      	mov	r3, r0
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	08017d95 	.word	0x08017d95
 8012da8:	08016bad 	.word	0x08016bad

08012dac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af02      	add	r7, sp, #8
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012db6:	f000 f914 	bl	8012fe2 <lwip_init>

  tcpip_init_done = initfunc;
 8012dba:	4a17      	ldr	r2, [pc, #92]	; (8012e18 <tcpip_init+0x6c>)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012dc0:	4a16      	ldr	r2, [pc, #88]	; (8012e1c <tcpip_init+0x70>)
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012dc6:	2106      	movs	r1, #6
 8012dc8:	4815      	ldr	r0, [pc, #84]	; (8012e20 <tcpip_init+0x74>)
 8012dca:	f005 f8b9 	bl	8017f40 <sys_mbox_new>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d006      	beq.n	8012de2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012dd4:	4b13      	ldr	r3, [pc, #76]	; (8012e24 <tcpip_init+0x78>)
 8012dd6:	f240 2261 	movw	r2, #609	; 0x261
 8012dda:	4913      	ldr	r1, [pc, #76]	; (8012e28 <tcpip_init+0x7c>)
 8012ddc:	4813      	ldr	r0, [pc, #76]	; (8012e2c <tcpip_init+0x80>)
 8012dde:	f7ed fc61 	bl	80006a4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012de2:	4813      	ldr	r0, [pc, #76]	; (8012e30 <tcpip_init+0x84>)
 8012de4:	f005 f946 	bl	8018074 <sys_mutex_new>
 8012de8:	4603      	mov	r3, r0
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d006      	beq.n	8012dfc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012dee:	4b0d      	ldr	r3, [pc, #52]	; (8012e24 <tcpip_init+0x78>)
 8012df0:	f240 2265 	movw	r2, #613	; 0x265
 8012df4:	490f      	ldr	r1, [pc, #60]	; (8012e34 <tcpip_init+0x88>)
 8012df6:	480d      	ldr	r0, [pc, #52]	; (8012e2c <tcpip_init+0x80>)
 8012df8:	f7ed fc54 	bl	80006a4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	9300      	str	r3, [sp, #0]
 8012e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e04:	2200      	movs	r2, #0
 8012e06:	490c      	ldr	r1, [pc, #48]	; (8012e38 <tcpip_init+0x8c>)
 8012e08:	480c      	ldr	r0, [pc, #48]	; (8012e3c <tcpip_init+0x90>)
 8012e0a:	f005 f96b 	bl	80180e4 <sys_thread_new>
}
 8012e0e:	bf00      	nop
 8012e10:	3708      	adds	r7, #8
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	24005930 	.word	0x24005930
 8012e1c:	24005934 	.word	0x24005934
 8012e20:	24005938 	.word	0x24005938
 8012e24:	08018250 	.word	0x08018250
 8012e28:	080182d8 	.word	0x080182d8
 8012e2c:	080182a0 	.word	0x080182a0
 8012e30:	2400667c 	.word	0x2400667c
 8012e34:	080182fc 	.word	0x080182fc
 8012e38:	08012be9 	.word	0x08012be9
 8012e3c:	08018320 	.word	0x08018320

08012e40 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	4603      	mov	r3, r0
 8012e48:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012e4a:	88fb      	ldrh	r3, [r7, #6]
 8012e4c:	021b      	lsls	r3, r3, #8
 8012e4e:	b21a      	sxth	r2, r3
 8012e50:	88fb      	ldrh	r3, [r7, #6]
 8012e52:	0a1b      	lsrs	r3, r3, #8
 8012e54:	b29b      	uxth	r3, r3
 8012e56:	b21b      	sxth	r3, r3
 8012e58:	4313      	orrs	r3, r2
 8012e5a:	b21b      	sxth	r3, r3
 8012e5c:	b29b      	uxth	r3, r3
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	370c      	adds	r7, #12
 8012e62:	46bd      	mov	sp, r7
 8012e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e68:	4770      	bx	lr

08012e6a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8012e6a:	b480      	push	{r7}
 8012e6c:	b089      	sub	sp, #36	; 0x24
 8012e6e:	af00      	add	r7, sp, #0
 8012e70:	6078      	str	r0, [r7, #4]
 8012e72:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	f003 0301 	and.w	r3, r3, #1
 8012e86:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d00d      	beq.n	8012eaa <lwip_standard_chksum+0x40>
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	dd0a      	ble.n	8012eaa <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8012e94:	69fa      	ldr	r2, [r7, #28]
 8012e96:	1c53      	adds	r3, r2, #1
 8012e98:	61fb      	str	r3, [r7, #28]
 8012e9a:	f107 030e 	add.w	r3, r7, #14
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	7812      	ldrb	r2, [r2, #0]
 8012ea2:	701a      	strb	r2, [r3, #0]
    len--;
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	3b01      	subs	r3, #1
 8012ea8:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8012eaa:	69fb      	ldr	r3, [r7, #28]
 8012eac:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8012eae:	e00a      	b.n	8012ec6 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	1c9a      	adds	r2, r3, #2
 8012eb4:	61ba      	str	r2, [r7, #24]
 8012eb6:	881b      	ldrh	r3, [r3, #0]
 8012eb8:	461a      	mov	r2, r3
 8012eba:	697b      	ldr	r3, [r7, #20]
 8012ebc:	4413      	add	r3, r2
 8012ebe:	617b      	str	r3, [r7, #20]
    len -= 2;
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	3b02      	subs	r3, #2
 8012ec4:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	dcf1      	bgt.n	8012eb0 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	dd04      	ble.n	8012edc <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8012ed2:	f107 030e 	add.w	r3, r7, #14
 8012ed6:	69ba      	ldr	r2, [r7, #24]
 8012ed8:	7812      	ldrb	r2, [r2, #0]
 8012eda:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8012edc:	89fb      	ldrh	r3, [r7, #14]
 8012ede:	461a      	mov	r2, r3
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	4413      	add	r3, r2
 8012ee4:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	0c1a      	lsrs	r2, r3, #16
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	4413      	add	r3, r2
 8012ef0:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	0c1a      	lsrs	r2, r3, #16
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	4413      	add	r3, r2
 8012efc:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d007      	beq.n	8012f14 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	021b      	lsls	r3, r3, #8
 8012f08:	b29a      	uxth	r2, r3
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	0a1b      	lsrs	r3, r3, #8
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	4313      	orrs	r3, r2
 8012f12:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	b29b      	uxth	r3, r3
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3724      	adds	r7, #36	; 0x24
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f22:	4770      	bx	lr

08012f24 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	460b      	mov	r3, r1
 8012f2e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8012f30:	887b      	ldrh	r3, [r7, #2]
 8012f32:	4619      	mov	r1, r3
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f7ff ff98 	bl	8012e6a <lwip_standard_chksum>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	43db      	mvns	r3, r3
 8012f3e:	b29b      	uxth	r3, r3
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b086      	sub	sp, #24
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8012f50:	2300      	movs	r3, #0
 8012f52:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8012f54:	2300      	movs	r3, #0
 8012f56:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	613b      	str	r3, [r7, #16]
 8012f5c:	e02b      	b.n	8012fb6 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	685a      	ldr	r2, [r3, #4]
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	895b      	ldrh	r3, [r3, #10]
 8012f66:	4619      	mov	r1, r3
 8012f68:	4610      	mov	r0, r2
 8012f6a:	f7ff ff7e 	bl	8012e6a <lwip_standard_chksum>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	461a      	mov	r2, r3
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	4413      	add	r3, r2
 8012f76:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	0c1a      	lsrs	r2, r3, #16
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	4413      	add	r3, r2
 8012f82:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	895b      	ldrh	r3, [r3, #10]
 8012f88:	f003 0301 	and.w	r3, r3, #1
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d00e      	beq.n	8012fb0 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	bf0c      	ite	eq
 8012f98:	2301      	moveq	r3, #1
 8012f9a:	2300      	movne	r3, #0
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	021b      	lsls	r3, r3, #8
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	0a1b      	lsrs	r3, r3, #8
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	4313      	orrs	r3, r2
 8012fae:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	613b      	str	r3, [r7, #16]
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d1d0      	bne.n	8012f5e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d007      	beq.n	8012fd2 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	021b      	lsls	r3, r3, #8
 8012fc6:	b29a      	uxth	r2, r3
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	0a1b      	lsrs	r3, r3, #8
 8012fcc:	b2db      	uxtb	r3, r3
 8012fce:	4313      	orrs	r3, r2
 8012fd0:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	43db      	mvns	r3, r3
 8012fd8:	b29b      	uxth	r3, r3
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3718      	adds	r7, #24
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012fe2:	b580      	push	{r7, lr}
 8012fe4:	b082      	sub	sp, #8
 8012fe6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012fec:	f005 f834 	bl	8018058 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012ff0:	f000 f8d8 	bl	80131a4 <mem_init>
  memp_init();
 8012ff4:	f000 fc3c 	bl	8013870 <memp_init>
  pbuf_init();
  netif_init();
 8012ff8:	f000 fd48 	bl	8013a8c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012ffc:	f001 ffca 	bl	8014f94 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 8013000:	f003 fa82 	bl	8016508 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013004:	f001 ff0c 	bl	8014e20 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013008:	bf00      	nop
 801300a:	3708      	adds	r7, #8
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
 8013016:	4603      	mov	r3, r0
 8013018:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801301a:	4b05      	ldr	r3, [pc, #20]	; (8013030 <ptr_to_mem+0x20>)
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	88fb      	ldrh	r3, [r7, #6]
 8013020:	4413      	add	r3, r2
}
 8013022:	4618      	mov	r0, r3
 8013024:	370c      	adds	r7, #12
 8013026:	46bd      	mov	sp, r7
 8013028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302c:	4770      	bx	lr
 801302e:	bf00      	nop
 8013030:	2400593c 	.word	0x2400593c

08013034 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013034:	b480      	push	{r7}
 8013036:	b083      	sub	sp, #12
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801303c:	4b05      	ldr	r3, [pc, #20]	; (8013054 <mem_to_ptr+0x20>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	b29b      	uxth	r3, r3
}
 8013046:	4618      	mov	r0, r3
 8013048:	370c      	adds	r7, #12
 801304a:	46bd      	mov	sp, r7
 801304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013050:	4770      	bx	lr
 8013052:	bf00      	nop
 8013054:	2400593c 	.word	0x2400593c

08013058 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8013058:	b590      	push	{r4, r7, lr}
 801305a:	b085      	sub	sp, #20
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013060:	4b47      	ldr	r3, [pc, #284]	; (8013180 <plug_holes+0x128>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	687a      	ldr	r2, [r7, #4]
 8013066:	429a      	cmp	r2, r3
 8013068:	d206      	bcs.n	8013078 <plug_holes+0x20>
 801306a:	4b46      	ldr	r3, [pc, #280]	; (8013184 <plug_holes+0x12c>)
 801306c:	f240 12df 	movw	r2, #479	; 0x1df
 8013070:	4945      	ldr	r1, [pc, #276]	; (8013188 <plug_holes+0x130>)
 8013072:	4846      	ldr	r0, [pc, #280]	; (801318c <plug_holes+0x134>)
 8013074:	f7ed fb16 	bl	80006a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013078:	4b45      	ldr	r3, [pc, #276]	; (8013190 <plug_holes+0x138>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	687a      	ldr	r2, [r7, #4]
 801307e:	429a      	cmp	r2, r3
 8013080:	d306      	bcc.n	8013090 <plug_holes+0x38>
 8013082:	4b40      	ldr	r3, [pc, #256]	; (8013184 <plug_holes+0x12c>)
 8013084:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013088:	4942      	ldr	r1, [pc, #264]	; (8013194 <plug_holes+0x13c>)
 801308a:	4840      	ldr	r0, [pc, #256]	; (801318c <plug_holes+0x134>)
 801308c:	f7ed fb0a 	bl	80006a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	791b      	ldrb	r3, [r3, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d006      	beq.n	80130a6 <plug_holes+0x4e>
 8013098:	4b3a      	ldr	r3, [pc, #232]	; (8013184 <plug_holes+0x12c>)
 801309a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801309e:	493e      	ldr	r1, [pc, #248]	; (8013198 <plug_holes+0x140>)
 80130a0:	483a      	ldr	r0, [pc, #232]	; (801318c <plug_holes+0x134>)
 80130a2:	f7ed faff 	bl	80006a4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	881b      	ldrh	r3, [r3, #0]
 80130aa:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d906      	bls.n	80130c0 <plug_holes+0x68>
 80130b2:	4b34      	ldr	r3, [pc, #208]	; (8013184 <plug_holes+0x12c>)
 80130b4:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80130b8:	4938      	ldr	r1, [pc, #224]	; (801319c <plug_holes+0x144>)
 80130ba:	4834      	ldr	r0, [pc, #208]	; (801318c <plug_holes+0x134>)
 80130bc:	f7ed faf2 	bl	80006a4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	881b      	ldrh	r3, [r3, #0]
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7ff ffa3 	bl	8013010 <ptr_to_mem>
 80130ca:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d025      	beq.n	8013120 <plug_holes+0xc8>
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	791b      	ldrb	r3, [r3, #4]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d121      	bne.n	8013120 <plug_holes+0xc8>
 80130dc:	4b2c      	ldr	r3, [pc, #176]	; (8013190 <plug_holes+0x138>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	68fa      	ldr	r2, [r7, #12]
 80130e2:	429a      	cmp	r2, r3
 80130e4:	d01c      	beq.n	8013120 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80130e6:	4b2e      	ldr	r3, [pc, #184]	; (80131a0 <plug_holes+0x148>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	68fa      	ldr	r2, [r7, #12]
 80130ec:	429a      	cmp	r2, r3
 80130ee:	d102      	bne.n	80130f6 <plug_holes+0x9e>
      lfree = mem;
 80130f0:	4a2b      	ldr	r2, [pc, #172]	; (80131a0 <plug_holes+0x148>)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	881a      	ldrh	r2, [r3, #0]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 8013106:	4293      	cmp	r3, r2
 8013108:	d00a      	beq.n	8013120 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	881b      	ldrh	r3, [r3, #0]
 801310e:	4618      	mov	r0, r3
 8013110:	f7ff ff7e 	bl	8013010 <ptr_to_mem>
 8013114:	4604      	mov	r4, r0
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f7ff ff8c 	bl	8013034 <mem_to_ptr>
 801311c:	4603      	mov	r3, r0
 801311e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	885b      	ldrh	r3, [r3, #2]
 8013124:	4618      	mov	r0, r3
 8013126:	f7ff ff73 	bl	8013010 <ptr_to_mem>
 801312a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801312c:	68ba      	ldr	r2, [r7, #8]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	429a      	cmp	r2, r3
 8013132:	d020      	beq.n	8013176 <plug_holes+0x11e>
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	791b      	ldrb	r3, [r3, #4]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d11c      	bne.n	8013176 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801313c:	4b18      	ldr	r3, [pc, #96]	; (80131a0 <plug_holes+0x148>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	687a      	ldr	r2, [r7, #4]
 8013142:	429a      	cmp	r2, r3
 8013144:	d102      	bne.n	801314c <plug_holes+0xf4>
      lfree = pmem;
 8013146:	4a16      	ldr	r2, [pc, #88]	; (80131a0 <plug_holes+0x148>)
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	881a      	ldrh	r2, [r3, #0]
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	881b      	ldrh	r3, [r3, #0]
 8013158:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 801315c:	4293      	cmp	r3, r2
 801315e:	d00a      	beq.n	8013176 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	881b      	ldrh	r3, [r3, #0]
 8013164:	4618      	mov	r0, r3
 8013166:	f7ff ff53 	bl	8013010 <ptr_to_mem>
 801316a:	4604      	mov	r4, r0
 801316c:	68b8      	ldr	r0, [r7, #8]
 801316e:	f7ff ff61 	bl	8013034 <mem_to_ptr>
 8013172:	4603      	mov	r3, r0
 8013174:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013176:	bf00      	nop
 8013178:	3714      	adds	r7, #20
 801317a:	46bd      	mov	sp, r7
 801317c:	bd90      	pop	{r4, r7, pc}
 801317e:	bf00      	nop
 8013180:	2400593c 	.word	0x2400593c
 8013184:	08018330 	.word	0x08018330
 8013188:	08018360 	.word	0x08018360
 801318c:	08018378 	.word	0x08018378
 8013190:	24005940 	.word	0x24005940
 8013194:	080183a0 	.word	0x080183a0
 8013198:	080183bc 	.word	0x080183bc
 801319c:	080183d8 	.word	0x080183d8
 80131a0:	24005948 	.word	0x24005948

080131a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80131aa:	4b1d      	ldr	r3, [pc, #116]	; (8013220 <mem_init+0x7c>)
 80131ac:	4a1d      	ldr	r2, [pc, #116]	; (8013224 <mem_init+0x80>)
 80131ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80131b0:	4b1b      	ldr	r3, [pc, #108]	; (8013220 <mem_init+0x7c>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 80131bc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2200      	movs	r2, #0
 80131c2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2200      	movs	r2, #0
 80131c8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80131ca:	f647 70e8 	movw	r0, #32744	; 0x7fe8
 80131ce:	f7ff ff1f 	bl	8013010 <ptr_to_mem>
 80131d2:	4603      	mov	r3, r0
 80131d4:	4a14      	ldr	r2, [pc, #80]	; (8013228 <mem_init+0x84>)
 80131d6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80131d8:	4b13      	ldr	r3, [pc, #76]	; (8013228 <mem_init+0x84>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	2201      	movs	r2, #1
 80131de:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80131e0:	4b11      	ldr	r3, [pc, #68]	; (8013228 <mem_init+0x84>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 80131e8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80131ea:	4b0f      	ldr	r3, [pc, #60]	; (8013228 <mem_init+0x84>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 80131f2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80131f4:	4b0a      	ldr	r3, [pc, #40]	; (8013220 <mem_init+0x7c>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	4a0c      	ldr	r2, [pc, #48]	; (801322c <mem_init+0x88>)
 80131fa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80131fc:	480c      	ldr	r0, [pc, #48]	; (8013230 <mem_init+0x8c>)
 80131fe:	f004 ff39 	bl	8018074 <sys_mutex_new>
 8013202:	4603      	mov	r3, r0
 8013204:	2b00      	cmp	r3, #0
 8013206:	d006      	beq.n	8013216 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013208:	4b0a      	ldr	r3, [pc, #40]	; (8013234 <mem_init+0x90>)
 801320a:	f240 221f 	movw	r2, #543	; 0x21f
 801320e:	490a      	ldr	r1, [pc, #40]	; (8013238 <mem_init+0x94>)
 8013210:	480a      	ldr	r0, [pc, #40]	; (801323c <mem_init+0x98>)
 8013212:	f7ed fa47 	bl	80006a4 <iprintf>
  }
}
 8013216:	bf00      	nop
 8013218:	3708      	adds	r7, #8
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
 801321e:	bf00      	nop
 8013220:	2400593c 	.word	0x2400593c
 8013224:	30040000 	.word	0x30040000
 8013228:	24005940 	.word	0x24005940
 801322c:	24005948 	.word	0x24005948
 8013230:	24005944 	.word	0x24005944
 8013234:	08018330 	.word	0x08018330
 8013238:	08018404 	.word	0x08018404
 801323c:	08018378 	.word	0x08018378

08013240 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b086      	sub	sp, #24
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7ff fef3 	bl	8013034 <mem_to_ptr>
 801324e:	4603      	mov	r3, r0
 8013250:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	881b      	ldrh	r3, [r3, #0]
 8013256:	4618      	mov	r0, r3
 8013258:	f7ff feda 	bl	8013010 <ptr_to_mem>
 801325c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	885b      	ldrh	r3, [r3, #2]
 8013262:	4618      	mov	r0, r3
 8013264:	f7ff fed4 	bl	8013010 <ptr_to_mem>
 8013268:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	881b      	ldrh	r3, [r3, #0]
 801326e:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 8013272:	4293      	cmp	r3, r2
 8013274:	d819      	bhi.n	80132aa <mem_link_valid+0x6a>
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	885b      	ldrh	r3, [r3, #2]
 801327a:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 801327e:	4293      	cmp	r3, r2
 8013280:	d813      	bhi.n	80132aa <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013286:	8afa      	ldrh	r2, [r7, #22]
 8013288:	429a      	cmp	r2, r3
 801328a:	d004      	beq.n	8013296 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	881b      	ldrh	r3, [r3, #0]
 8013290:	8afa      	ldrh	r2, [r7, #22]
 8013292:	429a      	cmp	r2, r3
 8013294:	d109      	bne.n	80132aa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013296:	4b08      	ldr	r3, [pc, #32]	; (80132b8 <mem_link_valid+0x78>)
 8013298:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801329a:	693a      	ldr	r2, [r7, #16]
 801329c:	429a      	cmp	r2, r3
 801329e:	d006      	beq.n	80132ae <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	885b      	ldrh	r3, [r3, #2]
 80132a4:	8afa      	ldrh	r2, [r7, #22]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d001      	beq.n	80132ae <mem_link_valid+0x6e>
    return 0;
 80132aa:	2300      	movs	r3, #0
 80132ac:	e000      	b.n	80132b0 <mem_link_valid+0x70>
  }
  return 1;
 80132ae:	2301      	movs	r3, #1
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3718      	adds	r7, #24
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}
 80132b8:	24005940 	.word	0x24005940

080132bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b088      	sub	sp, #32
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d070      	beq.n	80133ac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f003 0303 	and.w	r3, r3, #3
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d00d      	beq.n	80132f0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80132d4:	4b37      	ldr	r3, [pc, #220]	; (80133b4 <mem_free+0xf8>)
 80132d6:	f240 2273 	movw	r2, #627	; 0x273
 80132da:	4937      	ldr	r1, [pc, #220]	; (80133b8 <mem_free+0xfc>)
 80132dc:	4837      	ldr	r0, [pc, #220]	; (80133bc <mem_free+0x100>)
 80132de:	f7ed f9e1 	bl	80006a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80132e2:	f004 ff25 	bl	8018130 <sys_arch_protect>
 80132e6:	60f8      	str	r0, [r7, #12]
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f004 ff2f 	bl	801814c <sys_arch_unprotect>
    return;
 80132ee:	e05e      	b.n	80133ae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	3b08      	subs	r3, #8
 80132f4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80132f6:	4b32      	ldr	r3, [pc, #200]	; (80133c0 <mem_free+0x104>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	69fa      	ldr	r2, [r7, #28]
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d306      	bcc.n	801330e <mem_free+0x52>
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f103 020c 	add.w	r2, r3, #12
 8013306:	4b2f      	ldr	r3, [pc, #188]	; (80133c4 <mem_free+0x108>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	429a      	cmp	r2, r3
 801330c:	d90d      	bls.n	801332a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801330e:	4b29      	ldr	r3, [pc, #164]	; (80133b4 <mem_free+0xf8>)
 8013310:	f240 227f 	movw	r2, #639	; 0x27f
 8013314:	492c      	ldr	r1, [pc, #176]	; (80133c8 <mem_free+0x10c>)
 8013316:	4829      	ldr	r0, [pc, #164]	; (80133bc <mem_free+0x100>)
 8013318:	f7ed f9c4 	bl	80006a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801331c:	f004 ff08 	bl	8018130 <sys_arch_protect>
 8013320:	6138      	str	r0, [r7, #16]
 8013322:	6938      	ldr	r0, [r7, #16]
 8013324:	f004 ff12 	bl	801814c <sys_arch_unprotect>
    return;
 8013328:	e041      	b.n	80133ae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801332a:	4828      	ldr	r0, [pc, #160]	; (80133cc <mem_free+0x110>)
 801332c:	f004 febe 	bl	80180ac <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013330:	69fb      	ldr	r3, [r7, #28]
 8013332:	791b      	ldrb	r3, [r3, #4]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d110      	bne.n	801335a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013338:	4b1e      	ldr	r3, [pc, #120]	; (80133b4 <mem_free+0xf8>)
 801333a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801333e:	4924      	ldr	r1, [pc, #144]	; (80133d0 <mem_free+0x114>)
 8013340:	481e      	ldr	r0, [pc, #120]	; (80133bc <mem_free+0x100>)
 8013342:	f7ed f9af 	bl	80006a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013346:	4821      	ldr	r0, [pc, #132]	; (80133cc <mem_free+0x110>)
 8013348:	f004 febf 	bl	80180ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801334c:	f004 fef0 	bl	8018130 <sys_arch_protect>
 8013350:	6178      	str	r0, [r7, #20]
 8013352:	6978      	ldr	r0, [r7, #20]
 8013354:	f004 fefa 	bl	801814c <sys_arch_unprotect>
    return;
 8013358:	e029      	b.n	80133ae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801335a:	69f8      	ldr	r0, [r7, #28]
 801335c:	f7ff ff70 	bl	8013240 <mem_link_valid>
 8013360:	4603      	mov	r3, r0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d110      	bne.n	8013388 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013366:	4b13      	ldr	r3, [pc, #76]	; (80133b4 <mem_free+0xf8>)
 8013368:	f240 2295 	movw	r2, #661	; 0x295
 801336c:	4919      	ldr	r1, [pc, #100]	; (80133d4 <mem_free+0x118>)
 801336e:	4813      	ldr	r0, [pc, #76]	; (80133bc <mem_free+0x100>)
 8013370:	f7ed f998 	bl	80006a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013374:	4815      	ldr	r0, [pc, #84]	; (80133cc <mem_free+0x110>)
 8013376:	f004 fea8 	bl	80180ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801337a:	f004 fed9 	bl	8018130 <sys_arch_protect>
 801337e:	61b8      	str	r0, [r7, #24]
 8013380:	69b8      	ldr	r0, [r7, #24]
 8013382:	f004 fee3 	bl	801814c <sys_arch_unprotect>
    return;
 8013386:	e012      	b.n	80133ae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	2200      	movs	r2, #0
 801338c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801338e:	4b12      	ldr	r3, [pc, #72]	; (80133d8 <mem_free+0x11c>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	69fa      	ldr	r2, [r7, #28]
 8013394:	429a      	cmp	r2, r3
 8013396:	d202      	bcs.n	801339e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013398:	4a0f      	ldr	r2, [pc, #60]	; (80133d8 <mem_free+0x11c>)
 801339a:	69fb      	ldr	r3, [r7, #28]
 801339c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801339e:	69f8      	ldr	r0, [r7, #28]
 80133a0:	f7ff fe5a 	bl	8013058 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80133a4:	4809      	ldr	r0, [pc, #36]	; (80133cc <mem_free+0x110>)
 80133a6:	f004 fe90 	bl	80180ca <sys_mutex_unlock>
 80133aa:	e000      	b.n	80133ae <mem_free+0xf2>
    return;
 80133ac:	bf00      	nop
}
 80133ae:	3720      	adds	r7, #32
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}
 80133b4:	08018330 	.word	0x08018330
 80133b8:	08018420 	.word	0x08018420
 80133bc:	08018378 	.word	0x08018378
 80133c0:	2400593c 	.word	0x2400593c
 80133c4:	24005940 	.word	0x24005940
 80133c8:	08018444 	.word	0x08018444
 80133cc:	24005944 	.word	0x24005944
 80133d0:	08018460 	.word	0x08018460
 80133d4:	08018488 	.word	0x08018488
 80133d8:	24005948 	.word	0x24005948

080133dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b088      	sub	sp, #32
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	460b      	mov	r3, r1
 80133e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80133e8:	887b      	ldrh	r3, [r7, #2]
 80133ea:	3303      	adds	r3, #3
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	f023 0303 	bic.w	r3, r3, #3
 80133f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80133f4:	8bfb      	ldrh	r3, [r7, #30]
 80133f6:	2b0b      	cmp	r3, #11
 80133f8:	d801      	bhi.n	80133fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80133fa:	230c      	movs	r3, #12
 80133fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80133fe:	8bfb      	ldrh	r3, [r7, #30]
 8013400:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 8013404:	4293      	cmp	r3, r2
 8013406:	d803      	bhi.n	8013410 <mem_trim+0x34>
 8013408:	8bfa      	ldrh	r2, [r7, #30]
 801340a:	887b      	ldrh	r3, [r7, #2]
 801340c:	429a      	cmp	r2, r3
 801340e:	d201      	bcs.n	8013414 <mem_trim+0x38>
    return NULL;
 8013410:	2300      	movs	r3, #0
 8013412:	e0dc      	b.n	80135ce <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013414:	4b70      	ldr	r3, [pc, #448]	; (80135d8 <mem_trim+0x1fc>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	687a      	ldr	r2, [r7, #4]
 801341a:	429a      	cmp	r2, r3
 801341c:	d304      	bcc.n	8013428 <mem_trim+0x4c>
 801341e:	4b6f      	ldr	r3, [pc, #444]	; (80135dc <mem_trim+0x200>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	429a      	cmp	r2, r3
 8013426:	d306      	bcc.n	8013436 <mem_trim+0x5a>
 8013428:	4b6d      	ldr	r3, [pc, #436]	; (80135e0 <mem_trim+0x204>)
 801342a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801342e:	496d      	ldr	r1, [pc, #436]	; (80135e4 <mem_trim+0x208>)
 8013430:	486d      	ldr	r0, [pc, #436]	; (80135e8 <mem_trim+0x20c>)
 8013432:	f7ed f937 	bl	80006a4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013436:	4b68      	ldr	r3, [pc, #416]	; (80135d8 <mem_trim+0x1fc>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	687a      	ldr	r2, [r7, #4]
 801343c:	429a      	cmp	r2, r3
 801343e:	d304      	bcc.n	801344a <mem_trim+0x6e>
 8013440:	4b66      	ldr	r3, [pc, #408]	; (80135dc <mem_trim+0x200>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	429a      	cmp	r2, r3
 8013448:	d307      	bcc.n	801345a <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801344a:	f004 fe71 	bl	8018130 <sys_arch_protect>
 801344e:	60b8      	str	r0, [r7, #8]
 8013450:	68b8      	ldr	r0, [r7, #8]
 8013452:	f004 fe7b 	bl	801814c <sys_arch_unprotect>
    return rmem;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	e0b9      	b.n	80135ce <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	3b08      	subs	r3, #8
 801345e:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013460:	69b8      	ldr	r0, [r7, #24]
 8013462:	f7ff fde7 	bl	8013034 <mem_to_ptr>
 8013466:	4603      	mov	r3, r0
 8013468:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	881a      	ldrh	r2, [r3, #0]
 801346e:	8afb      	ldrh	r3, [r7, #22]
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	b29b      	uxth	r3, r3
 8013474:	3b08      	subs	r3, #8
 8013476:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013478:	8bfa      	ldrh	r2, [r7, #30]
 801347a:	8abb      	ldrh	r3, [r7, #20]
 801347c:	429a      	cmp	r2, r3
 801347e:	d906      	bls.n	801348e <mem_trim+0xb2>
 8013480:	4b57      	ldr	r3, [pc, #348]	; (80135e0 <mem_trim+0x204>)
 8013482:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013486:	4959      	ldr	r1, [pc, #356]	; (80135ec <mem_trim+0x210>)
 8013488:	4857      	ldr	r0, [pc, #348]	; (80135e8 <mem_trim+0x20c>)
 801348a:	f7ed f90b 	bl	80006a4 <iprintf>
  if (newsize > size) {
 801348e:	8bfa      	ldrh	r2, [r7, #30]
 8013490:	8abb      	ldrh	r3, [r7, #20]
 8013492:	429a      	cmp	r2, r3
 8013494:	d901      	bls.n	801349a <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8013496:	2300      	movs	r3, #0
 8013498:	e099      	b.n	80135ce <mem_trim+0x1f2>
  }
  if (newsize == size) {
 801349a:	8bfa      	ldrh	r2, [r7, #30]
 801349c:	8abb      	ldrh	r3, [r7, #20]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d101      	bne.n	80134a6 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	e093      	b.n	80135ce <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80134a6:	4852      	ldr	r0, [pc, #328]	; (80135f0 <mem_trim+0x214>)
 80134a8:	f004 fe00 	bl	80180ac <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80134ac:	69bb      	ldr	r3, [r7, #24]
 80134ae:	881b      	ldrh	r3, [r3, #0]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7ff fdad 	bl	8013010 <ptr_to_mem>
 80134b6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80134b8:	693b      	ldr	r3, [r7, #16]
 80134ba:	791b      	ldrb	r3, [r3, #4]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d141      	bne.n	8013544 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	881b      	ldrh	r3, [r3, #0]
 80134c4:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 80134c8:	4293      	cmp	r3, r2
 80134ca:	d106      	bne.n	80134da <mem_trim+0xfe>
 80134cc:	4b44      	ldr	r3, [pc, #272]	; (80135e0 <mem_trim+0x204>)
 80134ce:	f240 22f5 	movw	r2, #757	; 0x2f5
 80134d2:	4948      	ldr	r1, [pc, #288]	; (80135f4 <mem_trim+0x218>)
 80134d4:	4844      	ldr	r0, [pc, #272]	; (80135e8 <mem_trim+0x20c>)
 80134d6:	f7ed f8e5 	bl	80006a4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80134da:	693b      	ldr	r3, [r7, #16]
 80134dc:	881b      	ldrh	r3, [r3, #0]
 80134de:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80134e0:	8afa      	ldrh	r2, [r7, #22]
 80134e2:	8bfb      	ldrh	r3, [r7, #30]
 80134e4:	4413      	add	r3, r2
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	3308      	adds	r3, #8
 80134ea:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80134ec:	4b42      	ldr	r3, [pc, #264]	; (80135f8 <mem_trim+0x21c>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	693a      	ldr	r2, [r7, #16]
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d106      	bne.n	8013504 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 80134f6:	89fb      	ldrh	r3, [r7, #14]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7ff fd89 	bl	8013010 <ptr_to_mem>
 80134fe:	4603      	mov	r3, r0
 8013500:	4a3d      	ldr	r2, [pc, #244]	; (80135f8 <mem_trim+0x21c>)
 8013502:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013504:	89fb      	ldrh	r3, [r7, #14]
 8013506:	4618      	mov	r0, r3
 8013508:	f7ff fd82 	bl	8013010 <ptr_to_mem>
 801350c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	2200      	movs	r2, #0
 8013512:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	89ba      	ldrh	r2, [r7, #12]
 8013518:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	8afa      	ldrh	r2, [r7, #22]
 801351e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013520:	69bb      	ldr	r3, [r7, #24]
 8013522:	89fa      	ldrh	r2, [r7, #14]
 8013524:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	881b      	ldrh	r3, [r3, #0]
 801352a:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 801352e:	4293      	cmp	r3, r2
 8013530:	d049      	beq.n	80135c6 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013532:	693b      	ldr	r3, [r7, #16]
 8013534:	881b      	ldrh	r3, [r3, #0]
 8013536:	4618      	mov	r0, r3
 8013538:	f7ff fd6a 	bl	8013010 <ptr_to_mem>
 801353c:	4602      	mov	r2, r0
 801353e:	89fb      	ldrh	r3, [r7, #14]
 8013540:	8053      	strh	r3, [r2, #2]
 8013542:	e040      	b.n	80135c6 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013544:	8bfb      	ldrh	r3, [r7, #30]
 8013546:	f103 0214 	add.w	r2, r3, #20
 801354a:	8abb      	ldrh	r3, [r7, #20]
 801354c:	429a      	cmp	r2, r3
 801354e:	d83a      	bhi.n	80135c6 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013550:	8afa      	ldrh	r2, [r7, #22]
 8013552:	8bfb      	ldrh	r3, [r7, #30]
 8013554:	4413      	add	r3, r2
 8013556:	b29b      	uxth	r3, r3
 8013558:	3308      	adds	r3, #8
 801355a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801355c:	69bb      	ldr	r3, [r7, #24]
 801355e:	881b      	ldrh	r3, [r3, #0]
 8013560:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 8013564:	4293      	cmp	r3, r2
 8013566:	d106      	bne.n	8013576 <mem_trim+0x19a>
 8013568:	4b1d      	ldr	r3, [pc, #116]	; (80135e0 <mem_trim+0x204>)
 801356a:	f240 3216 	movw	r2, #790	; 0x316
 801356e:	4921      	ldr	r1, [pc, #132]	; (80135f4 <mem_trim+0x218>)
 8013570:	481d      	ldr	r0, [pc, #116]	; (80135e8 <mem_trim+0x20c>)
 8013572:	f7ed f897 	bl	80006a4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013576:	89fb      	ldrh	r3, [r7, #14]
 8013578:	4618      	mov	r0, r3
 801357a:	f7ff fd49 	bl	8013010 <ptr_to_mem>
 801357e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013580:	4b1d      	ldr	r3, [pc, #116]	; (80135f8 <mem_trim+0x21c>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	693a      	ldr	r2, [r7, #16]
 8013586:	429a      	cmp	r2, r3
 8013588:	d202      	bcs.n	8013590 <mem_trim+0x1b4>
      lfree = mem2;
 801358a:	4a1b      	ldr	r2, [pc, #108]	; (80135f8 <mem_trim+0x21c>)
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	2200      	movs	r2, #0
 8013594:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013596:	69bb      	ldr	r3, [r7, #24]
 8013598:	881a      	ldrh	r2, [r3, #0]
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	8afa      	ldrh	r2, [r7, #22]
 80135a2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80135a4:	69bb      	ldr	r3, [r7, #24]
 80135a6:	89fa      	ldrh	r2, [r7, #14]
 80135a8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	881b      	ldrh	r3, [r3, #0]
 80135ae:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 80135b2:	4293      	cmp	r3, r2
 80135b4:	d007      	beq.n	80135c6 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	881b      	ldrh	r3, [r3, #0]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7ff fd28 	bl	8013010 <ptr_to_mem>
 80135c0:	4602      	mov	r2, r0
 80135c2:	89fb      	ldrh	r3, [r7, #14]
 80135c4:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80135c6:	480a      	ldr	r0, [pc, #40]	; (80135f0 <mem_trim+0x214>)
 80135c8:	f004 fd7f 	bl	80180ca <sys_mutex_unlock>
  return rmem;
 80135cc:	687b      	ldr	r3, [r7, #4]
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3720      	adds	r7, #32
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
 80135d6:	bf00      	nop
 80135d8:	2400593c 	.word	0x2400593c
 80135dc:	24005940 	.word	0x24005940
 80135e0:	08018330 	.word	0x08018330
 80135e4:	080184bc 	.word	0x080184bc
 80135e8:	08018378 	.word	0x08018378
 80135ec:	080184d4 	.word	0x080184d4
 80135f0:	24005944 	.word	0x24005944
 80135f4:	080184f4 	.word	0x080184f4
 80135f8:	24005948 	.word	0x24005948

080135fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b088      	sub	sp, #32
 8013600:	af00      	add	r7, sp, #0
 8013602:	4603      	mov	r3, r0
 8013604:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013606:	88fb      	ldrh	r3, [r7, #6]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d101      	bne.n	8013610 <mem_malloc+0x14>
    return NULL;
 801360c:	2300      	movs	r3, #0
 801360e:	e0e6      	b.n	80137de <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013610:	88fb      	ldrh	r3, [r7, #6]
 8013612:	3303      	adds	r3, #3
 8013614:	b29b      	uxth	r3, r3
 8013616:	f023 0303 	bic.w	r3, r3, #3
 801361a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801361c:	8bbb      	ldrh	r3, [r7, #28]
 801361e:	2b0b      	cmp	r3, #11
 8013620:	d801      	bhi.n	8013626 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013622:	230c      	movs	r3, #12
 8013624:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013626:	8bbb      	ldrh	r3, [r7, #28]
 8013628:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 801362c:	4293      	cmp	r3, r2
 801362e:	d803      	bhi.n	8013638 <mem_malloc+0x3c>
 8013630:	8bba      	ldrh	r2, [r7, #28]
 8013632:	88fb      	ldrh	r3, [r7, #6]
 8013634:	429a      	cmp	r2, r3
 8013636:	d201      	bcs.n	801363c <mem_malloc+0x40>
    return NULL;
 8013638:	2300      	movs	r3, #0
 801363a:	e0d0      	b.n	80137de <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801363c:	486a      	ldr	r0, [pc, #424]	; (80137e8 <mem_malloc+0x1ec>)
 801363e:	f004 fd35 	bl	80180ac <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013642:	4b6a      	ldr	r3, [pc, #424]	; (80137ec <mem_malloc+0x1f0>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	4618      	mov	r0, r3
 8013648:	f7ff fcf4 	bl	8013034 <mem_to_ptr>
 801364c:	4603      	mov	r3, r0
 801364e:	83fb      	strh	r3, [r7, #30]
 8013650:	e0b9      	b.n	80137c6 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013652:	8bfb      	ldrh	r3, [r7, #30]
 8013654:	4618      	mov	r0, r3
 8013656:	f7ff fcdb 	bl	8013010 <ptr_to_mem>
 801365a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	791b      	ldrb	r3, [r3, #4]
 8013660:	2b00      	cmp	r3, #0
 8013662:	f040 80a9 	bne.w	80137b8 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	881b      	ldrh	r3, [r3, #0]
 801366a:	461a      	mov	r2, r3
 801366c:	8bfb      	ldrh	r3, [r7, #30]
 801366e:	1ad3      	subs	r3, r2, r3
 8013670:	f1a3 0208 	sub.w	r2, r3, #8
 8013674:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013676:	429a      	cmp	r2, r3
 8013678:	f0c0 809e 	bcc.w	80137b8 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801367c:	697b      	ldr	r3, [r7, #20]
 801367e:	881b      	ldrh	r3, [r3, #0]
 8013680:	461a      	mov	r2, r3
 8013682:	8bfb      	ldrh	r3, [r7, #30]
 8013684:	1ad3      	subs	r3, r2, r3
 8013686:	f1a3 0208 	sub.w	r2, r3, #8
 801368a:	8bbb      	ldrh	r3, [r7, #28]
 801368c:	3314      	adds	r3, #20
 801368e:	429a      	cmp	r2, r3
 8013690:	d335      	bcc.n	80136fe <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013692:	8bfa      	ldrh	r2, [r7, #30]
 8013694:	8bbb      	ldrh	r3, [r7, #28]
 8013696:	4413      	add	r3, r2
 8013698:	b29b      	uxth	r3, r3
 801369a:	3308      	adds	r3, #8
 801369c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801369e:	8a7b      	ldrh	r3, [r7, #18]
 80136a0:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 80136a4:	4293      	cmp	r3, r2
 80136a6:	d106      	bne.n	80136b6 <mem_malloc+0xba>
 80136a8:	4b51      	ldr	r3, [pc, #324]	; (80137f0 <mem_malloc+0x1f4>)
 80136aa:	f240 3287 	movw	r2, #903	; 0x387
 80136ae:	4951      	ldr	r1, [pc, #324]	; (80137f4 <mem_malloc+0x1f8>)
 80136b0:	4851      	ldr	r0, [pc, #324]	; (80137f8 <mem_malloc+0x1fc>)
 80136b2:	f7ec fff7 	bl	80006a4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80136b6:	8a7b      	ldrh	r3, [r7, #18]
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7ff fca9 	bl	8013010 <ptr_to_mem>
 80136be:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	2200      	movs	r2, #0
 80136c4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	881a      	ldrh	r2, [r3, #0]
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	8bfa      	ldrh	r2, [r7, #30]
 80136d2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	8a7a      	ldrh	r2, [r7, #18]
 80136d8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	2201      	movs	r2, #1
 80136de:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	881b      	ldrh	r3, [r3, #0]
 80136e4:	f647 72e8 	movw	r2, #32744	; 0x7fe8
 80136e8:	4293      	cmp	r3, r2
 80136ea:	d00b      	beq.n	8013704 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	881b      	ldrh	r3, [r3, #0]
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7ff fc8d 	bl	8013010 <ptr_to_mem>
 80136f6:	4602      	mov	r2, r0
 80136f8:	8a7b      	ldrh	r3, [r7, #18]
 80136fa:	8053      	strh	r3, [r2, #2]
 80136fc:	e002      	b.n	8013704 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	2201      	movs	r2, #1
 8013702:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013704:	4b39      	ldr	r3, [pc, #228]	; (80137ec <mem_malloc+0x1f0>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	697a      	ldr	r2, [r7, #20]
 801370a:	429a      	cmp	r2, r3
 801370c:	d127      	bne.n	801375e <mem_malloc+0x162>
          struct mem *cur = lfree;
 801370e:	4b37      	ldr	r3, [pc, #220]	; (80137ec <mem_malloc+0x1f0>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013714:	e005      	b.n	8013722 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	881b      	ldrh	r3, [r3, #0]
 801371a:	4618      	mov	r0, r3
 801371c:	f7ff fc78 	bl	8013010 <ptr_to_mem>
 8013720:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	791b      	ldrb	r3, [r3, #4]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d004      	beq.n	8013734 <mem_malloc+0x138>
 801372a:	4b34      	ldr	r3, [pc, #208]	; (80137fc <mem_malloc+0x200>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	69ba      	ldr	r2, [r7, #24]
 8013730:	429a      	cmp	r2, r3
 8013732:	d1f0      	bne.n	8013716 <mem_malloc+0x11a>
          }
          lfree = cur;
 8013734:	4a2d      	ldr	r2, [pc, #180]	; (80137ec <mem_malloc+0x1f0>)
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801373a:	4b2c      	ldr	r3, [pc, #176]	; (80137ec <mem_malloc+0x1f0>)
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	4b2f      	ldr	r3, [pc, #188]	; (80137fc <mem_malloc+0x200>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	429a      	cmp	r2, r3
 8013744:	d00b      	beq.n	801375e <mem_malloc+0x162>
 8013746:	4b29      	ldr	r3, [pc, #164]	; (80137ec <mem_malloc+0x1f0>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	791b      	ldrb	r3, [r3, #4]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d006      	beq.n	801375e <mem_malloc+0x162>
 8013750:	4b27      	ldr	r3, [pc, #156]	; (80137f0 <mem_malloc+0x1f4>)
 8013752:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013756:	492a      	ldr	r1, [pc, #168]	; (8013800 <mem_malloc+0x204>)
 8013758:	4827      	ldr	r0, [pc, #156]	; (80137f8 <mem_malloc+0x1fc>)
 801375a:	f7ec ffa3 	bl	80006a4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801375e:	4822      	ldr	r0, [pc, #136]	; (80137e8 <mem_malloc+0x1ec>)
 8013760:	f004 fcb3 	bl	80180ca <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013764:	8bba      	ldrh	r2, [r7, #28]
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	4413      	add	r3, r2
 801376a:	3308      	adds	r3, #8
 801376c:	4a23      	ldr	r2, [pc, #140]	; (80137fc <mem_malloc+0x200>)
 801376e:	6812      	ldr	r2, [r2, #0]
 8013770:	4293      	cmp	r3, r2
 8013772:	d906      	bls.n	8013782 <mem_malloc+0x186>
 8013774:	4b1e      	ldr	r3, [pc, #120]	; (80137f0 <mem_malloc+0x1f4>)
 8013776:	f240 32b9 	movw	r2, #953	; 0x3b9
 801377a:	4922      	ldr	r1, [pc, #136]	; (8013804 <mem_malloc+0x208>)
 801377c:	481e      	ldr	r0, [pc, #120]	; (80137f8 <mem_malloc+0x1fc>)
 801377e:	f7ec ff91 	bl	80006a4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	f003 0303 	and.w	r3, r3, #3
 8013788:	2b00      	cmp	r3, #0
 801378a:	d006      	beq.n	801379a <mem_malloc+0x19e>
 801378c:	4b18      	ldr	r3, [pc, #96]	; (80137f0 <mem_malloc+0x1f4>)
 801378e:	f240 32bb 	movw	r2, #955	; 0x3bb
 8013792:	491d      	ldr	r1, [pc, #116]	; (8013808 <mem_malloc+0x20c>)
 8013794:	4818      	ldr	r0, [pc, #96]	; (80137f8 <mem_malloc+0x1fc>)
 8013796:	f7ec ff85 	bl	80006a4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	f003 0303 	and.w	r3, r3, #3
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d006      	beq.n	80137b2 <mem_malloc+0x1b6>
 80137a4:	4b12      	ldr	r3, [pc, #72]	; (80137f0 <mem_malloc+0x1f4>)
 80137a6:	f240 32bd 	movw	r2, #957	; 0x3bd
 80137aa:	4918      	ldr	r1, [pc, #96]	; (801380c <mem_malloc+0x210>)
 80137ac:	4812      	ldr	r0, [pc, #72]	; (80137f8 <mem_malloc+0x1fc>)
 80137ae:	f7ec ff79 	bl	80006a4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	3308      	adds	r3, #8
 80137b6:	e012      	b.n	80137de <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 80137b8:	8bfb      	ldrh	r3, [r7, #30]
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7ff fc28 	bl	8013010 <ptr_to_mem>
 80137c0:	4603      	mov	r3, r0
 80137c2:	881b      	ldrh	r3, [r3, #0]
 80137c4:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80137c6:	8bfa      	ldrh	r2, [r7, #30]
 80137c8:	8bb9      	ldrh	r1, [r7, #28]
 80137ca:	f647 73e8 	movw	r3, #32744	; 0x7fe8
 80137ce:	1a5b      	subs	r3, r3, r1
 80137d0:	429a      	cmp	r2, r3
 80137d2:	f4ff af3e 	bcc.w	8013652 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80137d6:	4804      	ldr	r0, [pc, #16]	; (80137e8 <mem_malloc+0x1ec>)
 80137d8:	f004 fc77 	bl	80180ca <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80137dc:	2300      	movs	r3, #0
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3720      	adds	r7, #32
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	bf00      	nop
 80137e8:	24005944 	.word	0x24005944
 80137ec:	24005948 	.word	0x24005948
 80137f0:	08018330 	.word	0x08018330
 80137f4:	080184f4 	.word	0x080184f4
 80137f8:	08018378 	.word	0x08018378
 80137fc:	24005940 	.word	0x24005940
 8013800:	08018508 	.word	0x08018508
 8013804:	08018524 	.word	0x08018524
 8013808:	08018554 	.word	0x08018554
 801380c:	08018584 	.word	0x08018584

08013810 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013810:	b480      	push	{r7}
 8013812:	b085      	sub	sp, #20
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	689b      	ldr	r3, [r3, #8]
 801381c:	2200      	movs	r2, #0
 801381e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	3303      	adds	r3, #3
 8013826:	f023 0303 	bic.w	r3, r3, #3
 801382a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801382c:	2300      	movs	r3, #0
 801382e:	60fb      	str	r3, [r7, #12]
 8013830:	e011      	b.n	8013856 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	689b      	ldr	r3, [r3, #8]
 8013836:	681a      	ldr	r2, [r3, #0]
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	689b      	ldr	r3, [r3, #8]
 8013840:	68ba      	ldr	r2, [r7, #8]
 8013842:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	881b      	ldrh	r3, [r3, #0]
 8013848:	461a      	mov	r2, r3
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	4413      	add	r3, r2
 801384e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	3301      	adds	r3, #1
 8013854:	60fb      	str	r3, [r7, #12]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	885b      	ldrh	r3, [r3, #2]
 801385a:	461a      	mov	r2, r3
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	4293      	cmp	r3, r2
 8013860:	dbe7      	blt.n	8013832 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013862:	bf00      	nop
 8013864:	bf00      	nop
 8013866:	3714      	adds	r7, #20
 8013868:	46bd      	mov	sp, r7
 801386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386e:	4770      	bx	lr

08013870 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013876:	2300      	movs	r3, #0
 8013878:	80fb      	strh	r3, [r7, #6]
 801387a:	e009      	b.n	8013890 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801387c:	88fb      	ldrh	r3, [r7, #6]
 801387e:	4a08      	ldr	r2, [pc, #32]	; (80138a0 <memp_init+0x30>)
 8013880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013884:	4618      	mov	r0, r3
 8013886:	f7ff ffc3 	bl	8013810 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801388a:	88fb      	ldrh	r3, [r7, #6]
 801388c:	3301      	adds	r3, #1
 801388e:	80fb      	strh	r3, [r7, #6]
 8013890:	88fb      	ldrh	r3, [r7, #6]
 8013892:	2b0b      	cmp	r3, #11
 8013894:	d9f2      	bls.n	801387c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013896:	bf00      	nop
 8013898:	bf00      	nop
 801389a:	3708      	adds	r7, #8
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}
 80138a0:	08019dc0 	.word	0x08019dc0

080138a4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b084      	sub	sp, #16
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80138ac:	f004 fc40 	bl	8018130 <sys_arch_protect>
 80138b0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	689b      	ldr	r3, [r3, #8]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d015      	beq.n	80138ec <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	689b      	ldr	r3, [r3, #8]
 80138c4:	68ba      	ldr	r2, [r7, #8]
 80138c6:	6812      	ldr	r2, [r2, #0]
 80138c8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	f003 0303 	and.w	r3, r3, #3
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d006      	beq.n	80138e2 <do_memp_malloc_pool+0x3e>
 80138d4:	4b09      	ldr	r3, [pc, #36]	; (80138fc <do_memp_malloc_pool+0x58>)
 80138d6:	f44f 728c 	mov.w	r2, #280	; 0x118
 80138da:	4909      	ldr	r1, [pc, #36]	; (8013900 <do_memp_malloc_pool+0x5c>)
 80138dc:	4809      	ldr	r0, [pc, #36]	; (8013904 <do_memp_malloc_pool+0x60>)
 80138de:	f7ec fee1 	bl	80006a4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80138e2:	68f8      	ldr	r0, [r7, #12]
 80138e4:	f004 fc32 	bl	801814c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	e003      	b.n	80138f4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80138ec:	68f8      	ldr	r0, [r7, #12]
 80138ee:	f004 fc2d 	bl	801814c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80138f2:	2300      	movs	r3, #0
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3710      	adds	r7, #16
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	080185a8 	.word	0x080185a8
 8013900:	080185d8 	.word	0x080185d8
 8013904:	080185fc 	.word	0x080185fc

08013908 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d106      	bne.n	8013924 <memp_malloc_pool+0x1c>
 8013916:	4b0a      	ldr	r3, [pc, #40]	; (8013940 <memp_malloc_pool+0x38>)
 8013918:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801391c:	4909      	ldr	r1, [pc, #36]	; (8013944 <memp_malloc_pool+0x3c>)
 801391e:	480a      	ldr	r0, [pc, #40]	; (8013948 <memp_malloc_pool+0x40>)
 8013920:	f7ec fec0 	bl	80006a4 <iprintf>
  if (desc == NULL) {
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d101      	bne.n	801392e <memp_malloc_pool+0x26>
    return NULL;
 801392a:	2300      	movs	r3, #0
 801392c:	e003      	b.n	8013936 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f7ff ffb8 	bl	80138a4 <do_memp_malloc_pool>
 8013934:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013936:	4618      	mov	r0, r3
 8013938:	3708      	adds	r7, #8
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	080185a8 	.word	0x080185a8
 8013944:	08018624 	.word	0x08018624
 8013948:	080185fc 	.word	0x080185fc

0801394c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	4603      	mov	r3, r0
 8013954:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013956:	79fb      	ldrb	r3, [r7, #7]
 8013958:	2b0b      	cmp	r3, #11
 801395a:	d908      	bls.n	801396e <memp_malloc+0x22>
 801395c:	4b0a      	ldr	r3, [pc, #40]	; (8013988 <memp_malloc+0x3c>)
 801395e:	f240 1257 	movw	r2, #343	; 0x157
 8013962:	490a      	ldr	r1, [pc, #40]	; (801398c <memp_malloc+0x40>)
 8013964:	480a      	ldr	r0, [pc, #40]	; (8013990 <memp_malloc+0x44>)
 8013966:	f7ec fe9d 	bl	80006a4 <iprintf>
 801396a:	2300      	movs	r3, #0
 801396c:	e008      	b.n	8013980 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801396e:	79fb      	ldrb	r3, [r7, #7]
 8013970:	4a08      	ldr	r2, [pc, #32]	; (8013994 <memp_malloc+0x48>)
 8013972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013976:	4618      	mov	r0, r3
 8013978:	f7ff ff94 	bl	80138a4 <do_memp_malloc_pool>
 801397c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801397e:	68fb      	ldr	r3, [r7, #12]
}
 8013980:	4618      	mov	r0, r3
 8013982:	3710      	adds	r7, #16
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}
 8013988:	080185a8 	.word	0x080185a8
 801398c:	08018638 	.word	0x08018638
 8013990:	080185fc 	.word	0x080185fc
 8013994:	08019dc0 	.word	0x08019dc0

08013998 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	f003 0303 	and.w	r3, r3, #3
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d006      	beq.n	80139ba <do_memp_free_pool+0x22>
 80139ac:	4b0d      	ldr	r3, [pc, #52]	; (80139e4 <do_memp_free_pool+0x4c>)
 80139ae:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80139b2:	490d      	ldr	r1, [pc, #52]	; (80139e8 <do_memp_free_pool+0x50>)
 80139b4:	480d      	ldr	r0, [pc, #52]	; (80139ec <do_memp_free_pool+0x54>)
 80139b6:	f7ec fe75 	bl	80006a4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80139be:	f004 fbb7 	bl	8018130 <sys_arch_protect>
 80139c2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	689b      	ldr	r3, [r3, #8]
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	689b      	ldr	r3, [r3, #8]
 80139d2:	68fa      	ldr	r2, [r7, #12]
 80139d4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80139d6:	68b8      	ldr	r0, [r7, #8]
 80139d8:	f004 fbb8 	bl	801814c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80139dc:	bf00      	nop
 80139de:	3710      	adds	r7, #16
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	080185a8 	.word	0x080185a8
 80139e8:	08018658 	.word	0x08018658
 80139ec:	080185fc 	.word	0x080185fc

080139f0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b082      	sub	sp, #8
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
 80139f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d106      	bne.n	8013a0e <memp_free_pool+0x1e>
 8013a00:	4b0a      	ldr	r3, [pc, #40]	; (8013a2c <memp_free_pool+0x3c>)
 8013a02:	f240 1295 	movw	r2, #405	; 0x195
 8013a06:	490a      	ldr	r1, [pc, #40]	; (8013a30 <memp_free_pool+0x40>)
 8013a08:	480a      	ldr	r0, [pc, #40]	; (8013a34 <memp_free_pool+0x44>)
 8013a0a:	f7ec fe4b 	bl	80006a4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d007      	beq.n	8013a24 <memp_free_pool+0x34>
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d004      	beq.n	8013a24 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013a1a:	6839      	ldr	r1, [r7, #0]
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	f7ff ffbb 	bl	8013998 <do_memp_free_pool>
 8013a22:	e000      	b.n	8013a26 <memp_free_pool+0x36>
    return;
 8013a24:	bf00      	nop
}
 8013a26:	3708      	adds	r7, #8
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	080185a8 	.word	0x080185a8
 8013a30:	08018624 	.word	0x08018624
 8013a34:	080185fc 	.word	0x080185fc

08013a38 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b082      	sub	sp, #8
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	4603      	mov	r3, r0
 8013a40:	6039      	str	r1, [r7, #0]
 8013a42:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013a44:	79fb      	ldrb	r3, [r7, #7]
 8013a46:	2b0b      	cmp	r3, #11
 8013a48:	d907      	bls.n	8013a5a <memp_free+0x22>
 8013a4a:	4b0c      	ldr	r3, [pc, #48]	; (8013a7c <memp_free+0x44>)
 8013a4c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013a50:	490b      	ldr	r1, [pc, #44]	; (8013a80 <memp_free+0x48>)
 8013a52:	480c      	ldr	r0, [pc, #48]	; (8013a84 <memp_free+0x4c>)
 8013a54:	f7ec fe26 	bl	80006a4 <iprintf>
 8013a58:	e00c      	b.n	8013a74 <memp_free+0x3c>

  if (mem == NULL) {
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d008      	beq.n	8013a72 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013a60:	79fb      	ldrb	r3, [r7, #7]
 8013a62:	4a09      	ldr	r2, [pc, #36]	; (8013a88 <memp_free+0x50>)
 8013a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a68:	6839      	ldr	r1, [r7, #0]
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7ff ff94 	bl	8013998 <do_memp_free_pool>
 8013a70:	e000      	b.n	8013a74 <memp_free+0x3c>
    return;
 8013a72:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013a74:	3708      	adds	r7, #8
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	080185a8 	.word	0x080185a8
 8013a80:	08018678 	.word	0x08018678
 8013a84:	080185fc 	.word	0x080185fc
 8013a88:	08019dc0 	.word	0x08019dc0

08013a8c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013a8c:	b480      	push	{r7}
 8013a8e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013a90:	bf00      	nop
 8013a92:	46bd      	mov	sp, r7
 8013a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a98:	4770      	bx	lr
	...

08013a9c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b086      	sub	sp, #24
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
 8013aa8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d108      	bne.n	8013ac2 <netif_add+0x26>
 8013ab0:	4b61      	ldr	r3, [pc, #388]	; (8013c38 <netif_add+0x19c>)
 8013ab2:	f240 1227 	movw	r2, #295	; 0x127
 8013ab6:	4961      	ldr	r1, [pc, #388]	; (8013c3c <netif_add+0x1a0>)
 8013ab8:	4861      	ldr	r0, [pc, #388]	; (8013c40 <netif_add+0x1a4>)
 8013aba:	f7ec fdf3 	bl	80006a4 <iprintf>
 8013abe:	2300      	movs	r3, #0
 8013ac0:	e0b6      	b.n	8013c30 <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d108      	bne.n	8013ada <netif_add+0x3e>
 8013ac8:	4b5b      	ldr	r3, [pc, #364]	; (8013c38 <netif_add+0x19c>)
 8013aca:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013ace:	495d      	ldr	r1, [pc, #372]	; (8013c44 <netif_add+0x1a8>)
 8013ad0:	485b      	ldr	r0, [pc, #364]	; (8013c40 <netif_add+0x1a4>)
 8013ad2:	f7ec fde7 	bl	80006a4 <iprintf>
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	e0aa      	b.n	8013c30 <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d101      	bne.n	8013ae4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013ae0:	4b59      	ldr	r3, [pc, #356]	; (8013c48 <netif_add+0x1ac>)
 8013ae2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d101      	bne.n	8013aee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013aea:	4b57      	ldr	r3, [pc, #348]	; (8013c48 <netif_add+0x1ac>)
 8013aec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d101      	bne.n	8013af8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013af4:	4b54      	ldr	r3, [pc, #336]	; (8013c48 <netif_add+0x1ac>)
 8013af6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2200      	movs	r2, #0
 8013afc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	2200      	movs	r2, #0
 8013b02:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2200      	movs	r2, #0
 8013b08:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	4a4f      	ldr	r2, [pc, #316]	; (8013c4c <netif_add+0x1b0>)
 8013b0e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	2200      	movs	r2, #0
 8013b14:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	3324      	adds	r3, #36	; 0x24
 8013b22:	2204      	movs	r2, #4
 8013b24:	2100      	movs	r1, #0
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7ec fd54 	bl	80005d4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	2200      	movs	r2, #0
 8013b36:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	6a3a      	ldr	r2, [r7, #32]
 8013b3c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013b3e:	4b44      	ldr	r3, [pc, #272]	; (8013c50 <netif_add+0x1b4>)
 8013b40:	781a      	ldrb	r2, [r3, #0]
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b4c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	687a      	ldr	r2, [r7, #4]
 8013b52:	68b9      	ldr	r1, [r7, #8]
 8013b54:	68f8      	ldr	r0, [r7, #12]
 8013b56:	f000 f91d 	bl	8013d94 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b5c:	68f8      	ldr	r0, [r7, #12]
 8013b5e:	4798      	blx	r3
 8013b60:	4603      	mov	r3, r0
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d001      	beq.n	8013b6a <netif_add+0xce>
    return NULL;
 8013b66:	2300      	movs	r3, #0
 8013b68:	e062      	b.n	8013c30 <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013b70:	2bff      	cmp	r3, #255	; 0xff
 8013b72:	d103      	bne.n	8013b7c <netif_add+0xe0>
        netif->num = 0;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	2200      	movs	r2, #0
 8013b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013b80:	4b34      	ldr	r3, [pc, #208]	; (8013c54 <netif_add+0x1b8>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	617b      	str	r3, [r7, #20]
 8013b86:	e02b      	b.n	8013be0 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013b88:	697a      	ldr	r2, [r7, #20]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d106      	bne.n	8013b9e <netif_add+0x102>
 8013b90:	4b29      	ldr	r3, [pc, #164]	; (8013c38 <netif_add+0x19c>)
 8013b92:	f240 128b 	movw	r2, #395	; 0x18b
 8013b96:	4930      	ldr	r1, [pc, #192]	; (8013c58 <netif_add+0x1bc>)
 8013b98:	4829      	ldr	r0, [pc, #164]	; (8013c40 <netif_add+0x1a4>)
 8013b9a:	f7ec fd83 	bl	80006a4 <iprintf>
        num_netifs++;
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	3301      	adds	r3, #1
 8013ba2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	2bff      	cmp	r3, #255	; 0xff
 8013ba8:	dd06      	ble.n	8013bb8 <netif_add+0x11c>
 8013baa:	4b23      	ldr	r3, [pc, #140]	; (8013c38 <netif_add+0x19c>)
 8013bac:	f240 128d 	movw	r2, #397	; 0x18d
 8013bb0:	492a      	ldr	r1, [pc, #168]	; (8013c5c <netif_add+0x1c0>)
 8013bb2:	4823      	ldr	r0, [pc, #140]	; (8013c40 <netif_add+0x1a4>)
 8013bb4:	f7ec fd76 	bl	80006a4 <iprintf>
        if (netif2->num == netif->num) {
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d108      	bne.n	8013bda <netif_add+0x13e>
          netif->num++;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013bce:	3301      	adds	r3, #1
 8013bd0:	b2da      	uxtb	r2, r3
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8013bd8:	e005      	b.n	8013be6 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	617b      	str	r3, [r7, #20]
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d1d0      	bne.n	8013b88 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d1be      	bne.n	8013b6a <netif_add+0xce>
  }
  if (netif->num == 254) {
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013bf2:	2bfe      	cmp	r3, #254	; 0xfe
 8013bf4:	d103      	bne.n	8013bfe <netif_add+0x162>
    netif_num = 0;
 8013bf6:	4b16      	ldr	r3, [pc, #88]	; (8013c50 <netif_add+0x1b4>)
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	701a      	strb	r2, [r3, #0]
 8013bfc:	e006      	b.n	8013c0c <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013c04:	3301      	adds	r3, #1
 8013c06:	b2da      	uxtb	r2, r3
 8013c08:	4b11      	ldr	r3, [pc, #68]	; (8013c50 <netif_add+0x1b4>)
 8013c0a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013c0c:	4b11      	ldr	r3, [pc, #68]	; (8013c54 <netif_add+0x1b8>)
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013c14:	4a0f      	ldr	r2, [pc, #60]	; (8013c54 <netif_add+0x1b8>)
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c20:	f003 0320 	and.w	r3, r3, #32
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d002      	beq.n	8013c2e <netif_add+0x192>
    igmp_start(netif);
 8013c28:	68f8      	ldr	r0, [r7, #12]
 8013c2a:	f002 fc83 	bl	8016534 <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	3718      	adds	r7, #24
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	08018694 	.word	0x08018694
 8013c3c:	08018728 	.word	0x08018728
 8013c40:	080186e4 	.word	0x080186e4
 8013c44:	08018744 	.word	0x08018744
 8013c48:	08019e08 	.word	0x08019e08
 8013c4c:	08014083 	.word	0x08014083
 8013c50:	2400597c 	.word	0x2400597c
 8013c54:	24009310 	.word	0x24009310
 8013c58:	08018768 	.word	0x08018768
 8013c5c:	0801877c 	.word	0x0801877c

08013c60 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013c6a:	6839      	ldr	r1, [r7, #0]
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f001 fb1b 	bl	80152a8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8013c72:	6839      	ldr	r1, [r7, #0]
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f001 f803 	bl	8014c80 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 8013c7a:	bf00      	nop
 8013c7c:	3708      	adds	r7, #8
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
	...

08013c84 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	60b9      	str	r1, [r7, #8]
 8013c8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d106      	bne.n	8013ca4 <netif_do_set_ipaddr+0x20>
 8013c96:	4b1d      	ldr	r3, [pc, #116]	; (8013d0c <netif_do_set_ipaddr+0x88>)
 8013c98:	f240 12cb 	movw	r2, #459	; 0x1cb
 8013c9c:	491c      	ldr	r1, [pc, #112]	; (8013d10 <netif_do_set_ipaddr+0x8c>)
 8013c9e:	481d      	ldr	r0, [pc, #116]	; (8013d14 <netif_do_set_ipaddr+0x90>)
 8013ca0:	f7ec fd00 	bl	80006a4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d106      	bne.n	8013cb8 <netif_do_set_ipaddr+0x34>
 8013caa:	4b18      	ldr	r3, [pc, #96]	; (8013d0c <netif_do_set_ipaddr+0x88>)
 8013cac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013cb0:	4917      	ldr	r1, [pc, #92]	; (8013d10 <netif_do_set_ipaddr+0x8c>)
 8013cb2:	4818      	ldr	r0, [pc, #96]	; (8013d14 <netif_do_set_ipaddr+0x90>)
 8013cb4:	f7ec fcf6 	bl	80006a4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	3304      	adds	r3, #4
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d01c      	beq.n	8013d00 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	3304      	adds	r3, #4
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013cd6:	f107 0314 	add.w	r3, r7, #20
 8013cda:	4619      	mov	r1, r3
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f7ff ffbf 	bl	8013c60 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d002      	beq.n	8013cee <netif_do_set_ipaddr+0x6a>
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	e000      	b.n	8013cf0 <netif_do_set_ipaddr+0x6c>
 8013cee:	2300      	movs	r3, #0
 8013cf0:	68fa      	ldr	r2, [r7, #12]
 8013cf2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013cf4:	2101      	movs	r1, #1
 8013cf6:	68f8      	ldr	r0, [r7, #12]
 8013cf8:	f000 f8d2 	bl	8013ea0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	e000      	b.n	8013d02 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013d00:	2300      	movs	r3, #0
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3718      	adds	r7, #24
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	08018694 	.word	0x08018694
 8013d10:	080187ac 	.word	0x080187ac
 8013d14:	080186e4 	.word	0x080186e4

08013d18 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b085      	sub	sp, #20
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	3308      	adds	r3, #8
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d00a      	beq.n	8013d48 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d002      	beq.n	8013d3e <netif_do_set_netmask+0x26>
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	e000      	b.n	8013d40 <netif_do_set_netmask+0x28>
 8013d3e:	2300      	movs	r3, #0
 8013d40:	68fa      	ldr	r2, [r7, #12]
 8013d42:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013d44:	2301      	movs	r3, #1
 8013d46:	e000      	b.n	8013d4a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013d48:	2300      	movs	r3, #0
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3714      	adds	r7, #20
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr

08013d56 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013d56:	b480      	push	{r7}
 8013d58:	b085      	sub	sp, #20
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	60f8      	str	r0, [r7, #12]
 8013d5e:	60b9      	str	r1, [r7, #8]
 8013d60:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	681a      	ldr	r2, [r3, #0]
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	330c      	adds	r3, #12
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d00a      	beq.n	8013d86 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d002      	beq.n	8013d7c <netif_do_set_gw+0x26>
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	e000      	b.n	8013d7e <netif_do_set_gw+0x28>
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	68fa      	ldr	r2, [r7, #12]
 8013d80:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013d82:	2301      	movs	r3, #1
 8013d84:	e000      	b.n	8013d88 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013d86:	2300      	movs	r3, #0
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3714      	adds	r7, #20
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d92:	4770      	bx	lr

08013d94 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b088      	sub	sp, #32
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	60f8      	str	r0, [r7, #12]
 8013d9c:	60b9      	str	r1, [r7, #8]
 8013d9e:	607a      	str	r2, [r7, #4]
 8013da0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013da2:	2300      	movs	r3, #0
 8013da4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013da6:	2300      	movs	r3, #0
 8013da8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d101      	bne.n	8013db4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013db0:	4b1c      	ldr	r3, [pc, #112]	; (8013e24 <netif_set_addr+0x90>)
 8013db2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d101      	bne.n	8013dbe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013dba:	4b1a      	ldr	r3, [pc, #104]	; (8013e24 <netif_set_addr+0x90>)
 8013dbc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d101      	bne.n	8013dc8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013dc4:	4b17      	ldr	r3, [pc, #92]	; (8013e24 <netif_set_addr+0x90>)
 8013dc6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d003      	beq.n	8013dd6 <netif_set_addr+0x42>
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d101      	bne.n	8013dda <netif_set_addr+0x46>
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	e000      	b.n	8013ddc <netif_set_addr+0x48>
 8013dda:	2300      	movs	r3, #0
 8013ddc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013dde:	697b      	ldr	r3, [r7, #20]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d006      	beq.n	8013df2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013de4:	f107 0310 	add.w	r3, r7, #16
 8013de8:	461a      	mov	r2, r3
 8013dea:	68b9      	ldr	r1, [r7, #8]
 8013dec:	68f8      	ldr	r0, [r7, #12]
 8013dee:	f7ff ff49 	bl	8013c84 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013df2:	69fa      	ldr	r2, [r7, #28]
 8013df4:	6879      	ldr	r1, [r7, #4]
 8013df6:	68f8      	ldr	r0, [r7, #12]
 8013df8:	f7ff ff8e 	bl	8013d18 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013dfc:	69ba      	ldr	r2, [r7, #24]
 8013dfe:	6839      	ldr	r1, [r7, #0]
 8013e00:	68f8      	ldr	r0, [r7, #12]
 8013e02:	f7ff ffa8 	bl	8013d56 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d106      	bne.n	8013e1a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013e0c:	f107 0310 	add.w	r3, r7, #16
 8013e10:	461a      	mov	r2, r3
 8013e12:	68b9      	ldr	r1, [r7, #8]
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f7ff ff35 	bl	8013c84 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013e1a:	bf00      	nop
 8013e1c:	3720      	adds	r7, #32
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}
 8013e22:	bf00      	nop
 8013e24:	08019e08 	.word	0x08019e08

08013e28 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013e30:	4a04      	ldr	r2, [pc, #16]	; (8013e44 <netif_set_default+0x1c>)
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013e36:	bf00      	nop
 8013e38:	370c      	adds	r7, #12
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e40:	4770      	bx	lr
 8013e42:	bf00      	nop
 8013e44:	24009314 	.word	0x24009314

08013e48 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b082      	sub	sp, #8
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d107      	bne.n	8013e66 <netif_set_up+0x1e>
 8013e56:	4b0f      	ldr	r3, [pc, #60]	; (8013e94 <netif_set_up+0x4c>)
 8013e58:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013e5c:	490e      	ldr	r1, [pc, #56]	; (8013e98 <netif_set_up+0x50>)
 8013e5e:	480f      	ldr	r0, [pc, #60]	; (8013e9c <netif_set_up+0x54>)
 8013e60:	f7ec fc20 	bl	80006a4 <iprintf>
 8013e64:	e013      	b.n	8013e8e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013e6c:	f003 0301 	and.w	r3, r3, #1
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d10c      	bne.n	8013e8e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013e7a:	f043 0301 	orr.w	r3, r3, #1
 8013e7e:	b2da      	uxtb	r2, r3
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013e86:	2103      	movs	r1, #3
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f000 f809 	bl	8013ea0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013e8e:	3708      	adds	r7, #8
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	08018694 	.word	0x08018694
 8013e98:	0801881c 	.word	0x0801881c
 8013e9c:	080186e4 	.word	0x080186e4

08013ea0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b082      	sub	sp, #8
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	460b      	mov	r3, r1
 8013eaa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d106      	bne.n	8013ec0 <netif_issue_reports+0x20>
 8013eb2:	4b1d      	ldr	r3, [pc, #116]	; (8013f28 <netif_issue_reports+0x88>)
 8013eb4:	f240 326d 	movw	r2, #877	; 0x36d
 8013eb8:	491c      	ldr	r1, [pc, #112]	; (8013f2c <netif_issue_reports+0x8c>)
 8013eba:	481d      	ldr	r0, [pc, #116]	; (8013f30 <netif_issue_reports+0x90>)
 8013ebc:	f7ec fbf2 	bl	80006a4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013ec6:	f003 0304 	and.w	r3, r3, #4
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d028      	beq.n	8013f20 <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013ed4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d021      	beq.n	8013f20 <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013edc:	78fb      	ldrb	r3, [r7, #3]
 8013ede:	f003 0301 	and.w	r3, r3, #1
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d01d      	beq.n	8013f22 <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	3304      	adds	r3, #4
 8013eea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d018      	beq.n	8013f22 <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013ef6:	f003 0308 	and.w	r3, r3, #8
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d005      	beq.n	8013f0a <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	3304      	adds	r3, #4
 8013f02:	4619      	mov	r1, r3
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f002 f939 	bl	801617c <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f10:	f003 0320 	and.w	r3, r3, #32
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d004      	beq.n	8013f22 <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f002 fb35 	bl	8016588 <igmp_report_groups>
 8013f1e:	e000      	b.n	8013f22 <netif_issue_reports+0x82>
    return;
 8013f20:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013f22:	3708      	adds	r7, #8
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}
 8013f28:	08018694 	.word	0x08018694
 8013f2c:	08018838 	.word	0x08018838
 8013f30:	080186e4 	.word	0x080186e4

08013f34 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d107      	bne.n	8013f52 <netif_set_down+0x1e>
 8013f42:	4b12      	ldr	r3, [pc, #72]	; (8013f8c <netif_set_down+0x58>)
 8013f44:	f240 329b 	movw	r2, #923	; 0x39b
 8013f48:	4911      	ldr	r1, [pc, #68]	; (8013f90 <netif_set_down+0x5c>)
 8013f4a:	4812      	ldr	r0, [pc, #72]	; (8013f94 <netif_set_down+0x60>)
 8013f4c:	f7ec fbaa 	bl	80006a4 <iprintf>
 8013f50:	e019      	b.n	8013f86 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f58:	f003 0301 	and.w	r3, r3, #1
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d012      	beq.n	8013f86 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f66:	f023 0301 	bic.w	r3, r3, #1
 8013f6a:	b2da      	uxtb	r2, r3
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f78:	f003 0308 	and.w	r3, r3, #8
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d002      	beq.n	8013f86 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f001 fcb9 	bl	80158f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013f86:	3708      	adds	r7, #8
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	08018694 	.word	0x08018694
 8013f90:	0801885c 	.word	0x0801885c
 8013f94:	080186e4 	.word	0x080186e4

08013f98 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d107      	bne.n	8013fb6 <netif_set_link_up+0x1e>
 8013fa6:	4b13      	ldr	r3, [pc, #76]	; (8013ff4 <netif_set_link_up+0x5c>)
 8013fa8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8013fac:	4912      	ldr	r1, [pc, #72]	; (8013ff8 <netif_set_link_up+0x60>)
 8013fae:	4813      	ldr	r0, [pc, #76]	; (8013ffc <netif_set_link_up+0x64>)
 8013fb0:	f7ec fb78 	bl	80006a4 <iprintf>
 8013fb4:	e01b      	b.n	8013fee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013fbc:	f003 0304 	and.w	r3, r3, #4
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d114      	bne.n	8013fee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013fca:	f043 0304 	orr.w	r3, r3, #4
 8013fce:	b2da      	uxtb	r2, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013fd6:	2103      	movs	r1, #3
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f7ff ff61 	bl	8013ea0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	69db      	ldr	r3, [r3, #28]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d003      	beq.n	8013fee <netif_set_link_up+0x56>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	69db      	ldr	r3, [r3, #28]
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	08018694 	.word	0x08018694
 8013ff8:	0801887c 	.word	0x0801887c
 8013ffc:	080186e4 	.word	0x080186e4

08014000 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d107      	bne.n	801401e <netif_set_link_down+0x1e>
 801400e:	4b11      	ldr	r3, [pc, #68]	; (8014054 <netif_set_link_down+0x54>)
 8014010:	f240 4206 	movw	r2, #1030	; 0x406
 8014014:	4910      	ldr	r1, [pc, #64]	; (8014058 <netif_set_link_down+0x58>)
 8014016:	4811      	ldr	r0, [pc, #68]	; (801405c <netif_set_link_down+0x5c>)
 8014018:	f7ec fb44 	bl	80006a4 <iprintf>
 801401c:	e017      	b.n	801404e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014024:	f003 0304 	and.w	r3, r3, #4
 8014028:	2b00      	cmp	r3, #0
 801402a:	d010      	beq.n	801404e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014032:	f023 0304 	bic.w	r3, r3, #4
 8014036:	b2da      	uxtb	r2, r3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	69db      	ldr	r3, [r3, #28]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d003      	beq.n	801404e <netif_set_link_down+0x4e>
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	69db      	ldr	r3, [r3, #28]
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801404e:	3708      	adds	r7, #8
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}
 8014054:	08018694 	.word	0x08018694
 8014058:	080188a0 	.word	0x080188a0
 801405c:	080186e4 	.word	0x080186e4

08014060 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8014060:	b480      	push	{r7}
 8014062:	b083      	sub	sp, #12
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d002      	beq.n	8014076 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	683a      	ldr	r2, [r7, #0]
 8014074:	61da      	str	r2, [r3, #28]
  }
}
 8014076:	bf00      	nop
 8014078:	370c      	adds	r7, #12
 801407a:	46bd      	mov	sp, r7
 801407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014080:	4770      	bx	lr

08014082 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8014082:	b480      	push	{r7}
 8014084:	b085      	sub	sp, #20
 8014086:	af00      	add	r7, sp, #0
 8014088:	60f8      	str	r0, [r7, #12]
 801408a:	60b9      	str	r1, [r7, #8]
 801408c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801408e:	f06f 030b 	mvn.w	r3, #11
}
 8014092:	4618      	mov	r0, r3
 8014094:	3714      	adds	r7, #20
 8014096:	46bd      	mov	sp, r7
 8014098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409c:	4770      	bx	lr

0801409e <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801409e:	b480      	push	{r7}
 80140a0:	b085      	sub	sp, #20
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	60f8      	str	r0, [r7, #12]
 80140a6:	60b9      	str	r1, [r7, #8]
 80140a8:	4611      	mov	r1, r2
 80140aa:	461a      	mov	r2, r3
 80140ac:	460b      	mov	r3, r1
 80140ae:	80fb      	strh	r3, [r7, #6]
 80140b0:	4613      	mov	r3, r2
 80140b2:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	2200      	movs	r2, #0
 80140b8:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	68ba      	ldr	r2, [r7, #8]
 80140be:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	88fa      	ldrh	r2, [r7, #6]
 80140c4:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	88ba      	ldrh	r2, [r7, #4]
 80140ca:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80140cc:	8b3b      	ldrh	r3, [r7, #24]
 80140ce:	b2da      	uxtb	r2, r3
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	7f3a      	ldrb	r2, [r7, #28]
 80140d8:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	2201      	movs	r2, #1
 80140de:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2200      	movs	r2, #0
 80140e4:	73da      	strb	r2, [r3, #15]
}
 80140e6:	bf00      	nop
 80140e8:	3714      	adds	r7, #20
 80140ea:	46bd      	mov	sp, r7
 80140ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f0:	4770      	bx	lr
	...

080140f4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b08c      	sub	sp, #48	; 0x30
 80140f8:	af02      	add	r7, sp, #8
 80140fa:	4603      	mov	r3, r0
 80140fc:	71fb      	strb	r3, [r7, #7]
 80140fe:	460b      	mov	r3, r1
 8014100:	80bb      	strh	r3, [r7, #4]
 8014102:	4613      	mov	r3, r2
 8014104:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014106:	79fb      	ldrb	r3, [r7, #7]
 8014108:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801410a:	887b      	ldrh	r3, [r7, #2]
 801410c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014110:	d07d      	beq.n	801420e <pbuf_alloc+0x11a>
 8014112:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014116:	f300 80c6 	bgt.w	80142a6 <pbuf_alloc+0x1b2>
 801411a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801411e:	d010      	beq.n	8014142 <pbuf_alloc+0x4e>
 8014120:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014124:	f300 80bf 	bgt.w	80142a6 <pbuf_alloc+0x1b2>
 8014128:	2b01      	cmp	r3, #1
 801412a:	d002      	beq.n	8014132 <pbuf_alloc+0x3e>
 801412c:	2b41      	cmp	r3, #65	; 0x41
 801412e:	f040 80ba 	bne.w	80142a6 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014132:	887a      	ldrh	r2, [r7, #2]
 8014134:	88bb      	ldrh	r3, [r7, #4]
 8014136:	4619      	mov	r1, r3
 8014138:	2000      	movs	r0, #0
 801413a:	f000 f8cf 	bl	80142dc <pbuf_alloc_reference>
 801413e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8014140:	e0bb      	b.n	80142ba <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014142:	2300      	movs	r3, #0
 8014144:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014146:	2300      	movs	r3, #0
 8014148:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801414a:	88bb      	ldrh	r3, [r7, #4]
 801414c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801414e:	200b      	movs	r0, #11
 8014150:	f7ff fbfc 	bl	801394c <memp_malloc>
 8014154:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d107      	bne.n	801416c <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415e:	2b00      	cmp	r3, #0
 8014160:	d002      	beq.n	8014168 <pbuf_alloc+0x74>
            pbuf_free(p);
 8014162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014164:	f000 faa8 	bl	80146b8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014168:	2300      	movs	r3, #0
 801416a:	e0a7      	b.n	80142bc <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801416c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801416e:	3303      	adds	r3, #3
 8014170:	b29b      	uxth	r3, r3
 8014172:	f023 0303 	bic.w	r3, r3, #3
 8014176:	b29b      	uxth	r3, r3
 8014178:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801417c:	b29b      	uxth	r3, r3
 801417e:	8b7a      	ldrh	r2, [r7, #26]
 8014180:	4293      	cmp	r3, r2
 8014182:	bf28      	it	cs
 8014184:	4613      	movcs	r3, r2
 8014186:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801418a:	3310      	adds	r3, #16
 801418c:	693a      	ldr	r2, [r7, #16]
 801418e:	4413      	add	r3, r2
 8014190:	3303      	adds	r3, #3
 8014192:	f023 0303 	bic.w	r3, r3, #3
 8014196:	4618      	mov	r0, r3
 8014198:	89f9      	ldrh	r1, [r7, #14]
 801419a:	8b7a      	ldrh	r2, [r7, #26]
 801419c:	2300      	movs	r3, #0
 801419e:	9301      	str	r3, [sp, #4]
 80141a0:	887b      	ldrh	r3, [r7, #2]
 80141a2:	9300      	str	r3, [sp, #0]
 80141a4:	460b      	mov	r3, r1
 80141a6:	4601      	mov	r1, r0
 80141a8:	6938      	ldr	r0, [r7, #16]
 80141aa:	f7ff ff78 	bl	801409e <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	f003 0303 	and.w	r3, r3, #3
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d006      	beq.n	80141c8 <pbuf_alloc+0xd4>
 80141ba:	4b42      	ldr	r3, [pc, #264]	; (80142c4 <pbuf_alloc+0x1d0>)
 80141bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80141c0:	4941      	ldr	r1, [pc, #260]	; (80142c8 <pbuf_alloc+0x1d4>)
 80141c2:	4842      	ldr	r0, [pc, #264]	; (80142cc <pbuf_alloc+0x1d8>)
 80141c4:	f7ec fa6e 	bl	80006a4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80141c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141ca:	3303      	adds	r3, #3
 80141cc:	f023 0303 	bic.w	r3, r3, #3
 80141d0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80141d4:	d106      	bne.n	80141e4 <pbuf_alloc+0xf0>
 80141d6:	4b3b      	ldr	r3, [pc, #236]	; (80142c4 <pbuf_alloc+0x1d0>)
 80141d8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80141dc:	493c      	ldr	r1, [pc, #240]	; (80142d0 <pbuf_alloc+0x1dc>)
 80141de:	483b      	ldr	r0, [pc, #236]	; (80142cc <pbuf_alloc+0x1d8>)
 80141e0:	f7ec fa60 	bl	80006a4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80141e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d102      	bne.n	80141f0 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80141ea:	693b      	ldr	r3, [r7, #16]
 80141ec:	627b      	str	r3, [r7, #36]	; 0x24
 80141ee:	e002      	b.n	80141f6 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	693a      	ldr	r2, [r7, #16]
 80141f4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80141fa:	8b7a      	ldrh	r2, [r7, #26]
 80141fc:	89fb      	ldrh	r3, [r7, #14]
 80141fe:	1ad3      	subs	r3, r2, r3
 8014200:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014202:	2300      	movs	r3, #0
 8014204:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8014206:	8b7b      	ldrh	r3, [r7, #26]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d1a0      	bne.n	801414e <pbuf_alloc+0x5a>
      break;
 801420c:	e055      	b.n	80142ba <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801420e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014210:	3303      	adds	r3, #3
 8014212:	b29b      	uxth	r3, r3
 8014214:	f023 0303 	bic.w	r3, r3, #3
 8014218:	b29a      	uxth	r2, r3
 801421a:	88bb      	ldrh	r3, [r7, #4]
 801421c:	3303      	adds	r3, #3
 801421e:	b29b      	uxth	r3, r3
 8014220:	f023 0303 	bic.w	r3, r3, #3
 8014224:	b29b      	uxth	r3, r3
 8014226:	4413      	add	r3, r2
 8014228:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801422a:	8b3b      	ldrh	r3, [r7, #24]
 801422c:	3310      	adds	r3, #16
 801422e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014230:	8b3a      	ldrh	r2, [r7, #24]
 8014232:	88bb      	ldrh	r3, [r7, #4]
 8014234:	3303      	adds	r3, #3
 8014236:	f023 0303 	bic.w	r3, r3, #3
 801423a:	429a      	cmp	r2, r3
 801423c:	d306      	bcc.n	801424c <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801423e:	8afa      	ldrh	r2, [r7, #22]
 8014240:	88bb      	ldrh	r3, [r7, #4]
 8014242:	3303      	adds	r3, #3
 8014244:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014248:	429a      	cmp	r2, r3
 801424a:	d201      	bcs.n	8014250 <pbuf_alloc+0x15c>
        return NULL;
 801424c:	2300      	movs	r3, #0
 801424e:	e035      	b.n	80142bc <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014250:	8afb      	ldrh	r3, [r7, #22]
 8014252:	4618      	mov	r0, r3
 8014254:	f7ff f9d2 	bl	80135fc <mem_malloc>
 8014258:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425c:	2b00      	cmp	r3, #0
 801425e:	d101      	bne.n	8014264 <pbuf_alloc+0x170>
        return NULL;
 8014260:	2300      	movs	r3, #0
 8014262:	e02b      	b.n	80142bc <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014264:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014266:	3310      	adds	r3, #16
 8014268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801426a:	4413      	add	r3, r2
 801426c:	3303      	adds	r3, #3
 801426e:	f023 0303 	bic.w	r3, r3, #3
 8014272:	4618      	mov	r0, r3
 8014274:	88b9      	ldrh	r1, [r7, #4]
 8014276:	88ba      	ldrh	r2, [r7, #4]
 8014278:	2300      	movs	r3, #0
 801427a:	9301      	str	r3, [sp, #4]
 801427c:	887b      	ldrh	r3, [r7, #2]
 801427e:	9300      	str	r3, [sp, #0]
 8014280:	460b      	mov	r3, r1
 8014282:	4601      	mov	r1, r0
 8014284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014286:	f7ff ff0a 	bl	801409e <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	f003 0303 	and.w	r3, r3, #3
 8014292:	2b00      	cmp	r3, #0
 8014294:	d010      	beq.n	80142b8 <pbuf_alloc+0x1c4>
 8014296:	4b0b      	ldr	r3, [pc, #44]	; (80142c4 <pbuf_alloc+0x1d0>)
 8014298:	f44f 7291 	mov.w	r2, #290	; 0x122
 801429c:	490d      	ldr	r1, [pc, #52]	; (80142d4 <pbuf_alloc+0x1e0>)
 801429e:	480b      	ldr	r0, [pc, #44]	; (80142cc <pbuf_alloc+0x1d8>)
 80142a0:	f7ec fa00 	bl	80006a4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80142a4:	e008      	b.n	80142b8 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80142a6:	4b07      	ldr	r3, [pc, #28]	; (80142c4 <pbuf_alloc+0x1d0>)
 80142a8:	f240 1227 	movw	r2, #295	; 0x127
 80142ac:	490a      	ldr	r1, [pc, #40]	; (80142d8 <pbuf_alloc+0x1e4>)
 80142ae:	4807      	ldr	r0, [pc, #28]	; (80142cc <pbuf_alloc+0x1d8>)
 80142b0:	f7ec f9f8 	bl	80006a4 <iprintf>
      return NULL;
 80142b4:	2300      	movs	r3, #0
 80142b6:	e001      	b.n	80142bc <pbuf_alloc+0x1c8>
      break;
 80142b8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80142ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80142bc:	4618      	mov	r0, r3
 80142be:	3728      	adds	r7, #40	; 0x28
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}
 80142c4:	080188c4 	.word	0x080188c4
 80142c8:	080188f4 	.word	0x080188f4
 80142cc:	08018924 	.word	0x08018924
 80142d0:	0801894c 	.word	0x0801894c
 80142d4:	08018980 	.word	0x08018980
 80142d8:	080189ac 	.word	0x080189ac

080142dc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b086      	sub	sp, #24
 80142e0:	af02      	add	r7, sp, #8
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	460b      	mov	r3, r1
 80142e6:	807b      	strh	r3, [r7, #2]
 80142e8:	4613      	mov	r3, r2
 80142ea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80142ec:	883b      	ldrh	r3, [r7, #0]
 80142ee:	2b41      	cmp	r3, #65	; 0x41
 80142f0:	d009      	beq.n	8014306 <pbuf_alloc_reference+0x2a>
 80142f2:	883b      	ldrh	r3, [r7, #0]
 80142f4:	2b01      	cmp	r3, #1
 80142f6:	d006      	beq.n	8014306 <pbuf_alloc_reference+0x2a>
 80142f8:	4b0f      	ldr	r3, [pc, #60]	; (8014338 <pbuf_alloc_reference+0x5c>)
 80142fa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80142fe:	490f      	ldr	r1, [pc, #60]	; (801433c <pbuf_alloc_reference+0x60>)
 8014300:	480f      	ldr	r0, [pc, #60]	; (8014340 <pbuf_alloc_reference+0x64>)
 8014302:	f7ec f9cf 	bl	80006a4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014306:	200a      	movs	r0, #10
 8014308:	f7ff fb20 	bl	801394c <memp_malloc>
 801430c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d101      	bne.n	8014318 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014314:	2300      	movs	r3, #0
 8014316:	e00b      	b.n	8014330 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014318:	8879      	ldrh	r1, [r7, #2]
 801431a:	887a      	ldrh	r2, [r7, #2]
 801431c:	2300      	movs	r3, #0
 801431e:	9301      	str	r3, [sp, #4]
 8014320:	883b      	ldrh	r3, [r7, #0]
 8014322:	9300      	str	r3, [sp, #0]
 8014324:	460b      	mov	r3, r1
 8014326:	6879      	ldr	r1, [r7, #4]
 8014328:	68f8      	ldr	r0, [r7, #12]
 801432a:	f7ff feb8 	bl	801409e <pbuf_init_alloced_pbuf>
  return p;
 801432e:	68fb      	ldr	r3, [r7, #12]
}
 8014330:	4618      	mov	r0, r3
 8014332:	3710      	adds	r7, #16
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}
 8014338:	080188c4 	.word	0x080188c4
 801433c:	080189c8 	.word	0x080189c8
 8014340:	08018924 	.word	0x08018924

08014344 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b088      	sub	sp, #32
 8014348:	af02      	add	r7, sp, #8
 801434a:	607b      	str	r3, [r7, #4]
 801434c:	4603      	mov	r3, r0
 801434e:	73fb      	strb	r3, [r7, #15]
 8014350:	460b      	mov	r3, r1
 8014352:	81bb      	strh	r3, [r7, #12]
 8014354:	4613      	mov	r3, r2
 8014356:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014358:	7bfb      	ldrb	r3, [r7, #15]
 801435a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801435c:	8a7b      	ldrh	r3, [r7, #18]
 801435e:	3303      	adds	r3, #3
 8014360:	f023 0203 	bic.w	r2, r3, #3
 8014364:	89bb      	ldrh	r3, [r7, #12]
 8014366:	441a      	add	r2, r3
 8014368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801436a:	429a      	cmp	r2, r3
 801436c:	d901      	bls.n	8014372 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801436e:	2300      	movs	r3, #0
 8014370:	e018      	b.n	80143a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014372:	6a3b      	ldr	r3, [r7, #32]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d007      	beq.n	8014388 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014378:	8a7b      	ldrh	r3, [r7, #18]
 801437a:	3303      	adds	r3, #3
 801437c:	f023 0303 	bic.w	r3, r3, #3
 8014380:	6a3a      	ldr	r2, [r7, #32]
 8014382:	4413      	add	r3, r2
 8014384:	617b      	str	r3, [r7, #20]
 8014386:	e001      	b.n	801438c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014388:	2300      	movs	r3, #0
 801438a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	89b9      	ldrh	r1, [r7, #12]
 8014390:	89ba      	ldrh	r2, [r7, #12]
 8014392:	2302      	movs	r3, #2
 8014394:	9301      	str	r3, [sp, #4]
 8014396:	897b      	ldrh	r3, [r7, #10]
 8014398:	9300      	str	r3, [sp, #0]
 801439a:	460b      	mov	r3, r1
 801439c:	6979      	ldr	r1, [r7, #20]
 801439e:	f7ff fe7e 	bl	801409e <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80143a2:	687b      	ldr	r3, [r7, #4]
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3718      	adds	r7, #24
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}

080143ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b084      	sub	sp, #16
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	460b      	mov	r3, r1
 80143b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d106      	bne.n	80143cc <pbuf_realloc+0x20>
 80143be:	4b3a      	ldr	r3, [pc, #232]	; (80144a8 <pbuf_realloc+0xfc>)
 80143c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80143c4:	4939      	ldr	r1, [pc, #228]	; (80144ac <pbuf_realloc+0x100>)
 80143c6:	483a      	ldr	r0, [pc, #232]	; (80144b0 <pbuf_realloc+0x104>)
 80143c8:	f7ec f96c 	bl	80006a4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	891b      	ldrh	r3, [r3, #8]
 80143d0:	887a      	ldrh	r2, [r7, #2]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d263      	bcs.n	801449e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	891a      	ldrh	r2, [r3, #8]
 80143da:	887b      	ldrh	r3, [r7, #2]
 80143dc:	1ad3      	subs	r3, r2, r3
 80143de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80143e0:	887b      	ldrh	r3, [r7, #2]
 80143e2:	817b      	strh	r3, [r7, #10]
  q = p;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80143e8:	e018      	b.n	801441c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	895b      	ldrh	r3, [r3, #10]
 80143ee:	897a      	ldrh	r2, [r7, #10]
 80143f0:	1ad3      	subs	r3, r2, r3
 80143f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	891a      	ldrh	r2, [r3, #8]
 80143f8:	893b      	ldrh	r3, [r7, #8]
 80143fa:	1ad3      	subs	r3, r2, r3
 80143fc:	b29a      	uxth	r2, r3
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d106      	bne.n	801441c <pbuf_realloc+0x70>
 801440e:	4b26      	ldr	r3, [pc, #152]	; (80144a8 <pbuf_realloc+0xfc>)
 8014410:	f240 12af 	movw	r2, #431	; 0x1af
 8014414:	4927      	ldr	r1, [pc, #156]	; (80144b4 <pbuf_realloc+0x108>)
 8014416:	4826      	ldr	r0, [pc, #152]	; (80144b0 <pbuf_realloc+0x104>)
 8014418:	f7ec f944 	bl	80006a4 <iprintf>
  while (rem_len > q->len) {
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	895b      	ldrh	r3, [r3, #10]
 8014420:	897a      	ldrh	r2, [r7, #10]
 8014422:	429a      	cmp	r2, r3
 8014424:	d8e1      	bhi.n	80143ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	7b1b      	ldrb	r3, [r3, #12]
 801442a:	f003 030f 	and.w	r3, r3, #15
 801442e:	2b00      	cmp	r3, #0
 8014430:	d121      	bne.n	8014476 <pbuf_realloc+0xca>
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	895b      	ldrh	r3, [r3, #10]
 8014436:	897a      	ldrh	r2, [r7, #10]
 8014438:	429a      	cmp	r2, r3
 801443a:	d01c      	beq.n	8014476 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	7b5b      	ldrb	r3, [r3, #13]
 8014440:	f003 0302 	and.w	r3, r3, #2
 8014444:	2b00      	cmp	r3, #0
 8014446:	d116      	bne.n	8014476 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	685a      	ldr	r2, [r3, #4]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	1ad3      	subs	r3, r2, r3
 8014450:	b29a      	uxth	r2, r3
 8014452:	897b      	ldrh	r3, [r7, #10]
 8014454:	4413      	add	r3, r2
 8014456:	b29b      	uxth	r3, r3
 8014458:	4619      	mov	r1, r3
 801445a:	68f8      	ldr	r0, [r7, #12]
 801445c:	f7fe ffbe 	bl	80133dc <mem_trim>
 8014460:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d106      	bne.n	8014476 <pbuf_realloc+0xca>
 8014468:	4b0f      	ldr	r3, [pc, #60]	; (80144a8 <pbuf_realloc+0xfc>)
 801446a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801446e:	4912      	ldr	r1, [pc, #72]	; (80144b8 <pbuf_realloc+0x10c>)
 8014470:	480f      	ldr	r0, [pc, #60]	; (80144b0 <pbuf_realloc+0x104>)
 8014472:	f7ec f917 	bl	80006a4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	897a      	ldrh	r2, [r7, #10]
 801447a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	895a      	ldrh	r2, [r3, #10]
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d004      	beq.n	8014496 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	4618      	mov	r0, r3
 8014492:	f000 f911 	bl	80146b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2200      	movs	r2, #0
 801449a:	601a      	str	r2, [r3, #0]
 801449c:	e000      	b.n	80144a0 <pbuf_realloc+0xf4>
    return;
 801449e:	bf00      	nop

}
 80144a0:	3710      	adds	r7, #16
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	080188c4 	.word	0x080188c4
 80144ac:	080189dc 	.word	0x080189dc
 80144b0:	08018924 	.word	0x08018924
 80144b4:	080189f4 	.word	0x080189f4
 80144b8:	08018a0c 	.word	0x08018a0c

080144bc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b086      	sub	sp, #24
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	60f8      	str	r0, [r7, #12]
 80144c4:	60b9      	str	r1, [r7, #8]
 80144c6:	4613      	mov	r3, r2
 80144c8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d106      	bne.n	80144de <pbuf_add_header_impl+0x22>
 80144d0:	4b2b      	ldr	r3, [pc, #172]	; (8014580 <pbuf_add_header_impl+0xc4>)
 80144d2:	f240 12df 	movw	r2, #479	; 0x1df
 80144d6:	492b      	ldr	r1, [pc, #172]	; (8014584 <pbuf_add_header_impl+0xc8>)
 80144d8:	482b      	ldr	r0, [pc, #172]	; (8014588 <pbuf_add_header_impl+0xcc>)
 80144da:	f7ec f8e3 	bl	80006a4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d003      	beq.n	80144ec <pbuf_add_header_impl+0x30>
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144ea:	d301      	bcc.n	80144f0 <pbuf_add_header_impl+0x34>
    return 1;
 80144ec:	2301      	movs	r3, #1
 80144ee:	e043      	b.n	8014578 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d101      	bne.n	80144fa <pbuf_add_header_impl+0x3e>
    return 0;
 80144f6:	2300      	movs	r3, #0
 80144f8:	e03e      	b.n	8014578 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	891a      	ldrh	r2, [r3, #8]
 8014502:	8a7b      	ldrh	r3, [r7, #18]
 8014504:	4413      	add	r3, r2
 8014506:	b29b      	uxth	r3, r3
 8014508:	8a7a      	ldrh	r2, [r7, #18]
 801450a:	429a      	cmp	r2, r3
 801450c:	d901      	bls.n	8014512 <pbuf_add_header_impl+0x56>
    return 1;
 801450e:	2301      	movs	r3, #1
 8014510:	e032      	b.n	8014578 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	7b1b      	ldrb	r3, [r3, #12]
 8014516:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014518:	8a3b      	ldrh	r3, [r7, #16]
 801451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801451e:	2b00      	cmp	r3, #0
 8014520:	d00c      	beq.n	801453c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	685a      	ldr	r2, [r3, #4]
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	425b      	negs	r3, r3
 801452a:	4413      	add	r3, r2
 801452c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	3310      	adds	r3, #16
 8014532:	697a      	ldr	r2, [r7, #20]
 8014534:	429a      	cmp	r2, r3
 8014536:	d20d      	bcs.n	8014554 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014538:	2301      	movs	r3, #1
 801453a:	e01d      	b.n	8014578 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801453c:	79fb      	ldrb	r3, [r7, #7]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d006      	beq.n	8014550 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	685a      	ldr	r2, [r3, #4]
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	425b      	negs	r3, r3
 801454a:	4413      	add	r3, r2
 801454c:	617b      	str	r3, [r7, #20]
 801454e:	e001      	b.n	8014554 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014550:	2301      	movs	r3, #1
 8014552:	e011      	b.n	8014578 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	697a      	ldr	r2, [r7, #20]
 8014558:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	895a      	ldrh	r2, [r3, #10]
 801455e:	8a7b      	ldrh	r3, [r7, #18]
 8014560:	4413      	add	r3, r2
 8014562:	b29a      	uxth	r2, r3
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	891a      	ldrh	r2, [r3, #8]
 801456c:	8a7b      	ldrh	r3, [r7, #18]
 801456e:	4413      	add	r3, r2
 8014570:	b29a      	uxth	r2, r3
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	811a      	strh	r2, [r3, #8]


  return 0;
 8014576:	2300      	movs	r3, #0
}
 8014578:	4618      	mov	r0, r3
 801457a:	3718      	adds	r7, #24
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	080188c4 	.word	0x080188c4
 8014584:	08018a28 	.word	0x08018a28
 8014588:	08018924 	.word	0x08018924

0801458c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014596:	2200      	movs	r2, #0
 8014598:	6839      	ldr	r1, [r7, #0]
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f7ff ff8e 	bl	80144bc <pbuf_add_header_impl>
 80145a0:	4603      	mov	r3, r0
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3708      	adds	r7, #8
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
	...

080145ac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d106      	bne.n	80145ca <pbuf_remove_header+0x1e>
 80145bc:	4b20      	ldr	r3, [pc, #128]	; (8014640 <pbuf_remove_header+0x94>)
 80145be:	f240 224b 	movw	r2, #587	; 0x24b
 80145c2:	4920      	ldr	r1, [pc, #128]	; (8014644 <pbuf_remove_header+0x98>)
 80145c4:	4820      	ldr	r0, [pc, #128]	; (8014648 <pbuf_remove_header+0x9c>)
 80145c6:	f7ec f86d 	bl	80006a4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d003      	beq.n	80145d8 <pbuf_remove_header+0x2c>
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80145d6:	d301      	bcc.n	80145dc <pbuf_remove_header+0x30>
    return 1;
 80145d8:	2301      	movs	r3, #1
 80145da:	e02c      	b.n	8014636 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d101      	bne.n	80145e6 <pbuf_remove_header+0x3a>
    return 0;
 80145e2:	2300      	movs	r3, #0
 80145e4:	e027      	b.n	8014636 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	895b      	ldrh	r3, [r3, #10]
 80145ee:	89fa      	ldrh	r2, [r7, #14]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d908      	bls.n	8014606 <pbuf_remove_header+0x5a>
 80145f4:	4b12      	ldr	r3, [pc, #72]	; (8014640 <pbuf_remove_header+0x94>)
 80145f6:	f240 2255 	movw	r2, #597	; 0x255
 80145fa:	4914      	ldr	r1, [pc, #80]	; (801464c <pbuf_remove_header+0xa0>)
 80145fc:	4812      	ldr	r0, [pc, #72]	; (8014648 <pbuf_remove_header+0x9c>)
 80145fe:	f7ec f851 	bl	80006a4 <iprintf>
 8014602:	2301      	movs	r3, #1
 8014604:	e017      	b.n	8014636 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	685a      	ldr	r2, [r3, #4]
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	441a      	add	r2, r3
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	895a      	ldrh	r2, [r3, #10]
 801461c:	89fb      	ldrh	r3, [r7, #14]
 801461e:	1ad3      	subs	r3, r2, r3
 8014620:	b29a      	uxth	r2, r3
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	891a      	ldrh	r2, [r3, #8]
 801462a:	89fb      	ldrh	r3, [r7, #14]
 801462c:	1ad3      	subs	r3, r2, r3
 801462e:	b29a      	uxth	r2, r3
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014634:	2300      	movs	r3, #0
}
 8014636:	4618      	mov	r0, r3
 8014638:	3710      	adds	r7, #16
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}
 801463e:	bf00      	nop
 8014640:	080188c4 	.word	0x080188c4
 8014644:	08018a28 	.word	0x08018a28
 8014648:	08018924 	.word	0x08018924
 801464c:	08018a34 	.word	0x08018a34

08014650 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	460b      	mov	r3, r1
 801465a:	807b      	strh	r3, [r7, #2]
 801465c:	4613      	mov	r3, r2
 801465e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014660:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014664:	2b00      	cmp	r3, #0
 8014666:	da08      	bge.n	801467a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014668:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801466c:	425b      	negs	r3, r3
 801466e:	4619      	mov	r1, r3
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f7ff ff9b 	bl	80145ac <pbuf_remove_header>
 8014676:	4603      	mov	r3, r0
 8014678:	e007      	b.n	801468a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801467a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801467e:	787a      	ldrb	r2, [r7, #1]
 8014680:	4619      	mov	r1, r3
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f7ff ff1a 	bl	80144bc <pbuf_add_header_impl>
 8014688:	4603      	mov	r3, r0
  }
}
 801468a:	4618      	mov	r0, r3
 801468c:	3708      	adds	r7, #8
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}

08014692 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014692:	b580      	push	{r7, lr}
 8014694:	b082      	sub	sp, #8
 8014696:	af00      	add	r7, sp, #0
 8014698:	6078      	str	r0, [r7, #4]
 801469a:	460b      	mov	r3, r1
 801469c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801469e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80146a2:	2201      	movs	r2, #1
 80146a4:	4619      	mov	r1, r3
 80146a6:	6878      	ldr	r0, [r7, #4]
 80146a8:	f7ff ffd2 	bl	8014650 <pbuf_header_impl>
 80146ac:	4603      	mov	r3, r0
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3708      	adds	r7, #8
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
	...

080146b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b088      	sub	sp, #32
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d10b      	bne.n	80146de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d106      	bne.n	80146da <pbuf_free+0x22>
 80146cc:	4b3b      	ldr	r3, [pc, #236]	; (80147bc <pbuf_free+0x104>)
 80146ce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80146d2:	493b      	ldr	r1, [pc, #236]	; (80147c0 <pbuf_free+0x108>)
 80146d4:	483b      	ldr	r0, [pc, #236]	; (80147c4 <pbuf_free+0x10c>)
 80146d6:	f7eb ffe5 	bl	80006a4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80146da:	2300      	movs	r3, #0
 80146dc:	e069      	b.n	80147b2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80146de:	2300      	movs	r3, #0
 80146e0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80146e2:	e062      	b.n	80147aa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80146e4:	f003 fd24 	bl	8018130 <sys_arch_protect>
 80146e8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	7b9b      	ldrb	r3, [r3, #14]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d106      	bne.n	8014700 <pbuf_free+0x48>
 80146f2:	4b32      	ldr	r3, [pc, #200]	; (80147bc <pbuf_free+0x104>)
 80146f4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80146f8:	4933      	ldr	r1, [pc, #204]	; (80147c8 <pbuf_free+0x110>)
 80146fa:	4832      	ldr	r0, [pc, #200]	; (80147c4 <pbuf_free+0x10c>)
 80146fc:	f7eb ffd2 	bl	80006a4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	7b9b      	ldrb	r3, [r3, #14]
 8014704:	3b01      	subs	r3, #1
 8014706:	b2da      	uxtb	r2, r3
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	739a      	strb	r2, [r3, #14]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	7b9b      	ldrb	r3, [r3, #14]
 8014710:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014712:	69b8      	ldr	r0, [r7, #24]
 8014714:	f003 fd1a 	bl	801814c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014718:	7dfb      	ldrb	r3, [r7, #23]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d143      	bne.n	80147a6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	7b1b      	ldrb	r3, [r3, #12]
 8014728:	f003 030f 	and.w	r3, r3, #15
 801472c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	7b5b      	ldrb	r3, [r3, #13]
 8014732:	f003 0302 	and.w	r3, r3, #2
 8014736:	2b00      	cmp	r3, #0
 8014738:	d011      	beq.n	801475e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	691b      	ldr	r3, [r3, #16]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d106      	bne.n	8014754 <pbuf_free+0x9c>
 8014746:	4b1d      	ldr	r3, [pc, #116]	; (80147bc <pbuf_free+0x104>)
 8014748:	f240 22ff 	movw	r2, #767	; 0x2ff
 801474c:	491f      	ldr	r1, [pc, #124]	; (80147cc <pbuf_free+0x114>)
 801474e:	481d      	ldr	r0, [pc, #116]	; (80147c4 <pbuf_free+0x10c>)
 8014750:	f7eb ffa8 	bl	80006a4 <iprintf>
        pc->custom_free_function(p);
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	691b      	ldr	r3, [r3, #16]
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	4798      	blx	r3
 801475c:	e01d      	b.n	801479a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801475e:	7bfb      	ldrb	r3, [r7, #15]
 8014760:	2b02      	cmp	r3, #2
 8014762:	d104      	bne.n	801476e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014764:	6879      	ldr	r1, [r7, #4]
 8014766:	200b      	movs	r0, #11
 8014768:	f7ff f966 	bl	8013a38 <memp_free>
 801476c:	e015      	b.n	801479a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801476e:	7bfb      	ldrb	r3, [r7, #15]
 8014770:	2b01      	cmp	r3, #1
 8014772:	d104      	bne.n	801477e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014774:	6879      	ldr	r1, [r7, #4]
 8014776:	200a      	movs	r0, #10
 8014778:	f7ff f95e 	bl	8013a38 <memp_free>
 801477c:	e00d      	b.n	801479a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801477e:	7bfb      	ldrb	r3, [r7, #15]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d103      	bne.n	801478c <pbuf_free+0xd4>
          mem_free(p);
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f7fe fd99 	bl	80132bc <mem_free>
 801478a:	e006      	b.n	801479a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801478c:	4b0b      	ldr	r3, [pc, #44]	; (80147bc <pbuf_free+0x104>)
 801478e:	f240 320f 	movw	r2, #783	; 0x30f
 8014792:	490f      	ldr	r1, [pc, #60]	; (80147d0 <pbuf_free+0x118>)
 8014794:	480b      	ldr	r0, [pc, #44]	; (80147c4 <pbuf_free+0x10c>)
 8014796:	f7eb ff85 	bl	80006a4 <iprintf>
        }
      }
      count++;
 801479a:	7ffb      	ldrb	r3, [r7, #31]
 801479c:	3301      	adds	r3, #1
 801479e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	607b      	str	r3, [r7, #4]
 80147a4:	e001      	b.n	80147aa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80147a6:	2300      	movs	r3, #0
 80147a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d199      	bne.n	80146e4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80147b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3720      	adds	r7, #32
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}
 80147ba:	bf00      	nop
 80147bc:	080188c4 	.word	0x080188c4
 80147c0:	08018a28 	.word	0x08018a28
 80147c4:	08018924 	.word	0x08018924
 80147c8:	08018a54 	.word	0x08018a54
 80147cc:	08018a6c 	.word	0x08018a6c
 80147d0:	08018a90 	.word	0x08018a90

080147d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80147d4:	b480      	push	{r7}
 80147d6:	b085      	sub	sp, #20
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80147dc:	2300      	movs	r3, #0
 80147de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80147e0:	e005      	b.n	80147ee <pbuf_clen+0x1a>
    ++len;
 80147e2:	89fb      	ldrh	r3, [r7, #14]
 80147e4:	3301      	adds	r3, #1
 80147e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d1f6      	bne.n	80147e2 <pbuf_clen+0xe>
  }
  return len;
 80147f4:	89fb      	ldrh	r3, [r7, #14]
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3714      	adds	r7, #20
 80147fa:	46bd      	mov	sp, r7
 80147fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014800:	4770      	bx	lr
	...

08014804 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d016      	beq.n	8014840 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014812:	f003 fc8d 	bl	8018130 <sys_arch_protect>
 8014816:	60f8      	str	r0, [r7, #12]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	7b9b      	ldrb	r3, [r3, #14]
 801481c:	3301      	adds	r3, #1
 801481e:	b2da      	uxtb	r2, r3
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	739a      	strb	r2, [r3, #14]
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	f003 fc91 	bl	801814c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	7b9b      	ldrb	r3, [r3, #14]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d106      	bne.n	8014840 <pbuf_ref+0x3c>
 8014832:	4b05      	ldr	r3, [pc, #20]	; (8014848 <pbuf_ref+0x44>)
 8014834:	f240 3242 	movw	r2, #834	; 0x342
 8014838:	4904      	ldr	r1, [pc, #16]	; (801484c <pbuf_ref+0x48>)
 801483a:	4805      	ldr	r0, [pc, #20]	; (8014850 <pbuf_ref+0x4c>)
 801483c:	f7eb ff32 	bl	80006a4 <iprintf>
  }
}
 8014840:	bf00      	nop
 8014842:	3710      	adds	r7, #16
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}
 8014848:	080188c4 	.word	0x080188c4
 801484c:	08018aa4 	.word	0x08018aa4
 8014850:	08018924 	.word	0x08018924

08014854 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d002      	beq.n	801486a <pbuf_cat+0x16>
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d107      	bne.n	801487a <pbuf_cat+0x26>
 801486a:	4b20      	ldr	r3, [pc, #128]	; (80148ec <pbuf_cat+0x98>)
 801486c:	f240 3259 	movw	r2, #857	; 0x359
 8014870:	491f      	ldr	r1, [pc, #124]	; (80148f0 <pbuf_cat+0x9c>)
 8014872:	4820      	ldr	r0, [pc, #128]	; (80148f4 <pbuf_cat+0xa0>)
 8014874:	f7eb ff16 	bl	80006a4 <iprintf>
 8014878:	e034      	b.n	80148e4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	60fb      	str	r3, [r7, #12]
 801487e:	e00a      	b.n	8014896 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	891a      	ldrh	r2, [r3, #8]
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	891b      	ldrh	r3, [r3, #8]
 8014888:	4413      	add	r3, r2
 801488a:	b29a      	uxth	r2, r3
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	60fb      	str	r3, [r7, #12]
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d1f0      	bne.n	8014880 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	891a      	ldrh	r2, [r3, #8]
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	895b      	ldrh	r3, [r3, #10]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d006      	beq.n	80148b8 <pbuf_cat+0x64>
 80148aa:	4b10      	ldr	r3, [pc, #64]	; (80148ec <pbuf_cat+0x98>)
 80148ac:	f240 3262 	movw	r2, #866	; 0x362
 80148b0:	4911      	ldr	r1, [pc, #68]	; (80148f8 <pbuf_cat+0xa4>)
 80148b2:	4810      	ldr	r0, [pc, #64]	; (80148f4 <pbuf_cat+0xa0>)
 80148b4:	f7eb fef6 	bl	80006a4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d006      	beq.n	80148ce <pbuf_cat+0x7a>
 80148c0:	4b0a      	ldr	r3, [pc, #40]	; (80148ec <pbuf_cat+0x98>)
 80148c2:	f240 3263 	movw	r2, #867	; 0x363
 80148c6:	490d      	ldr	r1, [pc, #52]	; (80148fc <pbuf_cat+0xa8>)
 80148c8:	480a      	ldr	r0, [pc, #40]	; (80148f4 <pbuf_cat+0xa0>)
 80148ca:	f7eb feeb 	bl	80006a4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	891a      	ldrh	r2, [r3, #8]
 80148d2:	683b      	ldr	r3, [r7, #0]
 80148d4:	891b      	ldrh	r3, [r3, #8]
 80148d6:	4413      	add	r3, r2
 80148d8:	b29a      	uxth	r2, r3
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	683a      	ldr	r2, [r7, #0]
 80148e2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80148e4:	3710      	adds	r7, #16
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	080188c4 	.word	0x080188c4
 80148f0:	08018ab8 	.word	0x08018ab8
 80148f4:	08018924 	.word	0x08018924
 80148f8:	08018af0 	.word	0x08018af0
 80148fc:	08018b20 	.word	0x08018b20

08014900 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b086      	sub	sp, #24
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801490a:	2300      	movs	r3, #0
 801490c:	617b      	str	r3, [r7, #20]
 801490e:	2300      	movs	r3, #0
 8014910:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d008      	beq.n	801492a <pbuf_copy+0x2a>
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d005      	beq.n	801492a <pbuf_copy+0x2a>
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	891a      	ldrh	r2, [r3, #8]
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	891b      	ldrh	r3, [r3, #8]
 8014926:	429a      	cmp	r2, r3
 8014928:	d209      	bcs.n	801493e <pbuf_copy+0x3e>
 801492a:	4b57      	ldr	r3, [pc, #348]	; (8014a88 <pbuf_copy+0x188>)
 801492c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014930:	4956      	ldr	r1, [pc, #344]	; (8014a8c <pbuf_copy+0x18c>)
 8014932:	4857      	ldr	r0, [pc, #348]	; (8014a90 <pbuf_copy+0x190>)
 8014934:	f7eb feb6 	bl	80006a4 <iprintf>
 8014938:	f06f 030f 	mvn.w	r3, #15
 801493c:	e09f      	b.n	8014a7e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	895b      	ldrh	r3, [r3, #10]
 8014942:	461a      	mov	r2, r3
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	1ad2      	subs	r2, r2, r3
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	895b      	ldrh	r3, [r3, #10]
 801494c:	4619      	mov	r1, r3
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	1acb      	subs	r3, r1, r3
 8014952:	429a      	cmp	r2, r3
 8014954:	d306      	bcc.n	8014964 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	895b      	ldrh	r3, [r3, #10]
 801495a:	461a      	mov	r2, r3
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	1ad3      	subs	r3, r2, r3
 8014960:	60fb      	str	r3, [r7, #12]
 8014962:	e005      	b.n	8014970 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	895b      	ldrh	r3, [r3, #10]
 8014968:	461a      	mov	r2, r3
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	1ad3      	subs	r3, r2, r3
 801496e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	685a      	ldr	r2, [r3, #4]
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	18d0      	adds	r0, r2, r3
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	685a      	ldr	r2, [r3, #4]
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	4413      	add	r3, r2
 8014980:	68fa      	ldr	r2, [r7, #12]
 8014982:	4619      	mov	r1, r3
 8014984:	f7eb fd24 	bl	80003d0 <memcpy>
    offset_to += len;
 8014988:	697a      	ldr	r2, [r7, #20]
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	4413      	add	r3, r2
 801498e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014990:	693a      	ldr	r2, [r7, #16]
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	4413      	add	r3, r2
 8014996:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	895b      	ldrh	r3, [r3, #10]
 801499c:	461a      	mov	r2, r3
 801499e:	697b      	ldr	r3, [r7, #20]
 80149a0:	4293      	cmp	r3, r2
 80149a2:	d906      	bls.n	80149b2 <pbuf_copy+0xb2>
 80149a4:	4b38      	ldr	r3, [pc, #224]	; (8014a88 <pbuf_copy+0x188>)
 80149a6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80149aa:	493a      	ldr	r1, [pc, #232]	; (8014a94 <pbuf_copy+0x194>)
 80149ac:	4838      	ldr	r0, [pc, #224]	; (8014a90 <pbuf_copy+0x190>)
 80149ae:	f7eb fe79 	bl	80006a4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	895b      	ldrh	r3, [r3, #10]
 80149b6:	461a      	mov	r2, r3
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	4293      	cmp	r3, r2
 80149bc:	d906      	bls.n	80149cc <pbuf_copy+0xcc>
 80149be:	4b32      	ldr	r3, [pc, #200]	; (8014a88 <pbuf_copy+0x188>)
 80149c0:	f240 32da 	movw	r2, #986	; 0x3da
 80149c4:	4934      	ldr	r1, [pc, #208]	; (8014a98 <pbuf_copy+0x198>)
 80149c6:	4832      	ldr	r0, [pc, #200]	; (8014a90 <pbuf_copy+0x190>)
 80149c8:	f7eb fe6c 	bl	80006a4 <iprintf>
    if (offset_from >= p_from->len) {
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	895b      	ldrh	r3, [r3, #10]
 80149d0:	461a      	mov	r2, r3
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	4293      	cmp	r3, r2
 80149d6:	d304      	bcc.n	80149e2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80149d8:	2300      	movs	r3, #0
 80149da:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	895b      	ldrh	r3, [r3, #10]
 80149e6:	461a      	mov	r2, r3
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	4293      	cmp	r3, r2
 80149ec:	d114      	bne.n	8014a18 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80149ee:	2300      	movs	r3, #0
 80149f0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d10c      	bne.n	8014a18 <pbuf_copy+0x118>
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d009      	beq.n	8014a18 <pbuf_copy+0x118>
 8014a04:	4b20      	ldr	r3, [pc, #128]	; (8014a88 <pbuf_copy+0x188>)
 8014a06:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014a0a:	4924      	ldr	r1, [pc, #144]	; (8014a9c <pbuf_copy+0x19c>)
 8014a0c:	4820      	ldr	r0, [pc, #128]	; (8014a90 <pbuf_copy+0x190>)
 8014a0e:	f7eb fe49 	bl	80006a4 <iprintf>
 8014a12:	f06f 030f 	mvn.w	r3, #15
 8014a16:	e032      	b.n	8014a7e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d013      	beq.n	8014a46 <pbuf_copy+0x146>
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	895a      	ldrh	r2, [r3, #10]
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	891b      	ldrh	r3, [r3, #8]
 8014a26:	429a      	cmp	r2, r3
 8014a28:	d10d      	bne.n	8014a46 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d009      	beq.n	8014a46 <pbuf_copy+0x146>
 8014a32:	4b15      	ldr	r3, [pc, #84]	; (8014a88 <pbuf_copy+0x188>)
 8014a34:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014a38:	4919      	ldr	r1, [pc, #100]	; (8014aa0 <pbuf_copy+0x1a0>)
 8014a3a:	4815      	ldr	r0, [pc, #84]	; (8014a90 <pbuf_copy+0x190>)
 8014a3c:	f7eb fe32 	bl	80006a4 <iprintf>
 8014a40:	f06f 0305 	mvn.w	r3, #5
 8014a44:	e01b      	b.n	8014a7e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d013      	beq.n	8014a74 <pbuf_copy+0x174>
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	895a      	ldrh	r2, [r3, #10]
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	891b      	ldrh	r3, [r3, #8]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d10d      	bne.n	8014a74 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d009      	beq.n	8014a74 <pbuf_copy+0x174>
 8014a60:	4b09      	ldr	r3, [pc, #36]	; (8014a88 <pbuf_copy+0x188>)
 8014a62:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8014a66:	490e      	ldr	r1, [pc, #56]	; (8014aa0 <pbuf_copy+0x1a0>)
 8014a68:	4809      	ldr	r0, [pc, #36]	; (8014a90 <pbuf_copy+0x190>)
 8014a6a:	f7eb fe1b 	bl	80006a4 <iprintf>
 8014a6e:	f06f 0305 	mvn.w	r3, #5
 8014a72:	e004      	b.n	8014a7e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	f47f af61 	bne.w	801493e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014a7c:	2300      	movs	r3, #0
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3718      	adds	r7, #24
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop
 8014a88:	080188c4 	.word	0x080188c4
 8014a8c:	08018b6c 	.word	0x08018b6c
 8014a90:	08018924 	.word	0x08018924
 8014a94:	08018b9c 	.word	0x08018b9c
 8014a98:	08018bb4 	.word	0x08018bb4
 8014a9c:	08018bd0 	.word	0x08018bd0
 8014aa0:	08018be0 	.word	0x08018be0

08014aa4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	4603      	mov	r3, r0
 8014aac:	603a      	str	r2, [r7, #0]
 8014aae:	71fb      	strb	r3, [r7, #7]
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	8919      	ldrh	r1, [r3, #8]
 8014ab8:	88ba      	ldrh	r2, [r7, #4]
 8014aba:	79fb      	ldrb	r3, [r7, #7]
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7ff fb19 	bl	80140f4 <pbuf_alloc>
 8014ac2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d101      	bne.n	8014ace <pbuf_clone+0x2a>
    return NULL;
 8014aca:	2300      	movs	r3, #0
 8014acc:	e011      	b.n	8014af2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014ace:	6839      	ldr	r1, [r7, #0]
 8014ad0:	68f8      	ldr	r0, [r7, #12]
 8014ad2:	f7ff ff15 	bl	8014900 <pbuf_copy>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014ada:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d006      	beq.n	8014af0 <pbuf_clone+0x4c>
 8014ae2:	4b06      	ldr	r3, [pc, #24]	; (8014afc <pbuf_clone+0x58>)
 8014ae4:	f240 5224 	movw	r2, #1316	; 0x524
 8014ae8:	4905      	ldr	r1, [pc, #20]	; (8014b00 <pbuf_clone+0x5c>)
 8014aea:	4806      	ldr	r0, [pc, #24]	; (8014b04 <pbuf_clone+0x60>)
 8014aec:	f7eb fdda 	bl	80006a4 <iprintf>
  return q;
 8014af0:	68fb      	ldr	r3, [r7, #12]
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3710      	adds	r7, #16
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}
 8014afa:	bf00      	nop
 8014afc:	080188c4 	.word	0x080188c4
 8014b00:	08018d38 	.word	0x08018d38
 8014b04:	08018924 	.word	0x08018924

08014b08 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8014b08:	b480      	push	{r7}
 8014b0a:	b083      	sub	sp, #12
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	460b      	mov	r3, r1
 8014b12:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	7a1b      	ldrb	r3, [r3, #8]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d00b      	beq.n	8014b34 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	7a1a      	ldrb	r2, [r3, #8]
 8014b20:	4b15      	ldr	r3, [pc, #84]	; (8014b78 <raw_input_local_match+0x70>)
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014b28:	3301      	adds	r3, #1
 8014b2a:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d001      	beq.n	8014b34 <raw_input_local_match+0x2c>
    return 0;
 8014b30:	2300      	movs	r3, #0
 8014b32:	e01b      	b.n	8014b6c <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014b34:	78fb      	ldrb	r3, [r7, #3]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d008      	beq.n	8014b4c <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d003      	beq.n	8014b48 <raw_input_local_match+0x40>
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d110      	bne.n	8014b6a <raw_input_local_match+0x62>
          return 1;
 8014b48:	2301      	movs	r3, #1
 8014b4a:	e00f      	b.n	8014b6c <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d009      	beq.n	8014b66 <raw_input_local_match+0x5e>
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d005      	beq.n	8014b66 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	4b06      	ldr	r3, [pc, #24]	; (8014b78 <raw_input_local_match+0x70>)
 8014b60:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d101      	bne.n	8014b6a <raw_input_local_match+0x62>
        return 1;
 8014b66:	2301      	movs	r3, #1
 8014b68:	e000      	b.n	8014b6c <raw_input_local_match+0x64>
      }
  }

  return 0;
 8014b6a:	2300      	movs	r3, #0
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	370c      	adds	r7, #12
 8014b70:	46bd      	mov	sp, r7
 8014b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b76:	4770      	bx	lr
 8014b78:	24006680 	.word	0x24006680

08014b7c <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8014b7c:	b590      	push	{r4, r7, lr}
 8014b7e:	b089      	sub	sp, #36	; 0x24
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
 8014b84:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 8014b86:	2300      	movs	r3, #0
 8014b88:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014b8a:	4b37      	ldr	r3, [pc, #220]	; (8014c68 <raw_input+0xec>)
 8014b8c:	695b      	ldr	r3, [r3, #20]
 8014b8e:	4a36      	ldr	r2, [pc, #216]	; (8014c68 <raw_input+0xec>)
 8014b90:	6812      	ldr	r2, [r2, #0]
 8014b92:	4611      	mov	r1, r2
 8014b94:	4618      	mov	r0, r3
 8014b96:	f002 fa83 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	7a5b      	ldrb	r3, [r3, #9]
 8014ba4:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8014baa:	4b30      	ldr	r3, [pc, #192]	; (8014c6c <raw_input+0xf0>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8014bb0:	e052      	b.n	8014c58 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	7c1b      	ldrb	r3, [r3, #16]
 8014bb6:	461a      	mov	r2, r3
 8014bb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	d146      	bne.n	8014c4e <raw_input+0xd2>
 8014bc0:	7dbb      	ldrb	r3, [r7, #22]
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	69f8      	ldr	r0, [r7, #28]
 8014bc6:	f7ff ff9f 	bl	8014b08 <raw_input_local_match>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d03e      	beq.n	8014c4e <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8014bd0:	69fb      	ldr	r3, [r7, #28]
 8014bd2:	7c5b      	ldrb	r3, [r3, #17]
 8014bd4:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d005      	beq.n	8014be8 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014bdc:	69fb      	ldr	r3, [r7, #28]
 8014bde:	685a      	ldr	r2, [r3, #4]
 8014be0:	4b21      	ldr	r3, [pc, #132]	; (8014c68 <raw_input+0xec>)
 8014be2:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d132      	bne.n	8014c4e <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8014be8:	69fb      	ldr	r3, [r7, #28]
 8014bea:	695b      	ldr	r3, [r3, #20]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d02e      	beq.n	8014c4e <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 8014bf6:	2302      	movs	r3, #2
 8014bf8:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8014bfa:	69fb      	ldr	r3, [r7, #28]
 8014bfc:	695c      	ldr	r4, [r3, #20]
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	6998      	ldr	r0, [r3, #24]
 8014c02:	4b1b      	ldr	r3, [pc, #108]	; (8014c70 <raw_input+0xf4>)
 8014c04:	687a      	ldr	r2, [r7, #4]
 8014c06:	69f9      	ldr	r1, [r7, #28]
 8014c08:	47a0      	blx	r4
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 8014c0e:	7bfb      	ldrb	r3, [r7, #15]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d011      	beq.n	8014c38 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 8014c14:	2300      	movs	r3, #0
 8014c16:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8014c18:	69bb      	ldr	r3, [r7, #24]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d00a      	beq.n	8014c34 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 8014c1e:	69fb      	ldr	r3, [r7, #28]
 8014c20:	68da      	ldr	r2, [r3, #12]
 8014c22:	69bb      	ldr	r3, [r7, #24]
 8014c24:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8014c26:	4b11      	ldr	r3, [pc, #68]	; (8014c6c <raw_input+0xf0>)
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	69fb      	ldr	r3, [r7, #28]
 8014c2c:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 8014c2e:	4a0f      	ldr	r2, [pc, #60]	; (8014c6c <raw_input+0xf0>)
 8014c30:	69fb      	ldr	r3, [r7, #28]
 8014c32:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8014c34:	2301      	movs	r3, #1
 8014c36:	e013      	b.n	8014c60 <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	693a      	ldr	r2, [r7, #16]
 8014c3e:	429a      	cmp	r2, r3
 8014c40:	d005      	beq.n	8014c4e <raw_input+0xd2>
 8014c42:	4b0c      	ldr	r3, [pc, #48]	; (8014c74 <raw_input+0xf8>)
 8014c44:	22c0      	movs	r2, #192	; 0xc0
 8014c46:	490c      	ldr	r1, [pc, #48]	; (8014c78 <raw_input+0xfc>)
 8014c48:	480c      	ldr	r0, [pc, #48]	; (8014c7c <raw_input+0x100>)
 8014c4a:	f7eb fd2b 	bl	80006a4 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 8014c4e:	69fb      	ldr	r3, [r7, #28]
 8014c50:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 8014c52:	69fb      	ldr	r3, [r7, #28]
 8014c54:	68db      	ldr	r3, [r3, #12]
 8014c56:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8014c58:	69fb      	ldr	r3, [r7, #28]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d1a9      	bne.n	8014bb2 <raw_input+0x36>
  }
  return ret;
 8014c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3724      	adds	r7, #36	; 0x24
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd90      	pop	{r4, r7, pc}
 8014c68:	24006680 	.word	0x24006680
 8014c6c:	24005980 	.word	0x24005980
 8014c70:	24006690 	.word	0x24006690
 8014c74:	08018d4c 	.word	0x08018d4c
 8014c78:	08018d7c 	.word	0x08018d7c
 8014c7c:	08018dc8 	.word	0x08018dc8

08014c80 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014c80:	b480      	push	{r7}
 8014c82:	b085      	sub	sp, #20
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d01e      	beq.n	8014cce <raw_netif_ip_addr_changed+0x4e>
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d01a      	beq.n	8014cce <raw_netif_ip_addr_changed+0x4e>
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d017      	beq.n	8014cce <raw_netif_ip_addr_changed+0x4e>
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d013      	beq.n	8014cce <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8014ca6:	4b0d      	ldr	r3, [pc, #52]	; (8014cdc <raw_netif_ip_addr_changed+0x5c>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	60fb      	str	r3, [r7, #12]
 8014cac:	e00c      	b.n	8014cc8 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d103      	bne.n	8014cc2 <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	681a      	ldr	r2, [r3, #0]
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	68db      	ldr	r3, [r3, #12]
 8014cc6:	60fb      	str	r3, [r7, #12]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d1ef      	bne.n	8014cae <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014cce:	bf00      	nop
 8014cd0:	3714      	adds	r7, #20
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd8:	4770      	bx	lr
 8014cda:	bf00      	nop
 8014cdc:	24005980 	.word	0x24005980

08014ce0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b086      	sub	sp, #24
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	60f8      	str	r0, [r7, #12]
 8014ce8:	60b9      	str	r1, [r7, #8]
 8014cea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014cec:	2009      	movs	r0, #9
 8014cee:	f7fe fe2d 	bl	801394c <memp_malloc>
 8014cf2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014cf4:	693b      	ldr	r3, [r7, #16]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d109      	bne.n	8014d0e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d151      	bne.n	8014da4 <sys_timeout_abs+0xc4>
 8014d00:	4b2a      	ldr	r3, [pc, #168]	; (8014dac <sys_timeout_abs+0xcc>)
 8014d02:	22be      	movs	r2, #190	; 0xbe
 8014d04:	492a      	ldr	r1, [pc, #168]	; (8014db0 <sys_timeout_abs+0xd0>)
 8014d06:	482b      	ldr	r0, [pc, #172]	; (8014db4 <sys_timeout_abs+0xd4>)
 8014d08:	f7eb fccc 	bl	80006a4 <iprintf>
    return;
 8014d0c:	e04a      	b.n	8014da4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	2200      	movs	r2, #0
 8014d12:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	68ba      	ldr	r2, [r7, #8]
 8014d18:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	687a      	ldr	r2, [r7, #4]
 8014d1e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	68fa      	ldr	r2, [r7, #12]
 8014d24:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014d26:	4b24      	ldr	r3, [pc, #144]	; (8014db8 <sys_timeout_abs+0xd8>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d103      	bne.n	8014d36 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014d2e:	4a22      	ldr	r2, [pc, #136]	; (8014db8 <sys_timeout_abs+0xd8>)
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	6013      	str	r3, [r2, #0]
    return;
 8014d34:	e037      	b.n	8014da6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	685a      	ldr	r2, [r3, #4]
 8014d3a:	4b1f      	ldr	r3, [pc, #124]	; (8014db8 <sys_timeout_abs+0xd8>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	685b      	ldr	r3, [r3, #4]
 8014d40:	1ad3      	subs	r3, r2, r3
 8014d42:	0fdb      	lsrs	r3, r3, #31
 8014d44:	f003 0301 	and.w	r3, r3, #1
 8014d48:	b2db      	uxtb	r3, r3
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d007      	beq.n	8014d5e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014d4e:	4b1a      	ldr	r3, [pc, #104]	; (8014db8 <sys_timeout_abs+0xd8>)
 8014d50:	681a      	ldr	r2, [r3, #0]
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014d56:	4a18      	ldr	r2, [pc, #96]	; (8014db8 <sys_timeout_abs+0xd8>)
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	6013      	str	r3, [r2, #0]
 8014d5c:	e023      	b.n	8014da6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014d5e:	4b16      	ldr	r3, [pc, #88]	; (8014db8 <sys_timeout_abs+0xd8>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	617b      	str	r3, [r7, #20]
 8014d64:	e01a      	b.n	8014d9c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014d66:	697b      	ldr	r3, [r7, #20]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d00b      	beq.n	8014d86 <sys_timeout_abs+0xa6>
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	685a      	ldr	r2, [r3, #4]
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	685b      	ldr	r3, [r3, #4]
 8014d78:	1ad3      	subs	r3, r2, r3
 8014d7a:	0fdb      	lsrs	r3, r3, #31
 8014d7c:	f003 0301 	and.w	r3, r3, #1
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d007      	beq.n	8014d96 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	681a      	ldr	r2, [r3, #0]
 8014d8a:	693b      	ldr	r3, [r7, #16]
 8014d8c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	693a      	ldr	r2, [r7, #16]
 8014d92:	601a      	str	r2, [r3, #0]
        break;
 8014d94:	e007      	b.n	8014da6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	617b      	str	r3, [r7, #20]
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d1e1      	bne.n	8014d66 <sys_timeout_abs+0x86>
 8014da2:	e000      	b.n	8014da6 <sys_timeout_abs+0xc6>
    return;
 8014da4:	bf00      	nop
      }
    }
  }
}
 8014da6:	3718      	adds	r7, #24
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	08018e18 	.word	0x08018e18
 8014db0:	08018e4c 	.word	0x08018e4c
 8014db4:	08018e8c 	.word	0x08018e8c
 8014db8:	24005984 	.word	0x24005984

08014dbc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b086      	sub	sp, #24
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	4798      	blx	r3

  now = sys_now();
 8014dce:	f7fa fef5 	bl	800fbbc <sys_now>
 8014dd2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	4b0f      	ldr	r3, [pc, #60]	; (8014e18 <lwip_cyclic_timer+0x5c>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	4413      	add	r3, r2
 8014dde:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014de0:	68fa      	ldr	r2, [r7, #12]
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	1ad3      	subs	r3, r2, r3
 8014de6:	0fdb      	lsrs	r3, r3, #31
 8014de8:	f003 0301 	and.w	r3, r3, #1
 8014dec:	b2db      	uxtb	r3, r3
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d009      	beq.n	8014e06 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	681a      	ldr	r2, [r3, #0]
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	4413      	add	r3, r2
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	4907      	ldr	r1, [pc, #28]	; (8014e1c <lwip_cyclic_timer+0x60>)
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7ff ff6e 	bl	8014ce0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014e04:	e004      	b.n	8014e10 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014e06:	687a      	ldr	r2, [r7, #4]
 8014e08:	4904      	ldr	r1, [pc, #16]	; (8014e1c <lwip_cyclic_timer+0x60>)
 8014e0a:	68f8      	ldr	r0, [r7, #12]
 8014e0c:	f7ff ff68 	bl	8014ce0 <sys_timeout_abs>
}
 8014e10:	bf00      	nop
 8014e12:	3718      	adds	r7, #24
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	24005988 	.word	0x24005988
 8014e1c:	08014dbd 	.word	0x08014dbd

08014e20 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e26:	2300      	movs	r3, #0
 8014e28:	607b      	str	r3, [r7, #4]
 8014e2a:	e00e      	b.n	8014e4a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014e2c:	4a0b      	ldr	r2, [pc, #44]	; (8014e5c <sys_timeouts_init+0x3c>)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	00db      	lsls	r3, r3, #3
 8014e38:	4a08      	ldr	r2, [pc, #32]	; (8014e5c <sys_timeouts_init+0x3c>)
 8014e3a:	4413      	add	r3, r2
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	4908      	ldr	r1, [pc, #32]	; (8014e60 <sys_timeouts_init+0x40>)
 8014e40:	f000 f810 	bl	8014e64 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	3301      	adds	r3, #1
 8014e48:	607b      	str	r3, [r7, #4]
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2b02      	cmp	r3, #2
 8014e4e:	d9ed      	bls.n	8014e2c <sys_timeouts_init+0xc>
  }
}
 8014e50:	bf00      	nop
 8014e52:	bf00      	nop
 8014e54:	3708      	adds	r7, #8
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	08019df0 	.word	0x08019df0
 8014e60:	08014dbd 	.word	0x08014dbd

08014e64 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b086      	sub	sp, #24
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	60f8      	str	r0, [r7, #12]
 8014e6c:	60b9      	str	r1, [r7, #8]
 8014e6e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e76:	d306      	bcc.n	8014e86 <sys_timeout+0x22>
 8014e78:	4b0a      	ldr	r3, [pc, #40]	; (8014ea4 <sys_timeout+0x40>)
 8014e7a:	f240 1229 	movw	r2, #297	; 0x129
 8014e7e:	490a      	ldr	r1, [pc, #40]	; (8014ea8 <sys_timeout+0x44>)
 8014e80:	480a      	ldr	r0, [pc, #40]	; (8014eac <sys_timeout+0x48>)
 8014e82:	f7eb fc0f 	bl	80006a4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014e86:	f7fa fe99 	bl	800fbbc <sys_now>
 8014e8a:	4602      	mov	r2, r0
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	4413      	add	r3, r2
 8014e90:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	68b9      	ldr	r1, [r7, #8]
 8014e96:	6978      	ldr	r0, [r7, #20]
 8014e98:	f7ff ff22 	bl	8014ce0 <sys_timeout_abs>
#endif
}
 8014e9c:	bf00      	nop
 8014e9e:	3718      	adds	r7, #24
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	08018e18 	.word	0x08018e18
 8014ea8:	08018eb4 	.word	0x08018eb4
 8014eac:	08018e8c 	.word	0x08018e8c

08014eb0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014eb6:	f7fa fe81 	bl	800fbbc <sys_now>
 8014eba:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014ebc:	4b17      	ldr	r3, [pc, #92]	; (8014f1c <sys_check_timeouts+0x6c>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d022      	beq.n	8014f0e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	1ad3      	subs	r3, r2, r3
 8014ed0:	0fdb      	lsrs	r3, r3, #31
 8014ed2:	f003 0301 	and.w	r3, r3, #1
 8014ed6:	b2db      	uxtb	r3, r3
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d11a      	bne.n	8014f12 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	4a0e      	ldr	r2, [pc, #56]	; (8014f1c <sys_check_timeouts+0x6c>)
 8014ee2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	689b      	ldr	r3, [r3, #8]
 8014ee8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	4a0a      	ldr	r2, [pc, #40]	; (8014f20 <sys_check_timeouts+0x70>)
 8014ef6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014ef8:	68b9      	ldr	r1, [r7, #8]
 8014efa:	2009      	movs	r0, #9
 8014efc:	f7fe fd9c 	bl	8013a38 <memp_free>
    if (handler != NULL) {
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d0da      	beq.n	8014ebc <sys_check_timeouts+0xc>
      handler(arg);
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	6838      	ldr	r0, [r7, #0]
 8014f0a:	4798      	blx	r3
  do {
 8014f0c:	e7d6      	b.n	8014ebc <sys_check_timeouts+0xc>
      return;
 8014f0e:	bf00      	nop
 8014f10:	e000      	b.n	8014f14 <sys_check_timeouts+0x64>
      return;
 8014f12:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014f14:	3710      	adds	r7, #16
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}
 8014f1a:	bf00      	nop
 8014f1c:	24005984 	.word	0x24005984
 8014f20:	24005988 	.word	0x24005988

08014f24 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b082      	sub	sp, #8
 8014f28:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014f2a:	4b16      	ldr	r3, [pc, #88]	; (8014f84 <sys_timeouts_sleeptime+0x60>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d102      	bne.n	8014f38 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f36:	e020      	b.n	8014f7a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014f38:	f7fa fe40 	bl	800fbbc <sys_now>
 8014f3c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014f3e:	4b11      	ldr	r3, [pc, #68]	; (8014f84 <sys_timeouts_sleeptime+0x60>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	685a      	ldr	r2, [r3, #4]
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	1ad3      	subs	r3, r2, r3
 8014f48:	0fdb      	lsrs	r3, r3, #31
 8014f4a:	f003 0301 	and.w	r3, r3, #1
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d001      	beq.n	8014f58 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014f54:	2300      	movs	r3, #0
 8014f56:	e010      	b.n	8014f7a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014f58:	4b0a      	ldr	r3, [pc, #40]	; (8014f84 <sys_timeouts_sleeptime+0x60>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	685a      	ldr	r2, [r3, #4]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	1ad3      	subs	r3, r2, r3
 8014f62:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	da06      	bge.n	8014f78 <sys_timeouts_sleeptime+0x54>
 8014f6a:	4b07      	ldr	r3, [pc, #28]	; (8014f88 <sys_timeouts_sleeptime+0x64>)
 8014f6c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014f70:	4906      	ldr	r1, [pc, #24]	; (8014f8c <sys_timeouts_sleeptime+0x68>)
 8014f72:	4807      	ldr	r0, [pc, #28]	; (8014f90 <sys_timeouts_sleeptime+0x6c>)
 8014f74:	f7eb fb96 	bl	80006a4 <iprintf>
    return ret;
 8014f78:	683b      	ldr	r3, [r7, #0]
  }
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3708      	adds	r7, #8
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}
 8014f82:	bf00      	nop
 8014f84:	24005984 	.word	0x24005984
 8014f88:	08018e18 	.word	0x08018e18
 8014f8c:	08018eec 	.word	0x08018eec
 8014f90:	08018e8c 	.word	0x08018e8c

08014f94 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014f98:	f7eb fbd2 	bl	8000740 <rand>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014fa4:	b29b      	uxth	r3, r3
 8014fa6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014faa:	b29a      	uxth	r2, r3
 8014fac:	4b01      	ldr	r3, [pc, #4]	; (8014fb4 <udp_init+0x20>)
 8014fae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014fb0:	bf00      	nop
 8014fb2:	bd80      	pop	{r7, pc}
 8014fb4:	2400008c 	.word	0x2400008c

08014fb8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	60b9      	str	r1, [r7, #8]
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d105      	bne.n	8014fd8 <udp_input_local_match+0x20>
 8014fcc:	4b27      	ldr	r3, [pc, #156]	; (801506c <udp_input_local_match+0xb4>)
 8014fce:	2287      	movs	r2, #135	; 0x87
 8014fd0:	4927      	ldr	r1, [pc, #156]	; (8015070 <udp_input_local_match+0xb8>)
 8014fd2:	4828      	ldr	r0, [pc, #160]	; (8015074 <udp_input_local_match+0xbc>)
 8014fd4:	f7eb fb66 	bl	80006a4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d105      	bne.n	8014fea <udp_input_local_match+0x32>
 8014fde:	4b23      	ldr	r3, [pc, #140]	; (801506c <udp_input_local_match+0xb4>)
 8014fe0:	2288      	movs	r2, #136	; 0x88
 8014fe2:	4925      	ldr	r1, [pc, #148]	; (8015078 <udp_input_local_match+0xc0>)
 8014fe4:	4823      	ldr	r0, [pc, #140]	; (8015074 <udp_input_local_match+0xbc>)
 8014fe6:	f7eb fb5d 	bl	80006a4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	7a1b      	ldrb	r3, [r3, #8]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d00b      	beq.n	801500a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	7a1a      	ldrb	r2, [r3, #8]
 8014ff6:	4b21      	ldr	r3, [pc, #132]	; (801507c <udp_input_local_match+0xc4>)
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014ffe:	3301      	adds	r3, #1
 8015000:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015002:	429a      	cmp	r2, r3
 8015004:	d001      	beq.n	801500a <udp_input_local_match+0x52>
    return 0;
 8015006:	2300      	movs	r3, #0
 8015008:	e02b      	b.n	8015062 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801500a:	79fb      	ldrb	r3, [r7, #7]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d018      	beq.n	8015042 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d013      	beq.n	801503e <udp_input_local_match+0x86>
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d00f      	beq.n	801503e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801501e:	4b17      	ldr	r3, [pc, #92]	; (801507c <udp_input_local_match+0xc4>)
 8015020:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015026:	d00a      	beq.n	801503e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	681a      	ldr	r2, [r3, #0]
 801502c:	4b13      	ldr	r3, [pc, #76]	; (801507c <udp_input_local_match+0xc4>)
 801502e:	695b      	ldr	r3, [r3, #20]
 8015030:	405a      	eors	r2, r3
 8015032:	68bb      	ldr	r3, [r7, #8]
 8015034:	3308      	adds	r3, #8
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801503a:	2b00      	cmp	r3, #0
 801503c:	d110      	bne.n	8015060 <udp_input_local_match+0xa8>
          return 1;
 801503e:	2301      	movs	r3, #1
 8015040:	e00f      	b.n	8015062 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d009      	beq.n	801505c <udp_input_local_match+0xa4>
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d005      	beq.n	801505c <udp_input_local_match+0xa4>
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	681a      	ldr	r2, [r3, #0]
 8015054:	4b09      	ldr	r3, [pc, #36]	; (801507c <udp_input_local_match+0xc4>)
 8015056:	695b      	ldr	r3, [r3, #20]
 8015058:	429a      	cmp	r2, r3
 801505a:	d101      	bne.n	8015060 <udp_input_local_match+0xa8>
        return 1;
 801505c:	2301      	movs	r3, #1
 801505e:	e000      	b.n	8015062 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015060:	2300      	movs	r3, #0
}
 8015062:	4618      	mov	r0, r3
 8015064:	3710      	adds	r7, #16
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}
 801506a:	bf00      	nop
 801506c:	08018f00 	.word	0x08018f00
 8015070:	08018f30 	.word	0x08018f30
 8015074:	08018f54 	.word	0x08018f54
 8015078:	08018f7c 	.word	0x08018f7c
 801507c:	24006680 	.word	0x24006680

08015080 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015080:	b590      	push	{r4, r7, lr}
 8015082:	b08d      	sub	sp, #52	; 0x34
 8015084:	af02      	add	r7, sp, #8
 8015086:	6078      	str	r0, [r7, #4]
 8015088:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801508a:	2300      	movs	r3, #0
 801508c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d105      	bne.n	80150a0 <udp_input+0x20>
 8015094:	4b7c      	ldr	r3, [pc, #496]	; (8015288 <udp_input+0x208>)
 8015096:	22cf      	movs	r2, #207	; 0xcf
 8015098:	497c      	ldr	r1, [pc, #496]	; (801528c <udp_input+0x20c>)
 801509a:	487d      	ldr	r0, [pc, #500]	; (8015290 <udp_input+0x210>)
 801509c:	f7eb fb02 	bl	80006a4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d105      	bne.n	80150b2 <udp_input+0x32>
 80150a6:	4b78      	ldr	r3, [pc, #480]	; (8015288 <udp_input+0x208>)
 80150a8:	22d0      	movs	r2, #208	; 0xd0
 80150aa:	497a      	ldr	r1, [pc, #488]	; (8015294 <udp_input+0x214>)
 80150ac:	4878      	ldr	r0, [pc, #480]	; (8015290 <udp_input+0x210>)
 80150ae:	f7eb faf9 	bl	80006a4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	895b      	ldrh	r3, [r3, #10]
 80150b6:	2b07      	cmp	r3, #7
 80150b8:	d803      	bhi.n	80150c2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f7ff fafc 	bl	80146b8 <pbuf_free>
    goto end;
 80150c0:	e0de      	b.n	8015280 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	685b      	ldr	r3, [r3, #4]
 80150c6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80150c8:	4b73      	ldr	r3, [pc, #460]	; (8015298 <udp_input+0x218>)
 80150ca:	695b      	ldr	r3, [r3, #20]
 80150cc:	4a72      	ldr	r2, [pc, #456]	; (8015298 <udp_input+0x218>)
 80150ce:	6812      	ldr	r2, [r2, #0]
 80150d0:	4611      	mov	r1, r2
 80150d2:	4618      	mov	r0, r3
 80150d4:	f001 ffe4 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 80150d8:	4603      	mov	r3, r0
 80150da:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	881b      	ldrh	r3, [r3, #0]
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7fd feac 	bl	8012e40 <lwip_htons>
 80150e8:	4603      	mov	r3, r0
 80150ea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	885b      	ldrh	r3, [r3, #2]
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7fd fea4 	bl	8012e40 <lwip_htons>
 80150f8:	4603      	mov	r3, r0
 80150fa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80150fc:	2300      	movs	r3, #0
 80150fe:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015100:	2300      	movs	r3, #0
 8015102:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015104:	2300      	movs	r3, #0
 8015106:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015108:	4b64      	ldr	r3, [pc, #400]	; (801529c <udp_input+0x21c>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	627b      	str	r3, [r7, #36]	; 0x24
 801510e:	e054      	b.n	80151ba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015112:	8a5b      	ldrh	r3, [r3, #18]
 8015114:	89fa      	ldrh	r2, [r7, #14]
 8015116:	429a      	cmp	r2, r3
 8015118:	d14a      	bne.n	80151b0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801511a:	7cfb      	ldrb	r3, [r7, #19]
 801511c:	461a      	mov	r2, r3
 801511e:	6839      	ldr	r1, [r7, #0]
 8015120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015122:	f7ff ff49 	bl	8014fb8 <udp_input_local_match>
 8015126:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015128:	2b00      	cmp	r3, #0
 801512a:	d041      	beq.n	80151b0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512e:	7c1b      	ldrb	r3, [r3, #16]
 8015130:	f003 0304 	and.w	r3, r3, #4
 8015134:	2b00      	cmp	r3, #0
 8015136:	d11d      	bne.n	8015174 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d102      	bne.n	8015144 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015140:	61fb      	str	r3, [r7, #28]
 8015142:	e017      	b.n	8015174 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015144:	7cfb      	ldrb	r3, [r7, #19]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d014      	beq.n	8015174 <udp_input+0xf4>
 801514a:	4b53      	ldr	r3, [pc, #332]	; (8015298 <udp_input+0x218>)
 801514c:	695b      	ldr	r3, [r3, #20]
 801514e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015152:	d10f      	bne.n	8015174 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015154:	69fb      	ldr	r3, [r7, #28]
 8015156:	681a      	ldr	r2, [r3, #0]
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	3304      	adds	r3, #4
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	429a      	cmp	r2, r3
 8015160:	d008      	beq.n	8015174 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015164:	681a      	ldr	r2, [r3, #0]
 8015166:	683b      	ldr	r3, [r7, #0]
 8015168:	3304      	adds	r3, #4
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	429a      	cmp	r2, r3
 801516e:	d101      	bne.n	8015174 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015172:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015176:	8a9b      	ldrh	r3, [r3, #20]
 8015178:	8a3a      	ldrh	r2, [r7, #16]
 801517a:	429a      	cmp	r2, r3
 801517c:	d118      	bne.n	80151b0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015180:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015182:	2b00      	cmp	r3, #0
 8015184:	d005      	beq.n	8015192 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015188:	685a      	ldr	r2, [r3, #4]
 801518a:	4b43      	ldr	r3, [pc, #268]	; (8015298 <udp_input+0x218>)
 801518c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801518e:	429a      	cmp	r2, r3
 8015190:	d10e      	bne.n	80151b0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015192:	6a3b      	ldr	r3, [r7, #32]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d014      	beq.n	80151c2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801519a:	68da      	ldr	r2, [r3, #12]
 801519c:	6a3b      	ldr	r3, [r7, #32]
 801519e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80151a0:	4b3e      	ldr	r3, [pc, #248]	; (801529c <udp_input+0x21c>)
 80151a2:	681a      	ldr	r2, [r3, #0]
 80151a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80151a8:	4a3c      	ldr	r2, [pc, #240]	; (801529c <udp_input+0x21c>)
 80151aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80151ae:	e008      	b.n	80151c2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80151b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b6:	68db      	ldr	r3, [r3, #12]
 80151b8:	627b      	str	r3, [r7, #36]	; 0x24
 80151ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d1a7      	bne.n	8015110 <udp_input+0x90>
 80151c0:	e000      	b.n	80151c4 <udp_input+0x144>
        break;
 80151c2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d101      	bne.n	80151ce <udp_input+0x14e>
    pcb = uncon_pcb;
 80151ca:	69fb      	ldr	r3, [r7, #28]
 80151cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80151ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d002      	beq.n	80151da <udp_input+0x15a>
    for_us = 1;
 80151d4:	2301      	movs	r3, #1
 80151d6:	76fb      	strb	r3, [r7, #27]
 80151d8:	e00a      	b.n	80151f0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	3304      	adds	r3, #4
 80151de:	681a      	ldr	r2, [r3, #0]
 80151e0:	4b2d      	ldr	r3, [pc, #180]	; (8015298 <udp_input+0x218>)
 80151e2:	695b      	ldr	r3, [r3, #20]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	bf0c      	ite	eq
 80151e8:	2301      	moveq	r3, #1
 80151ea:	2300      	movne	r3, #0
 80151ec:	b2db      	uxtb	r3, r3
 80151ee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80151f0:	7efb      	ldrb	r3, [r7, #27]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d041      	beq.n	801527a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80151f6:	2108      	movs	r1, #8
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f7ff f9d7 	bl	80145ac <pbuf_remove_header>
 80151fe:	4603      	mov	r3, r0
 8015200:	2b00      	cmp	r3, #0
 8015202:	d00a      	beq.n	801521a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015204:	4b20      	ldr	r3, [pc, #128]	; (8015288 <udp_input+0x208>)
 8015206:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801520a:	4925      	ldr	r1, [pc, #148]	; (80152a0 <udp_input+0x220>)
 801520c:	4820      	ldr	r0, [pc, #128]	; (8015290 <udp_input+0x210>)
 801520e:	f7eb fa49 	bl	80006a4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f7ff fa50 	bl	80146b8 <pbuf_free>
      goto end;
 8015218:	e032      	b.n	8015280 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521c:	2b00      	cmp	r3, #0
 801521e:	d012      	beq.n	8015246 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015222:	6a1b      	ldr	r3, [r3, #32]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d00a      	beq.n	801523e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522a:	6a1c      	ldr	r4, [r3, #32]
 801522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015230:	8a3b      	ldrh	r3, [r7, #16]
 8015232:	9300      	str	r3, [sp, #0]
 8015234:	4b1b      	ldr	r3, [pc, #108]	; (80152a4 <udp_input+0x224>)
 8015236:	687a      	ldr	r2, [r7, #4]
 8015238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801523a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801523c:	e021      	b.n	8015282 <udp_input+0x202>
        pbuf_free(p);
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	f7ff fa3a 	bl	80146b8 <pbuf_free>
        goto end;
 8015244:	e01c      	b.n	8015280 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015246:	7cfb      	ldrb	r3, [r7, #19]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d112      	bne.n	8015272 <udp_input+0x1f2>
 801524c:	4b12      	ldr	r3, [pc, #72]	; (8015298 <udp_input+0x218>)
 801524e:	695b      	ldr	r3, [r3, #20]
 8015250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015254:	2be0      	cmp	r3, #224	; 0xe0
 8015256:	d00c      	beq.n	8015272 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015258:	4b0f      	ldr	r3, [pc, #60]	; (8015298 <udp_input+0x218>)
 801525a:	899b      	ldrh	r3, [r3, #12]
 801525c:	3308      	adds	r3, #8
 801525e:	b29b      	uxth	r3, r3
 8015260:	b21b      	sxth	r3, r3
 8015262:	4619      	mov	r1, r3
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f7ff fa14 	bl	8014692 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801526a:	2103      	movs	r1, #3
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f001 f8b7 	bl	80163e0 <icmp_dest_unreach>
      pbuf_free(p);
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f7ff fa20 	bl	80146b8 <pbuf_free>
  return;
 8015278:	e003      	b.n	8015282 <udp_input+0x202>
    pbuf_free(p);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f7ff fa1c 	bl	80146b8 <pbuf_free>
  return;
 8015280:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015282:	372c      	adds	r7, #44	; 0x2c
 8015284:	46bd      	mov	sp, r7
 8015286:	bd90      	pop	{r4, r7, pc}
 8015288:	08018f00 	.word	0x08018f00
 801528c:	08018fa4 	.word	0x08018fa4
 8015290:	08018f54 	.word	0x08018f54
 8015294:	08018fbc 	.word	0x08018fbc
 8015298:	24006680 	.word	0x24006680
 801529c:	24009318 	.word	0x24009318
 80152a0:	08018fd8 	.word	0x08018fd8
 80152a4:	24006690 	.word	0x24006690

080152a8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80152a8:	b480      	push	{r7}
 80152aa:	b085      	sub	sp, #20
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d01e      	beq.n	80152f6 <udp_netif_ip_addr_changed+0x4e>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d01a      	beq.n	80152f6 <udp_netif_ip_addr_changed+0x4e>
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d017      	beq.n	80152f6 <udp_netif_ip_addr_changed+0x4e>
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d013      	beq.n	80152f6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80152ce:	4b0d      	ldr	r3, [pc, #52]	; (8015304 <udp_netif_ip_addr_changed+0x5c>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	60fb      	str	r3, [r7, #12]
 80152d4:	e00c      	b.n	80152f0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	429a      	cmp	r2, r3
 80152e0:	d103      	bne.n	80152ea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	681a      	ldr	r2, [r3, #0]
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	68db      	ldr	r3, [r3, #12]
 80152ee:	60fb      	str	r3, [r7, #12]
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d1ef      	bne.n	80152d6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80152f6:	bf00      	nop
 80152f8:	3714      	adds	r7, #20
 80152fa:	46bd      	mov	sp, r7
 80152fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015300:	4770      	bx	lr
 8015302:	bf00      	nop
 8015304:	24009318 	.word	0x24009318

08015308 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015310:	4915      	ldr	r1, [pc, #84]	; (8015368 <etharp_free_entry+0x60>)
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	4613      	mov	r3, r2
 8015316:	005b      	lsls	r3, r3, #1
 8015318:	4413      	add	r3, r2
 801531a:	00db      	lsls	r3, r3, #3
 801531c:	440b      	add	r3, r1
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d013      	beq.n	801534c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015324:	4910      	ldr	r1, [pc, #64]	; (8015368 <etharp_free_entry+0x60>)
 8015326:	687a      	ldr	r2, [r7, #4]
 8015328:	4613      	mov	r3, r2
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	4413      	add	r3, r2
 801532e:	00db      	lsls	r3, r3, #3
 8015330:	440b      	add	r3, r1
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	4618      	mov	r0, r3
 8015336:	f7ff f9bf 	bl	80146b8 <pbuf_free>
    arp_table[i].q = NULL;
 801533a:	490b      	ldr	r1, [pc, #44]	; (8015368 <etharp_free_entry+0x60>)
 801533c:	687a      	ldr	r2, [r7, #4]
 801533e:	4613      	mov	r3, r2
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	00db      	lsls	r3, r3, #3
 8015346:	440b      	add	r3, r1
 8015348:	2200      	movs	r2, #0
 801534a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801534c:	4906      	ldr	r1, [pc, #24]	; (8015368 <etharp_free_entry+0x60>)
 801534e:	687a      	ldr	r2, [r7, #4]
 8015350:	4613      	mov	r3, r2
 8015352:	005b      	lsls	r3, r3, #1
 8015354:	4413      	add	r3, r2
 8015356:	00db      	lsls	r3, r3, #3
 8015358:	440b      	add	r3, r1
 801535a:	3314      	adds	r3, #20
 801535c:	2200      	movs	r2, #0
 801535e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015360:	bf00      	nop
 8015362:	3708      	adds	r7, #8
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}
 8015368:	2400598c 	.word	0x2400598c

0801536c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015372:	2300      	movs	r3, #0
 8015374:	607b      	str	r3, [r7, #4]
 8015376:	e096      	b.n	80154a6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015378:	494f      	ldr	r1, [pc, #316]	; (80154b8 <etharp_tmr+0x14c>)
 801537a:	687a      	ldr	r2, [r7, #4]
 801537c:	4613      	mov	r3, r2
 801537e:	005b      	lsls	r3, r3, #1
 8015380:	4413      	add	r3, r2
 8015382:	00db      	lsls	r3, r3, #3
 8015384:	440b      	add	r3, r1
 8015386:	3314      	adds	r3, #20
 8015388:	781b      	ldrb	r3, [r3, #0]
 801538a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801538c:	78fb      	ldrb	r3, [r7, #3]
 801538e:	2b00      	cmp	r3, #0
 8015390:	f000 8086 	beq.w	80154a0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015394:	4948      	ldr	r1, [pc, #288]	; (80154b8 <etharp_tmr+0x14c>)
 8015396:	687a      	ldr	r2, [r7, #4]
 8015398:	4613      	mov	r3, r2
 801539a:	005b      	lsls	r3, r3, #1
 801539c:	4413      	add	r3, r2
 801539e:	00db      	lsls	r3, r3, #3
 80153a0:	440b      	add	r3, r1
 80153a2:	3312      	adds	r3, #18
 80153a4:	881b      	ldrh	r3, [r3, #0]
 80153a6:	3301      	adds	r3, #1
 80153a8:	b298      	uxth	r0, r3
 80153aa:	4943      	ldr	r1, [pc, #268]	; (80154b8 <etharp_tmr+0x14c>)
 80153ac:	687a      	ldr	r2, [r7, #4]
 80153ae:	4613      	mov	r3, r2
 80153b0:	005b      	lsls	r3, r3, #1
 80153b2:	4413      	add	r3, r2
 80153b4:	00db      	lsls	r3, r3, #3
 80153b6:	440b      	add	r3, r1
 80153b8:	3312      	adds	r3, #18
 80153ba:	4602      	mov	r2, r0
 80153bc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80153be:	493e      	ldr	r1, [pc, #248]	; (80154b8 <etharp_tmr+0x14c>)
 80153c0:	687a      	ldr	r2, [r7, #4]
 80153c2:	4613      	mov	r3, r2
 80153c4:	005b      	lsls	r3, r3, #1
 80153c6:	4413      	add	r3, r2
 80153c8:	00db      	lsls	r3, r3, #3
 80153ca:	440b      	add	r3, r1
 80153cc:	3312      	adds	r3, #18
 80153ce:	881b      	ldrh	r3, [r3, #0]
 80153d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80153d4:	d215      	bcs.n	8015402 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80153d6:	4938      	ldr	r1, [pc, #224]	; (80154b8 <etharp_tmr+0x14c>)
 80153d8:	687a      	ldr	r2, [r7, #4]
 80153da:	4613      	mov	r3, r2
 80153dc:	005b      	lsls	r3, r3, #1
 80153de:	4413      	add	r3, r2
 80153e0:	00db      	lsls	r3, r3, #3
 80153e2:	440b      	add	r3, r1
 80153e4:	3314      	adds	r3, #20
 80153e6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80153e8:	2b01      	cmp	r3, #1
 80153ea:	d10e      	bne.n	801540a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80153ec:	4932      	ldr	r1, [pc, #200]	; (80154b8 <etharp_tmr+0x14c>)
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	4613      	mov	r3, r2
 80153f2:	005b      	lsls	r3, r3, #1
 80153f4:	4413      	add	r3, r2
 80153f6:	00db      	lsls	r3, r3, #3
 80153f8:	440b      	add	r3, r1
 80153fa:	3312      	adds	r3, #18
 80153fc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80153fe:	2b04      	cmp	r3, #4
 8015400:	d903      	bls.n	801540a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f7ff ff80 	bl	8015308 <etharp_free_entry>
 8015408:	e04a      	b.n	80154a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801540a:	492b      	ldr	r1, [pc, #172]	; (80154b8 <etharp_tmr+0x14c>)
 801540c:	687a      	ldr	r2, [r7, #4]
 801540e:	4613      	mov	r3, r2
 8015410:	005b      	lsls	r3, r3, #1
 8015412:	4413      	add	r3, r2
 8015414:	00db      	lsls	r3, r3, #3
 8015416:	440b      	add	r3, r1
 8015418:	3314      	adds	r3, #20
 801541a:	781b      	ldrb	r3, [r3, #0]
 801541c:	2b03      	cmp	r3, #3
 801541e:	d10a      	bne.n	8015436 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015420:	4925      	ldr	r1, [pc, #148]	; (80154b8 <etharp_tmr+0x14c>)
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	4613      	mov	r3, r2
 8015426:	005b      	lsls	r3, r3, #1
 8015428:	4413      	add	r3, r2
 801542a:	00db      	lsls	r3, r3, #3
 801542c:	440b      	add	r3, r1
 801542e:	3314      	adds	r3, #20
 8015430:	2204      	movs	r2, #4
 8015432:	701a      	strb	r2, [r3, #0]
 8015434:	e034      	b.n	80154a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015436:	4920      	ldr	r1, [pc, #128]	; (80154b8 <etharp_tmr+0x14c>)
 8015438:	687a      	ldr	r2, [r7, #4]
 801543a:	4613      	mov	r3, r2
 801543c:	005b      	lsls	r3, r3, #1
 801543e:	4413      	add	r3, r2
 8015440:	00db      	lsls	r3, r3, #3
 8015442:	440b      	add	r3, r1
 8015444:	3314      	adds	r3, #20
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	2b04      	cmp	r3, #4
 801544a:	d10a      	bne.n	8015462 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801544c:	491a      	ldr	r1, [pc, #104]	; (80154b8 <etharp_tmr+0x14c>)
 801544e:	687a      	ldr	r2, [r7, #4]
 8015450:	4613      	mov	r3, r2
 8015452:	005b      	lsls	r3, r3, #1
 8015454:	4413      	add	r3, r2
 8015456:	00db      	lsls	r3, r3, #3
 8015458:	440b      	add	r3, r1
 801545a:	3314      	adds	r3, #20
 801545c:	2202      	movs	r2, #2
 801545e:	701a      	strb	r2, [r3, #0]
 8015460:	e01e      	b.n	80154a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015462:	4915      	ldr	r1, [pc, #84]	; (80154b8 <etharp_tmr+0x14c>)
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	4613      	mov	r3, r2
 8015468:	005b      	lsls	r3, r3, #1
 801546a:	4413      	add	r3, r2
 801546c:	00db      	lsls	r3, r3, #3
 801546e:	440b      	add	r3, r1
 8015470:	3314      	adds	r3, #20
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	2b01      	cmp	r3, #1
 8015476:	d113      	bne.n	80154a0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015478:	490f      	ldr	r1, [pc, #60]	; (80154b8 <etharp_tmr+0x14c>)
 801547a:	687a      	ldr	r2, [r7, #4]
 801547c:	4613      	mov	r3, r2
 801547e:	005b      	lsls	r3, r3, #1
 8015480:	4413      	add	r3, r2
 8015482:	00db      	lsls	r3, r3, #3
 8015484:	440b      	add	r3, r1
 8015486:	3308      	adds	r3, #8
 8015488:	6818      	ldr	r0, [r3, #0]
 801548a:	687a      	ldr	r2, [r7, #4]
 801548c:	4613      	mov	r3, r2
 801548e:	005b      	lsls	r3, r3, #1
 8015490:	4413      	add	r3, r2
 8015492:	00db      	lsls	r3, r3, #3
 8015494:	4a08      	ldr	r2, [pc, #32]	; (80154b8 <etharp_tmr+0x14c>)
 8015496:	4413      	add	r3, r2
 8015498:	3304      	adds	r3, #4
 801549a:	4619      	mov	r1, r3
 801549c:	f000 fe6e 	bl	801617c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	3301      	adds	r3, #1
 80154a4:	607b      	str	r3, [r7, #4]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2b31      	cmp	r3, #49	; 0x31
 80154aa:	f77f af65 	ble.w	8015378 <etharp_tmr+0xc>
      }
    }
  }
}
 80154ae:	bf00      	nop
 80154b0:	bf00      	nop
 80154b2:	3708      	adds	r7, #8
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	2400598c 	.word	0x2400598c

080154bc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b08a      	sub	sp, #40	; 0x28
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	460b      	mov	r3, r1
 80154c6:	607a      	str	r2, [r7, #4]
 80154c8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80154ca:	2332      	movs	r3, #50	; 0x32
 80154cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80154ce:	2332      	movs	r3, #50	; 0x32
 80154d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80154d2:	2332      	movs	r3, #50	; 0x32
 80154d4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80154d6:	2300      	movs	r3, #0
 80154d8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80154da:	2332      	movs	r3, #50	; 0x32
 80154dc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80154de:	2300      	movs	r3, #0
 80154e0:	83bb      	strh	r3, [r7, #28]
 80154e2:	2300      	movs	r3, #0
 80154e4:	837b      	strh	r3, [r7, #26]
 80154e6:	2300      	movs	r3, #0
 80154e8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154ea:	2300      	movs	r3, #0
 80154ec:	843b      	strh	r3, [r7, #32]
 80154ee:	e0ae      	b.n	801564e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80154f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154f4:	49a6      	ldr	r1, [pc, #664]	; (8015790 <etharp_find_entry+0x2d4>)
 80154f6:	4613      	mov	r3, r2
 80154f8:	005b      	lsls	r3, r3, #1
 80154fa:	4413      	add	r3, r2
 80154fc:	00db      	lsls	r3, r3, #3
 80154fe:	440b      	add	r3, r1
 8015500:	3314      	adds	r3, #20
 8015502:	781b      	ldrb	r3, [r3, #0]
 8015504:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015506:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801550a:	2b32      	cmp	r3, #50	; 0x32
 801550c:	d105      	bne.n	801551a <etharp_find_entry+0x5e>
 801550e:	7dfb      	ldrb	r3, [r7, #23]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d102      	bne.n	801551a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015514:	8c3b      	ldrh	r3, [r7, #32]
 8015516:	847b      	strh	r3, [r7, #34]	; 0x22
 8015518:	e095      	b.n	8015646 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801551a:	7dfb      	ldrb	r3, [r7, #23]
 801551c:	2b00      	cmp	r3, #0
 801551e:	f000 8092 	beq.w	8015646 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015522:	7dfb      	ldrb	r3, [r7, #23]
 8015524:	2b01      	cmp	r3, #1
 8015526:	d009      	beq.n	801553c <etharp_find_entry+0x80>
 8015528:	7dfb      	ldrb	r3, [r7, #23]
 801552a:	2b01      	cmp	r3, #1
 801552c:	d806      	bhi.n	801553c <etharp_find_entry+0x80>
 801552e:	4b99      	ldr	r3, [pc, #612]	; (8015794 <etharp_find_entry+0x2d8>)
 8015530:	f240 1223 	movw	r2, #291	; 0x123
 8015534:	4998      	ldr	r1, [pc, #608]	; (8015798 <etharp_find_entry+0x2dc>)
 8015536:	4899      	ldr	r0, [pc, #612]	; (801579c <etharp_find_entry+0x2e0>)
 8015538:	f7eb f8b4 	bl	80006a4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d020      	beq.n	8015584 <etharp_find_entry+0xc8>
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	6819      	ldr	r1, [r3, #0]
 8015546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801554a:	4891      	ldr	r0, [pc, #580]	; (8015790 <etharp_find_entry+0x2d4>)
 801554c:	4613      	mov	r3, r2
 801554e:	005b      	lsls	r3, r3, #1
 8015550:	4413      	add	r3, r2
 8015552:	00db      	lsls	r3, r3, #3
 8015554:	4403      	add	r3, r0
 8015556:	3304      	adds	r3, #4
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	4299      	cmp	r1, r3
 801555c:	d112      	bne.n	8015584 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d00c      	beq.n	801557e <etharp_find_entry+0xc2>
 8015564:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015568:	4989      	ldr	r1, [pc, #548]	; (8015790 <etharp_find_entry+0x2d4>)
 801556a:	4613      	mov	r3, r2
 801556c:	005b      	lsls	r3, r3, #1
 801556e:	4413      	add	r3, r2
 8015570:	00db      	lsls	r3, r3, #3
 8015572:	440b      	add	r3, r1
 8015574:	3308      	adds	r3, #8
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	429a      	cmp	r2, r3
 801557c:	d102      	bne.n	8015584 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801557e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015582:	e100      	b.n	8015786 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015584:	7dfb      	ldrb	r3, [r7, #23]
 8015586:	2b01      	cmp	r3, #1
 8015588:	d140      	bne.n	801560c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801558a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801558e:	4980      	ldr	r1, [pc, #512]	; (8015790 <etharp_find_entry+0x2d4>)
 8015590:	4613      	mov	r3, r2
 8015592:	005b      	lsls	r3, r3, #1
 8015594:	4413      	add	r3, r2
 8015596:	00db      	lsls	r3, r3, #3
 8015598:	440b      	add	r3, r1
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d01a      	beq.n	80155d6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80155a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155a4:	497a      	ldr	r1, [pc, #488]	; (8015790 <etharp_find_entry+0x2d4>)
 80155a6:	4613      	mov	r3, r2
 80155a8:	005b      	lsls	r3, r3, #1
 80155aa:	4413      	add	r3, r2
 80155ac:	00db      	lsls	r3, r3, #3
 80155ae:	440b      	add	r3, r1
 80155b0:	3312      	adds	r3, #18
 80155b2:	881b      	ldrh	r3, [r3, #0]
 80155b4:	8bba      	ldrh	r2, [r7, #28]
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d845      	bhi.n	8015646 <etharp_find_entry+0x18a>
            old_queue = i;
 80155ba:	8c3b      	ldrh	r3, [r7, #32]
 80155bc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80155be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155c2:	4973      	ldr	r1, [pc, #460]	; (8015790 <etharp_find_entry+0x2d4>)
 80155c4:	4613      	mov	r3, r2
 80155c6:	005b      	lsls	r3, r3, #1
 80155c8:	4413      	add	r3, r2
 80155ca:	00db      	lsls	r3, r3, #3
 80155cc:	440b      	add	r3, r1
 80155ce:	3312      	adds	r3, #18
 80155d0:	881b      	ldrh	r3, [r3, #0]
 80155d2:	83bb      	strh	r3, [r7, #28]
 80155d4:	e037      	b.n	8015646 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80155d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155da:	496d      	ldr	r1, [pc, #436]	; (8015790 <etharp_find_entry+0x2d4>)
 80155dc:	4613      	mov	r3, r2
 80155de:	005b      	lsls	r3, r3, #1
 80155e0:	4413      	add	r3, r2
 80155e2:	00db      	lsls	r3, r3, #3
 80155e4:	440b      	add	r3, r1
 80155e6:	3312      	adds	r3, #18
 80155e8:	881b      	ldrh	r3, [r3, #0]
 80155ea:	8b7a      	ldrh	r2, [r7, #26]
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d82a      	bhi.n	8015646 <etharp_find_entry+0x18a>
            old_pending = i;
 80155f0:	8c3b      	ldrh	r3, [r7, #32]
 80155f2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80155f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155f8:	4965      	ldr	r1, [pc, #404]	; (8015790 <etharp_find_entry+0x2d4>)
 80155fa:	4613      	mov	r3, r2
 80155fc:	005b      	lsls	r3, r3, #1
 80155fe:	4413      	add	r3, r2
 8015600:	00db      	lsls	r3, r3, #3
 8015602:	440b      	add	r3, r1
 8015604:	3312      	adds	r3, #18
 8015606:	881b      	ldrh	r3, [r3, #0]
 8015608:	837b      	strh	r3, [r7, #26]
 801560a:	e01c      	b.n	8015646 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801560c:	7dfb      	ldrb	r3, [r7, #23]
 801560e:	2b01      	cmp	r3, #1
 8015610:	d919      	bls.n	8015646 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015612:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015616:	495e      	ldr	r1, [pc, #376]	; (8015790 <etharp_find_entry+0x2d4>)
 8015618:	4613      	mov	r3, r2
 801561a:	005b      	lsls	r3, r3, #1
 801561c:	4413      	add	r3, r2
 801561e:	00db      	lsls	r3, r3, #3
 8015620:	440b      	add	r3, r1
 8015622:	3312      	adds	r3, #18
 8015624:	881b      	ldrh	r3, [r3, #0]
 8015626:	8b3a      	ldrh	r2, [r7, #24]
 8015628:	429a      	cmp	r2, r3
 801562a:	d80c      	bhi.n	8015646 <etharp_find_entry+0x18a>
            old_stable = i;
 801562c:	8c3b      	ldrh	r3, [r7, #32]
 801562e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015630:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015634:	4956      	ldr	r1, [pc, #344]	; (8015790 <etharp_find_entry+0x2d4>)
 8015636:	4613      	mov	r3, r2
 8015638:	005b      	lsls	r3, r3, #1
 801563a:	4413      	add	r3, r2
 801563c:	00db      	lsls	r3, r3, #3
 801563e:	440b      	add	r3, r1
 8015640:	3312      	adds	r3, #18
 8015642:	881b      	ldrh	r3, [r3, #0]
 8015644:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015646:	8c3b      	ldrh	r3, [r7, #32]
 8015648:	3301      	adds	r3, #1
 801564a:	b29b      	uxth	r3, r3
 801564c:	843b      	strh	r3, [r7, #32]
 801564e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015652:	2b31      	cmp	r3, #49	; 0x31
 8015654:	f77f af4c 	ble.w	80154f0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015658:	7afb      	ldrb	r3, [r7, #11]
 801565a:	f003 0302 	and.w	r3, r3, #2
 801565e:	2b00      	cmp	r3, #0
 8015660:	d108      	bne.n	8015674 <etharp_find_entry+0x1b8>
 8015662:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015666:	2b32      	cmp	r3, #50	; 0x32
 8015668:	d107      	bne.n	801567a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801566a:	7afb      	ldrb	r3, [r7, #11]
 801566c:	f003 0301 	and.w	r3, r3, #1
 8015670:	2b00      	cmp	r3, #0
 8015672:	d102      	bne.n	801567a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015678:	e085      	b.n	8015786 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801567a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801567e:	2b31      	cmp	r3, #49	; 0x31
 8015680:	dc02      	bgt.n	8015688 <etharp_find_entry+0x1cc>
    i = empty;
 8015682:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015684:	843b      	strh	r3, [r7, #32]
 8015686:	e039      	b.n	80156fc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015688:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801568c:	2b31      	cmp	r3, #49	; 0x31
 801568e:	dc14      	bgt.n	80156ba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015692:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015694:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015698:	493d      	ldr	r1, [pc, #244]	; (8015790 <etharp_find_entry+0x2d4>)
 801569a:	4613      	mov	r3, r2
 801569c:	005b      	lsls	r3, r3, #1
 801569e:	4413      	add	r3, r2
 80156a0:	00db      	lsls	r3, r3, #3
 80156a2:	440b      	add	r3, r1
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d018      	beq.n	80156dc <etharp_find_entry+0x220>
 80156aa:	4b3a      	ldr	r3, [pc, #232]	; (8015794 <etharp_find_entry+0x2d8>)
 80156ac:	f240 126d 	movw	r2, #365	; 0x16d
 80156b0:	493b      	ldr	r1, [pc, #236]	; (80157a0 <etharp_find_entry+0x2e4>)
 80156b2:	483a      	ldr	r0, [pc, #232]	; (801579c <etharp_find_entry+0x2e0>)
 80156b4:	f7ea fff6 	bl	80006a4 <iprintf>
 80156b8:	e010      	b.n	80156dc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80156ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80156be:	2b31      	cmp	r3, #49	; 0x31
 80156c0:	dc02      	bgt.n	80156c8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80156c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80156c4:	843b      	strh	r3, [r7, #32]
 80156c6:	e009      	b.n	80156dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80156c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80156cc:	2b31      	cmp	r3, #49	; 0x31
 80156ce:	dc02      	bgt.n	80156d6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80156d0:	8bfb      	ldrh	r3, [r7, #30]
 80156d2:	843b      	strh	r3, [r7, #32]
 80156d4:	e002      	b.n	80156dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80156d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156da:	e054      	b.n	8015786 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80156dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80156e0:	2b31      	cmp	r3, #49	; 0x31
 80156e2:	dd06      	ble.n	80156f2 <etharp_find_entry+0x236>
 80156e4:	4b2b      	ldr	r3, [pc, #172]	; (8015794 <etharp_find_entry+0x2d8>)
 80156e6:	f240 127f 	movw	r2, #383	; 0x17f
 80156ea:	492e      	ldr	r1, [pc, #184]	; (80157a4 <etharp_find_entry+0x2e8>)
 80156ec:	482b      	ldr	r0, [pc, #172]	; (801579c <etharp_find_entry+0x2e0>)
 80156ee:	f7ea ffd9 	bl	80006a4 <iprintf>
    etharp_free_entry(i);
 80156f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80156f6:	4618      	mov	r0, r3
 80156f8:	f7ff fe06 	bl	8015308 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80156fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015700:	2b31      	cmp	r3, #49	; 0x31
 8015702:	dd06      	ble.n	8015712 <etharp_find_entry+0x256>
 8015704:	4b23      	ldr	r3, [pc, #140]	; (8015794 <etharp_find_entry+0x2d8>)
 8015706:	f240 1283 	movw	r2, #387	; 0x183
 801570a:	4926      	ldr	r1, [pc, #152]	; (80157a4 <etharp_find_entry+0x2e8>)
 801570c:	4823      	ldr	r0, [pc, #140]	; (801579c <etharp_find_entry+0x2e0>)
 801570e:	f7ea ffc9 	bl	80006a4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015716:	491e      	ldr	r1, [pc, #120]	; (8015790 <etharp_find_entry+0x2d4>)
 8015718:	4613      	mov	r3, r2
 801571a:	005b      	lsls	r3, r3, #1
 801571c:	4413      	add	r3, r2
 801571e:	00db      	lsls	r3, r3, #3
 8015720:	440b      	add	r3, r1
 8015722:	3314      	adds	r3, #20
 8015724:	781b      	ldrb	r3, [r3, #0]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d006      	beq.n	8015738 <etharp_find_entry+0x27c>
 801572a:	4b1a      	ldr	r3, [pc, #104]	; (8015794 <etharp_find_entry+0x2d8>)
 801572c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015730:	491d      	ldr	r1, [pc, #116]	; (80157a8 <etharp_find_entry+0x2ec>)
 8015732:	481a      	ldr	r0, [pc, #104]	; (801579c <etharp_find_entry+0x2e0>)
 8015734:	f7ea ffb6 	bl	80006a4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d00b      	beq.n	8015756 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801573e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	6819      	ldr	r1, [r3, #0]
 8015746:	4812      	ldr	r0, [pc, #72]	; (8015790 <etharp_find_entry+0x2d4>)
 8015748:	4613      	mov	r3, r2
 801574a:	005b      	lsls	r3, r3, #1
 801574c:	4413      	add	r3, r2
 801574e:	00db      	lsls	r3, r3, #3
 8015750:	4403      	add	r3, r0
 8015752:	3304      	adds	r3, #4
 8015754:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801575a:	490d      	ldr	r1, [pc, #52]	; (8015790 <etharp_find_entry+0x2d4>)
 801575c:	4613      	mov	r3, r2
 801575e:	005b      	lsls	r3, r3, #1
 8015760:	4413      	add	r3, r2
 8015762:	00db      	lsls	r3, r3, #3
 8015764:	440b      	add	r3, r1
 8015766:	3312      	adds	r3, #18
 8015768:	2200      	movs	r2, #0
 801576a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801576c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015770:	4907      	ldr	r1, [pc, #28]	; (8015790 <etharp_find_entry+0x2d4>)
 8015772:	4613      	mov	r3, r2
 8015774:	005b      	lsls	r3, r3, #1
 8015776:	4413      	add	r3, r2
 8015778:	00db      	lsls	r3, r3, #3
 801577a:	440b      	add	r3, r1
 801577c:	3308      	adds	r3, #8
 801577e:	687a      	ldr	r2, [r7, #4]
 8015780:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015782:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015786:	4618      	mov	r0, r3
 8015788:	3728      	adds	r7, #40	; 0x28
 801578a:	46bd      	mov	sp, r7
 801578c:	bd80      	pop	{r7, pc}
 801578e:	bf00      	nop
 8015790:	2400598c 	.word	0x2400598c
 8015794:	08019264 	.word	0x08019264
 8015798:	0801929c 	.word	0x0801929c
 801579c:	080192dc 	.word	0x080192dc
 80157a0:	08019304 	.word	0x08019304
 80157a4:	0801931c 	.word	0x0801931c
 80157a8:	08019330 	.word	0x08019330

080157ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b088      	sub	sp, #32
 80157b0:	af02      	add	r7, sp, #8
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
 80157b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80157c0:	2b06      	cmp	r3, #6
 80157c2:	d006      	beq.n	80157d2 <etharp_update_arp_entry+0x26>
 80157c4:	4b48      	ldr	r3, [pc, #288]	; (80158e8 <etharp_update_arp_entry+0x13c>)
 80157c6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80157ca:	4948      	ldr	r1, [pc, #288]	; (80158ec <etharp_update_arp_entry+0x140>)
 80157cc:	4848      	ldr	r0, [pc, #288]	; (80158f0 <etharp_update_arp_entry+0x144>)
 80157ce:	f7ea ff69 	bl	80006a4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d012      	beq.n	80157fe <etharp_update_arp_entry+0x52>
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d00e      	beq.n	80157fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	68f9      	ldr	r1, [r7, #12]
 80157e6:	4618      	mov	r0, r3
 80157e8:	f001 fc5a 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 80157ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d105      	bne.n	80157fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80157fa:	2be0      	cmp	r3, #224	; 0xe0
 80157fc:	d102      	bne.n	8015804 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80157fe:	f06f 030f 	mvn.w	r3, #15
 8015802:	e06c      	b.n	80158de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015804:	78fb      	ldrb	r3, [r7, #3]
 8015806:	68fa      	ldr	r2, [r7, #12]
 8015808:	4619      	mov	r1, r3
 801580a:	68b8      	ldr	r0, [r7, #8]
 801580c:	f7ff fe56 	bl	80154bc <etharp_find_entry>
 8015810:	4603      	mov	r3, r0
 8015812:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015814:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015818:	2b00      	cmp	r3, #0
 801581a:	da02      	bge.n	8015822 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801581c:	8afb      	ldrh	r3, [r7, #22]
 801581e:	b25b      	sxtb	r3, r3
 8015820:	e05d      	b.n	80158de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015822:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015826:	4933      	ldr	r1, [pc, #204]	; (80158f4 <etharp_update_arp_entry+0x148>)
 8015828:	4613      	mov	r3, r2
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	4413      	add	r3, r2
 801582e:	00db      	lsls	r3, r3, #3
 8015830:	440b      	add	r3, r1
 8015832:	3314      	adds	r3, #20
 8015834:	2202      	movs	r2, #2
 8015836:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015838:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801583c:	492d      	ldr	r1, [pc, #180]	; (80158f4 <etharp_update_arp_entry+0x148>)
 801583e:	4613      	mov	r3, r2
 8015840:	005b      	lsls	r3, r3, #1
 8015842:	4413      	add	r3, r2
 8015844:	00db      	lsls	r3, r3, #3
 8015846:	440b      	add	r3, r1
 8015848:	3308      	adds	r3, #8
 801584a:	68fa      	ldr	r2, [r7, #12]
 801584c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801584e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015852:	4613      	mov	r3, r2
 8015854:	005b      	lsls	r3, r3, #1
 8015856:	4413      	add	r3, r2
 8015858:	00db      	lsls	r3, r3, #3
 801585a:	3308      	adds	r3, #8
 801585c:	4a25      	ldr	r2, [pc, #148]	; (80158f4 <etharp_update_arp_entry+0x148>)
 801585e:	4413      	add	r3, r2
 8015860:	3304      	adds	r3, #4
 8015862:	2206      	movs	r2, #6
 8015864:	6879      	ldr	r1, [r7, #4]
 8015866:	4618      	mov	r0, r3
 8015868:	f7ea fdb2 	bl	80003d0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801586c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015870:	4920      	ldr	r1, [pc, #128]	; (80158f4 <etharp_update_arp_entry+0x148>)
 8015872:	4613      	mov	r3, r2
 8015874:	005b      	lsls	r3, r3, #1
 8015876:	4413      	add	r3, r2
 8015878:	00db      	lsls	r3, r3, #3
 801587a:	440b      	add	r3, r1
 801587c:	3312      	adds	r3, #18
 801587e:	2200      	movs	r2, #0
 8015880:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015882:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015886:	491b      	ldr	r1, [pc, #108]	; (80158f4 <etharp_update_arp_entry+0x148>)
 8015888:	4613      	mov	r3, r2
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	4413      	add	r3, r2
 801588e:	00db      	lsls	r3, r3, #3
 8015890:	440b      	add	r3, r1
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d021      	beq.n	80158dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015898:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801589c:	4915      	ldr	r1, [pc, #84]	; (80158f4 <etharp_update_arp_entry+0x148>)
 801589e:	4613      	mov	r3, r2
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	4413      	add	r3, r2
 80158a4:	00db      	lsls	r3, r3, #3
 80158a6:	440b      	add	r3, r1
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80158ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158b0:	4910      	ldr	r1, [pc, #64]	; (80158f4 <etharp_update_arp_entry+0x148>)
 80158b2:	4613      	mov	r3, r2
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	4413      	add	r3, r2
 80158b8:	00db      	lsls	r3, r3, #3
 80158ba:	440b      	add	r3, r1
 80158bc:	2200      	movs	r2, #0
 80158be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80158c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80158ca:	9300      	str	r3, [sp, #0]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6939      	ldr	r1, [r7, #16]
 80158d0:	68f8      	ldr	r0, [r7, #12]
 80158d2:	f002 faed 	bl	8017eb0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80158d6:	6938      	ldr	r0, [r7, #16]
 80158d8:	f7fe feee 	bl	80146b8 <pbuf_free>
  }
  return ERR_OK;
 80158dc:	2300      	movs	r3, #0
}
 80158de:	4618      	mov	r0, r3
 80158e0:	3718      	adds	r7, #24
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}
 80158e6:	bf00      	nop
 80158e8:	08019264 	.word	0x08019264
 80158ec:	0801935c 	.word	0x0801935c
 80158f0:	080192dc 	.word	0x080192dc
 80158f4:	2400598c 	.word	0x2400598c

080158f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b084      	sub	sp, #16
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015900:	2300      	movs	r3, #0
 8015902:	60fb      	str	r3, [r7, #12]
 8015904:	e01e      	b.n	8015944 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015906:	4913      	ldr	r1, [pc, #76]	; (8015954 <etharp_cleanup_netif+0x5c>)
 8015908:	68fa      	ldr	r2, [r7, #12]
 801590a:	4613      	mov	r3, r2
 801590c:	005b      	lsls	r3, r3, #1
 801590e:	4413      	add	r3, r2
 8015910:	00db      	lsls	r3, r3, #3
 8015912:	440b      	add	r3, r1
 8015914:	3314      	adds	r3, #20
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801591a:	7afb      	ldrb	r3, [r7, #11]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d00e      	beq.n	801593e <etharp_cleanup_netif+0x46>
 8015920:	490c      	ldr	r1, [pc, #48]	; (8015954 <etharp_cleanup_netif+0x5c>)
 8015922:	68fa      	ldr	r2, [r7, #12]
 8015924:	4613      	mov	r3, r2
 8015926:	005b      	lsls	r3, r3, #1
 8015928:	4413      	add	r3, r2
 801592a:	00db      	lsls	r3, r3, #3
 801592c:	440b      	add	r3, r1
 801592e:	3308      	adds	r3, #8
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	687a      	ldr	r2, [r7, #4]
 8015934:	429a      	cmp	r2, r3
 8015936:	d102      	bne.n	801593e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015938:	68f8      	ldr	r0, [r7, #12]
 801593a:	f7ff fce5 	bl	8015308 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	3301      	adds	r3, #1
 8015942:	60fb      	str	r3, [r7, #12]
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	2b31      	cmp	r3, #49	; 0x31
 8015948:	dddd      	ble.n	8015906 <etharp_cleanup_netif+0xe>
    }
  }
}
 801594a:	bf00      	nop
 801594c:	bf00      	nop
 801594e:	3710      	adds	r7, #16
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}
 8015954:	2400598c 	.word	0x2400598c

08015958 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015958:	b5b0      	push	{r4, r5, r7, lr}
 801595a:	b08a      	sub	sp, #40	; 0x28
 801595c:	af04      	add	r7, sp, #16
 801595e:	6078      	str	r0, [r7, #4]
 8015960:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d107      	bne.n	8015978 <etharp_input+0x20>
 8015968:	4b3d      	ldr	r3, [pc, #244]	; (8015a60 <etharp_input+0x108>)
 801596a:	f240 228a 	movw	r2, #650	; 0x28a
 801596e:	493d      	ldr	r1, [pc, #244]	; (8015a64 <etharp_input+0x10c>)
 8015970:	483d      	ldr	r0, [pc, #244]	; (8015a68 <etharp_input+0x110>)
 8015972:	f7ea fe97 	bl	80006a4 <iprintf>
 8015976:	e06f      	b.n	8015a58 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	685b      	ldr	r3, [r3, #4]
 801597c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	881b      	ldrh	r3, [r3, #0]
 8015982:	b29b      	uxth	r3, r3
 8015984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015988:	d10c      	bne.n	80159a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801598e:	2b06      	cmp	r3, #6
 8015990:	d108      	bne.n	80159a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015996:	2b04      	cmp	r3, #4
 8015998:	d104      	bne.n	80159a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	885b      	ldrh	r3, [r3, #2]
 801599e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80159a0:	2b08      	cmp	r3, #8
 80159a2:	d003      	beq.n	80159ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f7fe fe87 	bl	80146b8 <pbuf_free>
    return;
 80159aa:	e055      	b.n	8015a58 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	330e      	adds	r3, #14
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	3318      	adds	r3, #24
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80159bc:	683b      	ldr	r3, [r7, #0]
 80159be:	3304      	adds	r3, #4
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d102      	bne.n	80159cc <etharp_input+0x74>
    for_us = 0;
 80159c6:	2300      	movs	r3, #0
 80159c8:	75fb      	strb	r3, [r7, #23]
 80159ca:	e009      	b.n	80159e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80159cc:	68ba      	ldr	r2, [r7, #8]
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	3304      	adds	r3, #4
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	429a      	cmp	r2, r3
 80159d6:	bf0c      	ite	eq
 80159d8:	2301      	moveq	r3, #1
 80159da:	2300      	movne	r3, #0
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	f103 0208 	add.w	r2, r3, #8
 80159e6:	7dfb      	ldrb	r3, [r7, #23]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d001      	beq.n	80159f0 <etharp_input+0x98>
 80159ec:	2301      	movs	r3, #1
 80159ee:	e000      	b.n	80159f2 <etharp_input+0x9a>
 80159f0:	2302      	movs	r3, #2
 80159f2:	f107 010c 	add.w	r1, r7, #12
 80159f6:	6838      	ldr	r0, [r7, #0]
 80159f8:	f7ff fed8 	bl	80157ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	88db      	ldrh	r3, [r3, #6]
 8015a00:	b29b      	uxth	r3, r3
 8015a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a06:	d003      	beq.n	8015a10 <etharp_input+0xb8>
 8015a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a0c:	d01e      	beq.n	8015a4c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015a0e:	e020      	b.n	8015a52 <etharp_input+0xfa>
      if (for_us) {
 8015a10:	7dfb      	ldrb	r3, [r7, #23]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d01c      	beq.n	8015a50 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015a16:	683b      	ldr	r3, [r7, #0]
 8015a18:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015a2c:	693a      	ldr	r2, [r7, #16]
 8015a2e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015a30:	2102      	movs	r1, #2
 8015a32:	9103      	str	r1, [sp, #12]
 8015a34:	f107 010c 	add.w	r1, r7, #12
 8015a38:	9102      	str	r1, [sp, #8]
 8015a3a:	9201      	str	r2, [sp, #4]
 8015a3c:	9300      	str	r3, [sp, #0]
 8015a3e:	462b      	mov	r3, r5
 8015a40:	4622      	mov	r2, r4
 8015a42:	4601      	mov	r1, r0
 8015a44:	6838      	ldr	r0, [r7, #0]
 8015a46:	f000 faeb 	bl	8016020 <etharp_raw>
      break;
 8015a4a:	e001      	b.n	8015a50 <etharp_input+0xf8>
      break;
 8015a4c:	bf00      	nop
 8015a4e:	e000      	b.n	8015a52 <etharp_input+0xfa>
      break;
 8015a50:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f7fe fe30 	bl	80146b8 <pbuf_free>
}
 8015a58:	3718      	adds	r7, #24
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	08019264 	.word	0x08019264
 8015a64:	080193b4 	.word	0x080193b4
 8015a68:	080192dc 	.word	0x080192dc

08015a6c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b086      	sub	sp, #24
 8015a70:	af02      	add	r7, sp, #8
 8015a72:	60f8      	str	r0, [r7, #12]
 8015a74:	60b9      	str	r1, [r7, #8]
 8015a76:	4613      	mov	r3, r2
 8015a78:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015a7a:	79fa      	ldrb	r2, [r7, #7]
 8015a7c:	4944      	ldr	r1, [pc, #272]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015a7e:	4613      	mov	r3, r2
 8015a80:	005b      	lsls	r3, r3, #1
 8015a82:	4413      	add	r3, r2
 8015a84:	00db      	lsls	r3, r3, #3
 8015a86:	440b      	add	r3, r1
 8015a88:	3314      	adds	r3, #20
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	2b01      	cmp	r3, #1
 8015a8e:	d806      	bhi.n	8015a9e <etharp_output_to_arp_index+0x32>
 8015a90:	4b40      	ldr	r3, [pc, #256]	; (8015b94 <etharp_output_to_arp_index+0x128>)
 8015a92:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015a96:	4940      	ldr	r1, [pc, #256]	; (8015b98 <etharp_output_to_arp_index+0x12c>)
 8015a98:	4840      	ldr	r0, [pc, #256]	; (8015b9c <etharp_output_to_arp_index+0x130>)
 8015a9a:	f7ea fe03 	bl	80006a4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015a9e:	79fa      	ldrb	r2, [r7, #7]
 8015aa0:	493b      	ldr	r1, [pc, #236]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	005b      	lsls	r3, r3, #1
 8015aa6:	4413      	add	r3, r2
 8015aa8:	00db      	lsls	r3, r3, #3
 8015aaa:	440b      	add	r3, r1
 8015aac:	3314      	adds	r3, #20
 8015aae:	781b      	ldrb	r3, [r3, #0]
 8015ab0:	2b02      	cmp	r3, #2
 8015ab2:	d153      	bne.n	8015b5c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015ab4:	79fa      	ldrb	r2, [r7, #7]
 8015ab6:	4936      	ldr	r1, [pc, #216]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015ab8:	4613      	mov	r3, r2
 8015aba:	005b      	lsls	r3, r3, #1
 8015abc:	4413      	add	r3, r2
 8015abe:	00db      	lsls	r3, r3, #3
 8015ac0:	440b      	add	r3, r1
 8015ac2:	3312      	adds	r3, #18
 8015ac4:	881b      	ldrh	r3, [r3, #0]
 8015ac6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015aca:	d919      	bls.n	8015b00 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015acc:	79fa      	ldrb	r2, [r7, #7]
 8015ace:	4613      	mov	r3, r2
 8015ad0:	005b      	lsls	r3, r3, #1
 8015ad2:	4413      	add	r3, r2
 8015ad4:	00db      	lsls	r3, r3, #3
 8015ad6:	4a2e      	ldr	r2, [pc, #184]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015ad8:	4413      	add	r3, r2
 8015ada:	3304      	adds	r3, #4
 8015adc:	4619      	mov	r1, r3
 8015ade:	68f8      	ldr	r0, [r7, #12]
 8015ae0:	f000 fb4c 	bl	801617c <etharp_request>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d138      	bne.n	8015b5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015aea:	79fa      	ldrb	r2, [r7, #7]
 8015aec:	4928      	ldr	r1, [pc, #160]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015aee:	4613      	mov	r3, r2
 8015af0:	005b      	lsls	r3, r3, #1
 8015af2:	4413      	add	r3, r2
 8015af4:	00db      	lsls	r3, r3, #3
 8015af6:	440b      	add	r3, r1
 8015af8:	3314      	adds	r3, #20
 8015afa:	2203      	movs	r2, #3
 8015afc:	701a      	strb	r2, [r3, #0]
 8015afe:	e02d      	b.n	8015b5c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015b00:	79fa      	ldrb	r2, [r7, #7]
 8015b02:	4923      	ldr	r1, [pc, #140]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015b04:	4613      	mov	r3, r2
 8015b06:	005b      	lsls	r3, r3, #1
 8015b08:	4413      	add	r3, r2
 8015b0a:	00db      	lsls	r3, r3, #3
 8015b0c:	440b      	add	r3, r1
 8015b0e:	3312      	adds	r3, #18
 8015b10:	881b      	ldrh	r3, [r3, #0]
 8015b12:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015b16:	d321      	bcc.n	8015b5c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015b18:	79fa      	ldrb	r2, [r7, #7]
 8015b1a:	4613      	mov	r3, r2
 8015b1c:	005b      	lsls	r3, r3, #1
 8015b1e:	4413      	add	r3, r2
 8015b20:	00db      	lsls	r3, r3, #3
 8015b22:	4a1b      	ldr	r2, [pc, #108]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015b24:	4413      	add	r3, r2
 8015b26:	1d19      	adds	r1, r3, #4
 8015b28:	79fa      	ldrb	r2, [r7, #7]
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	4413      	add	r3, r2
 8015b30:	00db      	lsls	r3, r3, #3
 8015b32:	3308      	adds	r3, #8
 8015b34:	4a16      	ldr	r2, [pc, #88]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015b36:	4413      	add	r3, r2
 8015b38:	3304      	adds	r3, #4
 8015b3a:	461a      	mov	r2, r3
 8015b3c:	68f8      	ldr	r0, [r7, #12]
 8015b3e:	f000 fafb 	bl	8016138 <etharp_request_dst>
 8015b42:	4603      	mov	r3, r0
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d109      	bne.n	8015b5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015b48:	79fa      	ldrb	r2, [r7, #7]
 8015b4a:	4911      	ldr	r1, [pc, #68]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015b4c:	4613      	mov	r3, r2
 8015b4e:	005b      	lsls	r3, r3, #1
 8015b50:	4413      	add	r3, r2
 8015b52:	00db      	lsls	r3, r3, #3
 8015b54:	440b      	add	r3, r1
 8015b56:	3314      	adds	r3, #20
 8015b58:	2203      	movs	r2, #3
 8015b5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015b62:	79fa      	ldrb	r2, [r7, #7]
 8015b64:	4613      	mov	r3, r2
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	4413      	add	r3, r2
 8015b6a:	00db      	lsls	r3, r3, #3
 8015b6c:	3308      	adds	r3, #8
 8015b6e:	4a08      	ldr	r2, [pc, #32]	; (8015b90 <etharp_output_to_arp_index+0x124>)
 8015b70:	4413      	add	r3, r2
 8015b72:	3304      	adds	r3, #4
 8015b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015b78:	9200      	str	r2, [sp, #0]
 8015b7a:	460a      	mov	r2, r1
 8015b7c:	68b9      	ldr	r1, [r7, #8]
 8015b7e:	68f8      	ldr	r0, [r7, #12]
 8015b80:	f002 f996 	bl	8017eb0 <ethernet_output>
 8015b84:	4603      	mov	r3, r0
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3710      	adds	r7, #16
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
 8015b8e:	bf00      	nop
 8015b90:	2400598c 	.word	0x2400598c
 8015b94:	08019264 	.word	0x08019264
 8015b98:	080193d4 	.word	0x080193d4
 8015b9c:	080192dc 	.word	0x080192dc

08015ba0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b08a      	sub	sp, #40	; 0x28
 8015ba4:	af02      	add	r7, sp, #8
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	60b9      	str	r1, [r7, #8]
 8015baa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d106      	bne.n	8015bc4 <etharp_output+0x24>
 8015bb6:	4b73      	ldr	r3, [pc, #460]	; (8015d84 <etharp_output+0x1e4>)
 8015bb8:	f240 321e 	movw	r2, #798	; 0x31e
 8015bbc:	4972      	ldr	r1, [pc, #456]	; (8015d88 <etharp_output+0x1e8>)
 8015bbe:	4873      	ldr	r0, [pc, #460]	; (8015d8c <etharp_output+0x1ec>)
 8015bc0:	f7ea fd70 	bl	80006a4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015bc4:	68bb      	ldr	r3, [r7, #8]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d106      	bne.n	8015bd8 <etharp_output+0x38>
 8015bca:	4b6e      	ldr	r3, [pc, #440]	; (8015d84 <etharp_output+0x1e4>)
 8015bcc:	f240 321f 	movw	r2, #799	; 0x31f
 8015bd0:	496f      	ldr	r1, [pc, #444]	; (8015d90 <etharp_output+0x1f0>)
 8015bd2:	486e      	ldr	r0, [pc, #440]	; (8015d8c <etharp_output+0x1ec>)
 8015bd4:	f7ea fd66 	bl	80006a4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d106      	bne.n	8015bec <etharp_output+0x4c>
 8015bde:	4b69      	ldr	r3, [pc, #420]	; (8015d84 <etharp_output+0x1e4>)
 8015be0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015be4:	496b      	ldr	r1, [pc, #428]	; (8015d94 <etharp_output+0x1f4>)
 8015be6:	4869      	ldr	r0, [pc, #420]	; (8015d8c <etharp_output+0x1ec>)
 8015be8:	f7ea fd5c 	bl	80006a4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	68f9      	ldr	r1, [r7, #12]
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f001 fa54 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d002      	beq.n	8015c04 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015bfe:	4b66      	ldr	r3, [pc, #408]	; (8015d98 <etharp_output+0x1f8>)
 8015c00:	61fb      	str	r3, [r7, #28]
 8015c02:	e0af      	b.n	8015d64 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c0c:	2be0      	cmp	r3, #224	; 0xe0
 8015c0e:	d118      	bne.n	8015c42 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015c10:	2301      	movs	r3, #1
 8015c12:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015c14:	2300      	movs	r3, #0
 8015c16:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015c18:	235e      	movs	r3, #94	; 0x5e
 8015c1a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	3301      	adds	r3, #1
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c26:	b2db      	uxtb	r3, r3
 8015c28:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	3302      	adds	r3, #2
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	3303      	adds	r3, #3
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015c3a:	f107 0310 	add.w	r3, r7, #16
 8015c3e:	61fb      	str	r3, [r7, #28]
 8015c40:	e090      	b.n	8015d64 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	681a      	ldr	r2, [r3, #0]
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	3304      	adds	r3, #4
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	405a      	eors	r2, r3
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	3308      	adds	r3, #8
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	4013      	ands	r3, r2
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d012      	beq.n	8015c80 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015c60:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015c64:	4293      	cmp	r3, r2
 8015c66:	d00b      	beq.n	8015c80 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	330c      	adds	r3, #12
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d003      	beq.n	8015c7a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	330c      	adds	r3, #12
 8015c76:	61bb      	str	r3, [r7, #24]
 8015c78:	e002      	b.n	8015c80 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015c7a:	f06f 0303 	mvn.w	r3, #3
 8015c7e:	e07d      	b.n	8015d7c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015c80:	4b46      	ldr	r3, [pc, #280]	; (8015d9c <etharp_output+0x1fc>)
 8015c82:	781b      	ldrb	r3, [r3, #0]
 8015c84:	4619      	mov	r1, r3
 8015c86:	4a46      	ldr	r2, [pc, #280]	; (8015da0 <etharp_output+0x200>)
 8015c88:	460b      	mov	r3, r1
 8015c8a:	005b      	lsls	r3, r3, #1
 8015c8c:	440b      	add	r3, r1
 8015c8e:	00db      	lsls	r3, r3, #3
 8015c90:	4413      	add	r3, r2
 8015c92:	3314      	adds	r3, #20
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d925      	bls.n	8015ce6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015c9a:	4b40      	ldr	r3, [pc, #256]	; (8015d9c <etharp_output+0x1fc>)
 8015c9c:	781b      	ldrb	r3, [r3, #0]
 8015c9e:	4619      	mov	r1, r3
 8015ca0:	4a3f      	ldr	r2, [pc, #252]	; (8015da0 <etharp_output+0x200>)
 8015ca2:	460b      	mov	r3, r1
 8015ca4:	005b      	lsls	r3, r3, #1
 8015ca6:	440b      	add	r3, r1
 8015ca8:	00db      	lsls	r3, r3, #3
 8015caa:	4413      	add	r3, r2
 8015cac:	3308      	adds	r3, #8
 8015cae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015cb0:	68fa      	ldr	r2, [r7, #12]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d117      	bne.n	8015ce6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015cb6:	69bb      	ldr	r3, [r7, #24]
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	4b38      	ldr	r3, [pc, #224]	; (8015d9c <etharp_output+0x1fc>)
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	4937      	ldr	r1, [pc, #220]	; (8015da0 <etharp_output+0x200>)
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	005b      	lsls	r3, r3, #1
 8015cc6:	4403      	add	r3, r0
 8015cc8:	00db      	lsls	r3, r3, #3
 8015cca:	440b      	add	r3, r1
 8015ccc:	3304      	adds	r3, #4
 8015cce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d108      	bne.n	8015ce6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015cd4:	4b31      	ldr	r3, [pc, #196]	; (8015d9c <etharp_output+0x1fc>)
 8015cd6:	781b      	ldrb	r3, [r3, #0]
 8015cd8:	461a      	mov	r2, r3
 8015cda:	68b9      	ldr	r1, [r7, #8]
 8015cdc:	68f8      	ldr	r0, [r7, #12]
 8015cde:	f7ff fec5 	bl	8015a6c <etharp_output_to_arp_index>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	e04a      	b.n	8015d7c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	75fb      	strb	r3, [r7, #23]
 8015cea:	e031      	b.n	8015d50 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015cec:	7dfa      	ldrb	r2, [r7, #23]
 8015cee:	492c      	ldr	r1, [pc, #176]	; (8015da0 <etharp_output+0x200>)
 8015cf0:	4613      	mov	r3, r2
 8015cf2:	005b      	lsls	r3, r3, #1
 8015cf4:	4413      	add	r3, r2
 8015cf6:	00db      	lsls	r3, r3, #3
 8015cf8:	440b      	add	r3, r1
 8015cfa:	3314      	adds	r3, #20
 8015cfc:	781b      	ldrb	r3, [r3, #0]
 8015cfe:	2b01      	cmp	r3, #1
 8015d00:	d923      	bls.n	8015d4a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015d02:	7dfa      	ldrb	r2, [r7, #23]
 8015d04:	4926      	ldr	r1, [pc, #152]	; (8015da0 <etharp_output+0x200>)
 8015d06:	4613      	mov	r3, r2
 8015d08:	005b      	lsls	r3, r3, #1
 8015d0a:	4413      	add	r3, r2
 8015d0c:	00db      	lsls	r3, r3, #3
 8015d0e:	440b      	add	r3, r1
 8015d10:	3308      	adds	r3, #8
 8015d12:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015d14:	68fa      	ldr	r2, [r7, #12]
 8015d16:	429a      	cmp	r2, r3
 8015d18:	d117      	bne.n	8015d4a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015d1a:	69bb      	ldr	r3, [r7, #24]
 8015d1c:	6819      	ldr	r1, [r3, #0]
 8015d1e:	7dfa      	ldrb	r2, [r7, #23]
 8015d20:	481f      	ldr	r0, [pc, #124]	; (8015da0 <etharp_output+0x200>)
 8015d22:	4613      	mov	r3, r2
 8015d24:	005b      	lsls	r3, r3, #1
 8015d26:	4413      	add	r3, r2
 8015d28:	00db      	lsls	r3, r3, #3
 8015d2a:	4403      	add	r3, r0
 8015d2c:	3304      	adds	r3, #4
 8015d2e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015d30:	4299      	cmp	r1, r3
 8015d32:	d10a      	bne.n	8015d4a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015d34:	4a19      	ldr	r2, [pc, #100]	; (8015d9c <etharp_output+0x1fc>)
 8015d36:	7dfb      	ldrb	r3, [r7, #23]
 8015d38:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015d3a:	7dfb      	ldrb	r3, [r7, #23]
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	68b9      	ldr	r1, [r7, #8]
 8015d40:	68f8      	ldr	r0, [r7, #12]
 8015d42:	f7ff fe93 	bl	8015a6c <etharp_output_to_arp_index>
 8015d46:	4603      	mov	r3, r0
 8015d48:	e018      	b.n	8015d7c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015d4a:	7dfb      	ldrb	r3, [r7, #23]
 8015d4c:	3301      	adds	r3, #1
 8015d4e:	75fb      	strb	r3, [r7, #23]
 8015d50:	7dfb      	ldrb	r3, [r7, #23]
 8015d52:	2b31      	cmp	r3, #49	; 0x31
 8015d54:	d9ca      	bls.n	8015cec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015d56:	68ba      	ldr	r2, [r7, #8]
 8015d58:	69b9      	ldr	r1, [r7, #24]
 8015d5a:	68f8      	ldr	r0, [r7, #12]
 8015d5c:	f000 f822 	bl	8015da4 <etharp_query>
 8015d60:	4603      	mov	r3, r0
 8015d62:	e00b      	b.n	8015d7c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	69fb      	ldr	r3, [r7, #28]
 8015d72:	68b9      	ldr	r1, [r7, #8]
 8015d74:	68f8      	ldr	r0, [r7, #12]
 8015d76:	f002 f89b 	bl	8017eb0 <ethernet_output>
 8015d7a:	4603      	mov	r3, r0
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3720      	adds	r7, #32
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	08019264 	.word	0x08019264
 8015d88:	080193b4 	.word	0x080193b4
 8015d8c:	080192dc 	.word	0x080192dc
 8015d90:	08019404 	.word	0x08019404
 8015d94:	080193a4 	.word	0x080193a4
 8015d98:	08019e0c 	.word	0x08019e0c
 8015d9c:	24005e3c 	.word	0x24005e3c
 8015da0:	2400598c 	.word	0x2400598c

08015da4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b08c      	sub	sp, #48	; 0x30
 8015da8:	af02      	add	r7, sp, #8
 8015daa:	60f8      	str	r0, [r7, #12]
 8015dac:	60b9      	str	r1, [r7, #8]
 8015dae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	332a      	adds	r3, #42	; 0x2a
 8015db4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015db6:	23ff      	movs	r3, #255	; 0xff
 8015db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	68f9      	ldr	r1, [r7, #12]
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f001 f96a 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d10c      	bne.n	8015dec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015dda:	2be0      	cmp	r3, #224	; 0xe0
 8015ddc:	d006      	beq.n	8015dec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015dde:	68bb      	ldr	r3, [r7, #8]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d003      	beq.n	8015dec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d102      	bne.n	8015df2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015dec:	f06f 030f 	mvn.w	r3, #15
 8015df0:	e101      	b.n	8015ff6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015df2:	68fa      	ldr	r2, [r7, #12]
 8015df4:	2101      	movs	r1, #1
 8015df6:	68b8      	ldr	r0, [r7, #8]
 8015df8:	f7ff fb60 	bl	80154bc <etharp_find_entry>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015e00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	da02      	bge.n	8015e0e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015e08:	8a7b      	ldrh	r3, [r7, #18]
 8015e0a:	b25b      	sxtb	r3, r3
 8015e0c:	e0f3      	b.n	8015ff6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015e0e:	8a7b      	ldrh	r3, [r7, #18]
 8015e10:	2b7e      	cmp	r3, #126	; 0x7e
 8015e12:	d906      	bls.n	8015e22 <etharp_query+0x7e>
 8015e14:	4b7a      	ldr	r3, [pc, #488]	; (8016000 <etharp_query+0x25c>)
 8015e16:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015e1a:	497a      	ldr	r1, [pc, #488]	; (8016004 <etharp_query+0x260>)
 8015e1c:	487a      	ldr	r0, [pc, #488]	; (8016008 <etharp_query+0x264>)
 8015e1e:	f7ea fc41 	bl	80006a4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015e22:	8a7b      	ldrh	r3, [r7, #18]
 8015e24:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015e26:	7c7a      	ldrb	r2, [r7, #17]
 8015e28:	4978      	ldr	r1, [pc, #480]	; (801600c <etharp_query+0x268>)
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	005b      	lsls	r3, r3, #1
 8015e2e:	4413      	add	r3, r2
 8015e30:	00db      	lsls	r3, r3, #3
 8015e32:	440b      	add	r3, r1
 8015e34:	3314      	adds	r3, #20
 8015e36:	781b      	ldrb	r3, [r3, #0]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d115      	bne.n	8015e68 <etharp_query+0xc4>
    is_new_entry = 1;
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015e40:	7c7a      	ldrb	r2, [r7, #17]
 8015e42:	4972      	ldr	r1, [pc, #456]	; (801600c <etharp_query+0x268>)
 8015e44:	4613      	mov	r3, r2
 8015e46:	005b      	lsls	r3, r3, #1
 8015e48:	4413      	add	r3, r2
 8015e4a:	00db      	lsls	r3, r3, #3
 8015e4c:	440b      	add	r3, r1
 8015e4e:	3314      	adds	r3, #20
 8015e50:	2201      	movs	r2, #1
 8015e52:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015e54:	7c7a      	ldrb	r2, [r7, #17]
 8015e56:	496d      	ldr	r1, [pc, #436]	; (801600c <etharp_query+0x268>)
 8015e58:	4613      	mov	r3, r2
 8015e5a:	005b      	lsls	r3, r3, #1
 8015e5c:	4413      	add	r3, r2
 8015e5e:	00db      	lsls	r3, r3, #3
 8015e60:	440b      	add	r3, r1
 8015e62:	3308      	adds	r3, #8
 8015e64:	68fa      	ldr	r2, [r7, #12]
 8015e66:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015e68:	7c7a      	ldrb	r2, [r7, #17]
 8015e6a:	4968      	ldr	r1, [pc, #416]	; (801600c <etharp_query+0x268>)
 8015e6c:	4613      	mov	r3, r2
 8015e6e:	005b      	lsls	r3, r3, #1
 8015e70:	4413      	add	r3, r2
 8015e72:	00db      	lsls	r3, r3, #3
 8015e74:	440b      	add	r3, r1
 8015e76:	3314      	adds	r3, #20
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	2b01      	cmp	r3, #1
 8015e7c:	d011      	beq.n	8015ea2 <etharp_query+0xfe>
 8015e7e:	7c7a      	ldrb	r2, [r7, #17]
 8015e80:	4962      	ldr	r1, [pc, #392]	; (801600c <etharp_query+0x268>)
 8015e82:	4613      	mov	r3, r2
 8015e84:	005b      	lsls	r3, r3, #1
 8015e86:	4413      	add	r3, r2
 8015e88:	00db      	lsls	r3, r3, #3
 8015e8a:	440b      	add	r3, r1
 8015e8c:	3314      	adds	r3, #20
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	2b01      	cmp	r3, #1
 8015e92:	d806      	bhi.n	8015ea2 <etharp_query+0xfe>
 8015e94:	4b5a      	ldr	r3, [pc, #360]	; (8016000 <etharp_query+0x25c>)
 8015e96:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015e9a:	495d      	ldr	r1, [pc, #372]	; (8016010 <etharp_query+0x26c>)
 8015e9c:	485a      	ldr	r0, [pc, #360]	; (8016008 <etharp_query+0x264>)
 8015e9e:	f7ea fc01 	bl	80006a4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015ea2:	6a3b      	ldr	r3, [r7, #32]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d102      	bne.n	8015eae <etharp_query+0x10a>
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d10c      	bne.n	8015ec8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015eae:	68b9      	ldr	r1, [r7, #8]
 8015eb0:	68f8      	ldr	r0, [r7, #12]
 8015eb2:	f000 f963 	bl	801617c <etharp_request>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d102      	bne.n	8015ec8 <etharp_query+0x124>
      return result;
 8015ec2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015ec6:	e096      	b.n	8015ff6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d106      	bne.n	8015edc <etharp_query+0x138>
 8015ece:	4b4c      	ldr	r3, [pc, #304]	; (8016000 <etharp_query+0x25c>)
 8015ed0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015ed4:	494f      	ldr	r1, [pc, #316]	; (8016014 <etharp_query+0x270>)
 8015ed6:	484c      	ldr	r0, [pc, #304]	; (8016008 <etharp_query+0x264>)
 8015ed8:	f7ea fbe4 	bl	80006a4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015edc:	7c7a      	ldrb	r2, [r7, #17]
 8015ede:	494b      	ldr	r1, [pc, #300]	; (801600c <etharp_query+0x268>)
 8015ee0:	4613      	mov	r3, r2
 8015ee2:	005b      	lsls	r3, r3, #1
 8015ee4:	4413      	add	r3, r2
 8015ee6:	00db      	lsls	r3, r3, #3
 8015ee8:	440b      	add	r3, r1
 8015eea:	3314      	adds	r3, #20
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	2b01      	cmp	r3, #1
 8015ef0:	d917      	bls.n	8015f22 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015ef2:	4a49      	ldr	r2, [pc, #292]	; (8016018 <etharp_query+0x274>)
 8015ef4:	7c7b      	ldrb	r3, [r7, #17]
 8015ef6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015ef8:	7c7a      	ldrb	r2, [r7, #17]
 8015efa:	4613      	mov	r3, r2
 8015efc:	005b      	lsls	r3, r3, #1
 8015efe:	4413      	add	r3, r2
 8015f00:	00db      	lsls	r3, r3, #3
 8015f02:	3308      	adds	r3, #8
 8015f04:	4a41      	ldr	r2, [pc, #260]	; (801600c <etharp_query+0x268>)
 8015f06:	4413      	add	r3, r2
 8015f08:	3304      	adds	r3, #4
 8015f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015f0e:	9200      	str	r2, [sp, #0]
 8015f10:	697a      	ldr	r2, [r7, #20]
 8015f12:	6879      	ldr	r1, [r7, #4]
 8015f14:	68f8      	ldr	r0, [r7, #12]
 8015f16:	f001 ffcb 	bl	8017eb0 <ethernet_output>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f20:	e067      	b.n	8015ff2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015f22:	7c7a      	ldrb	r2, [r7, #17]
 8015f24:	4939      	ldr	r1, [pc, #228]	; (801600c <etharp_query+0x268>)
 8015f26:	4613      	mov	r3, r2
 8015f28:	005b      	lsls	r3, r3, #1
 8015f2a:	4413      	add	r3, r2
 8015f2c:	00db      	lsls	r3, r3, #3
 8015f2e:	440b      	add	r3, r1
 8015f30:	3314      	adds	r3, #20
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	2b01      	cmp	r3, #1
 8015f36:	d15c      	bne.n	8015ff2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015f38:	2300      	movs	r3, #0
 8015f3a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015f40:	e01c      	b.n	8015f7c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015f42:	69fb      	ldr	r3, [r7, #28]
 8015f44:	895a      	ldrh	r2, [r3, #10]
 8015f46:	69fb      	ldr	r3, [r7, #28]
 8015f48:	891b      	ldrh	r3, [r3, #8]
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	d10a      	bne.n	8015f64 <etharp_query+0x1c0>
 8015f4e:	69fb      	ldr	r3, [r7, #28]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d006      	beq.n	8015f64 <etharp_query+0x1c0>
 8015f56:	4b2a      	ldr	r3, [pc, #168]	; (8016000 <etharp_query+0x25c>)
 8015f58:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015f5c:	492f      	ldr	r1, [pc, #188]	; (801601c <etharp_query+0x278>)
 8015f5e:	482a      	ldr	r0, [pc, #168]	; (8016008 <etharp_query+0x264>)
 8015f60:	f7ea fba0 	bl	80006a4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015f64:	69fb      	ldr	r3, [r7, #28]
 8015f66:	7b1b      	ldrb	r3, [r3, #12]
 8015f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d002      	beq.n	8015f76 <etharp_query+0x1d2>
        copy_needed = 1;
 8015f70:	2301      	movs	r3, #1
 8015f72:	61bb      	str	r3, [r7, #24]
        break;
 8015f74:	e005      	b.n	8015f82 <etharp_query+0x1de>
      }
      p = p->next;
 8015f76:	69fb      	ldr	r3, [r7, #28]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d1df      	bne.n	8015f42 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015f82:	69bb      	ldr	r3, [r7, #24]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d007      	beq.n	8015f98 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015f88:	687a      	ldr	r2, [r7, #4]
 8015f8a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015f8e:	200e      	movs	r0, #14
 8015f90:	f7fe fd88 	bl	8014aa4 <pbuf_clone>
 8015f94:	61f8      	str	r0, [r7, #28]
 8015f96:	e004      	b.n	8015fa2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015f9c:	69f8      	ldr	r0, [r7, #28]
 8015f9e:	f7fe fc31 	bl	8014804 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015fa2:	69fb      	ldr	r3, [r7, #28]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d021      	beq.n	8015fec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015fa8:	7c7a      	ldrb	r2, [r7, #17]
 8015faa:	4918      	ldr	r1, [pc, #96]	; (801600c <etharp_query+0x268>)
 8015fac:	4613      	mov	r3, r2
 8015fae:	005b      	lsls	r3, r3, #1
 8015fb0:	4413      	add	r3, r2
 8015fb2:	00db      	lsls	r3, r3, #3
 8015fb4:	440b      	add	r3, r1
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d00a      	beq.n	8015fd2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015fbc:	7c7a      	ldrb	r2, [r7, #17]
 8015fbe:	4913      	ldr	r1, [pc, #76]	; (801600c <etharp_query+0x268>)
 8015fc0:	4613      	mov	r3, r2
 8015fc2:	005b      	lsls	r3, r3, #1
 8015fc4:	4413      	add	r3, r2
 8015fc6:	00db      	lsls	r3, r3, #3
 8015fc8:	440b      	add	r3, r1
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7fe fb73 	bl	80146b8 <pbuf_free>
      }
      arp_table[i].q = p;
 8015fd2:	7c7a      	ldrb	r2, [r7, #17]
 8015fd4:	490d      	ldr	r1, [pc, #52]	; (801600c <etharp_query+0x268>)
 8015fd6:	4613      	mov	r3, r2
 8015fd8:	005b      	lsls	r3, r3, #1
 8015fda:	4413      	add	r3, r2
 8015fdc:	00db      	lsls	r3, r3, #3
 8015fde:	440b      	add	r3, r1
 8015fe0:	69fa      	ldr	r2, [r7, #28]
 8015fe2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015fea:	e002      	b.n	8015ff2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015fec:	23ff      	movs	r3, #255	; 0xff
 8015fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015ff2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3728      	adds	r7, #40	; 0x28
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}
 8015ffe:	bf00      	nop
 8016000:	08019264 	.word	0x08019264
 8016004:	08019410 	.word	0x08019410
 8016008:	080192dc 	.word	0x080192dc
 801600c:	2400598c 	.word	0x2400598c
 8016010:	08019420 	.word	0x08019420
 8016014:	08019404 	.word	0x08019404
 8016018:	24005e3c 	.word	0x24005e3c
 801601c:	08019448 	.word	0x08019448

08016020 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b08a      	sub	sp, #40	; 0x28
 8016024:	af02      	add	r7, sp, #8
 8016026:	60f8      	str	r0, [r7, #12]
 8016028:	60b9      	str	r1, [r7, #8]
 801602a:	607a      	str	r2, [r7, #4]
 801602c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801602e:	2300      	movs	r3, #0
 8016030:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d106      	bne.n	8016046 <etharp_raw+0x26>
 8016038:	4b3a      	ldr	r3, [pc, #232]	; (8016124 <etharp_raw+0x104>)
 801603a:	f240 4257 	movw	r2, #1111	; 0x457
 801603e:	493a      	ldr	r1, [pc, #232]	; (8016128 <etharp_raw+0x108>)
 8016040:	483a      	ldr	r0, [pc, #232]	; (801612c <etharp_raw+0x10c>)
 8016042:	f7ea fb2f 	bl	80006a4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016046:	f44f 7220 	mov.w	r2, #640	; 0x280
 801604a:	211c      	movs	r1, #28
 801604c:	200e      	movs	r0, #14
 801604e:	f7fe f851 	bl	80140f4 <pbuf_alloc>
 8016052:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016054:	69bb      	ldr	r3, [r7, #24]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d102      	bne.n	8016060 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801605a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801605e:	e05d      	b.n	801611c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016060:	69bb      	ldr	r3, [r7, #24]
 8016062:	895b      	ldrh	r3, [r3, #10]
 8016064:	2b1b      	cmp	r3, #27
 8016066:	d806      	bhi.n	8016076 <etharp_raw+0x56>
 8016068:	4b2e      	ldr	r3, [pc, #184]	; (8016124 <etharp_raw+0x104>)
 801606a:	f240 4262 	movw	r2, #1122	; 0x462
 801606e:	4930      	ldr	r1, [pc, #192]	; (8016130 <etharp_raw+0x110>)
 8016070:	482e      	ldr	r0, [pc, #184]	; (801612c <etharp_raw+0x10c>)
 8016072:	f7ea fb17 	bl	80006a4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016076:	69bb      	ldr	r3, [r7, #24]
 8016078:	685b      	ldr	r3, [r3, #4]
 801607a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801607c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801607e:	4618      	mov	r0, r3
 8016080:	f7fc fede 	bl	8012e40 <lwip_htons>
 8016084:	4603      	mov	r3, r0
 8016086:	461a      	mov	r2, r3
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016092:	2b06      	cmp	r3, #6
 8016094:	d006      	beq.n	80160a4 <etharp_raw+0x84>
 8016096:	4b23      	ldr	r3, [pc, #140]	; (8016124 <etharp_raw+0x104>)
 8016098:	f240 4269 	movw	r2, #1129	; 0x469
 801609c:	4925      	ldr	r1, [pc, #148]	; (8016134 <etharp_raw+0x114>)
 801609e:	4823      	ldr	r0, [pc, #140]	; (801612c <etharp_raw+0x10c>)
 80160a0:	f7ea fb00 	bl	80006a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	3308      	adds	r3, #8
 80160a8:	2206      	movs	r2, #6
 80160aa:	6839      	ldr	r1, [r7, #0]
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7ea f98f 	bl	80003d0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	3312      	adds	r3, #18
 80160b6:	2206      	movs	r2, #6
 80160b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7ea f988 	bl	80003d0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	330e      	adds	r3, #14
 80160c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160c6:	6812      	ldr	r2, [r2, #0]
 80160c8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80160ca:	697b      	ldr	r3, [r7, #20]
 80160cc:	3318      	adds	r3, #24
 80160ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80160d0:	6812      	ldr	r2, [r2, #0]
 80160d2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	2200      	movs	r2, #0
 80160d8:	701a      	strb	r2, [r3, #0]
 80160da:	2200      	movs	r2, #0
 80160dc:	f042 0201 	orr.w	r2, r2, #1
 80160e0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80160e2:	697b      	ldr	r3, [r7, #20]
 80160e4:	2200      	movs	r2, #0
 80160e6:	f042 0208 	orr.w	r2, r2, #8
 80160ea:	709a      	strb	r2, [r3, #2]
 80160ec:	2200      	movs	r2, #0
 80160ee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	2206      	movs	r2, #6
 80160f4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80160f6:	697b      	ldr	r3, [r7, #20]
 80160f8:	2204      	movs	r2, #4
 80160fa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80160fc:	f640 0306 	movw	r3, #2054	; 0x806
 8016100:	9300      	str	r3, [sp, #0]
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	68ba      	ldr	r2, [r7, #8]
 8016106:	69b9      	ldr	r1, [r7, #24]
 8016108:	68f8      	ldr	r0, [r7, #12]
 801610a:	f001 fed1 	bl	8017eb0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801610e:	69b8      	ldr	r0, [r7, #24]
 8016110:	f7fe fad2 	bl	80146b8 <pbuf_free>
  p = NULL;
 8016114:	2300      	movs	r3, #0
 8016116:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016118:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801611c:	4618      	mov	r0, r3
 801611e:	3720      	adds	r7, #32
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}
 8016124:	08019264 	.word	0x08019264
 8016128:	080193b4 	.word	0x080193b4
 801612c:	080192dc 	.word	0x080192dc
 8016130:	08019464 	.word	0x08019464
 8016134:	08019498 	.word	0x08019498

08016138 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b088      	sub	sp, #32
 801613c:	af04      	add	r7, sp, #16
 801613e:	60f8      	str	r0, [r7, #12]
 8016140:	60b9      	str	r1, [r7, #8]
 8016142:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016154:	2201      	movs	r2, #1
 8016156:	9203      	str	r2, [sp, #12]
 8016158:	68ba      	ldr	r2, [r7, #8]
 801615a:	9202      	str	r2, [sp, #8]
 801615c:	4a06      	ldr	r2, [pc, #24]	; (8016178 <etharp_request_dst+0x40>)
 801615e:	9201      	str	r2, [sp, #4]
 8016160:	9300      	str	r3, [sp, #0]
 8016162:	4603      	mov	r3, r0
 8016164:	687a      	ldr	r2, [r7, #4]
 8016166:	68f8      	ldr	r0, [r7, #12]
 8016168:	f7ff ff5a 	bl	8016020 <etharp_raw>
 801616c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801616e:	4618      	mov	r0, r3
 8016170:	3710      	adds	r7, #16
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}
 8016176:	bf00      	nop
 8016178:	08019e14 	.word	0x08019e14

0801617c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b082      	sub	sp, #8
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
 8016184:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016186:	4a05      	ldr	r2, [pc, #20]	; (801619c <etharp_request+0x20>)
 8016188:	6839      	ldr	r1, [r7, #0]
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f7ff ffd4 	bl	8016138 <etharp_request_dst>
 8016190:	4603      	mov	r3, r0
}
 8016192:	4618      	mov	r0, r3
 8016194:	3708      	adds	r7, #8
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
 801619a:	bf00      	nop
 801619c:	08019e0c 	.word	0x08019e0c

080161a0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b08e      	sub	sp, #56	; 0x38
 80161a4:	af04      	add	r7, sp, #16
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80161aa:	4b87      	ldr	r3, [pc, #540]	; (80163c8 <icmp_input+0x228>)
 80161ac:	689b      	ldr	r3, [r3, #8]
 80161ae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80161b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	f003 030f 	and.w	r3, r3, #15
 80161b8:	b2db      	uxtb	r3, r3
 80161ba:	009b      	lsls	r3, r3, #2
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80161c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161c2:	2b13      	cmp	r3, #19
 80161c4:	f240 80e8 	bls.w	8016398 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	895b      	ldrh	r3, [r3, #10]
 80161cc:	2b03      	cmp	r3, #3
 80161ce:	f240 80e5 	bls.w	801639c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	685b      	ldr	r3, [r3, #4]
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80161dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	f000 80d2 	beq.w	801638a <icmp_input+0x1ea>
 80161e6:	2b08      	cmp	r3, #8
 80161e8:	f040 80d2 	bne.w	8016390 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80161ec:	4b77      	ldr	r3, [pc, #476]	; (80163cc <icmp_input+0x22c>)
 80161ee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80161f0:	4b75      	ldr	r3, [pc, #468]	; (80163c8 <icmp_input+0x228>)
 80161f2:	695b      	ldr	r3, [r3, #20]
 80161f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80161f8:	2be0      	cmp	r3, #224	; 0xe0
 80161fa:	f000 80d6 	beq.w	80163aa <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80161fe:	4b72      	ldr	r3, [pc, #456]	; (80163c8 <icmp_input+0x228>)
 8016200:	695b      	ldr	r3, [r3, #20]
 8016202:	4a71      	ldr	r2, [pc, #452]	; (80163c8 <icmp_input+0x228>)
 8016204:	6812      	ldr	r2, [r2, #0]
 8016206:	4611      	mov	r1, r2
 8016208:	4618      	mov	r0, r3
 801620a:	f000 ff49 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 801620e:	4603      	mov	r3, r0
 8016210:	2b00      	cmp	r3, #0
 8016212:	f040 80cc 	bne.w	80163ae <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	891b      	ldrh	r3, [r3, #8]
 801621a:	2b07      	cmp	r3, #7
 801621c:	f240 80c0 	bls.w	80163a0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f7fc fe91 	bl	8012f48 <inet_chksum_pbuf>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	d003      	beq.n	8016234 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f7fe fa43 	bl	80146b8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016232:	e0c5      	b.n	80163c0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016236:	330e      	adds	r3, #14
 8016238:	4619      	mov	r1, r3
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f7fe f9a6 	bl	801458c <pbuf_add_header>
 8016240:	4603      	mov	r3, r0
 8016242:	2b00      	cmp	r3, #0
 8016244:	d04b      	beq.n	80162de <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	891a      	ldrh	r2, [r3, #8]
 801624a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801624c:	4413      	add	r3, r2
 801624e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	891b      	ldrh	r3, [r3, #8]
 8016254:	8b7a      	ldrh	r2, [r7, #26]
 8016256:	429a      	cmp	r2, r3
 8016258:	f0c0 80ab 	bcc.w	80163b2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801625c:	8b7b      	ldrh	r3, [r7, #26]
 801625e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016262:	4619      	mov	r1, r3
 8016264:	200e      	movs	r0, #14
 8016266:	f7fd ff45 	bl	80140f4 <pbuf_alloc>
 801626a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801626c:	697b      	ldr	r3, [r7, #20]
 801626e:	2b00      	cmp	r3, #0
 8016270:	f000 80a1 	beq.w	80163b6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016274:	697b      	ldr	r3, [r7, #20]
 8016276:	895b      	ldrh	r3, [r3, #10]
 8016278:	461a      	mov	r2, r3
 801627a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801627c:	3308      	adds	r3, #8
 801627e:	429a      	cmp	r2, r3
 8016280:	d203      	bcs.n	801628a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016282:	6978      	ldr	r0, [r7, #20]
 8016284:	f7fe fa18 	bl	80146b8 <pbuf_free>
          goto icmperr;
 8016288:	e096      	b.n	80163b8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801628a:	697b      	ldr	r3, [r7, #20]
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016292:	4618      	mov	r0, r3
 8016294:	f7ea f89c 	bl	80003d0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801629a:	4619      	mov	r1, r3
 801629c:	6978      	ldr	r0, [r7, #20]
 801629e:	f7fe f985 	bl	80145ac <pbuf_remove_header>
 80162a2:	4603      	mov	r3, r0
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d009      	beq.n	80162bc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80162a8:	4b49      	ldr	r3, [pc, #292]	; (80163d0 <icmp_input+0x230>)
 80162aa:	22b6      	movs	r2, #182	; 0xb6
 80162ac:	4949      	ldr	r1, [pc, #292]	; (80163d4 <icmp_input+0x234>)
 80162ae:	484a      	ldr	r0, [pc, #296]	; (80163d8 <icmp_input+0x238>)
 80162b0:	f7ea f9f8 	bl	80006a4 <iprintf>
          pbuf_free(r);
 80162b4:	6978      	ldr	r0, [r7, #20]
 80162b6:	f7fe f9ff 	bl	80146b8 <pbuf_free>
          goto icmperr;
 80162ba:	e07d      	b.n	80163b8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80162bc:	6879      	ldr	r1, [r7, #4]
 80162be:	6978      	ldr	r0, [r7, #20]
 80162c0:	f7fe fb1e 	bl	8014900 <pbuf_copy>
 80162c4:	4603      	mov	r3, r0
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d003      	beq.n	80162d2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80162ca:	6978      	ldr	r0, [r7, #20]
 80162cc:	f7fe f9f4 	bl	80146b8 <pbuf_free>
          goto icmperr;
 80162d0:	e072      	b.n	80163b8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f7fe f9f0 	bl	80146b8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80162d8:	697b      	ldr	r3, [r7, #20]
 80162da:	607b      	str	r3, [r7, #4]
 80162dc:	e00f      	b.n	80162fe <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80162de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162e0:	330e      	adds	r3, #14
 80162e2:	4619      	mov	r1, r3
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f7fe f961 	bl	80145ac <pbuf_remove_header>
 80162ea:	4603      	mov	r3, r0
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d006      	beq.n	80162fe <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80162f0:	4b37      	ldr	r3, [pc, #220]	; (80163d0 <icmp_input+0x230>)
 80162f2:	22c7      	movs	r2, #199	; 0xc7
 80162f4:	4939      	ldr	r1, [pc, #228]	; (80163dc <icmp_input+0x23c>)
 80162f6:	4838      	ldr	r0, [pc, #224]	; (80163d8 <icmp_input+0x238>)
 80162f8:	f7ea f9d4 	bl	80006a4 <iprintf>
          goto icmperr;
 80162fc:	e05c      	b.n	80163b8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	685b      	ldr	r3, [r3, #4]
 8016302:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016306:	4619      	mov	r1, r3
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f7fe f93f 	bl	801458c <pbuf_add_header>
 801630e:	4603      	mov	r3, r0
 8016310:	2b00      	cmp	r3, #0
 8016312:	d13c      	bne.n	801638e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801631a:	69fb      	ldr	r3, [r7, #28]
 801631c:	681a      	ldr	r2, [r3, #0]
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016322:	4b29      	ldr	r3, [pc, #164]	; (80163c8 <icmp_input+0x228>)
 8016324:	691a      	ldr	r2, [r3, #16]
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	2200      	movs	r2, #0
 801632e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016330:	693b      	ldr	r3, [r7, #16]
 8016332:	885b      	ldrh	r3, [r3, #2]
 8016334:	b29b      	uxth	r3, r3
 8016336:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801633a:	4293      	cmp	r3, r2
 801633c:	d907      	bls.n	801634e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801633e:	693b      	ldr	r3, [r7, #16]
 8016340:	885b      	ldrh	r3, [r3, #2]
 8016342:	b29b      	uxth	r3, r3
 8016344:	3309      	adds	r3, #9
 8016346:	b29a      	uxth	r2, r3
 8016348:	693b      	ldr	r3, [r7, #16]
 801634a:	805a      	strh	r2, [r3, #2]
 801634c:	e006      	b.n	801635c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801634e:	693b      	ldr	r3, [r7, #16]
 8016350:	885b      	ldrh	r3, [r3, #2]
 8016352:	b29b      	uxth	r3, r3
 8016354:	3308      	adds	r3, #8
 8016356:	b29a      	uxth	r2, r3
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	22ff      	movs	r2, #255	; 0xff
 8016360:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	2200      	movs	r2, #0
 8016366:	729a      	strb	r2, [r3, #10]
 8016368:	2200      	movs	r2, #0
 801636a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	9302      	str	r3, [sp, #8]
 8016370:	2301      	movs	r3, #1
 8016372:	9301      	str	r3, [sp, #4]
 8016374:	2300      	movs	r3, #0
 8016376:	9300      	str	r3, [sp, #0]
 8016378:	23ff      	movs	r3, #255	; 0xff
 801637a:	2200      	movs	r2, #0
 801637c:	69f9      	ldr	r1, [r7, #28]
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f000 fd5c 	bl	8016e3c <ip4_output_if>
 8016384:	4603      	mov	r3, r0
 8016386:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016388:	e001      	b.n	801638e <icmp_input+0x1ee>
      break;
 801638a:	bf00      	nop
 801638c:	e000      	b.n	8016390 <icmp_input+0x1f0>
      break;
 801638e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f7fe f991 	bl	80146b8 <pbuf_free>
  return;
 8016396:	e013      	b.n	80163c0 <icmp_input+0x220>
    goto lenerr;
 8016398:	bf00      	nop
 801639a:	e002      	b.n	80163a2 <icmp_input+0x202>
    goto lenerr;
 801639c:	bf00      	nop
 801639e:	e000      	b.n	80163a2 <icmp_input+0x202>
        goto lenerr;
 80163a0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f7fe f988 	bl	80146b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80163a8:	e00a      	b.n	80163c0 <icmp_input+0x220>
        goto icmperr;
 80163aa:	bf00      	nop
 80163ac:	e004      	b.n	80163b8 <icmp_input+0x218>
        goto icmperr;
 80163ae:	bf00      	nop
 80163b0:	e002      	b.n	80163b8 <icmp_input+0x218>
          goto icmperr;
 80163b2:	bf00      	nop
 80163b4:	e000      	b.n	80163b8 <icmp_input+0x218>
          goto icmperr;
 80163b6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f7fe f97d 	bl	80146b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80163be:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80163c0:	3728      	adds	r7, #40	; 0x28
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	24006680 	.word	0x24006680
 80163cc:	24006694 	.word	0x24006694
 80163d0:	080194dc 	.word	0x080194dc
 80163d4:	08019514 	.word	0x08019514
 80163d8:	0801954c 	.word	0x0801954c
 80163dc:	08019574 	.word	0x08019574

080163e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	460b      	mov	r3, r1
 80163ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80163ec:	78fb      	ldrb	r3, [r7, #3]
 80163ee:	461a      	mov	r2, r3
 80163f0:	2103      	movs	r1, #3
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f000 f814 	bl	8016420 <icmp_send_response>
}
 80163f8:	bf00      	nop
 80163fa:	3708      	adds	r7, #8
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
 8016408:	460b      	mov	r3, r1
 801640a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801640c:	78fb      	ldrb	r3, [r7, #3]
 801640e:	461a      	mov	r2, r3
 8016410:	210b      	movs	r1, #11
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	f000 f804 	bl	8016420 <icmp_send_response>
}
 8016418:	bf00      	nop
 801641a:	3708      	adds	r7, #8
 801641c:	46bd      	mov	sp, r7
 801641e:	bd80      	pop	{r7, pc}

08016420 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b08c      	sub	sp, #48	; 0x30
 8016424:	af04      	add	r7, sp, #16
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	460b      	mov	r3, r1
 801642a:	70fb      	strb	r3, [r7, #3]
 801642c:	4613      	mov	r3, r2
 801642e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016430:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016434:	2124      	movs	r1, #36	; 0x24
 8016436:	2022      	movs	r0, #34	; 0x22
 8016438:	f7fd fe5c 	bl	80140f4 <pbuf_alloc>
 801643c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801643e:	69fb      	ldr	r3, [r7, #28]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d056      	beq.n	80164f2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016444:	69fb      	ldr	r3, [r7, #28]
 8016446:	895b      	ldrh	r3, [r3, #10]
 8016448:	2b23      	cmp	r3, #35	; 0x23
 801644a:	d806      	bhi.n	801645a <icmp_send_response+0x3a>
 801644c:	4b2b      	ldr	r3, [pc, #172]	; (80164fc <icmp_send_response+0xdc>)
 801644e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016452:	492b      	ldr	r1, [pc, #172]	; (8016500 <icmp_send_response+0xe0>)
 8016454:	482b      	ldr	r0, [pc, #172]	; (8016504 <icmp_send_response+0xe4>)
 8016456:	f7ea f925 	bl	80006a4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	685b      	ldr	r3, [r3, #4]
 801645e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016460:	69fb      	ldr	r3, [r7, #28]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016466:	697b      	ldr	r3, [r7, #20]
 8016468:	78fa      	ldrb	r2, [r7, #3]
 801646a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	78ba      	ldrb	r2, [r7, #2]
 8016470:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016472:	697b      	ldr	r3, [r7, #20]
 8016474:	2200      	movs	r2, #0
 8016476:	711a      	strb	r2, [r3, #4]
 8016478:	2200      	movs	r2, #0
 801647a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	2200      	movs	r2, #0
 8016480:	719a      	strb	r2, [r3, #6]
 8016482:	2200      	movs	r2, #0
 8016484:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016486:	69fb      	ldr	r3, [r7, #28]
 8016488:	685b      	ldr	r3, [r3, #4]
 801648a:	f103 0008 	add.w	r0, r3, #8
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	221c      	movs	r2, #28
 8016494:	4619      	mov	r1, r3
 8016496:	f7e9 ff9b 	bl	80003d0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801649a:	69bb      	ldr	r3, [r7, #24]
 801649c:	68db      	ldr	r3, [r3, #12]
 801649e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80164a0:	f107 030c 	add.w	r3, r7, #12
 80164a4:	4618      	mov	r0, r3
 80164a6:	f000 fad9 	bl	8016a5c <ip4_route>
 80164aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80164ac:	693b      	ldr	r3, [r7, #16]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d01b      	beq.n	80164ea <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80164b2:	697b      	ldr	r3, [r7, #20]
 80164b4:	2200      	movs	r2, #0
 80164b6:	709a      	strb	r2, [r3, #2]
 80164b8:	2200      	movs	r2, #0
 80164ba:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80164bc:	69fb      	ldr	r3, [r7, #28]
 80164be:	895b      	ldrh	r3, [r3, #10]
 80164c0:	4619      	mov	r1, r3
 80164c2:	6978      	ldr	r0, [r7, #20]
 80164c4:	f7fc fd2e 	bl	8012f24 <inet_chksum>
 80164c8:	4603      	mov	r3, r0
 80164ca:	461a      	mov	r2, r3
 80164cc:	697b      	ldr	r3, [r7, #20]
 80164ce:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80164d0:	f107 020c 	add.w	r2, r7, #12
 80164d4:	693b      	ldr	r3, [r7, #16]
 80164d6:	9302      	str	r3, [sp, #8]
 80164d8:	2301      	movs	r3, #1
 80164da:	9301      	str	r3, [sp, #4]
 80164dc:	2300      	movs	r3, #0
 80164de:	9300      	str	r3, [sp, #0]
 80164e0:	23ff      	movs	r3, #255	; 0xff
 80164e2:	2100      	movs	r1, #0
 80164e4:	69f8      	ldr	r0, [r7, #28]
 80164e6:	f000 fca9 	bl	8016e3c <ip4_output_if>
  }
  pbuf_free(q);
 80164ea:	69f8      	ldr	r0, [r7, #28]
 80164ec:	f7fe f8e4 	bl	80146b8 <pbuf_free>
 80164f0:	e000      	b.n	80164f4 <icmp_send_response+0xd4>
    return;
 80164f2:	bf00      	nop
}
 80164f4:	3720      	adds	r7, #32
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	080194dc 	.word	0x080194dc
 8016500:	080195a8 	.word	0x080195a8
 8016504:	0801954c 	.word	0x0801954c

08016508 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8016508:	b480      	push	{r7}
 801650a:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801650c:	4b05      	ldr	r3, [pc, #20]	; (8016524 <igmp_init+0x1c>)
 801650e:	4a06      	ldr	r2, [pc, #24]	; (8016528 <igmp_init+0x20>)
 8016510:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 8016512:	4b06      	ldr	r3, [pc, #24]	; (801652c <igmp_init+0x24>)
 8016514:	4a06      	ldr	r2, [pc, #24]	; (8016530 <igmp_init+0x28>)
 8016516:	601a      	str	r2, [r3, #0]
}
 8016518:	bf00      	nop
 801651a:	46bd      	mov	sp, r7
 801651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016520:	4770      	bx	lr
 8016522:	bf00      	nop
 8016524:	24005e40 	.word	0x24005e40
 8016528:	010000e0 	.word	0x010000e0
 801652c:	24005e44 	.word	0x24005e44
 8016530:	020000e0 	.word	0x020000e0

08016534 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b084      	sub	sp, #16
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 801653c:	4911      	ldr	r1, [pc, #68]	; (8016584 <igmp_start+0x50>)
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f000 f85e 	bl	8016600 <igmp_lookup_group>
 8016544:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d014      	beq.n	8016576 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	2202      	movs	r2, #2
 8016550:	725a      	strb	r2, [r3, #9]
    group->use++;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	7b1b      	ldrb	r3, [r3, #12]
 8016556:	3301      	adds	r3, #1
 8016558:	b2da      	uxtb	r2, r3
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016562:	2b00      	cmp	r3, #0
 8016564:	d005      	beq.n	8016572 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801656a:	2201      	movs	r2, #1
 801656c:	4905      	ldr	r1, [pc, #20]	; (8016584 <igmp_start+0x50>)
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	4798      	blx	r3
    }

    return ERR_OK;
 8016572:	2300      	movs	r3, #0
 8016574:	e001      	b.n	801657a <igmp_start+0x46>
  }

  return ERR_MEM;
 8016576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801657a:	4618      	mov	r0, r3
 801657c:	3710      	adds	r7, #16
 801657e:	46bd      	mov	sp, r7
 8016580:	bd80      	pop	{r7, pc}
 8016582:	bf00      	nop
 8016584:	24005e40 	.word	0x24005e40

08016588 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b084      	sub	sp, #16
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016594:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d00a      	beq.n	80165b2 <igmp_report_groups+0x2a>
    group = group->next;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 80165a2:	e006      	b.n	80165b2 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 80165a4:	2105      	movs	r1, #5
 80165a6:	68f8      	ldr	r0, [r7, #12]
 80165a8:	f000 f99d 	bl	80168e6 <igmp_delaying_member>
    group = group->next;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d1f5      	bne.n	80165a4 <igmp_report_groups+0x1c>
  }
}
 80165b8:	bf00      	nop
 80165ba:	bf00      	nop
 80165bc:	3710      	adds	r7, #16
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}

080165c2 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 80165c2:	b480      	push	{r7}
 80165c4:	b085      	sub	sp, #20
 80165c6:	af00      	add	r7, sp, #0
 80165c8:	6078      	str	r0, [r7, #4]
 80165ca:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165d0:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 80165d2:	e00a      	b.n	80165ea <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	685a      	ldr	r2, [r3, #4]
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d101      	bne.n	80165e4 <igmp_lookfor_group+0x22>
      return group;
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	e006      	b.n	80165f2 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d1f1      	bne.n	80165d4 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 80165f0:	2300      	movs	r3, #0
}
 80165f2:	4618      	mov	r0, r3
 80165f4:	3714      	adds	r7, #20
 80165f6:	46bd      	mov	sp, r7
 80165f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fc:	4770      	bx	lr
	...

08016600 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
 8016608:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801660e:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8016610:	6839      	ldr	r1, [r7, #0]
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f7ff ffd5 	bl	80165c2 <igmp_lookfor_group>
 8016618:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d001      	beq.n	8016624 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	e047      	b.n	80166b4 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8016624:	2008      	movs	r0, #8
 8016626:	f7fd f991 	bl	801394c <memp_malloc>
 801662a:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d03f      	beq.n	80166b2 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 8016632:	683b      	ldr	r3, [r7, #0]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d002      	beq.n	801663e <igmp_lookup_group+0x3e>
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	e000      	b.n	8016640 <igmp_lookup_group+0x40>
 801663e:	2300      	movs	r3, #0
 8016640:	68ba      	ldr	r2, [r7, #8]
 8016642:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	2200      	movs	r2, #0
 8016648:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	2200      	movs	r2, #0
 801664e:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	2200      	movs	r2, #0
 8016654:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	2200      	movs	r2, #0
 801665a:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d113      	bne.n	801668a <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	681a      	ldr	r2, [r3, #0]
 8016666:	4b15      	ldr	r3, [pc, #84]	; (80166bc <igmp_lookup_group+0xbc>)
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	429a      	cmp	r2, r3
 801666c:	d006      	beq.n	801667c <igmp_lookup_group+0x7c>
 801666e:	4b14      	ldr	r3, [pc, #80]	; (80166c0 <igmp_lookup_group+0xc0>)
 8016670:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8016674:	4913      	ldr	r1, [pc, #76]	; (80166c4 <igmp_lookup_group+0xc4>)
 8016676:	4814      	ldr	r0, [pc, #80]	; (80166c8 <igmp_lookup_group+0xc8>)
 8016678:	f7ea f814 	bl	80006a4 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 801667c:	68bb      	ldr	r3, [r7, #8]
 801667e:	2200      	movs	r2, #0
 8016680:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	68ba      	ldr	r2, [r7, #8]
 8016686:	625a      	str	r2, [r3, #36]	; 0x24
 8016688:	e013      	b.n	80166b2 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	681a      	ldr	r2, [r3, #0]
 801668e:	4b0b      	ldr	r3, [pc, #44]	; (80166bc <igmp_lookup_group+0xbc>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	429a      	cmp	r2, r3
 8016694:	d106      	bne.n	80166a4 <igmp_lookup_group+0xa4>
 8016696:	4b0a      	ldr	r3, [pc, #40]	; (80166c0 <igmp_lookup_group+0xc0>)
 8016698:	f44f 7289 	mov.w	r2, #274	; 0x112
 801669c:	490b      	ldr	r1, [pc, #44]	; (80166cc <igmp_lookup_group+0xcc>)
 801669e:	480a      	ldr	r0, [pc, #40]	; (80166c8 <igmp_lookup_group+0xc8>)
 80166a0:	f7ea f800 	bl	80006a4 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	681a      	ldr	r2, [r3, #0]
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	68ba      	ldr	r2, [r7, #8]
 80166b0:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 80166b2:	68bb      	ldr	r3, [r7, #8]
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3710      	adds	r7, #16
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	24005e40 	.word	0x24005e40
 80166c0:	080195d4 	.word	0x080195d4
 80166c4:	0801960c 	.word	0x0801960c
 80166c8:	08019640 	.word	0x08019640
 80166cc:	08019668 	.word	0x08019668

080166d0 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b088      	sub	sp, #32
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	60f8      	str	r0, [r7, #12]
 80166d8:	60b9      	str	r1, [r7, #8]
 80166da:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	895b      	ldrh	r3, [r3, #10]
 80166e0:	2b07      	cmp	r3, #7
 80166e2:	d803      	bhi.n	80166ec <igmp_input+0x1c>
    pbuf_free(p);
 80166e4:	68f8      	ldr	r0, [r7, #12]
 80166e6:	f7fd ffe7 	bl	80146b8 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 80166ea:	e086      	b.n	80167fa <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	685b      	ldr	r3, [r3, #4]
 80166f0:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	895b      	ldrh	r3, [r3, #10]
 80166f6:	4619      	mov	r1, r3
 80166f8:	6978      	ldr	r0, [r7, #20]
 80166fa:	f7fc fc13 	bl	8012f24 <inet_chksum>
 80166fe:	4603      	mov	r3, r0
 8016700:	2b00      	cmp	r3, #0
 8016702:	d003      	beq.n	801670c <igmp_input+0x3c>
    pbuf_free(p);
 8016704:	68f8      	ldr	r0, [r7, #12]
 8016706:	f7fd ffd7 	bl	80146b8 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 801670a:	e076      	b.n	80167fa <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 801670c:	6879      	ldr	r1, [r7, #4]
 801670e:	68b8      	ldr	r0, [r7, #8]
 8016710:	f7ff ff57 	bl	80165c2 <igmp_lookfor_group>
 8016714:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8016716:	69fb      	ldr	r3, [r7, #28]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d103      	bne.n	8016724 <igmp_input+0x54>
    pbuf_free(p);
 801671c:	68f8      	ldr	r0, [r7, #12]
 801671e:	f7fd ffcb 	bl	80146b8 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8016722:	e06a      	b.n	80167fa <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8016724:	697b      	ldr	r3, [r7, #20]
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	2b11      	cmp	r3, #17
 801672a:	d002      	beq.n	8016732 <igmp_input+0x62>
 801672c:	2b16      	cmp	r3, #22
 801672e:	d04f      	beq.n	80167d0 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 8016730:	e05f      	b.n	80167f2 <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	4b32      	ldr	r3, [pc, #200]	; (8016800 <igmp_input+0x130>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	429a      	cmp	r2, r3
 801673c:	d125      	bne.n	801678a <igmp_input+0xba>
 801673e:	697b      	ldr	r3, [r7, #20]
 8016740:	3304      	adds	r3, #4
 8016742:	2b00      	cmp	r3, #0
 8016744:	d003      	beq.n	801674e <igmp_input+0x7e>
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	685b      	ldr	r3, [r3, #4]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d11d      	bne.n	801678a <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 801674e:	697b      	ldr	r3, [r7, #20]
 8016750:	785b      	ldrb	r3, [r3, #1]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d102      	bne.n	801675c <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	220a      	movs	r2, #10
 801675a:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016760:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 8016762:	69bb      	ldr	r3, [r7, #24]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d00c      	beq.n	8016782 <igmp_input+0xb2>
          groupref = groupref->next;
 8016768:	69bb      	ldr	r3, [r7, #24]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 801676e:	e008      	b.n	8016782 <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8016770:	697b      	ldr	r3, [r7, #20]
 8016772:	785b      	ldrb	r3, [r3, #1]
 8016774:	4619      	mov	r1, r3
 8016776:	69b8      	ldr	r0, [r7, #24]
 8016778:	f000 f8b5 	bl	80168e6 <igmp_delaying_member>
          groupref = groupref->next;
 801677c:	69bb      	ldr	r3, [r7, #24]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8016782:	69bb      	ldr	r3, [r7, #24]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d1f3      	bne.n	8016770 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8016788:	e021      	b.n	80167ce <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 801678a:	697b      	ldr	r3, [r7, #20]
 801678c:	3304      	adds	r3, #4
 801678e:	2b00      	cmp	r3, #0
 8016790:	d02c      	beq.n	80167ec <igmp_input+0x11c>
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	685b      	ldr	r3, [r3, #4]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d028      	beq.n	80167ec <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681a      	ldr	r2, [r3, #0]
 801679e:	4b18      	ldr	r3, [pc, #96]	; (8016800 <igmp_input+0x130>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	429a      	cmp	r2, r3
 80167a4:	d109      	bne.n	80167ba <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	685b      	ldr	r3, [r3, #4]
 80167aa:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 80167ac:	f107 0310 	add.w	r3, r7, #16
 80167b0:	4619      	mov	r1, r3
 80167b2:	68b8      	ldr	r0, [r7, #8]
 80167b4:	f7ff ff05 	bl	80165c2 <igmp_lookfor_group>
 80167b8:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 80167ba:	69fb      	ldr	r3, [r7, #28]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d015      	beq.n	80167ec <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	785b      	ldrb	r3, [r3, #1]
 80167c4:	4619      	mov	r1, r3
 80167c6:	69f8      	ldr	r0, [r7, #28]
 80167c8:	f000 f88d 	bl	80168e6 <igmp_delaying_member>
      break;
 80167cc:	e00e      	b.n	80167ec <igmp_input+0x11c>
 80167ce:	e00d      	b.n	80167ec <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 80167d0:	69fb      	ldr	r3, [r7, #28]
 80167d2:	7a5b      	ldrb	r3, [r3, #9]
 80167d4:	2b01      	cmp	r3, #1
 80167d6:	d10b      	bne.n	80167f0 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 80167d8:	69fb      	ldr	r3, [r7, #28]
 80167da:	2200      	movs	r2, #0
 80167dc:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80167de:	69fb      	ldr	r3, [r7, #28]
 80167e0:	2202      	movs	r2, #2
 80167e2:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 80167e4:	69fb      	ldr	r3, [r7, #28]
 80167e6:	2200      	movs	r2, #0
 80167e8:	721a      	strb	r2, [r3, #8]
      break;
 80167ea:	e001      	b.n	80167f0 <igmp_input+0x120>
      break;
 80167ec:	bf00      	nop
 80167ee:	e000      	b.n	80167f2 <igmp_input+0x122>
      break;
 80167f0:	bf00      	nop
  }

  pbuf_free(p);
 80167f2:	68f8      	ldr	r0, [r7, #12]
 80167f4:	f7fd ff60 	bl	80146b8 <pbuf_free>
  return;
 80167f8:	bf00      	nop
}
 80167fa:	3720      	adds	r7, #32
 80167fc:	46bd      	mov	sp, r7
 80167fe:	bd80      	pop	{r7, pc}
 8016800:	24005e40 	.word	0x24005e40

08016804 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 801680a:	4b15      	ldr	r3, [pc, #84]	; (8016860 <igmp_tmr+0x5c>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	607b      	str	r3, [r7, #4]
 8016810:	e01e      	b.n	8016850 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016816:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8016818:	e014      	b.n	8016844 <igmp_tmr+0x40>
      if (group->timer > 0) {
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	895b      	ldrh	r3, [r3, #10]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d00d      	beq.n	801683e <igmp_tmr+0x3a>
        group->timer--;
 8016822:	683b      	ldr	r3, [r7, #0]
 8016824:	895b      	ldrh	r3, [r3, #10]
 8016826:	3b01      	subs	r3, #1
 8016828:	b29a      	uxth	r2, r3
 801682a:	683b      	ldr	r3, [r7, #0]
 801682c:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	895b      	ldrh	r3, [r3, #10]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d103      	bne.n	801683e <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 8016836:	6839      	ldr	r1, [r7, #0]
 8016838:	6878      	ldr	r0, [r7, #4]
 801683a:	f000 f813 	bl	8016864 <igmp_timeout>
        }
      }
      group = group->next;
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8016844:	683b      	ldr	r3, [r7, #0]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d1e7      	bne.n	801681a <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	607b      	str	r3, [r7, #4]
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d1dd      	bne.n	8016812 <igmp_tmr+0xe>
    }
  }
}
 8016856:	bf00      	nop
 8016858:	bf00      	nop
 801685a:	3708      	adds	r7, #8
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}
 8016860:	24009310 	.word	0x24009310

08016864 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b082      	sub	sp, #8
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
 801686c:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	7a5b      	ldrb	r3, [r3, #9]
 8016872:	2b01      	cmp	r3, #1
 8016874:	d10d      	bne.n	8016892 <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	685a      	ldr	r2, [r3, #4]
 801687a:	4b08      	ldr	r3, [pc, #32]	; (801689c <igmp_timeout+0x38>)
 801687c:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801687e:	429a      	cmp	r2, r3
 8016880:	d007      	beq.n	8016892 <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	2202      	movs	r2, #2
 8016886:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8016888:	2216      	movs	r2, #22
 801688a:	6839      	ldr	r1, [r7, #0]
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f000 f871 	bl	8016974 <igmp_send>
  }
}
 8016892:	bf00      	nop
 8016894:	3708      	adds	r7, #8
 8016896:	46bd      	mov	sp, r7
 8016898:	bd80      	pop	{r7, pc}
 801689a:	bf00      	nop
 801689c:	24005e40 	.word	0x24005e40

080168a0 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	460b      	mov	r3, r1
 80168aa:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 80168ac:	78fb      	ldrb	r3, [r7, #3]
 80168ae:	2b02      	cmp	r3, #2
 80168b0:	d90b      	bls.n	80168ca <igmp_start_timer+0x2a>
 80168b2:	f7e9 ff45 	bl	8000740 <rand>
 80168b6:	4603      	mov	r3, r0
 80168b8:	461a      	mov	r2, r3
 80168ba:	78fb      	ldrb	r3, [r7, #3]
 80168bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80168c0:	fb03 f301 	mul.w	r3, r3, r1
 80168c4:	1ad3      	subs	r3, r2, r3
 80168c6:	b29a      	uxth	r2, r3
 80168c8:	e000      	b.n	80168cc <igmp_start_timer+0x2c>
 80168ca:	2201      	movs	r2, #1
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	895b      	ldrh	r3, [r3, #10]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d102      	bne.n	80168de <igmp_start_timer+0x3e>
    group->timer = 1;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2201      	movs	r2, #1
 80168dc:	815a      	strh	r2, [r3, #10]
  }
}
 80168de:	bf00      	nop
 80168e0:	3708      	adds	r7, #8
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}

080168e6 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 80168e6:	b580      	push	{r7, lr}
 80168e8:	b082      	sub	sp, #8
 80168ea:	af00      	add	r7, sp, #0
 80168ec:	6078      	str	r0, [r7, #4]
 80168ee:	460b      	mov	r3, r1
 80168f0:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	7a5b      	ldrb	r3, [r3, #9]
 80168f6:	2b02      	cmp	r3, #2
 80168f8:	d00d      	beq.n	8016916 <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 80168fe:	2b01      	cmp	r3, #1
 8016900:	d111      	bne.n	8016926 <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8016906:	2b00      	cmp	r3, #0
 8016908:	d005      	beq.n	8016916 <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801690a:	78fb      	ldrb	r3, [r7, #3]
 801690c:	b29a      	uxth	r2, r3
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	895b      	ldrh	r3, [r3, #10]
 8016912:	429a      	cmp	r2, r3
 8016914:	d207      	bcs.n	8016926 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8016916:	78fb      	ldrb	r3, [r7, #3]
 8016918:	4619      	mov	r1, r3
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f7ff ffc0 	bl	80168a0 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2201      	movs	r2, #1
 8016924:	725a      	strb	r2, [r3, #9]
  }
}
 8016926:	bf00      	nop
 8016928:	3708      	adds	r7, #8
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}

0801692e <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 801692e:	b580      	push	{r7, lr}
 8016930:	b08c      	sub	sp, #48	; 0x30
 8016932:	af06      	add	r7, sp, #24
 8016934:	60f8      	str	r0, [r7, #12]
 8016936:	60b9      	str	r1, [r7, #8]
 8016938:	607a      	str	r2, [r7, #4]
 801693a:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 801693c:	f240 4394 	movw	r3, #1172	; 0x494
 8016940:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8016942:	2300      	movs	r3, #0
 8016944:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8016946:	2304      	movs	r3, #4
 8016948:	9304      	str	r3, [sp, #16]
 801694a:	f107 0314 	add.w	r3, r7, #20
 801694e:	9303      	str	r3, [sp, #12]
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	9302      	str	r3, [sp, #8]
 8016954:	2302      	movs	r3, #2
 8016956:	9301      	str	r3, [sp, #4]
 8016958:	2300      	movs	r3, #0
 801695a:	9300      	str	r3, [sp, #0]
 801695c:	2301      	movs	r3, #1
 801695e:	687a      	ldr	r2, [r7, #4]
 8016960:	68b9      	ldr	r1, [r7, #8]
 8016962:	68f8      	ldr	r0, [r7, #12]
 8016964:	f000 fa87 	bl	8016e76 <ip4_output_if_opt>
 8016968:	4603      	mov	r3, r0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3718      	adds	r7, #24
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
	...

08016974 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b088      	sub	sp, #32
 8016978:	af00      	add	r7, sp, #0
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	60b9      	str	r1, [r7, #8]
 801697e:	4613      	mov	r3, r2
 8016980:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 8016982:	2300      	movs	r3, #0
 8016984:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 8016986:	2300      	movs	r3, #0
 8016988:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 801698a:	4b2f      	ldr	r3, [pc, #188]	; (8016a48 <igmp_send+0xd4>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 8016990:	2300      	movs	r3, #0
 8016992:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8016994:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016998:	2108      	movs	r1, #8
 801699a:	2036      	movs	r0, #54	; 0x36
 801699c:	f7fd fbaa 	bl	80140f4 <pbuf_alloc>
 80169a0:	61b8      	str	r0, [r7, #24]

  if (p) {
 80169a2:	69bb      	ldr	r3, [r7, #24]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d04b      	beq.n	8016a40 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 80169a8:	69bb      	ldr	r3, [r7, #24]
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 80169ae:	69bb      	ldr	r3, [r7, #24]
 80169b0:	895b      	ldrh	r3, [r3, #10]
 80169b2:	2b07      	cmp	r3, #7
 80169b4:	d806      	bhi.n	80169c4 <igmp_send+0x50>
 80169b6:	4b25      	ldr	r3, [pc, #148]	; (8016a4c <igmp_send+0xd8>)
 80169b8:	f240 3202 	movw	r2, #770	; 0x302
 80169bc:	4924      	ldr	r1, [pc, #144]	; (8016a50 <igmp_send+0xdc>)
 80169be:	4825      	ldr	r0, [pc, #148]	; (8016a54 <igmp_send+0xe0>)
 80169c0:	f7e9 fe70 	bl	80006a4 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	3304      	adds	r3, #4
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 80169cc:	79fb      	ldrb	r3, [r7, #7]
 80169ce:	2b16      	cmp	r3, #22
 80169d0:	d10a      	bne.n	80169e8 <igmp_send+0x74>
      dest = &(group->group_address);
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	3304      	adds	r3, #4
 80169d6:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	685a      	ldr	r2, [r3, #4]
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 80169e0:	68bb      	ldr	r3, [r7, #8]
 80169e2:	2201      	movs	r2, #1
 80169e4:	721a      	strb	r2, [r3, #8]
 80169e6:	e008      	b.n	80169fa <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 80169e8:	79fb      	ldrb	r3, [r7, #7]
 80169ea:	2b17      	cmp	r3, #23
 80169ec:	d105      	bne.n	80169fa <igmp_send+0x86>
        dest = &allrouters;
 80169ee:	4b1a      	ldr	r3, [pc, #104]	; (8016a58 <igmp_send+0xe4>)
 80169f0:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	685a      	ldr	r2, [r3, #4]
 80169f6:	697b      	ldr	r3, [r7, #20]
 80169f8:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 80169fa:	79fb      	ldrb	r3, [r7, #7]
 80169fc:	2b16      	cmp	r3, #22
 80169fe:	d002      	beq.n	8016a06 <igmp_send+0x92>
 8016a00:	79fb      	ldrb	r3, [r7, #7]
 8016a02:	2b17      	cmp	r3, #23
 8016a04:	d119      	bne.n	8016a3a <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 8016a06:	697b      	ldr	r3, [r7, #20]
 8016a08:	79fa      	ldrb	r2, [r7, #7]
 8016a0a:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8016a0c:	697b      	ldr	r3, [r7, #20]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	2200      	movs	r2, #0
 8016a16:	709a      	strb	r2, [r3, #2]
 8016a18:	2200      	movs	r2, #0
 8016a1a:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8016a1c:	2108      	movs	r1, #8
 8016a1e:	6978      	ldr	r0, [r7, #20]
 8016a20:	f7fc fa80 	bl	8012f24 <inet_chksum>
 8016a24:	4603      	mov	r3, r0
 8016a26:	461a      	mov	r2, r3
 8016a28:	697b      	ldr	r3, [r7, #20]
 8016a2a:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 8016a2c:	f107 0110 	add.w	r1, r7, #16
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	69fa      	ldr	r2, [r7, #28]
 8016a34:	69b8      	ldr	r0, [r7, #24]
 8016a36:	f7ff ff7a 	bl	801692e <igmp_ip_output_if>
    }

    pbuf_free(p);
 8016a3a:	69b8      	ldr	r0, [r7, #24]
 8016a3c:	f7fd fe3c 	bl	80146b8 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8016a40:	bf00      	nop
 8016a42:	3720      	adds	r7, #32
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	08019e08 	.word	0x08019e08
 8016a4c:	080195d4 	.word	0x080195d4
 8016a50:	080198f0 	.word	0x080198f0
 8016a54:	08019640 	.word	0x08019640
 8016a58:	24005e44 	.word	0x24005e44

08016a5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b085      	sub	sp, #20
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a6c:	2be0      	cmp	r3, #224	; 0xe0
 8016a6e:	d106      	bne.n	8016a7e <ip4_route+0x22>
 8016a70:	4b36      	ldr	r3, [pc, #216]	; (8016b4c <ip4_route+0xf0>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d002      	beq.n	8016a7e <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8016a78:	4b34      	ldr	r3, [pc, #208]	; (8016b4c <ip4_route+0xf0>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	e060      	b.n	8016b40 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016a7e:	4b34      	ldr	r3, [pc, #208]	; (8016b50 <ip4_route+0xf4>)
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	60fb      	str	r3, [r7, #12]
 8016a84:	e036      	b.n	8016af4 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a8c:	f003 0301 	and.w	r3, r3, #1
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d02b      	beq.n	8016aee <ip4_route+0x92>
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a9c:	089b      	lsrs	r3, r3, #2
 8016a9e:	f003 0301 	and.w	r3, r3, #1
 8016aa2:	b2db      	uxtb	r3, r3
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d022      	beq.n	8016aee <ip4_route+0x92>
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	3304      	adds	r3, #4
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d01d      	beq.n	8016aee <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681a      	ldr	r2, [r3, #0]
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	3304      	adds	r3, #4
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	405a      	eors	r2, r3
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	3308      	adds	r3, #8
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	4013      	ands	r3, r2
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d101      	bne.n	8016ace <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	e038      	b.n	8016b40 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016ad4:	f003 0302 	and.w	r3, r3, #2
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d108      	bne.n	8016aee <ip4_route+0x92>
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681a      	ldr	r2, [r3, #0]
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	330c      	adds	r3, #12
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d101      	bne.n	8016aee <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	e028      	b.n	8016b40 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	60fb      	str	r3, [r7, #12]
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d1c5      	bne.n	8016a86 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016afa:	4b16      	ldr	r3, [pc, #88]	; (8016b54 <ip4_route+0xf8>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d01a      	beq.n	8016b38 <ip4_route+0xdc>
 8016b02:	4b14      	ldr	r3, [pc, #80]	; (8016b54 <ip4_route+0xf8>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b0a:	f003 0301 	and.w	r3, r3, #1
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d012      	beq.n	8016b38 <ip4_route+0xdc>
 8016b12:	4b10      	ldr	r3, [pc, #64]	; (8016b54 <ip4_route+0xf8>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b1a:	f003 0304 	and.w	r3, r3, #4
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d00a      	beq.n	8016b38 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b22:	4b0c      	ldr	r3, [pc, #48]	; (8016b54 <ip4_route+0xf8>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	3304      	adds	r3, #4
 8016b28:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d004      	beq.n	8016b38 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	b2db      	uxtb	r3, r3
 8016b34:	2b7f      	cmp	r3, #127	; 0x7f
 8016b36:	d101      	bne.n	8016b3c <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	e001      	b.n	8016b40 <ip4_route+0xe4>
  }

  return netif_default;
 8016b3c:	4b05      	ldr	r3, [pc, #20]	; (8016b54 <ip4_route+0xf8>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3714      	adds	r7, #20
 8016b44:	46bd      	mov	sp, r7
 8016b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4a:	4770      	bx	lr
 8016b4c:	24005e4c 	.word	0x24005e4c
 8016b50:	24009310 	.word	0x24009310
 8016b54:	24009314 	.word	0x24009314

08016b58 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b082      	sub	sp, #8
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b66:	f003 0301 	and.w	r3, r3, #1
 8016b6a:	b2db      	uxtb	r3, r3
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d016      	beq.n	8016b9e <ip4_input_accept+0x46>
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	3304      	adds	r3, #4
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d011      	beq.n	8016b9e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b7a:	4b0b      	ldr	r3, [pc, #44]	; (8016ba8 <ip4_input_accept+0x50>)
 8016b7c:	695a      	ldr	r2, [r3, #20]
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	3304      	adds	r3, #4
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	429a      	cmp	r2, r3
 8016b86:	d008      	beq.n	8016b9a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016b88:	4b07      	ldr	r3, [pc, #28]	; (8016ba8 <ip4_input_accept+0x50>)
 8016b8a:	695b      	ldr	r3, [r3, #20]
 8016b8c:	6879      	ldr	r1, [r7, #4]
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f000 fa86 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8016b94:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d001      	beq.n	8016b9e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	e000      	b.n	8016ba0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016b9e:	2300      	movs	r3, #0
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3708      	adds	r7, #8
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}
 8016ba8:	24006680 	.word	0x24006680

08016bac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b088      	sub	sp, #32
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016bc0:	69fb      	ldr	r3, [r7, #28]
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	091b      	lsrs	r3, r3, #4
 8016bc6:	b2db      	uxtb	r3, r3
 8016bc8:	2b04      	cmp	r3, #4
 8016bca:	d004      	beq.n	8016bd6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f7fd fd73 	bl	80146b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	e126      	b.n	8016e24 <ip4_input+0x278>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016bd6:	69fb      	ldr	r3, [r7, #28]
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	f003 030f 	and.w	r3, r3, #15
 8016bde:	b2db      	uxtb	r3, r3
 8016be0:	009b      	lsls	r3, r3, #2
 8016be2:	b2db      	uxtb	r3, r3
 8016be4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016be6:	69fb      	ldr	r3, [r7, #28]
 8016be8:	885b      	ldrh	r3, [r3, #2]
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	4618      	mov	r0, r3
 8016bee:	f7fc f927 	bl	8012e40 <lwip_htons>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	891b      	ldrh	r3, [r3, #8]
 8016bfa:	8a3a      	ldrh	r2, [r7, #16]
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d204      	bcs.n	8016c0a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016c00:	8a3b      	ldrh	r3, [r7, #16]
 8016c02:	4619      	mov	r1, r3
 8016c04:	6878      	ldr	r0, [r7, #4]
 8016c06:	f7fd fbd1 	bl	80143ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	895b      	ldrh	r3, [r3, #10]
 8016c0e:	8a7a      	ldrh	r2, [r7, #18]
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d807      	bhi.n	8016c24 <ip4_input+0x78>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	891b      	ldrh	r3, [r3, #8]
 8016c18:	8a3a      	ldrh	r2, [r7, #16]
 8016c1a:	429a      	cmp	r2, r3
 8016c1c:	d802      	bhi.n	8016c24 <ip4_input+0x78>
 8016c1e:	8a7b      	ldrh	r3, [r7, #18]
 8016c20:	2b13      	cmp	r3, #19
 8016c22:	d804      	bhi.n	8016c2e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f7fd fd47 	bl	80146b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	e0fa      	b.n	8016e24 <ip4_input+0x278>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016c2e:	69fb      	ldr	r3, [r7, #28]
 8016c30:	691b      	ldr	r3, [r3, #16]
 8016c32:	4a7e      	ldr	r2, [pc, #504]	; (8016e2c <ip4_input+0x280>)
 8016c34:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016c36:	69fb      	ldr	r3, [r7, #28]
 8016c38:	68db      	ldr	r3, [r3, #12]
 8016c3a:	4a7c      	ldr	r2, [pc, #496]	; (8016e2c <ip4_input+0x280>)
 8016c3c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c3e:	4b7b      	ldr	r3, [pc, #492]	; (8016e2c <ip4_input+0x280>)
 8016c40:	695b      	ldr	r3, [r3, #20]
 8016c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c46:	2be0      	cmp	r3, #224	; 0xe0
 8016c48:	d120      	bne.n	8016c8c <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c50:	f003 0320 	and.w	r3, r3, #32
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d016      	beq.n	8016c86 <ip4_input+0xda>
 8016c58:	4975      	ldr	r1, [pc, #468]	; (8016e30 <ip4_input+0x284>)
 8016c5a:	6838      	ldr	r0, [r7, #0]
 8016c5c:	f7ff fcb1 	bl	80165c2 <igmp_lookfor_group>
 8016c60:	4603      	mov	r3, r0
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d00f      	beq.n	8016c86 <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8016c66:	4b73      	ldr	r3, [pc, #460]	; (8016e34 <ip4_input+0x288>)
 8016c68:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8016c6a:	4b70      	ldr	r3, [pc, #448]	; (8016e2c <ip4_input+0x280>)
 8016c6c:	695a      	ldr	r2, [r3, #20]
 8016c6e:	68bb      	ldr	r3, [r7, #8]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d105      	bne.n	8016c80 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 8016c74:	4b6d      	ldr	r3, [pc, #436]	; (8016e2c <ip4_input+0x280>)
 8016c76:	691b      	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d101      	bne.n	8016c80 <ip4_input+0xd4>
        check_ip_src = 0;
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8016c84:	e02a      	b.n	8016cdc <ip4_input+0x130>
    } else {
      netif = NULL;
 8016c86:	2300      	movs	r3, #0
 8016c88:	61bb      	str	r3, [r7, #24]
 8016c8a:	e027      	b.n	8016cdc <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016c8c:	6838      	ldr	r0, [r7, #0]
 8016c8e:	f7ff ff63 	bl	8016b58 <ip4_input_accept>
 8016c92:	4603      	mov	r3, r0
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d002      	beq.n	8016c9e <ip4_input+0xf2>
      netif = inp;
 8016c98:	683b      	ldr	r3, [r7, #0]
 8016c9a:	61bb      	str	r3, [r7, #24]
 8016c9c:	e01e      	b.n	8016cdc <ip4_input+0x130>
    } else {
      netif = NULL;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016ca2:	4b62      	ldr	r3, [pc, #392]	; (8016e2c <ip4_input+0x280>)
 8016ca4:	695b      	ldr	r3, [r3, #20]
 8016ca6:	b2db      	uxtb	r3, r3
 8016ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8016caa:	d017      	beq.n	8016cdc <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016cac:	4b62      	ldr	r3, [pc, #392]	; (8016e38 <ip4_input+0x28c>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	61bb      	str	r3, [r7, #24]
 8016cb2:	e00e      	b.n	8016cd2 <ip4_input+0x126>
          if (netif == inp) {
 8016cb4:	69ba      	ldr	r2, [r7, #24]
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d006      	beq.n	8016cca <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016cbc:	69b8      	ldr	r0, [r7, #24]
 8016cbe:	f7ff ff4b 	bl	8016b58 <ip4_input_accept>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d108      	bne.n	8016cda <ip4_input+0x12e>
 8016cc8:	e000      	b.n	8016ccc <ip4_input+0x120>
            continue;
 8016cca:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016ccc:	69bb      	ldr	r3, [r7, #24]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	61bb      	str	r3, [r7, #24]
 8016cd2:	69bb      	ldr	r3, [r7, #24]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d1ed      	bne.n	8016cb4 <ip4_input+0x108>
 8016cd8:	e000      	b.n	8016cdc <ip4_input+0x130>
            break;
 8016cda:	bf00      	nop
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d013      	beq.n	8016d0a <ip4_input+0x15e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016ce2:	4b52      	ldr	r3, [pc, #328]	; (8016e2c <ip4_input+0x280>)
 8016ce4:	691b      	ldr	r3, [r3, #16]
 8016ce6:	6839      	ldr	r1, [r7, #0]
 8016ce8:	4618      	mov	r0, r3
 8016cea:	f000 f9d9 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d105      	bne.n	8016d00 <ip4_input+0x154>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016cf4:	4b4d      	ldr	r3, [pc, #308]	; (8016e2c <ip4_input+0x280>)
 8016cf6:	691b      	ldr	r3, [r3, #16]
 8016cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016cfc:	2be0      	cmp	r3, #224	; 0xe0
 8016cfe:	d104      	bne.n	8016d0a <ip4_input+0x15e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f7fd fcd9 	bl	80146b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016d06:	2300      	movs	r3, #0
 8016d08:	e08c      	b.n	8016e24 <ip4_input+0x278>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016d0a:	69bb      	ldr	r3, [r7, #24]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d104      	bne.n	8016d1a <ip4_input+0x16e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016d10:	6878      	ldr	r0, [r7, #4]
 8016d12:	f7fd fcd1 	bl	80146b8 <pbuf_free>
    return ERR_OK;
 8016d16:	2300      	movs	r3, #0
 8016d18:	e084      	b.n	8016e24 <ip4_input+0x278>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016d1a:	69fb      	ldr	r3, [r7, #28]
 8016d1c:	88db      	ldrh	r3, [r3, #6]
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	461a      	mov	r2, r3
 8016d22:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016d26:	4013      	ands	r3, r2
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d00b      	beq.n	8016d44 <ip4_input+0x198>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016d2c:	6878      	ldr	r0, [r7, #4]
 8016d2e:	f000 fcfd 	bl	801772c <ip4_reass>
 8016d32:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d101      	bne.n	8016d3e <ip4_input+0x192>
      return ERR_OK;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	e072      	b.n	8016e24 <ip4_input+0x278>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	685b      	ldr	r3, [r3, #4]
 8016d42:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016d44:	4a39      	ldr	r2, [pc, #228]	; (8016e2c <ip4_input+0x280>)
 8016d46:	69bb      	ldr	r3, [r7, #24]
 8016d48:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016d4a:	4a38      	ldr	r2, [pc, #224]	; (8016e2c <ip4_input+0x280>)
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016d50:	4a36      	ldr	r2, [pc, #216]	; (8016e2c <ip4_input+0x280>)
 8016d52:	69fb      	ldr	r3, [r7, #28]
 8016d54:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016d56:	69fb      	ldr	r3, [r7, #28]
 8016d58:	781b      	ldrb	r3, [r3, #0]
 8016d5a:	f003 030f 	and.w	r3, r3, #15
 8016d5e:	b2db      	uxtb	r3, r3
 8016d60:	009b      	lsls	r3, r3, #2
 8016d62:	b2db      	uxtb	r3, r3
 8016d64:	b29a      	uxth	r2, r3
 8016d66:	4b31      	ldr	r3, [pc, #196]	; (8016e2c <ip4_input+0x280>)
 8016d68:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8016d6a:	6839      	ldr	r1, [r7, #0]
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f7fd ff05 	bl	8014b7c <raw_input>
 8016d72:	4603      	mov	r3, r0
 8016d74:	73fb      	strb	r3, [r7, #15]
  if (raw_status != RAW_INPUT_EATEN)
 8016d76:	7bfb      	ldrb	r3, [r7, #15]
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	d03f      	beq.n	8016dfc <ip4_input+0x250>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016d7c:	8a7b      	ldrh	r3, [r7, #18]
 8016d7e:	4619      	mov	r1, r3
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f7fd fc13 	bl	80145ac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016d86:	69fb      	ldr	r3, [r7, #28]
 8016d88:	7a5b      	ldrb	r3, [r3, #9]
 8016d8a:	2b11      	cmp	r3, #17
 8016d8c:	d006      	beq.n	8016d9c <ip4_input+0x1f0>
 8016d8e:	2b11      	cmp	r3, #17
 8016d90:	dc14      	bgt.n	8016dbc <ip4_input+0x210>
 8016d92:	2b01      	cmp	r3, #1
 8016d94:	d007      	beq.n	8016da6 <ip4_input+0x1fa>
 8016d96:	2b02      	cmp	r3, #2
 8016d98:	d00a      	beq.n	8016db0 <ip4_input+0x204>
 8016d9a:	e00f      	b.n	8016dbc <ip4_input+0x210>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016d9c:	6839      	ldr	r1, [r7, #0]
 8016d9e:	6878      	ldr	r0, [r7, #4]
 8016da0:	f7fe f96e 	bl	8015080 <udp_input>
        break;
 8016da4:	e02b      	b.n	8016dfe <ip4_input+0x252>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016da6:	6839      	ldr	r1, [r7, #0]
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	f7ff f9f9 	bl	80161a0 <icmp_input>
        break;
 8016dae:	e026      	b.n	8016dfe <ip4_input+0x252>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 8016db0:	4a1f      	ldr	r2, [pc, #124]	; (8016e30 <ip4_input+0x284>)
 8016db2:	6839      	ldr	r1, [r7, #0]
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f7ff fc8b 	bl	80166d0 <igmp_input>
        break;
 8016dba:	e020      	b.n	8016dfe <ip4_input+0x252>
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8016dbc:	7bfb      	ldrb	r3, [r7, #15]
 8016dbe:	2b02      	cmp	r3, #2
 8016dc0:	d018      	beq.n	8016df4 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016dc2:	4b1a      	ldr	r3, [pc, #104]	; (8016e2c <ip4_input+0x280>)
 8016dc4:	695b      	ldr	r3, [r3, #20]
 8016dc6:	69b9      	ldr	r1, [r7, #24]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f000 f969 	bl	80170a0 <ip4_addr_isbroadcast_u32>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d10f      	bne.n	8016df4 <ip4_input+0x248>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016dd4:	4b15      	ldr	r3, [pc, #84]	; (8016e2c <ip4_input+0x280>)
 8016dd6:	695b      	ldr	r3, [r3, #20]
 8016dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016ddc:	2be0      	cmp	r3, #224	; 0xe0
 8016dde:	d009      	beq.n	8016df4 <ip4_input+0x248>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016de0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016de4:	4619      	mov	r1, r3
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f7fd fc53 	bl	8014692 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016dec:	2102      	movs	r1, #2
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f7ff faf6 	bl	80163e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016df4:	6878      	ldr	r0, [r7, #4]
 8016df6:	f7fd fc5f 	bl	80146b8 <pbuf_free>
        break;
 8016dfa:	e000      	b.n	8016dfe <ip4_input+0x252>
    }
  }
 8016dfc:	bf00      	nop

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016dfe:	4b0b      	ldr	r3, [pc, #44]	; (8016e2c <ip4_input+0x280>)
 8016e00:	2200      	movs	r2, #0
 8016e02:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016e04:	4b09      	ldr	r3, [pc, #36]	; (8016e2c <ip4_input+0x280>)
 8016e06:	2200      	movs	r2, #0
 8016e08:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016e0a:	4b08      	ldr	r3, [pc, #32]	; (8016e2c <ip4_input+0x280>)
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016e10:	4b06      	ldr	r3, [pc, #24]	; (8016e2c <ip4_input+0x280>)
 8016e12:	2200      	movs	r2, #0
 8016e14:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016e16:	4b05      	ldr	r3, [pc, #20]	; (8016e2c <ip4_input+0x280>)
 8016e18:	2200      	movs	r2, #0
 8016e1a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016e1c:	4b03      	ldr	r3, [pc, #12]	; (8016e2c <ip4_input+0x280>)
 8016e1e:	2200      	movs	r2, #0
 8016e20:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016e22:	2300      	movs	r3, #0
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3720      	adds	r7, #32
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}
 8016e2c:	24006680 	.word	0x24006680
 8016e30:	24006694 	.word	0x24006694
 8016e34:	010000e0 	.word	0x010000e0
 8016e38:	24009310 	.word	0x24009310

08016e3c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b08a      	sub	sp, #40	; 0x28
 8016e40:	af06      	add	r7, sp, #24
 8016e42:	60f8      	str	r0, [r7, #12]
 8016e44:	60b9      	str	r1, [r7, #8]
 8016e46:	607a      	str	r2, [r7, #4]
 8016e48:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8016e4a:	78fa      	ldrb	r2, [r7, #3]
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	9304      	str	r3, [sp, #16]
 8016e50:	2300      	movs	r3, #0
 8016e52:	9303      	str	r3, [sp, #12]
 8016e54:	6a3b      	ldr	r3, [r7, #32]
 8016e56:	9302      	str	r3, [sp, #8]
 8016e58:	7f3b      	ldrb	r3, [r7, #28]
 8016e5a:	9301      	str	r3, [sp, #4]
 8016e5c:	7e3b      	ldrb	r3, [r7, #24]
 8016e5e:	9300      	str	r3, [sp, #0]
 8016e60:	4613      	mov	r3, r2
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	68b9      	ldr	r1, [r7, #8]
 8016e66:	68f8      	ldr	r0, [r7, #12]
 8016e68:	f000 f805 	bl	8016e76 <ip4_output_if_opt>
 8016e6c:	4603      	mov	r3, r0
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3710      	adds	r7, #16
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}

08016e76 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 8016e76:	b580      	push	{r7, lr}
 8016e78:	b08c      	sub	sp, #48	; 0x30
 8016e7a:	af06      	add	r7, sp, #24
 8016e7c:	60f8      	str	r0, [r7, #12]
 8016e7e:	60b9      	str	r1, [r7, #8]
 8016e80:	607a      	str	r2, [r7, #4]
 8016e82:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016e84:	68bb      	ldr	r3, [r7, #8]
 8016e86:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d009      	beq.n	8016ea2 <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d003      	beq.n	8016e9c <ip4_output_if_opt+0x26>
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d102      	bne.n	8016ea2 <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8016e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e9e:	3304      	adds	r3, #4
 8016ea0:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 8016ea2:	78fa      	ldrb	r2, [r7, #3]
 8016ea4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016ea6:	9304      	str	r3, [sp, #16]
 8016ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eaa:	9303      	str	r3, [sp, #12]
 8016eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eae:	9302      	str	r3, [sp, #8]
 8016eb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016eb4:	9301      	str	r3, [sp, #4]
 8016eb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016eba:	9300      	str	r3, [sp, #0]
 8016ebc:	4613      	mov	r3, r2
 8016ebe:	687a      	ldr	r2, [r7, #4]
 8016ec0:	6979      	ldr	r1, [r7, #20]
 8016ec2:	68f8      	ldr	r0, [r7, #12]
 8016ec4:	f000 f806 	bl	8016ed4 <ip4_output_if_opt_src>
 8016ec8:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3718      	adds	r7, #24
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}
	...

08016ed4 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b088      	sub	sp, #32
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	60b9      	str	r1, [r7, #8]
 8016ede:	607a      	str	r2, [r7, #4]
 8016ee0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	7b9b      	ldrb	r3, [r3, #14]
 8016ee6:	2b01      	cmp	r3, #1
 8016ee8:	d006      	beq.n	8016ef8 <ip4_output_if_opt_src+0x24>
 8016eea:	4b67      	ldr	r3, [pc, #412]	; (8017088 <ip4_output_if_opt_src+0x1b4>)
 8016eec:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016ef0:	4966      	ldr	r1, [pc, #408]	; (801708c <ip4_output_if_opt_src+0x1b8>)
 8016ef2:	4867      	ldr	r0, [pc, #412]	; (8017090 <ip4_output_if_opt_src+0x1bc>)
 8016ef4:	f7e9 fbd6 	bl	80006a4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	f000 8097 	beq.w	801702e <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 8016f00:	2314      	movs	r3, #20
 8016f02:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 8016f04:	2300      	movs	r3, #0
 8016f06:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 8016f08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d030      	beq.n	8016f70 <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 8016f0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016f10:	2b28      	cmp	r3, #40	; 0x28
 8016f12:	d902      	bls.n	8016f1a <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 8016f14:	f06f 0305 	mvn.w	r3, #5
 8016f18:	e0b1      	b.n	801707e <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 8016f1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016f1c:	3303      	adds	r3, #3
 8016f1e:	b29b      	uxth	r3, r3
 8016f20:	f023 0303 	bic.w	r3, r3, #3
 8016f24:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8016f26:	8bfa      	ldrh	r2, [r7, #30]
 8016f28:	8afb      	ldrh	r3, [r7, #22]
 8016f2a:	4413      	add	r3, r2
 8016f2c:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 8016f2e:	8afb      	ldrh	r3, [r7, #22]
 8016f30:	4619      	mov	r1, r3
 8016f32:	68f8      	ldr	r0, [r7, #12]
 8016f34:	f7fd fb2a 	bl	801458c <pbuf_add_header>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d002      	beq.n	8016f44 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 8016f3e:	f06f 0301 	mvn.w	r3, #1
 8016f42:	e09c      	b.n	801707e <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	685b      	ldr	r3, [r3, #4]
 8016f48:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016f4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f7e9 fa3f 	bl	80003d0 <memcpy>
      if (optlen < optlen_aligned) {
 8016f52:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016f54:	8afb      	ldrh	r3, [r7, #22]
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d20a      	bcs.n	8016f70 <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	685a      	ldr	r2, [r3, #4]
 8016f5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016f60:	18d0      	adds	r0, r2, r3
 8016f62:	8afa      	ldrh	r2, [r7, #22]
 8016f64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016f66:	1ad3      	subs	r3, r2, r3
 8016f68:	461a      	mov	r2, r3
 8016f6a:	2100      	movs	r1, #0
 8016f6c:	f7e9 fb32 	bl	80005d4 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016f70:	2114      	movs	r1, #20
 8016f72:	68f8      	ldr	r0, [r7, #12]
 8016f74:	f7fd fb0a 	bl	801458c <pbuf_add_header>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d002      	beq.n	8016f84 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f7e:	f06f 0301 	mvn.w	r3, #1
 8016f82:	e07c      	b.n	801707e <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	685b      	ldr	r3, [r3, #4]
 8016f88:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	895b      	ldrh	r3, [r3, #10]
 8016f8e:	2b13      	cmp	r3, #19
 8016f90:	d806      	bhi.n	8016fa0 <ip4_output_if_opt_src+0xcc>
 8016f92:	4b3d      	ldr	r3, [pc, #244]	; (8017088 <ip4_output_if_opt_src+0x1b4>)
 8016f94:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016f98:	493e      	ldr	r1, [pc, #248]	; (8017094 <ip4_output_if_opt_src+0x1c0>)
 8016f9a:	483d      	ldr	r0, [pc, #244]	; (8017090 <ip4_output_if_opt_src+0x1bc>)
 8016f9c:	f7e9 fb82 	bl	80006a4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016fa0:	69bb      	ldr	r3, [r7, #24]
 8016fa2:	78fa      	ldrb	r2, [r7, #3]
 8016fa4:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016fa6:	69bb      	ldr	r3, [r7, #24]
 8016fa8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016fac:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681a      	ldr	r2, [r3, #0]
 8016fb2:	69bb      	ldr	r3, [r7, #24]
 8016fb4:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016fb6:	8bfb      	ldrh	r3, [r7, #30]
 8016fb8:	089b      	lsrs	r3, r3, #2
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	b2db      	uxtb	r3, r3
 8016fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fc2:	b2da      	uxtb	r2, r3
 8016fc4:	69bb      	ldr	r3, [r7, #24]
 8016fc6:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016fc8:	69bb      	ldr	r3, [r7, #24]
 8016fca:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016fce:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	891b      	ldrh	r3, [r3, #8]
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	f7fb ff33 	bl	8012e40 <lwip_htons>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	461a      	mov	r2, r3
 8016fde:	69bb      	ldr	r3, [r7, #24]
 8016fe0:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016fe2:	69bb      	ldr	r3, [r7, #24]
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	719a      	strb	r2, [r3, #6]
 8016fe8:	2200      	movs	r2, #0
 8016fea:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016fec:	4b2a      	ldr	r3, [pc, #168]	; (8017098 <ip4_output_if_opt_src+0x1c4>)
 8016fee:	881b      	ldrh	r3, [r3, #0]
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f7fb ff25 	bl	8012e40 <lwip_htons>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	69bb      	ldr	r3, [r7, #24]
 8016ffc:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016ffe:	4b26      	ldr	r3, [pc, #152]	; (8017098 <ip4_output_if_opt_src+0x1c4>)
 8017000:	881b      	ldrh	r3, [r3, #0]
 8017002:	3301      	adds	r3, #1
 8017004:	b29a      	uxth	r2, r3
 8017006:	4b24      	ldr	r3, [pc, #144]	; (8017098 <ip4_output_if_opt_src+0x1c4>)
 8017008:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d104      	bne.n	801701a <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017010:	4b22      	ldr	r3, [pc, #136]	; (801709c <ip4_output_if_opt_src+0x1c8>)
 8017012:	681a      	ldr	r2, [r3, #0]
 8017014:	69bb      	ldr	r3, [r7, #24]
 8017016:	60da      	str	r2, [r3, #12]
 8017018:	e003      	b.n	8017022 <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	681a      	ldr	r2, [r3, #0]
 801701e:	69bb      	ldr	r3, [r7, #24]
 8017020:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017022:	69bb      	ldr	r3, [r7, #24]
 8017024:	2200      	movs	r2, #0
 8017026:	729a      	strb	r2, [r3, #10]
 8017028:	2200      	movs	r2, #0
 801702a:	72da      	strb	r2, [r3, #11]
 801702c:	e00f      	b.n	801704e <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	895b      	ldrh	r3, [r3, #10]
 8017032:	2b13      	cmp	r3, #19
 8017034:	d802      	bhi.n	801703c <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017036:	f06f 0301 	mvn.w	r3, #1
 801703a:	e020      	b.n	801707e <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	685b      	ldr	r3, [r3, #4]
 8017040:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017042:	69bb      	ldr	r3, [r7, #24]
 8017044:	691b      	ldr	r3, [r3, #16]
 8017046:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8017048:	f107 0310 	add.w	r3, r7, #16
 801704c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017052:	2b00      	cmp	r3, #0
 8017054:	d00c      	beq.n	8017070 <ip4_output_if_opt_src+0x19c>
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	891a      	ldrh	r2, [r3, #8]
 801705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801705e:	429a      	cmp	r2, r3
 8017060:	d906      	bls.n	8017070 <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 8017062:	687a      	ldr	r2, [r7, #4]
 8017064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017066:	68f8      	ldr	r0, [r7, #12]
 8017068:	f000 fd4e 	bl	8017b08 <ip4_frag>
 801706c:	4603      	mov	r3, r0
 801706e:	e006      	b.n	801707e <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017072:	695b      	ldr	r3, [r3, #20]
 8017074:	687a      	ldr	r2, [r7, #4]
 8017076:	68f9      	ldr	r1, [r7, #12]
 8017078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801707a:	4798      	blx	r3
 801707c:	4603      	mov	r3, r0
}
 801707e:	4618      	mov	r0, r3
 8017080:	3720      	adds	r7, #32
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}
 8017086:	bf00      	nop
 8017088:	0801992c 	.word	0x0801992c
 801708c:	08019960 	.word	0x08019960
 8017090:	0801996c 	.word	0x0801996c
 8017094:	08019994 	.word	0x08019994
 8017098:	24005e48 	.word	0x24005e48
 801709c:	08019e08 	.word	0x08019e08

080170a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80170a0:	b480      	push	{r7}
 80170a2:	b085      	sub	sp, #20
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
 80170a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170b4:	d002      	beq.n	80170bc <ip4_addr_isbroadcast_u32+0x1c>
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d101      	bne.n	80170c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80170bc:	2301      	movs	r3, #1
 80170be:	e02a      	b.n	8017116 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80170c0:	683b      	ldr	r3, [r7, #0]
 80170c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80170c6:	f003 0302 	and.w	r3, r3, #2
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d101      	bne.n	80170d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80170ce:	2300      	movs	r3, #0
 80170d0:	e021      	b.n	8017116 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	3304      	adds	r3, #4
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	687a      	ldr	r2, [r7, #4]
 80170da:	429a      	cmp	r2, r3
 80170dc:	d101      	bne.n	80170e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80170de:	2300      	movs	r3, #0
 80170e0:	e019      	b.n	8017116 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80170e2:	68fa      	ldr	r2, [r7, #12]
 80170e4:	683b      	ldr	r3, [r7, #0]
 80170e6:	3304      	adds	r3, #4
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	405a      	eors	r2, r3
 80170ec:	683b      	ldr	r3, [r7, #0]
 80170ee:	3308      	adds	r3, #8
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	4013      	ands	r3, r2
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d10d      	bne.n	8017114 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	3308      	adds	r3, #8
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	43da      	mvns	r2, r3
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	3308      	adds	r3, #8
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801710c:	429a      	cmp	r2, r3
 801710e:	d101      	bne.n	8017114 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017110:	2301      	movs	r3, #1
 8017112:	e000      	b.n	8017116 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017114:	2300      	movs	r3, #0
  }
}
 8017116:	4618      	mov	r0, r3
 8017118:	3714      	adds	r7, #20
 801711a:	46bd      	mov	sp, r7
 801711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017120:	4770      	bx	lr
	...

08017124 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b084      	sub	sp, #16
 8017128:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801712a:	2300      	movs	r3, #0
 801712c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801712e:	4b12      	ldr	r3, [pc, #72]	; (8017178 <ip_reass_tmr+0x54>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017134:	e018      	b.n	8017168 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	7fdb      	ldrb	r3, [r3, #31]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d00b      	beq.n	8017156 <ip_reass_tmr+0x32>
      r->timer--;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	7fdb      	ldrb	r3, [r3, #31]
 8017142:	3b01      	subs	r3, #1
 8017144:	b2da      	uxtb	r2, r3
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	60fb      	str	r3, [r7, #12]
 8017154:	e008      	b.n	8017168 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017160:	68b9      	ldr	r1, [r7, #8]
 8017162:	6878      	ldr	r0, [r7, #4]
 8017164:	f000 f80a 	bl	801717c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d1e3      	bne.n	8017136 <ip_reass_tmr+0x12>
    }
  }
}
 801716e:	bf00      	nop
 8017170:	bf00      	nop
 8017172:	3710      	adds	r7, #16
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}
 8017178:	24005e50 	.word	0x24005e50

0801717c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b088      	sub	sp, #32
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
 8017184:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017186:	2300      	movs	r3, #0
 8017188:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801718a:	683a      	ldr	r2, [r7, #0]
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	429a      	cmp	r2, r3
 8017190:	d105      	bne.n	801719e <ip_reass_free_complete_datagram+0x22>
 8017192:	4b45      	ldr	r3, [pc, #276]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 8017194:	22ab      	movs	r2, #171	; 0xab
 8017196:	4945      	ldr	r1, [pc, #276]	; (80172ac <ip_reass_free_complete_datagram+0x130>)
 8017198:	4845      	ldr	r0, [pc, #276]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 801719a:	f7e9 fa83 	bl	80006a4 <iprintf>
  if (prev != NULL) {
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d00a      	beq.n	80171ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	687a      	ldr	r2, [r7, #4]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d005      	beq.n	80171ba <ip_reass_free_complete_datagram+0x3e>
 80171ae:	4b3e      	ldr	r3, [pc, #248]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 80171b0:	22ad      	movs	r2, #173	; 0xad
 80171b2:	4940      	ldr	r1, [pc, #256]	; (80172b4 <ip_reass_free_complete_datagram+0x138>)
 80171b4:	483e      	ldr	r0, [pc, #248]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 80171b6:	f7e9 fa75 	bl	80006a4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	685b      	ldr	r3, [r3, #4]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80171c2:	697b      	ldr	r3, [r7, #20]
 80171c4:	889b      	ldrh	r3, [r3, #4]
 80171c6:	b29b      	uxth	r3, r3
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d12a      	bne.n	8017222 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	685b      	ldr	r3, [r3, #4]
 80171d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80171d2:	697b      	ldr	r3, [r7, #20]
 80171d4:	681a      	ldr	r2, [r3, #0]
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80171da:	69bb      	ldr	r3, [r7, #24]
 80171dc:	6858      	ldr	r0, [r3, #4]
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	3308      	adds	r3, #8
 80171e2:	2214      	movs	r2, #20
 80171e4:	4619      	mov	r1, r3
 80171e6:	f7e9 f8f3 	bl	80003d0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80171ea:	2101      	movs	r1, #1
 80171ec:	69b8      	ldr	r0, [r7, #24]
 80171ee:	f7ff f907 	bl	8016400 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80171f2:	69b8      	ldr	r0, [r7, #24]
 80171f4:	f7fd faee 	bl	80147d4 <pbuf_clen>
 80171f8:	4603      	mov	r3, r0
 80171fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80171fc:	8bfa      	ldrh	r2, [r7, #30]
 80171fe:	8a7b      	ldrh	r3, [r7, #18]
 8017200:	4413      	add	r3, r2
 8017202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017206:	db05      	blt.n	8017214 <ip_reass_free_complete_datagram+0x98>
 8017208:	4b27      	ldr	r3, [pc, #156]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 801720a:	22bc      	movs	r2, #188	; 0xbc
 801720c:	492a      	ldr	r1, [pc, #168]	; (80172b8 <ip_reass_free_complete_datagram+0x13c>)
 801720e:	4828      	ldr	r0, [pc, #160]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 8017210:	f7e9 fa48 	bl	80006a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017214:	8bfa      	ldrh	r2, [r7, #30]
 8017216:	8a7b      	ldrh	r3, [r7, #18]
 8017218:	4413      	add	r3, r2
 801721a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801721c:	69b8      	ldr	r0, [r7, #24]
 801721e:	f7fd fa4b 	bl	80146b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017228:	e01f      	b.n	801726a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801722a:	69bb      	ldr	r3, [r7, #24]
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017230:	69bb      	ldr	r3, [r7, #24]
 8017232:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017234:	697b      	ldr	r3, [r7, #20]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801723a:	68f8      	ldr	r0, [r7, #12]
 801723c:	f7fd faca 	bl	80147d4 <pbuf_clen>
 8017240:	4603      	mov	r3, r0
 8017242:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017244:	8bfa      	ldrh	r2, [r7, #30]
 8017246:	8a7b      	ldrh	r3, [r7, #18]
 8017248:	4413      	add	r3, r2
 801724a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801724e:	db05      	blt.n	801725c <ip_reass_free_complete_datagram+0xe0>
 8017250:	4b15      	ldr	r3, [pc, #84]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 8017252:	22cc      	movs	r2, #204	; 0xcc
 8017254:	4918      	ldr	r1, [pc, #96]	; (80172b8 <ip_reass_free_complete_datagram+0x13c>)
 8017256:	4816      	ldr	r0, [pc, #88]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 8017258:	f7e9 fa24 	bl	80006a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801725c:	8bfa      	ldrh	r2, [r7, #30]
 801725e:	8a7b      	ldrh	r3, [r7, #18]
 8017260:	4413      	add	r3, r2
 8017262:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017264:	68f8      	ldr	r0, [r7, #12]
 8017266:	f7fd fa27 	bl	80146b8 <pbuf_free>
  while (p != NULL) {
 801726a:	69bb      	ldr	r3, [r7, #24]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d1dc      	bne.n	801722a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017270:	6839      	ldr	r1, [r7, #0]
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f000 f8c2 	bl	80173fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017278:	4b10      	ldr	r3, [pc, #64]	; (80172bc <ip_reass_free_complete_datagram+0x140>)
 801727a:	881b      	ldrh	r3, [r3, #0]
 801727c:	8bfa      	ldrh	r2, [r7, #30]
 801727e:	429a      	cmp	r2, r3
 8017280:	d905      	bls.n	801728e <ip_reass_free_complete_datagram+0x112>
 8017282:	4b09      	ldr	r3, [pc, #36]	; (80172a8 <ip_reass_free_complete_datagram+0x12c>)
 8017284:	22d2      	movs	r2, #210	; 0xd2
 8017286:	490e      	ldr	r1, [pc, #56]	; (80172c0 <ip_reass_free_complete_datagram+0x144>)
 8017288:	4809      	ldr	r0, [pc, #36]	; (80172b0 <ip_reass_free_complete_datagram+0x134>)
 801728a:	f7e9 fa0b 	bl	80006a4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801728e:	4b0b      	ldr	r3, [pc, #44]	; (80172bc <ip_reass_free_complete_datagram+0x140>)
 8017290:	881a      	ldrh	r2, [r3, #0]
 8017292:	8bfb      	ldrh	r3, [r7, #30]
 8017294:	1ad3      	subs	r3, r2, r3
 8017296:	b29a      	uxth	r2, r3
 8017298:	4b08      	ldr	r3, [pc, #32]	; (80172bc <ip_reass_free_complete_datagram+0x140>)
 801729a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801729c:	8bfb      	ldrh	r3, [r7, #30]
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3720      	adds	r7, #32
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}
 80172a6:	bf00      	nop
 80172a8:	080199c4 	.word	0x080199c4
 80172ac:	08019a00 	.word	0x08019a00
 80172b0:	08019a0c 	.word	0x08019a0c
 80172b4:	08019a34 	.word	0x08019a34
 80172b8:	08019a48 	.word	0x08019a48
 80172bc:	24005e54 	.word	0x24005e54
 80172c0:	08019a68 	.word	0x08019a68

080172c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b08a      	sub	sp, #40	; 0x28
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
 80172cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80172ce:	2300      	movs	r3, #0
 80172d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80172d2:	2300      	movs	r3, #0
 80172d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80172d6:	2300      	movs	r3, #0
 80172d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80172da:	2300      	movs	r3, #0
 80172dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80172de:	2300      	movs	r3, #0
 80172e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80172e2:	4b28      	ldr	r3, [pc, #160]	; (8017384 <ip_reass_remove_oldest_datagram+0xc0>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80172e8:	e030      	b.n	801734c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80172ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ec:	695a      	ldr	r2, [r3, #20]
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	68db      	ldr	r3, [r3, #12]
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d10c      	bne.n	8017310 <ip_reass_remove_oldest_datagram+0x4c>
 80172f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f8:	699a      	ldr	r2, [r3, #24]
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	691b      	ldr	r3, [r3, #16]
 80172fe:	429a      	cmp	r2, r3
 8017300:	d106      	bne.n	8017310 <ip_reass_remove_oldest_datagram+0x4c>
 8017302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017304:	899a      	ldrh	r2, [r3, #12]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	889b      	ldrh	r3, [r3, #4]
 801730a:	b29b      	uxth	r3, r3
 801730c:	429a      	cmp	r2, r3
 801730e:	d014      	beq.n	801733a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017310:	693b      	ldr	r3, [r7, #16]
 8017312:	3301      	adds	r3, #1
 8017314:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017316:	6a3b      	ldr	r3, [r7, #32]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d104      	bne.n	8017326 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801731e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017320:	69fb      	ldr	r3, [r7, #28]
 8017322:	61bb      	str	r3, [r7, #24]
 8017324:	e009      	b.n	801733a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017328:	7fda      	ldrb	r2, [r3, #31]
 801732a:	6a3b      	ldr	r3, [r7, #32]
 801732c:	7fdb      	ldrb	r3, [r3, #31]
 801732e:	429a      	cmp	r2, r3
 8017330:	d803      	bhi.n	801733a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017334:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017336:	69fb      	ldr	r3, [r7, #28]
 8017338:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d001      	beq.n	8017346 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017344:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734e:	2b00      	cmp	r3, #0
 8017350:	d1cb      	bne.n	80172ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017352:	6a3b      	ldr	r3, [r7, #32]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d008      	beq.n	801736a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017358:	69b9      	ldr	r1, [r7, #24]
 801735a:	6a38      	ldr	r0, [r7, #32]
 801735c:	f7ff ff0e 	bl	801717c <ip_reass_free_complete_datagram>
 8017360:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017362:	697a      	ldr	r2, [r7, #20]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	4413      	add	r3, r2
 8017368:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801736a:	697a      	ldr	r2, [r7, #20]
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	429a      	cmp	r2, r3
 8017370:	da02      	bge.n	8017378 <ip_reass_remove_oldest_datagram+0xb4>
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	2b01      	cmp	r3, #1
 8017376:	dcac      	bgt.n	80172d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017378:	697b      	ldr	r3, [r7, #20]
}
 801737a:	4618      	mov	r0, r3
 801737c:	3728      	adds	r7, #40	; 0x28
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}
 8017382:	bf00      	nop
 8017384:	24005e50 	.word	0x24005e50

08017388 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b084      	sub	sp, #16
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
 8017390:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017392:	2002      	movs	r0, #2
 8017394:	f7fc fada 	bl	801394c <memp_malloc>
 8017398:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d110      	bne.n	80173c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80173a0:	6839      	ldr	r1, [r7, #0]
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f7ff ff8e 	bl	80172c4 <ip_reass_remove_oldest_datagram>
 80173a8:	4602      	mov	r2, r0
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	4293      	cmp	r3, r2
 80173ae:	dc03      	bgt.n	80173b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80173b0:	2002      	movs	r0, #2
 80173b2:	f7fc facb 	bl	801394c <memp_malloc>
 80173b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d101      	bne.n	80173c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80173be:	2300      	movs	r3, #0
 80173c0:	e016      	b.n	80173f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80173c2:	2220      	movs	r2, #32
 80173c4:	2100      	movs	r1, #0
 80173c6:	68f8      	ldr	r0, [r7, #12]
 80173c8:	f7e9 f904 	bl	80005d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	220f      	movs	r2, #15
 80173d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80173d2:	4b09      	ldr	r3, [pc, #36]	; (80173f8 <ip_reass_enqueue_new_datagram+0x70>)
 80173d4:	681a      	ldr	r2, [r3, #0]
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80173da:	4a07      	ldr	r2, [pc, #28]	; (80173f8 <ip_reass_enqueue_new_datagram+0x70>)
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	3308      	adds	r3, #8
 80173e4:	2214      	movs	r2, #20
 80173e6:	6879      	ldr	r1, [r7, #4]
 80173e8:	4618      	mov	r0, r3
 80173ea:	f7e8 fff1 	bl	80003d0 <memcpy>
  return ipr;
 80173ee:	68fb      	ldr	r3, [r7, #12]
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	3710      	adds	r7, #16
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	24005e50 	.word	0x24005e50

080173fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b082      	sub	sp, #8
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
 8017404:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017406:	4b10      	ldr	r3, [pc, #64]	; (8017448 <ip_reass_dequeue_datagram+0x4c>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	687a      	ldr	r2, [r7, #4]
 801740c:	429a      	cmp	r2, r3
 801740e:	d104      	bne.n	801741a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	4a0c      	ldr	r2, [pc, #48]	; (8017448 <ip_reass_dequeue_datagram+0x4c>)
 8017416:	6013      	str	r3, [r2, #0]
 8017418:	e00d      	b.n	8017436 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d106      	bne.n	801742e <ip_reass_dequeue_datagram+0x32>
 8017420:	4b0a      	ldr	r3, [pc, #40]	; (801744c <ip_reass_dequeue_datagram+0x50>)
 8017422:	f240 1245 	movw	r2, #325	; 0x145
 8017426:	490a      	ldr	r1, [pc, #40]	; (8017450 <ip_reass_dequeue_datagram+0x54>)
 8017428:	480a      	ldr	r0, [pc, #40]	; (8017454 <ip_reass_dequeue_datagram+0x58>)
 801742a:	f7e9 f93b 	bl	80006a4 <iprintf>
    prev->next = ipr->next;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681a      	ldr	r2, [r3, #0]
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017436:	6879      	ldr	r1, [r7, #4]
 8017438:	2002      	movs	r0, #2
 801743a:	f7fc fafd 	bl	8013a38 <memp_free>
}
 801743e:	bf00      	nop
 8017440:	3708      	adds	r7, #8
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}
 8017446:	bf00      	nop
 8017448:	24005e50 	.word	0x24005e50
 801744c:	080199c4 	.word	0x080199c4
 8017450:	08019a8c 	.word	0x08019a8c
 8017454:	08019a0c 	.word	0x08019a0c

08017458 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b08c      	sub	sp, #48	; 0x30
 801745c:	af00      	add	r7, sp, #0
 801745e:	60f8      	str	r0, [r7, #12]
 8017460:	60b9      	str	r1, [r7, #8]
 8017462:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017464:	2300      	movs	r3, #0
 8017466:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017468:	2301      	movs	r3, #1
 801746a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801746c:	68bb      	ldr	r3, [r7, #8]
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017472:	69fb      	ldr	r3, [r7, #28]
 8017474:	885b      	ldrh	r3, [r3, #2]
 8017476:	b29b      	uxth	r3, r3
 8017478:	4618      	mov	r0, r3
 801747a:	f7fb fce1 	bl	8012e40 <lwip_htons>
 801747e:	4603      	mov	r3, r0
 8017480:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	781b      	ldrb	r3, [r3, #0]
 8017486:	f003 030f 	and.w	r3, r3, #15
 801748a:	b2db      	uxtb	r3, r3
 801748c:	009b      	lsls	r3, r3, #2
 801748e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017490:	7e7b      	ldrb	r3, [r7, #25]
 8017492:	b29b      	uxth	r3, r3
 8017494:	8b7a      	ldrh	r2, [r7, #26]
 8017496:	429a      	cmp	r2, r3
 8017498:	d202      	bcs.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801749a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801749e:	e135      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80174a0:	7e7b      	ldrb	r3, [r7, #25]
 80174a2:	b29b      	uxth	r3, r3
 80174a4:	8b7a      	ldrh	r2, [r7, #26]
 80174a6:	1ad3      	subs	r3, r2, r3
 80174a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80174aa:	69fb      	ldr	r3, [r7, #28]
 80174ac:	88db      	ldrh	r3, [r3, #6]
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7fb fcc5 	bl	8012e40 <lwip_htons>
 80174b6:	4603      	mov	r3, r0
 80174b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174bc:	b29b      	uxth	r3, r3
 80174be:	00db      	lsls	r3, r3, #3
 80174c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	685b      	ldr	r3, [r3, #4]
 80174c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80174c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ca:	2200      	movs	r2, #0
 80174cc:	701a      	strb	r2, [r3, #0]
 80174ce:	2200      	movs	r2, #0
 80174d0:	705a      	strb	r2, [r3, #1]
 80174d2:	2200      	movs	r2, #0
 80174d4:	709a      	strb	r2, [r3, #2]
 80174d6:	2200      	movs	r2, #0
 80174d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80174da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174dc:	8afa      	ldrh	r2, [r7, #22]
 80174de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80174e0:	8afa      	ldrh	r2, [r7, #22]
 80174e2:	8b7b      	ldrh	r3, [r7, #26]
 80174e4:	4413      	add	r3, r2
 80174e6:	b29a      	uxth	r2, r3
 80174e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80174ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ee:	88db      	ldrh	r3, [r3, #6]
 80174f0:	b29b      	uxth	r3, r3
 80174f2:	8afa      	ldrh	r2, [r7, #22]
 80174f4:	429a      	cmp	r2, r3
 80174f6:	d902      	bls.n	80174fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80174fc:	e106      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	685b      	ldr	r3, [r3, #4]
 8017502:	627b      	str	r3, [r7, #36]	; 0x24
 8017504:	e068      	b.n	80175d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017508:	685b      	ldr	r3, [r3, #4]
 801750a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801750e:	889b      	ldrh	r3, [r3, #4]
 8017510:	b29a      	uxth	r2, r3
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	889b      	ldrh	r3, [r3, #4]
 8017516:	b29b      	uxth	r3, r3
 8017518:	429a      	cmp	r2, r3
 801751a:	d235      	bcs.n	8017588 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017520:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017524:	2b00      	cmp	r3, #0
 8017526:	d020      	beq.n	801756a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752a:	889b      	ldrh	r3, [r3, #4]
 801752c:	b29a      	uxth	r2, r3
 801752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017530:	88db      	ldrh	r3, [r3, #6]
 8017532:	b29b      	uxth	r3, r3
 8017534:	429a      	cmp	r2, r3
 8017536:	d307      	bcc.n	8017548 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753a:	88db      	ldrh	r3, [r3, #6]
 801753c:	b29a      	uxth	r2, r3
 801753e:	693b      	ldr	r3, [r7, #16]
 8017540:	889b      	ldrh	r3, [r3, #4]
 8017542:	b29b      	uxth	r3, r3
 8017544:	429a      	cmp	r2, r3
 8017546:	d902      	bls.n	801754e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801754c:	e0de      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017550:	68ba      	ldr	r2, [r7, #8]
 8017552:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017556:	88db      	ldrh	r3, [r3, #6]
 8017558:	b29a      	uxth	r2, r3
 801755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801755c:	889b      	ldrh	r3, [r3, #4]
 801755e:	b29b      	uxth	r3, r3
 8017560:	429a      	cmp	r2, r3
 8017562:	d03d      	beq.n	80175e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017564:	2300      	movs	r3, #0
 8017566:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017568:	e03a      	b.n	80175e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801756c:	88db      	ldrh	r3, [r3, #6]
 801756e:	b29a      	uxth	r2, r3
 8017570:	693b      	ldr	r3, [r7, #16]
 8017572:	889b      	ldrh	r3, [r3, #4]
 8017574:	b29b      	uxth	r3, r3
 8017576:	429a      	cmp	r2, r3
 8017578:	d902      	bls.n	8017580 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801757a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801757e:	e0c5      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	68ba      	ldr	r2, [r7, #8]
 8017584:	605a      	str	r2, [r3, #4]
      break;
 8017586:	e02b      	b.n	80175e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801758a:	889b      	ldrh	r3, [r3, #4]
 801758c:	b29a      	uxth	r2, r3
 801758e:	693b      	ldr	r3, [r7, #16]
 8017590:	889b      	ldrh	r3, [r3, #4]
 8017592:	b29b      	uxth	r3, r3
 8017594:	429a      	cmp	r2, r3
 8017596:	d102      	bne.n	801759e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801759c:	e0b6      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a0:	889b      	ldrh	r3, [r3, #4]
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	693b      	ldr	r3, [r7, #16]
 80175a6:	88db      	ldrh	r3, [r3, #6]
 80175a8:	b29b      	uxth	r3, r3
 80175aa:	429a      	cmp	r2, r3
 80175ac:	d202      	bcs.n	80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80175b2:	e0ab      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80175b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d009      	beq.n	80175ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80175ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175bc:	88db      	ldrh	r3, [r3, #6]
 80175be:	b29a      	uxth	r2, r3
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	889b      	ldrh	r3, [r3, #4]
 80175c4:	b29b      	uxth	r3, r3
 80175c6:	429a      	cmp	r2, r3
 80175c8:	d001      	beq.n	80175ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80175ca:	2300      	movs	r3, #0
 80175cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80175d4:	693b      	ldr	r3, [r7, #16]
 80175d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80175d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d193      	bne.n	8017506 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80175de:	e000      	b.n	80175e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80175e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80175e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d12d      	bne.n	8017644 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80175e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d01c      	beq.n	8017628 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80175ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f0:	88db      	ldrh	r3, [r3, #6]
 80175f2:	b29a      	uxth	r2, r3
 80175f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f6:	889b      	ldrh	r3, [r3, #4]
 80175f8:	b29b      	uxth	r3, r3
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d906      	bls.n	801760c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80175fe:	4b45      	ldr	r3, [pc, #276]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017600:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017604:	4944      	ldr	r1, [pc, #272]	; (8017718 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017606:	4845      	ldr	r0, [pc, #276]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017608:	f7e9 f84c 	bl	80006a4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801760e:	68ba      	ldr	r2, [r7, #8]
 8017610:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017614:	88db      	ldrh	r3, [r3, #6]
 8017616:	b29a      	uxth	r2, r3
 8017618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801761a:	889b      	ldrh	r3, [r3, #4]
 801761c:	b29b      	uxth	r3, r3
 801761e:	429a      	cmp	r2, r3
 8017620:	d010      	beq.n	8017644 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017622:	2300      	movs	r3, #0
 8017624:	623b      	str	r3, [r7, #32]
 8017626:	e00d      	b.n	8017644 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	685b      	ldr	r3, [r3, #4]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d006      	beq.n	801763e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017630:	4b38      	ldr	r3, [pc, #224]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017632:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017636:	493a      	ldr	r1, [pc, #232]	; (8017720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017638:	4838      	ldr	r0, [pc, #224]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801763a:	f7e9 f833 	bl	80006a4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	68ba      	ldr	r2, [r7, #8]
 8017642:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d105      	bne.n	8017656 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	7f9b      	ldrb	r3, [r3, #30]
 801764e:	f003 0301 	and.w	r3, r3, #1
 8017652:	2b00      	cmp	r3, #0
 8017654:	d059      	beq.n	801770a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017656:	6a3b      	ldr	r3, [r7, #32]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d04f      	beq.n	80176fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	685b      	ldr	r3, [r3, #4]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d006      	beq.n	8017672 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	685b      	ldr	r3, [r3, #4]
 8017668:	685b      	ldr	r3, [r3, #4]
 801766a:	889b      	ldrh	r3, [r3, #4]
 801766c:	b29b      	uxth	r3, r3
 801766e:	2b00      	cmp	r3, #0
 8017670:	d002      	beq.n	8017678 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017672:	2300      	movs	r3, #0
 8017674:	623b      	str	r3, [r7, #32]
 8017676:	e041      	b.n	80176fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801767a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017682:	e012      	b.n	80176aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017686:	685b      	ldr	r3, [r3, #4]
 8017688:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768c:	88db      	ldrh	r3, [r3, #6]
 801768e:	b29a      	uxth	r2, r3
 8017690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017692:	889b      	ldrh	r3, [r3, #4]
 8017694:	b29b      	uxth	r3, r3
 8017696:	429a      	cmp	r2, r3
 8017698:	d002      	beq.n	80176a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801769a:	2300      	movs	r3, #0
 801769c:	623b      	str	r3, [r7, #32]
            break;
 801769e:	e007      	b.n	80176b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80176a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80176a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80176aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d1e9      	bne.n	8017684 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80176b0:	6a3b      	ldr	r3, [r7, #32]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d022      	beq.n	80176fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	685b      	ldr	r3, [r3, #4]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d106      	bne.n	80176cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80176be:	4b15      	ldr	r3, [pc, #84]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80176c0:	f240 12df 	movw	r2, #479	; 0x1df
 80176c4:	4917      	ldr	r1, [pc, #92]	; (8017724 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80176c6:	4815      	ldr	r0, [pc, #84]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80176c8:	f7e8 ffec 	bl	80006a4 <iprintf>
          LWIP_ASSERT("sanity check",
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	685b      	ldr	r3, [r3, #4]
 80176d0:	685b      	ldr	r3, [r3, #4]
 80176d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d106      	bne.n	80176e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80176d8:	4b0e      	ldr	r3, [pc, #56]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80176da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80176de:	4911      	ldr	r1, [pc, #68]	; (8017724 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80176e0:	480e      	ldr	r0, [pc, #56]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80176e2:	f7e8 ffdf 	bl	80006a4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80176e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d006      	beq.n	80176fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80176ee:	4b09      	ldr	r3, [pc, #36]	; (8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80176f0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80176f4:	490c      	ldr	r1, [pc, #48]	; (8017728 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80176f6:	4809      	ldr	r0, [pc, #36]	; (801771c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80176f8:	f7e8 ffd4 	bl	80006a4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80176fc:	6a3b      	ldr	r3, [r7, #32]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	bf14      	ite	ne
 8017702:	2301      	movne	r3, #1
 8017704:	2300      	moveq	r3, #0
 8017706:	b2db      	uxtb	r3, r3
 8017708:	e000      	b.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801770a:	2300      	movs	r3, #0
}
 801770c:	4618      	mov	r0, r3
 801770e:	3730      	adds	r7, #48	; 0x30
 8017710:	46bd      	mov	sp, r7
 8017712:	bd80      	pop	{r7, pc}
 8017714:	080199c4 	.word	0x080199c4
 8017718:	08019aa8 	.word	0x08019aa8
 801771c:	08019a0c 	.word	0x08019a0c
 8017720:	08019ac8 	.word	0x08019ac8
 8017724:	08019b00 	.word	0x08019b00
 8017728:	08019b10 	.word	0x08019b10

0801772c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b08e      	sub	sp, #56	; 0x38
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	685b      	ldr	r3, [r3, #4]
 8017738:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801773c:	781b      	ldrb	r3, [r3, #0]
 801773e:	f003 030f 	and.w	r3, r3, #15
 8017742:	b2db      	uxtb	r3, r3
 8017744:	009b      	lsls	r3, r3, #2
 8017746:	b2db      	uxtb	r3, r3
 8017748:	2b14      	cmp	r3, #20
 801774a:	f040 8167 	bne.w	8017a1c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017750:	88db      	ldrh	r3, [r3, #6]
 8017752:	b29b      	uxth	r3, r3
 8017754:	4618      	mov	r0, r3
 8017756:	f7fb fb73 	bl	8012e40 <lwip_htons>
 801775a:	4603      	mov	r3, r0
 801775c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017760:	b29b      	uxth	r3, r3
 8017762:	00db      	lsls	r3, r3, #3
 8017764:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017768:	885b      	ldrh	r3, [r3, #2]
 801776a:	b29b      	uxth	r3, r3
 801776c:	4618      	mov	r0, r3
 801776e:	f7fb fb67 	bl	8012e40 <lwip_htons>
 8017772:	4603      	mov	r3, r0
 8017774:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	f003 030f 	and.w	r3, r3, #15
 801777e:	b2db      	uxtb	r3, r3
 8017780:	009b      	lsls	r3, r3, #2
 8017782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801778a:	b29b      	uxth	r3, r3
 801778c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801778e:	429a      	cmp	r2, r3
 8017790:	f0c0 8146 	bcc.w	8017a20 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017798:	b29b      	uxth	r3, r3
 801779a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801779c:	1ad3      	subs	r3, r2, r3
 801779e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80177a0:	6878      	ldr	r0, [r7, #4]
 80177a2:	f7fd f817 	bl	80147d4 <pbuf_clen>
 80177a6:	4603      	mov	r3, r0
 80177a8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80177aa:	4b9f      	ldr	r3, [pc, #636]	; (8017a28 <ip4_reass+0x2fc>)
 80177ac:	881b      	ldrh	r3, [r3, #0]
 80177ae:	461a      	mov	r2, r3
 80177b0:	8c3b      	ldrh	r3, [r7, #32]
 80177b2:	4413      	add	r3, r2
 80177b4:	2b0a      	cmp	r3, #10
 80177b6:	dd10      	ble.n	80177da <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80177b8:	8c3b      	ldrh	r3, [r7, #32]
 80177ba:	4619      	mov	r1, r3
 80177bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80177be:	f7ff fd81 	bl	80172c4 <ip_reass_remove_oldest_datagram>
 80177c2:	4603      	mov	r3, r0
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	f000 812d 	beq.w	8017a24 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80177ca:	4b97      	ldr	r3, [pc, #604]	; (8017a28 <ip4_reass+0x2fc>)
 80177cc:	881b      	ldrh	r3, [r3, #0]
 80177ce:	461a      	mov	r2, r3
 80177d0:	8c3b      	ldrh	r3, [r7, #32]
 80177d2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80177d4:	2b0a      	cmp	r3, #10
 80177d6:	f300 8125 	bgt.w	8017a24 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80177da:	4b94      	ldr	r3, [pc, #592]	; (8017a2c <ip4_reass+0x300>)
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	633b      	str	r3, [r7, #48]	; 0x30
 80177e0:	e015      	b.n	801780e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80177e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177e4:	695a      	ldr	r2, [r3, #20]
 80177e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177e8:	68db      	ldr	r3, [r3, #12]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d10c      	bne.n	8017808 <ip4_reass+0xdc>
 80177ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f0:	699a      	ldr	r2, [r3, #24]
 80177f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f4:	691b      	ldr	r3, [r3, #16]
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d106      	bne.n	8017808 <ip4_reass+0xdc>
 80177fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177fc:	899a      	ldrh	r2, [r3, #12]
 80177fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017800:	889b      	ldrh	r3, [r3, #4]
 8017802:	b29b      	uxth	r3, r3
 8017804:	429a      	cmp	r2, r3
 8017806:	d006      	beq.n	8017816 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	633b      	str	r3, [r7, #48]	; 0x30
 801780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017810:	2b00      	cmp	r3, #0
 8017812:	d1e6      	bne.n	80177e2 <ip4_reass+0xb6>
 8017814:	e000      	b.n	8017818 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017816:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801781a:	2b00      	cmp	r3, #0
 801781c:	d109      	bne.n	8017832 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801781e:	8c3b      	ldrh	r3, [r7, #32]
 8017820:	4619      	mov	r1, r3
 8017822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017824:	f7ff fdb0 	bl	8017388 <ip_reass_enqueue_new_datagram>
 8017828:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801782c:	2b00      	cmp	r3, #0
 801782e:	d11c      	bne.n	801786a <ip4_reass+0x13e>
      goto nullreturn;
 8017830:	e109      	b.n	8017a46 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017834:	88db      	ldrh	r3, [r3, #6]
 8017836:	b29b      	uxth	r3, r3
 8017838:	4618      	mov	r0, r3
 801783a:	f7fb fb01 	bl	8012e40 <lwip_htons>
 801783e:	4603      	mov	r3, r0
 8017840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017844:	2b00      	cmp	r3, #0
 8017846:	d110      	bne.n	801786a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801784a:	89db      	ldrh	r3, [r3, #14]
 801784c:	4618      	mov	r0, r3
 801784e:	f7fb faf7 	bl	8012e40 <lwip_htons>
 8017852:	4603      	mov	r3, r0
 8017854:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017858:	2b00      	cmp	r3, #0
 801785a:	d006      	beq.n	801786a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801785e:	3308      	adds	r3, #8
 8017860:	2214      	movs	r2, #20
 8017862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017864:	4618      	mov	r0, r3
 8017866:	f7e8 fdb3 	bl	80003d0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801786c:	88db      	ldrh	r3, [r3, #6]
 801786e:	b29b      	uxth	r3, r3
 8017870:	f003 0320 	and.w	r3, r3, #32
 8017874:	2b00      	cmp	r3, #0
 8017876:	bf0c      	ite	eq
 8017878:	2301      	moveq	r3, #1
 801787a:	2300      	movne	r3, #0
 801787c:	b2db      	uxtb	r3, r3
 801787e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017880:	69fb      	ldr	r3, [r7, #28]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d00e      	beq.n	80178a4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017886:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801788a:	4413      	add	r3, r2
 801788c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801788e:	8b7a      	ldrh	r2, [r7, #26]
 8017890:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017892:	429a      	cmp	r2, r3
 8017894:	f0c0 80a0 	bcc.w	80179d8 <ip4_reass+0x2ac>
 8017898:	8b7b      	ldrh	r3, [r7, #26]
 801789a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801789e:	4293      	cmp	r3, r2
 80178a0:	f200 809a 	bhi.w	80179d8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80178a4:	69fa      	ldr	r2, [r7, #28]
 80178a6:	6879      	ldr	r1, [r7, #4]
 80178a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178aa:	f7ff fdd5 	bl	8017458 <ip_reass_chain_frag_into_datagram_and_validate>
 80178ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80178b0:	697b      	ldr	r3, [r7, #20]
 80178b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80178b6:	f000 8091 	beq.w	80179dc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80178ba:	4b5b      	ldr	r3, [pc, #364]	; (8017a28 <ip4_reass+0x2fc>)
 80178bc:	881a      	ldrh	r2, [r3, #0]
 80178be:	8c3b      	ldrh	r3, [r7, #32]
 80178c0:	4413      	add	r3, r2
 80178c2:	b29a      	uxth	r2, r3
 80178c4:	4b58      	ldr	r3, [pc, #352]	; (8017a28 <ip4_reass+0x2fc>)
 80178c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80178c8:	69fb      	ldr	r3, [r7, #28]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d00d      	beq.n	80178ea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80178ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80178d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178d2:	4413      	add	r3, r2
 80178d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80178d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d8:	8a7a      	ldrh	r2, [r7, #18]
 80178da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80178dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178de:	7f9b      	ldrb	r3, [r3, #30]
 80178e0:	f043 0301 	orr.w	r3, r3, #1
 80178e4:	b2da      	uxtb	r2, r3
 80178e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80178ea:	697b      	ldr	r3, [r7, #20]
 80178ec:	2b01      	cmp	r3, #1
 80178ee:	d171      	bne.n	80179d4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80178f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f2:	8b9b      	ldrh	r3, [r3, #28]
 80178f4:	3314      	adds	r3, #20
 80178f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80178f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178fa:	685b      	ldr	r3, [r3, #4]
 80178fc:	685b      	ldr	r3, [r3, #4]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017904:	685b      	ldr	r3, [r3, #4]
 8017906:	685b      	ldr	r3, [r3, #4]
 8017908:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801790c:	3308      	adds	r3, #8
 801790e:	2214      	movs	r2, #20
 8017910:	4619      	mov	r1, r3
 8017912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017914:	f7e8 fd5c 	bl	80003d0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017918:	8a3b      	ldrh	r3, [r7, #16]
 801791a:	4618      	mov	r0, r3
 801791c:	f7fb fa90 	bl	8012e40 <lwip_htons>
 8017920:	4603      	mov	r3, r0
 8017922:	461a      	mov	r2, r3
 8017924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017926:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801792a:	2200      	movs	r2, #0
 801792c:	719a      	strb	r2, [r3, #6]
 801792e:	2200      	movs	r2, #0
 8017930:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017934:	2200      	movs	r2, #0
 8017936:	729a      	strb	r2, [r3, #10]
 8017938:	2200      	movs	r2, #0
 801793a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793e:	685b      	ldr	r3, [r3, #4]
 8017940:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017942:	e00d      	b.n	8017960 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017946:	685b      	ldr	r3, [r3, #4]
 8017948:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801794a:	2114      	movs	r1, #20
 801794c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801794e:	f7fc fe2d 	bl	80145ac <pbuf_remove_header>
      pbuf_cat(p, r);
 8017952:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	f7fc ff7d 	bl	8014854 <pbuf_cat>
      r = iprh->next_pbuf;
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017962:	2b00      	cmp	r3, #0
 8017964:	d1ee      	bne.n	8017944 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017966:	4b31      	ldr	r3, [pc, #196]	; (8017a2c <ip4_reass+0x300>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801796c:	429a      	cmp	r2, r3
 801796e:	d102      	bne.n	8017976 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017970:	2300      	movs	r3, #0
 8017972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017974:	e010      	b.n	8017998 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017976:	4b2d      	ldr	r3, [pc, #180]	; (8017a2c <ip4_reass+0x300>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801797c:	e007      	b.n	801798e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017984:	429a      	cmp	r2, r3
 8017986:	d006      	beq.n	8017996 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017990:	2b00      	cmp	r3, #0
 8017992:	d1f4      	bne.n	801797e <ip4_reass+0x252>
 8017994:	e000      	b.n	8017998 <ip4_reass+0x26c>
          break;
 8017996:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017998:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801799a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801799c:	f7ff fd2e 	bl	80173fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	f7fc ff17 	bl	80147d4 <pbuf_clen>
 80179a6:	4603      	mov	r3, r0
 80179a8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80179aa:	4b1f      	ldr	r3, [pc, #124]	; (8017a28 <ip4_reass+0x2fc>)
 80179ac:	881b      	ldrh	r3, [r3, #0]
 80179ae:	8c3a      	ldrh	r2, [r7, #32]
 80179b0:	429a      	cmp	r2, r3
 80179b2:	d906      	bls.n	80179c2 <ip4_reass+0x296>
 80179b4:	4b1e      	ldr	r3, [pc, #120]	; (8017a30 <ip4_reass+0x304>)
 80179b6:	f240 229b 	movw	r2, #667	; 0x29b
 80179ba:	491e      	ldr	r1, [pc, #120]	; (8017a34 <ip4_reass+0x308>)
 80179bc:	481e      	ldr	r0, [pc, #120]	; (8017a38 <ip4_reass+0x30c>)
 80179be:	f7e8 fe71 	bl	80006a4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80179c2:	4b19      	ldr	r3, [pc, #100]	; (8017a28 <ip4_reass+0x2fc>)
 80179c4:	881a      	ldrh	r2, [r3, #0]
 80179c6:	8c3b      	ldrh	r3, [r7, #32]
 80179c8:	1ad3      	subs	r3, r2, r3
 80179ca:	b29a      	uxth	r2, r3
 80179cc:	4b16      	ldr	r3, [pc, #88]	; (8017a28 <ip4_reass+0x2fc>)
 80179ce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	e03c      	b.n	8017a4e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80179d4:	2300      	movs	r3, #0
 80179d6:	e03a      	b.n	8017a4e <ip4_reass+0x322>
      goto nullreturn_ipr;
 80179d8:	bf00      	nop
 80179da:	e000      	b.n	80179de <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80179dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80179de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d106      	bne.n	80179f2 <ip4_reass+0x2c6>
 80179e4:	4b12      	ldr	r3, [pc, #72]	; (8017a30 <ip4_reass+0x304>)
 80179e6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80179ea:	4914      	ldr	r1, [pc, #80]	; (8017a3c <ip4_reass+0x310>)
 80179ec:	4812      	ldr	r0, [pc, #72]	; (8017a38 <ip4_reass+0x30c>)
 80179ee:	f7e8 fe59 	bl	80006a4 <iprintf>
  if (ipr->p == NULL) {
 80179f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f4:	685b      	ldr	r3, [r3, #4]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d124      	bne.n	8017a44 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80179fa:	4b0c      	ldr	r3, [pc, #48]	; (8017a2c <ip4_reass+0x300>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a00:	429a      	cmp	r2, r3
 8017a02:	d006      	beq.n	8017a12 <ip4_reass+0x2e6>
 8017a04:	4b0a      	ldr	r3, [pc, #40]	; (8017a30 <ip4_reass+0x304>)
 8017a06:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017a0a:	490d      	ldr	r1, [pc, #52]	; (8017a40 <ip4_reass+0x314>)
 8017a0c:	480a      	ldr	r0, [pc, #40]	; (8017a38 <ip4_reass+0x30c>)
 8017a0e:	f7e8 fe49 	bl	80006a4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017a12:	2100      	movs	r1, #0
 8017a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a16:	f7ff fcf1 	bl	80173fc <ip_reass_dequeue_datagram>
 8017a1a:	e014      	b.n	8017a46 <ip4_reass+0x31a>
    goto nullreturn;
 8017a1c:	bf00      	nop
 8017a1e:	e012      	b.n	8017a46 <ip4_reass+0x31a>
    goto nullreturn;
 8017a20:	bf00      	nop
 8017a22:	e010      	b.n	8017a46 <ip4_reass+0x31a>
      goto nullreturn;
 8017a24:	bf00      	nop
 8017a26:	e00e      	b.n	8017a46 <ip4_reass+0x31a>
 8017a28:	24005e54 	.word	0x24005e54
 8017a2c:	24005e50 	.word	0x24005e50
 8017a30:	080199c4 	.word	0x080199c4
 8017a34:	08019b34 	.word	0x08019b34
 8017a38:	08019a0c 	.word	0x08019a0c
 8017a3c:	08019b50 	.word	0x08019b50
 8017a40:	08019b5c 	.word	0x08019b5c
  }

nullreturn:
 8017a44:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	f7fc fe36 	bl	80146b8 <pbuf_free>
  return NULL;
 8017a4c:	2300      	movs	r3, #0
}
 8017a4e:	4618      	mov	r0, r3
 8017a50:	3738      	adds	r7, #56	; 0x38
 8017a52:	46bd      	mov	sp, r7
 8017a54:	bd80      	pop	{r7, pc}
 8017a56:	bf00      	nop

08017a58 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017a5c:	2003      	movs	r0, #3
 8017a5e:	f7fb ff75 	bl	801394c <memp_malloc>
 8017a62:	4603      	mov	r3, r0
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	bd80      	pop	{r7, pc}

08017a68 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b082      	sub	sp, #8
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d106      	bne.n	8017a84 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017a76:	4b07      	ldr	r3, [pc, #28]	; (8017a94 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017a78:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017a7c:	4906      	ldr	r1, [pc, #24]	; (8017a98 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017a7e:	4807      	ldr	r0, [pc, #28]	; (8017a9c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017a80:	f7e8 fe10 	bl	80006a4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017a84:	6879      	ldr	r1, [r7, #4]
 8017a86:	2003      	movs	r0, #3
 8017a88:	f7fb ffd6 	bl	8013a38 <memp_free>
}
 8017a8c:	bf00      	nop
 8017a8e:	3708      	adds	r7, #8
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}
 8017a94:	080199c4 	.word	0x080199c4
 8017a98:	08019b7c 	.word	0x08019b7c
 8017a9c:	08019a0c 	.word	0x08019a0c

08017aa0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b084      	sub	sp, #16
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d106      	bne.n	8017ac0 <ipfrag_free_pbuf_custom+0x20>
 8017ab2:	4b11      	ldr	r3, [pc, #68]	; (8017af8 <ipfrag_free_pbuf_custom+0x58>)
 8017ab4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017ab8:	4910      	ldr	r1, [pc, #64]	; (8017afc <ipfrag_free_pbuf_custom+0x5c>)
 8017aba:	4811      	ldr	r0, [pc, #68]	; (8017b00 <ipfrag_free_pbuf_custom+0x60>)
 8017abc:	f7e8 fdf2 	bl	80006a4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017ac0:	68fa      	ldr	r2, [r7, #12]
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	429a      	cmp	r2, r3
 8017ac6:	d006      	beq.n	8017ad6 <ipfrag_free_pbuf_custom+0x36>
 8017ac8:	4b0b      	ldr	r3, [pc, #44]	; (8017af8 <ipfrag_free_pbuf_custom+0x58>)
 8017aca:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017ace:	490d      	ldr	r1, [pc, #52]	; (8017b04 <ipfrag_free_pbuf_custom+0x64>)
 8017ad0:	480b      	ldr	r0, [pc, #44]	; (8017b00 <ipfrag_free_pbuf_custom+0x60>)
 8017ad2:	f7e8 fde7 	bl	80006a4 <iprintf>
  if (pcr->original != NULL) {
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	695b      	ldr	r3, [r3, #20]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d004      	beq.n	8017ae8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	695b      	ldr	r3, [r3, #20]
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f7fc fde8 	bl	80146b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017ae8:	68f8      	ldr	r0, [r7, #12]
 8017aea:	f7ff ffbd 	bl	8017a68 <ip_frag_free_pbuf_custom_ref>
}
 8017aee:	bf00      	nop
 8017af0:	3710      	adds	r7, #16
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop
 8017af8:	080199c4 	.word	0x080199c4
 8017afc:	08019b88 	.word	0x08019b88
 8017b00:	08019a0c 	.word	0x08019a0c
 8017b04:	08019b94 	.word	0x08019b94

08017b08 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b094      	sub	sp, #80	; 0x50
 8017b0c:	af02      	add	r7, sp, #8
 8017b0e:	60f8      	str	r0, [r7, #12]
 8017b10:	60b9      	str	r1, [r7, #8]
 8017b12:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017b14:	2300      	movs	r3, #0
 8017b16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017b1a:	68bb      	ldr	r3, [r7, #8]
 8017b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b1e:	3b14      	subs	r3, #20
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	da00      	bge.n	8017b26 <ip4_frag+0x1e>
 8017b24:	3307      	adds	r3, #7
 8017b26:	10db      	asrs	r3, r3, #3
 8017b28:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017b2a:	2314      	movs	r3, #20
 8017b2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	685b      	ldr	r3, [r3, #4]
 8017b32:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b36:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	f003 030f 	and.w	r3, r3, #15
 8017b40:	b2db      	uxtb	r3, r3
 8017b42:	009b      	lsls	r3, r3, #2
 8017b44:	b2db      	uxtb	r3, r3
 8017b46:	2b14      	cmp	r3, #20
 8017b48:	d002      	beq.n	8017b50 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017b4a:	f06f 0305 	mvn.w	r3, #5
 8017b4e:	e110      	b.n	8017d72 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	895b      	ldrh	r3, [r3, #10]
 8017b54:	2b13      	cmp	r3, #19
 8017b56:	d809      	bhi.n	8017b6c <ip4_frag+0x64>
 8017b58:	4b88      	ldr	r3, [pc, #544]	; (8017d7c <ip4_frag+0x274>)
 8017b5a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017b5e:	4988      	ldr	r1, [pc, #544]	; (8017d80 <ip4_frag+0x278>)
 8017b60:	4888      	ldr	r0, [pc, #544]	; (8017d84 <ip4_frag+0x27c>)
 8017b62:	f7e8 fd9f 	bl	80006a4 <iprintf>
 8017b66:	f06f 0305 	mvn.w	r3, #5
 8017b6a:	e102      	b.n	8017d72 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b6e:	88db      	ldrh	r3, [r3, #6]
 8017b70:	b29b      	uxth	r3, r3
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7fb f964 	bl	8012e40 <lwip_htons>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017b7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017b86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	891b      	ldrh	r3, [r3, #8]
 8017b92:	3b14      	subs	r3, #20
 8017b94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017b98:	e0e1      	b.n	8017d5e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017b9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b9c:	00db      	lsls	r3, r3, #3
 8017b9e:	b29b      	uxth	r3, r3
 8017ba0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ba4:	4293      	cmp	r3, r2
 8017ba6:	bf28      	it	cs
 8017ba8:	4613      	movcs	r3, r2
 8017baa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017bac:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017bb0:	2114      	movs	r1, #20
 8017bb2:	200e      	movs	r0, #14
 8017bb4:	f7fc fa9e 	bl	80140f4 <pbuf_alloc>
 8017bb8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	f000 80d5 	beq.w	8017d6c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bc4:	895b      	ldrh	r3, [r3, #10]
 8017bc6:	2b13      	cmp	r3, #19
 8017bc8:	d806      	bhi.n	8017bd8 <ip4_frag+0xd0>
 8017bca:	4b6c      	ldr	r3, [pc, #432]	; (8017d7c <ip4_frag+0x274>)
 8017bcc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017bd0:	496d      	ldr	r1, [pc, #436]	; (8017d88 <ip4_frag+0x280>)
 8017bd2:	486c      	ldr	r0, [pc, #432]	; (8017d84 <ip4_frag+0x27c>)
 8017bd4:	f7e8 fd66 	bl	80006a4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bda:	685b      	ldr	r3, [r3, #4]
 8017bdc:	2214      	movs	r2, #20
 8017bde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017be0:	4618      	mov	r0, r3
 8017be2:	f7e8 fbf5 	bl	80003d0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be8:	685b      	ldr	r3, [r3, #4]
 8017bea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017bec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017bf2:	e064      	b.n	8017cbe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	895a      	ldrh	r2, [r3, #10]
 8017bf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017bfa:	1ad3      	subs	r3, r2, r3
 8017bfc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	895b      	ldrh	r3, [r3, #10]
 8017c02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017c04:	429a      	cmp	r2, r3
 8017c06:	d906      	bls.n	8017c16 <ip4_frag+0x10e>
 8017c08:	4b5c      	ldr	r3, [pc, #368]	; (8017d7c <ip4_frag+0x274>)
 8017c0a:	f240 322d 	movw	r2, #813	; 0x32d
 8017c0e:	495f      	ldr	r1, [pc, #380]	; (8017d8c <ip4_frag+0x284>)
 8017c10:	485c      	ldr	r0, [pc, #368]	; (8017d84 <ip4_frag+0x27c>)
 8017c12:	f7e8 fd47 	bl	80006a4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017c16:	8bfa      	ldrh	r2, [r7, #30]
 8017c18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017c1c:	4293      	cmp	r3, r2
 8017c1e:	bf28      	it	cs
 8017c20:	4613      	movcs	r3, r2
 8017c22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017c26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d105      	bne.n	8017c3a <ip4_frag+0x132>
        poff = 0;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	60fb      	str	r3, [r7, #12]
        continue;
 8017c38:	e041      	b.n	8017cbe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017c3a:	f7ff ff0d 	bl	8017a58 <ip_frag_alloc_pbuf_custom_ref>
 8017c3e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017c40:	69bb      	ldr	r3, [r7, #24]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d103      	bne.n	8017c4e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c48:	f7fc fd36 	bl	80146b8 <pbuf_free>
        goto memerr;
 8017c4c:	e08f      	b.n	8017d6e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017c4e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017c54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c56:	4413      	add	r3, r2
 8017c58:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017c5c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017c60:	9201      	str	r2, [sp, #4]
 8017c62:	9300      	str	r3, [sp, #0]
 8017c64:	4603      	mov	r3, r0
 8017c66:	2241      	movs	r2, #65	; 0x41
 8017c68:	2000      	movs	r0, #0
 8017c6a:	f7fc fb6b 	bl	8014344 <pbuf_alloced_custom>
 8017c6e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017c70:	697b      	ldr	r3, [r7, #20]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d106      	bne.n	8017c84 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017c76:	69b8      	ldr	r0, [r7, #24]
 8017c78:	f7ff fef6 	bl	8017a68 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c7e:	f7fc fd1b 	bl	80146b8 <pbuf_free>
        goto memerr;
 8017c82:	e074      	b.n	8017d6e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017c84:	68f8      	ldr	r0, [r7, #12]
 8017c86:	f7fc fdbd 	bl	8014804 <pbuf_ref>
      pcr->original = p;
 8017c8a:	69bb      	ldr	r3, [r7, #24]
 8017c8c:	68fa      	ldr	r2, [r7, #12]
 8017c8e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017c90:	69bb      	ldr	r3, [r7, #24]
 8017c92:	4a3f      	ldr	r2, [pc, #252]	; (8017d90 <ip4_frag+0x288>)
 8017c94:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017c96:	6979      	ldr	r1, [r7, #20]
 8017c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c9a:	f7fc fddb 	bl	8014854 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017c9e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017ca2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017ca6:	1ad3      	subs	r3, r2, r3
 8017ca8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017cac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d004      	beq.n	8017cbe <ip4_frag+0x1b6>
        poff = 0;
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017cbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d196      	bne.n	8017bf4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017cc6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017cc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017ccc:	4413      	add	r3, r2
 8017cce:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017cd0:	68bb      	ldr	r3, [r7, #8]
 8017cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017cd4:	f1a3 0213 	sub.w	r2, r3, #19
 8017cd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	bfcc      	ite	gt
 8017ce0:	2301      	movgt	r3, #1
 8017ce2:	2300      	movle	r3, #0
 8017ce4:	b2db      	uxtb	r3, r3
 8017ce6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017ce8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017cf0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017cf2:	6a3b      	ldr	r3, [r7, #32]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d002      	beq.n	8017cfe <ip4_frag+0x1f6>
 8017cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d003      	beq.n	8017d06 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017cfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017d04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017d06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7fb f899 	bl	8012e40 <lwip_htons>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	461a      	mov	r2, r3
 8017d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d14:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017d16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017d18:	3314      	adds	r3, #20
 8017d1a:	b29b      	uxth	r3, r3
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7fb f88f 	bl	8012e40 <lwip_htons>
 8017d22:	4603      	mov	r3, r0
 8017d24:	461a      	mov	r2, r3
 8017d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d28:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	729a      	strb	r2, [r3, #10]
 8017d30:	2200      	movs	r2, #0
 8017d32:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017d34:	68bb      	ldr	r3, [r7, #8]
 8017d36:	695b      	ldr	r3, [r3, #20]
 8017d38:	687a      	ldr	r2, [r7, #4]
 8017d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017d3c:	68b8      	ldr	r0, [r7, #8]
 8017d3e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d42:	f7fc fcb9 	bl	80146b8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017d46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017d4c:	1ad3      	subs	r3, r2, r3
 8017d4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017d52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017d56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d58:	4413      	add	r3, r2
 8017d5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017d5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	f47f af19 	bne.w	8017b9a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017d68:	2300      	movs	r3, #0
 8017d6a:	e002      	b.n	8017d72 <ip4_frag+0x26a>
      goto memerr;
 8017d6c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	3748      	adds	r7, #72	; 0x48
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}
 8017d7a:	bf00      	nop
 8017d7c:	080199c4 	.word	0x080199c4
 8017d80:	08019ba0 	.word	0x08019ba0
 8017d84:	08019a0c 	.word	0x08019a0c
 8017d88:	08019bbc 	.word	0x08019bbc
 8017d8c:	08019bdc 	.word	0x08019bdc
 8017d90:	08017aa1 	.word	0x08017aa1

08017d94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b086      	sub	sp, #24
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
 8017d9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017d9e:	230e      	movs	r3, #14
 8017da0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	895b      	ldrh	r3, [r3, #10]
 8017da6:	2b0e      	cmp	r3, #14
 8017da8:	d96e      	bls.n	8017e88 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	7bdb      	ldrb	r3, [r3, #15]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d106      	bne.n	8017dc0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017db2:	683b      	ldr	r3, [r7, #0]
 8017db4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017db8:	3301      	adds	r3, #1
 8017dba:	b2da      	uxtb	r2, r3
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	685b      	ldr	r3, [r3, #4]
 8017dc4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017dc6:	693b      	ldr	r3, [r7, #16]
 8017dc8:	7b1a      	ldrb	r2, [r3, #12]
 8017dca:	7b5b      	ldrb	r3, [r3, #13]
 8017dcc:	021b      	lsls	r3, r3, #8
 8017dce:	4313      	orrs	r3, r2
 8017dd0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017dd2:	693b      	ldr	r3, [r7, #16]
 8017dd4:	781b      	ldrb	r3, [r3, #0]
 8017dd6:	f003 0301 	and.w	r3, r3, #1
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d023      	beq.n	8017e26 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017dde:	693b      	ldr	r3, [r7, #16]
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	2b01      	cmp	r3, #1
 8017de4:	d10f      	bne.n	8017e06 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017de6:	693b      	ldr	r3, [r7, #16]
 8017de8:	785b      	ldrb	r3, [r3, #1]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d11b      	bne.n	8017e26 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017dee:	693b      	ldr	r3, [r7, #16]
 8017df0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017df2:	2b5e      	cmp	r3, #94	; 0x5e
 8017df4:	d117      	bne.n	8017e26 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	7b5b      	ldrb	r3, [r3, #13]
 8017dfa:	f043 0310 	orr.w	r3, r3, #16
 8017dfe:	b2da      	uxtb	r2, r3
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	735a      	strb	r2, [r3, #13]
 8017e04:	e00f      	b.n	8017e26 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017e06:	693b      	ldr	r3, [r7, #16]
 8017e08:	2206      	movs	r2, #6
 8017e0a:	4928      	ldr	r1, [pc, #160]	; (8017eac <ethernet_input+0x118>)
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	f7e8 faaf 	bl	8000370 <memcmp>
 8017e12:	4603      	mov	r3, r0
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d106      	bne.n	8017e26 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	7b5b      	ldrb	r3, [r3, #13]
 8017e1c:	f043 0308 	orr.w	r3, r3, #8
 8017e20:	b2da      	uxtb	r2, r3
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017e26:	89fb      	ldrh	r3, [r7, #14]
 8017e28:	2b08      	cmp	r3, #8
 8017e2a:	d003      	beq.n	8017e34 <ethernet_input+0xa0>
 8017e2c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017e30:	d014      	beq.n	8017e5c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017e32:	e032      	b.n	8017e9a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017e34:	683b      	ldr	r3, [r7, #0]
 8017e36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e3a:	f003 0308 	and.w	r3, r3, #8
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d024      	beq.n	8017e8c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017e42:	8afb      	ldrh	r3, [r7, #22]
 8017e44:	4619      	mov	r1, r3
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f7fc fbb0 	bl	80145ac <pbuf_remove_header>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d11e      	bne.n	8017e90 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017e52:	6839      	ldr	r1, [r7, #0]
 8017e54:	6878      	ldr	r0, [r7, #4]
 8017e56:	f7fe fea9 	bl	8016bac <ip4_input>
      break;
 8017e5a:	e013      	b.n	8017e84 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e62:	f003 0308 	and.w	r3, r3, #8
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d014      	beq.n	8017e94 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017e6a:	8afb      	ldrh	r3, [r7, #22]
 8017e6c:	4619      	mov	r1, r3
 8017e6e:	6878      	ldr	r0, [r7, #4]
 8017e70:	f7fc fb9c 	bl	80145ac <pbuf_remove_header>
 8017e74:	4603      	mov	r3, r0
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d10e      	bne.n	8017e98 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017e7a:	6839      	ldr	r1, [r7, #0]
 8017e7c:	6878      	ldr	r0, [r7, #4]
 8017e7e:	f7fd fd6b 	bl	8015958 <etharp_input>
      break;
 8017e82:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017e84:	2300      	movs	r3, #0
 8017e86:	e00c      	b.n	8017ea2 <ethernet_input+0x10e>
    goto free_and_return;
 8017e88:	bf00      	nop
 8017e8a:	e006      	b.n	8017e9a <ethernet_input+0x106>
        goto free_and_return;
 8017e8c:	bf00      	nop
 8017e8e:	e004      	b.n	8017e9a <ethernet_input+0x106>
        goto free_and_return;
 8017e90:	bf00      	nop
 8017e92:	e002      	b.n	8017e9a <ethernet_input+0x106>
        goto free_and_return;
 8017e94:	bf00      	nop
 8017e96:	e000      	b.n	8017e9a <ethernet_input+0x106>
        goto free_and_return;
 8017e98:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017e9a:	6878      	ldr	r0, [r7, #4]
 8017e9c:	f7fc fc0c 	bl	80146b8 <pbuf_free>
  return ERR_OK;
 8017ea0:	2300      	movs	r3, #0
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3718      	adds	r7, #24
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	bf00      	nop
 8017eac:	08019e0c 	.word	0x08019e0c

08017eb0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b086      	sub	sp, #24
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	60f8      	str	r0, [r7, #12]
 8017eb8:	60b9      	str	r1, [r7, #8]
 8017eba:	607a      	str	r2, [r7, #4]
 8017ebc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017ebe:	8c3b      	ldrh	r3, [r7, #32]
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7fa ffbd 	bl	8012e40 <lwip_htons>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017eca:	210e      	movs	r1, #14
 8017ecc:	68b8      	ldr	r0, [r7, #8]
 8017ece:	f7fc fb5d 	bl	801458c <pbuf_add_header>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d125      	bne.n	8017f24 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	685b      	ldr	r3, [r3, #4]
 8017edc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017ede:	693b      	ldr	r3, [r7, #16]
 8017ee0:	8afa      	ldrh	r2, [r7, #22]
 8017ee2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017ee4:	693b      	ldr	r3, [r7, #16]
 8017ee6:	2206      	movs	r2, #6
 8017ee8:	6839      	ldr	r1, [r7, #0]
 8017eea:	4618      	mov	r0, r3
 8017eec:	f7e8 fa70 	bl	80003d0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017ef0:	693b      	ldr	r3, [r7, #16]
 8017ef2:	3306      	adds	r3, #6
 8017ef4:	2206      	movs	r2, #6
 8017ef6:	6879      	ldr	r1, [r7, #4]
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7e8 fa69 	bl	80003d0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f04:	2b06      	cmp	r3, #6
 8017f06:	d006      	beq.n	8017f16 <ethernet_output+0x66>
 8017f08:	4b0a      	ldr	r3, [pc, #40]	; (8017f34 <ethernet_output+0x84>)
 8017f0a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017f0e:	490a      	ldr	r1, [pc, #40]	; (8017f38 <ethernet_output+0x88>)
 8017f10:	480a      	ldr	r0, [pc, #40]	; (8017f3c <ethernet_output+0x8c>)
 8017f12:	f7e8 fbc7 	bl	80006a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	699b      	ldr	r3, [r3, #24]
 8017f1a:	68b9      	ldr	r1, [r7, #8]
 8017f1c:	68f8      	ldr	r0, [r7, #12]
 8017f1e:	4798      	blx	r3
 8017f20:	4603      	mov	r3, r0
 8017f22:	e002      	b.n	8017f2a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017f24:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017f26:	f06f 0301 	mvn.w	r3, #1
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	3718      	adds	r7, #24
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd80      	pop	{r7, pc}
 8017f32:	bf00      	nop
 8017f34:	08019bec 	.word	0x08019bec
 8017f38:	08019c24 	.word	0x08019c24
 8017f3c:	08019c58 	.word	0x08019c58

08017f40 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b086      	sub	sp, #24
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017f4a:	683b      	ldr	r3, [r7, #0]
 8017f4c:	60bb      	str	r3, [r7, #8]
 8017f4e:	2304      	movs	r3, #4
 8017f50:	60fb      	str	r3, [r7, #12]
 8017f52:	2300      	movs	r3, #0
 8017f54:	613b      	str	r3, [r7, #16]
 8017f56:	2300      	movs	r3, #0
 8017f58:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017f5a:	f107 0308 	add.w	r3, r7, #8
 8017f5e:	2100      	movs	r1, #0
 8017f60:	4618      	mov	r0, r3
 8017f62:	f7f8 f8fb 	bl	801015c <osMessageCreate>
 8017f66:	4602      	mov	r2, r0
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d102      	bne.n	8017f7a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f78:	e000      	b.n	8017f7c <sys_mbox_new+0x3c>

  return ERR_OK;
 8017f7a:	2300      	movs	r3, #0
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3718      	adds	r7, #24
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b084      	sub	sp, #16
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
 8017f8c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	6839      	ldr	r1, [r7, #0]
 8017f94:	2200      	movs	r2, #0
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7f8 f908 	bl	80101ac <osMessagePut>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d102      	bne.n	8017fa8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	73fb      	strb	r3, [r7, #15]
 8017fa6:	e001      	b.n	8017fac <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017fa8:	23ff      	movs	r3, #255	; 0xff
 8017faa:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	3710      	adds	r7, #16
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	bd80      	pop	{r7, pc}

08017fb8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b08c      	sub	sp, #48	; 0x30
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	61f8      	str	r0, [r7, #28]
 8017fc0:	61b9      	str	r1, [r7, #24]
 8017fc2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017fc4:	f7f7 ff07 	bl	800fdd6 <osKernelSysTick>
 8017fc8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017fca:	697b      	ldr	r3, [r7, #20]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d017      	beq.n	8018000 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017fd0:	69fb      	ldr	r3, [r7, #28]
 8017fd2:	6819      	ldr	r1, [r3, #0]
 8017fd4:	f107 0320 	add.w	r3, r7, #32
 8017fd8:	697a      	ldr	r2, [r7, #20]
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7f8 f926 	bl	801022c <osMessageGet>

    if(event.status == osEventMessage)
 8017fe0:	6a3b      	ldr	r3, [r7, #32]
 8017fe2:	2b10      	cmp	r3, #16
 8017fe4:	d109      	bne.n	8017ffa <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe8:	461a      	mov	r2, r3
 8017fea:	69bb      	ldr	r3, [r7, #24]
 8017fec:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017fee:	f7f7 fef2 	bl	800fdd6 <osKernelSysTick>
 8017ff2:	4602      	mov	r2, r0
 8017ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ff6:	1ad3      	subs	r3, r2, r3
 8017ff8:	e019      	b.n	801802e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ffe:	e016      	b.n	801802e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018000:	69fb      	ldr	r3, [r7, #28]
 8018002:	6819      	ldr	r1, [r3, #0]
 8018004:	463b      	mov	r3, r7
 8018006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801800a:	4618      	mov	r0, r3
 801800c:	f7f8 f90e 	bl	801022c <osMessageGet>
 8018010:	f107 0320 	add.w	r3, r7, #32
 8018014:	463a      	mov	r2, r7
 8018016:	ca07      	ldmia	r2, {r0, r1, r2}
 8018018:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801801e:	461a      	mov	r2, r3
 8018020:	69bb      	ldr	r3, [r7, #24]
 8018022:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018024:	f7f7 fed7 	bl	800fdd6 <osKernelSysTick>
 8018028:	4602      	mov	r2, r0
 801802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801802e:	4618      	mov	r0, r3
 8018030:	3730      	adds	r7, #48	; 0x30
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}

08018036 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018036:	b480      	push	{r7}
 8018038:	b083      	sub	sp, #12
 801803a:	af00      	add	r7, sp, #0
 801803c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d101      	bne.n	801804a <sys_mbox_valid+0x14>
    return 0;
 8018046:	2300      	movs	r3, #0
 8018048:	e000      	b.n	801804c <sys_mbox_valid+0x16>
  else
    return 1;
 801804a:	2301      	movs	r3, #1
}
 801804c:	4618      	mov	r0, r3
 801804e:	370c      	adds	r7, #12
 8018050:	46bd      	mov	sp, r7
 8018052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018056:	4770      	bx	lr

08018058 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018058:	b580      	push	{r7, lr}
 801805a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801805c:	4803      	ldr	r0, [pc, #12]	; (801806c <sys_init+0x14>)
 801805e:	f7f7 ff2a 	bl	800feb6 <osMutexCreate>
 8018062:	4603      	mov	r3, r0
 8018064:	4a02      	ldr	r2, [pc, #8]	; (8018070 <sys_init+0x18>)
 8018066:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018068:	bf00      	nop
 801806a:	bd80      	pop	{r7, pc}
 801806c:	08019e1c 	.word	0x08019e1c
 8018070:	24009320 	.word	0x24009320

08018074 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018074:	b580      	push	{r7, lr}
 8018076:	b084      	sub	sp, #16
 8018078:	af00      	add	r7, sp, #0
 801807a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801807c:	2300      	movs	r3, #0
 801807e:	60bb      	str	r3, [r7, #8]
 8018080:	2300      	movs	r3, #0
 8018082:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018084:	f107 0308 	add.w	r3, r7, #8
 8018088:	4618      	mov	r0, r3
 801808a:	f7f7 ff14 	bl	800feb6 <osMutexCreate>
 801808e:	4602      	mov	r2, r0
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d102      	bne.n	80180a2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801809c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80180a0:	e000      	b.n	80180a4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80180a2:	2300      	movs	r3, #0
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	3710      	adds	r7, #16
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bd80      	pop	{r7, pc}

080180ac <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b082      	sub	sp, #8
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80180bc:	4618      	mov	r0, r3
 80180be:	f7f7 ff13 	bl	800fee8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80180c2:	bf00      	nop
 80180c4:	3708      	adds	r7, #8
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd80      	pop	{r7, pc}

080180ca <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80180ca:	b580      	push	{r7, lr}
 80180cc:	b082      	sub	sp, #8
 80180ce:	af00      	add	r7, sp, #0
 80180d0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	4618      	mov	r0, r3
 80180d8:	f7f7 ff54 	bl	800ff84 <osMutexRelease>
}
 80180dc:	bf00      	nop
 80180de:	3708      	adds	r7, #8
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}

080180e4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b08c      	sub	sp, #48	; 0x30
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	60f8      	str	r0, [r7, #12]
 80180ec:	60b9      	str	r1, [r7, #8]
 80180ee:	607a      	str	r2, [r7, #4]
 80180f0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80180f2:	f107 0314 	add.w	r3, r7, #20
 80180f6:	2200      	movs	r2, #0
 80180f8:	601a      	str	r2, [r3, #0]
 80180fa:	605a      	str	r2, [r3, #4]
 80180fc:	609a      	str	r2, [r3, #8]
 80180fe:	60da      	str	r2, [r3, #12]
 8018100:	611a      	str	r2, [r3, #16]
 8018102:	615a      	str	r2, [r3, #20]
 8018104:	619a      	str	r2, [r3, #24]
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	617b      	str	r3, [r7, #20]
 801810a:	68bb      	ldr	r3, [r7, #8]
 801810c:	61bb      	str	r3, [r7, #24]
 801810e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018110:	b21b      	sxth	r3, r3
 8018112:	83bb      	strh	r3, [r7, #28]
 8018114:	683b      	ldr	r3, [r7, #0]
 8018116:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018118:	f107 0314 	add.w	r3, r7, #20
 801811c:	6879      	ldr	r1, [r7, #4]
 801811e:	4618      	mov	r0, r3
 8018120:	f7f7 fe69 	bl	800fdf6 <osThreadCreate>
 8018124:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018126:	4618      	mov	r0, r3
 8018128:	3730      	adds	r7, #48	; 0x30
 801812a:	46bd      	mov	sp, r7
 801812c:	bd80      	pop	{r7, pc}
	...

08018130 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018134:	4b04      	ldr	r3, [pc, #16]	; (8018148 <sys_arch_protect+0x18>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801813c:	4618      	mov	r0, r3
 801813e:	f7f7 fed3 	bl	800fee8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018142:	2301      	movs	r3, #1
}
 8018144:	4618      	mov	r0, r3
 8018146:	bd80      	pop	{r7, pc}
 8018148:	24009320 	.word	0x24009320

0801814c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b082      	sub	sp, #8
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018154:	4b04      	ldr	r3, [pc, #16]	; (8018168 <sys_arch_unprotect+0x1c>)
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	4618      	mov	r0, r3
 801815a:	f7f7 ff13 	bl	800ff84 <osMutexRelease>
}
 801815e:	bf00      	nop
 8018160:	3708      	adds	r7, #8
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
 8018166:	bf00      	nop
 8018168:	24009320 	.word	0x24009320

0801816c <_init>:
 801816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801816e:	bf00      	nop
 8018170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018172:	bc08      	pop	{r3}
 8018174:	469e      	mov	lr, r3
 8018176:	4770      	bx	lr

08018178 <_fini>:
 8018178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801817a:	bf00      	nop
 801817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801817e:	bc08      	pop	{r3}
 8018180:	469e      	mov	lr, r3
 8018182:	4770      	bx	lr
