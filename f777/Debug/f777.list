
f777.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c5c  08008c5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008c5c  08008c5c  00018c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c64  08008c64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c68  08008c68  00018c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044fc  20000010  08008c7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000450c  08008c7c  0002450c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026625  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004849  00000000  00000000  0004670a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d10  00000000  00000000  0004af58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b98  00000000  00000000  0004cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c883  00000000  00000000  0004e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cbec  00000000  00000000  0007b083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00121216  00000000  00000000  00097c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078e4  00000000  00000000  001b8e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000128d  00000000  00000000  001c076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <deregister_tm_clones>:
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <deregister_tm_clones+0x10>)
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <deregister_tm_clones+0x14>)
 8000204:	4283      	cmp	r3, r0
 8000206:	d002      	beq.n	800020e <deregister_tm_clones+0xe>
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <deregister_tm_clones+0x18>)
 800020a:	b103      	cbz	r3, 800020e <deregister_tm_clones+0xe>
 800020c:	4718      	bx	r3
 800020e:	4770      	bx	lr
 8000210:	20000010 	.word	0x20000010
 8000214:	20000010 	.word	0x20000010
 8000218:	00000000 	.word	0x00000000

0800021c <register_tm_clones>:
 800021c:	4805      	ldr	r0, [pc, #20]	; (8000234 <register_tm_clones+0x18>)
 800021e:	4906      	ldr	r1, [pc, #24]	; (8000238 <register_tm_clones+0x1c>)
 8000220:	1a0b      	subs	r3, r1, r0
 8000222:	0fd9      	lsrs	r1, r3, #31
 8000224:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000228:	1049      	asrs	r1, r1, #1
 800022a:	d002      	beq.n	8000232 <register_tm_clones+0x16>
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <register_tm_clones+0x20>)
 800022e:	b103      	cbz	r3, 8000232 <register_tm_clones+0x16>
 8000230:	4718      	bx	r3
 8000232:	4770      	bx	lr
 8000234:	20000010 	.word	0x20000010
 8000238:	20000010 	.word	0x20000010
 800023c:	00000000 	.word	0x00000000

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c06      	ldr	r4, [pc, #24]	; (800025c <__do_global_dtors_aux+0x1c>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b943      	cbnz	r3, 800025a <__do_global_dtors_aux+0x1a>
 8000248:	f7ff ffda 	bl	8000200 <deregister_tm_clones>
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	b113      	cbz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <__do_global_dtors_aux+0x24>)
 8000252:	f3af 8000 	nop.w
 8000256:	2301      	movs	r3, #1
 8000258:	7023      	strb	r3, [r4, #0]
 800025a:	bd10      	pop	{r4, pc}
 800025c:	20000010 	.word	0x20000010
 8000260:	00000000 	.word	0x00000000
 8000264:	08008bf4 	.word	0x08008bf4

08000268 <frame_dummy>:
 8000268:	b508      	push	{r3, lr}
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <frame_dummy+0x14>)
 800026c:	b11b      	cbz	r3, 8000276 <frame_dummy+0xe>
 800026e:	4904      	ldr	r1, [pc, #16]	; (8000280 <frame_dummy+0x18>)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <frame_dummy+0x1c>)
 8000272:	f3af 8000 	nop.w
 8000276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800027a:	e7cf      	b.n	800021c <register_tm_clones>
 800027c:	00000000 	.word	0x00000000
 8000280:	20000014 	.word	0x20000014
 8000284:	08008bf4 	.word	0x08008bf4

08000288 <__libc_init_array>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	4e0d      	ldr	r6, [pc, #52]	; (80002c0 <__libc_init_array+0x38>)
 800028c:	4d0d      	ldr	r5, [pc, #52]	; (80002c4 <__libc_init_array+0x3c>)
 800028e:	1b76      	subs	r6, r6, r5
 8000290:	10b6      	asrs	r6, r6, #2
 8000292:	d006      	beq.n	80002a2 <__libc_init_array+0x1a>
 8000294:	2400      	movs	r4, #0
 8000296:	3401      	adds	r4, #1
 8000298:	f855 3b04 	ldr.w	r3, [r5], #4
 800029c:	4798      	blx	r3
 800029e:	42a6      	cmp	r6, r4
 80002a0:	d1f9      	bne.n	8000296 <__libc_init_array+0xe>
 80002a2:	4e09      	ldr	r6, [pc, #36]	; (80002c8 <__libc_init_array+0x40>)
 80002a4:	4d09      	ldr	r5, [pc, #36]	; (80002cc <__libc_init_array+0x44>)
 80002a6:	1b76      	subs	r6, r6, r5
 80002a8:	f008 fca4 	bl	8008bf4 <_init>
 80002ac:	10b6      	asrs	r6, r6, #2
 80002ae:	d006      	beq.n	80002be <__libc_init_array+0x36>
 80002b0:	2400      	movs	r4, #0
 80002b2:	3401      	adds	r4, #1
 80002b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b8:	4798      	blx	r3
 80002ba:	42a6      	cmp	r6, r4
 80002bc:	d1f9      	bne.n	80002b2 <__libc_init_array+0x2a>
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	08008c64 	.word	0x08008c64
 80002c4:	08008c64 	.word	0x08008c64
 80002c8:	08008c68 	.word	0x08008c68
 80002cc:	08008c64 	.word	0x08008c64

080002d0 <memset>:
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	0786      	lsls	r6, r0, #30
 80002d4:	d046      	beq.n	8000364 <memset+0x94>
 80002d6:	1e54      	subs	r4, r2, #1
 80002d8:	2a00      	cmp	r2, #0
 80002da:	d03c      	beq.n	8000356 <memset+0x86>
 80002dc:	b2ca      	uxtb	r2, r1
 80002de:	4603      	mov	r3, r0
 80002e0:	e002      	b.n	80002e8 <memset+0x18>
 80002e2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80002e6:	d336      	bcc.n	8000356 <memset+0x86>
 80002e8:	f803 2b01 	strb.w	r2, [r3], #1
 80002ec:	079d      	lsls	r5, r3, #30
 80002ee:	d1f8      	bne.n	80002e2 <memset+0x12>
 80002f0:	2c03      	cmp	r4, #3
 80002f2:	d929      	bls.n	8000348 <memset+0x78>
 80002f4:	b2cd      	uxtb	r5, r1
 80002f6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000300:	d933      	bls.n	800036a <memset+0x9a>
 8000302:	f1a4 0610 	sub.w	r6, r4, #16
 8000306:	0936      	lsrs	r6, r6, #4
 8000308:	f103 0720 	add.w	r7, r3, #32
 800030c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000310:	f103 0210 	add.w	r2, r3, #16
 8000314:	e942 5504 	strd	r5, r5, [r2, #-16]
 8000318:	e942 5502 	strd	r5, r5, [r2, #-8]
 800031c:	3210      	adds	r2, #16
 800031e:	42ba      	cmp	r2, r7
 8000320:	d1f8      	bne.n	8000314 <memset+0x44>
 8000322:	1c72      	adds	r2, r6, #1
 8000324:	f014 0f0c 	tst.w	r4, #12
 8000328:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800032c:	f004 060f 	and.w	r6, r4, #15
 8000330:	d013      	beq.n	800035a <memset+0x8a>
 8000332:	1f33      	subs	r3, r6, #4
 8000334:	f023 0303 	bic.w	r3, r3, #3
 8000338:	3304      	adds	r3, #4
 800033a:	4413      	add	r3, r2
 800033c:	f842 5b04 	str.w	r5, [r2], #4
 8000340:	4293      	cmp	r3, r2
 8000342:	d1fb      	bne.n	800033c <memset+0x6c>
 8000344:	f006 0403 	and.w	r4, r6, #3
 8000348:	b12c      	cbz	r4, 8000356 <memset+0x86>
 800034a:	b2c9      	uxtb	r1, r1
 800034c:	441c      	add	r4, r3
 800034e:	f803 1b01 	strb.w	r1, [r3], #1
 8000352:	429c      	cmp	r4, r3
 8000354:	d1fb      	bne.n	800034e <memset+0x7e>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	4770      	bx	lr
 800035a:	4634      	mov	r4, r6
 800035c:	4613      	mov	r3, r2
 800035e:	2c00      	cmp	r4, #0
 8000360:	d1f3      	bne.n	800034a <memset+0x7a>
 8000362:	e7f8      	b.n	8000356 <memset+0x86>
 8000364:	4614      	mov	r4, r2
 8000366:	4603      	mov	r3, r0
 8000368:	e7c2      	b.n	80002f0 <memset+0x20>
 800036a:	461a      	mov	r2, r3
 800036c:	4626      	mov	r6, r4
 800036e:	e7e0      	b.n	8000332 <memset+0x62>

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000384:	f000 b96e 	b.w	8000664 <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	4604      	mov	r4, r0
 80003a8:	468c      	mov	ip, r1
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8083 	bne.w	80004b6 <__udivmoddi4+0x116>
 80003b0:	428a      	cmp	r2, r1
 80003b2:	4617      	mov	r7, r2
 80003b4:	d947      	bls.n	8000446 <__udivmoddi4+0xa6>
 80003b6:	fab2 f282 	clz	r2, r2
 80003ba:	b142      	cbz	r2, 80003ce <__udivmoddi4+0x2e>
 80003bc:	f1c2 0020 	rsb	r0, r2, #32
 80003c0:	fa24 f000 	lsr.w	r0, r4, r0
 80003c4:	4091      	lsls	r1, r2
 80003c6:	4097      	lsls	r7, r2
 80003c8:	ea40 0c01 	orr.w	ip, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fbbc f6f8 	udiv	r6, ip, r8
 80003d8:	fa1f fe87 	uxth.w	lr, r7
 80003dc:	fb08 c116 	mls	r1, r8, r6, ip
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f10e 	mul.w	r1, r6, lr
 80003e8:	4299      	cmp	r1, r3
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x60>
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003f2:	f080 8119 	bcs.w	8000628 <__udivmoddi4+0x288>
 80003f6:	4299      	cmp	r1, r3
 80003f8:	f240 8116 	bls.w	8000628 <__udivmoddi4+0x288>
 80003fc:	3e02      	subs	r6, #2
 80003fe:	443b      	add	r3, r7
 8000400:	1a5b      	subs	r3, r3, r1
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x8c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800041e:	f080 8105 	bcs.w	800062c <__udivmoddi4+0x28c>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f240 8102 	bls.w	800062c <__udivmoddi4+0x28c>
 8000428:	3802      	subs	r0, #2
 800042a:	443c      	add	r4, r7
 800042c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000430:	eba4 040e 	sub.w	r4, r4, lr
 8000434:	2600      	movs	r6, #0
 8000436:	b11d      	cbz	r5, 8000440 <__udivmoddi4+0xa0>
 8000438:	40d4      	lsrs	r4, r2
 800043a:	2300      	movs	r3, #0
 800043c:	e9c5 4300 	strd	r4, r3, [r5]
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	b902      	cbnz	r2, 800044a <__udivmoddi4+0xaa>
 8000448:	deff      	udf	#255	; 0xff
 800044a:	fab2 f282 	clz	r2, r2
 800044e:	2a00      	cmp	r2, #0
 8000450:	d150      	bne.n	80004f4 <__udivmoddi4+0x154>
 8000452:	1bcb      	subs	r3, r1, r7
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	fa1f f887 	uxth.w	r8, r7
 800045c:	2601      	movs	r6, #1
 800045e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000462:	0c21      	lsrs	r1, r4, #16
 8000464:	fb0e 331c 	mls	r3, lr, ip, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb08 f30c 	mul.w	r3, r8, ip
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0xe4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0xe2>
 800047c:	428b      	cmp	r3, r1
 800047e:	f200 80e9 	bhi.w	8000654 <__udivmoddi4+0x2b4>
 8000482:	4684      	mov	ip, r0
 8000484:	1ac9      	subs	r1, r1, r3
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000490:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x10c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x10a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80d9 	bhi.w	800065c <__udivmoddi4+0x2bc>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e7bf      	b.n	8000436 <__udivmoddi4+0x96>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d909      	bls.n	80004ce <__udivmoddi4+0x12e>
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	f000 80b1 	beq.w	8000622 <__udivmoddi4+0x282>
 80004c0:	2600      	movs	r6, #0
 80004c2:	e9c5 0100 	strd	r0, r1, [r5]
 80004c6:	4630      	mov	r0, r6
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	fab3 f683 	clz	r6, r3
 80004d2:	2e00      	cmp	r6, #0
 80004d4:	d14a      	bne.n	800056c <__udivmoddi4+0x1cc>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d302      	bcc.n	80004e0 <__udivmoddi4+0x140>
 80004da:	4282      	cmp	r2, r0
 80004dc:	f200 80b8 	bhi.w	8000650 <__udivmoddi4+0x2b0>
 80004e0:	1a84      	subs	r4, r0, r2
 80004e2:	eb61 0103 	sbc.w	r1, r1, r3
 80004e6:	2001      	movs	r0, #1
 80004e8:	468c      	mov	ip, r1
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d0a8      	beq.n	8000440 <__udivmoddi4+0xa0>
 80004ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80004f2:	e7a5      	b.n	8000440 <__udivmoddi4+0xa0>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f603 	lsr.w	r6, r0, r3
 80004fc:	4097      	lsls	r7, r2
 80004fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000502:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000506:	40d9      	lsrs	r1, r3
 8000508:	4330      	orrs	r0, r6
 800050a:	0c03      	lsrs	r3, r0, #16
 800050c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000510:	fa1f f887 	uxth.w	r8, r7
 8000514:	fb0e 1116 	mls	r1, lr, r6, r1
 8000518:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051c:	fb06 f108 	mul.w	r1, r6, r8
 8000520:	4299      	cmp	r1, r3
 8000522:	fa04 f402 	lsl.w	r4, r4, r2
 8000526:	d909      	bls.n	800053c <__udivmoddi4+0x19c>
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800052e:	f080 808d 	bcs.w	800064c <__udivmoddi4+0x2ac>
 8000532:	4299      	cmp	r1, r3
 8000534:	f240 808a 	bls.w	800064c <__udivmoddi4+0x2ac>
 8000538:	3e02      	subs	r6, #2
 800053a:	443b      	add	r3, r7
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b281      	uxth	r1, r0
 8000540:	fbb3 f0fe 	udiv	r0, r3, lr
 8000544:	fb0e 3310 	mls	r3, lr, r0, r3
 8000548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054c:	fb00 f308 	mul.w	r3, r0, r8
 8000550:	428b      	cmp	r3, r1
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0x1c4>
 8000554:	1879      	adds	r1, r7, r1
 8000556:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800055a:	d273      	bcs.n	8000644 <__udivmoddi4+0x2a4>
 800055c:	428b      	cmp	r3, r1
 800055e:	d971      	bls.n	8000644 <__udivmoddi4+0x2a4>
 8000560:	3802      	subs	r0, #2
 8000562:	4439      	add	r1, r7
 8000564:	1acb      	subs	r3, r1, r3
 8000566:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800056a:	e778      	b.n	800045e <__udivmoddi4+0xbe>
 800056c:	f1c6 0c20 	rsb	ip, r6, #32
 8000570:	fa03 f406 	lsl.w	r4, r3, r6
 8000574:	fa22 f30c 	lsr.w	r3, r2, ip
 8000578:	431c      	orrs	r4, r3
 800057a:	fa20 f70c 	lsr.w	r7, r0, ip
 800057e:	fa01 f306 	lsl.w	r3, r1, r6
 8000582:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000586:	fa21 f10c 	lsr.w	r1, r1, ip
 800058a:	431f      	orrs	r7, r3
 800058c:	0c3b      	lsrs	r3, r7, #16
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fa1f f884 	uxth.w	r8, r4
 8000596:	fb0e 1119 	mls	r1, lr, r9, r1
 800059a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800059e:	fb09 fa08 	mul.w	sl, r9, r8
 80005a2:	458a      	cmp	sl, r1
 80005a4:	fa02 f206 	lsl.w	r2, r2, r6
 80005a8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x220>
 80005ae:	1861      	adds	r1, r4, r1
 80005b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005b4:	d248      	bcs.n	8000648 <__udivmoddi4+0x2a8>
 80005b6:	458a      	cmp	sl, r1
 80005b8:	d946      	bls.n	8000648 <__udivmoddi4+0x2a8>
 80005ba:	f1a9 0902 	sub.w	r9, r9, #2
 80005be:	4421      	add	r1, r4
 80005c0:	eba1 010a 	sub.w	r1, r1, sl
 80005c4:	b2bf      	uxth	r7, r7
 80005c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005d2:	fb00 f808 	mul.w	r8, r0, r8
 80005d6:	45b8      	cmp	r8, r7
 80005d8:	d907      	bls.n	80005ea <__udivmoddi4+0x24a>
 80005da:	19e7      	adds	r7, r4, r7
 80005dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005e0:	d22e      	bcs.n	8000640 <__udivmoddi4+0x2a0>
 80005e2:	45b8      	cmp	r8, r7
 80005e4:	d92c      	bls.n	8000640 <__udivmoddi4+0x2a0>
 80005e6:	3802      	subs	r0, #2
 80005e8:	4427      	add	r7, r4
 80005ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ee:	eba7 0708 	sub.w	r7, r7, r8
 80005f2:	fba0 8902 	umull	r8, r9, r0, r2
 80005f6:	454f      	cmp	r7, r9
 80005f8:	46c6      	mov	lr, r8
 80005fa:	4649      	mov	r1, r9
 80005fc:	d31a      	bcc.n	8000634 <__udivmoddi4+0x294>
 80005fe:	d017      	beq.n	8000630 <__udivmoddi4+0x290>
 8000600:	b15d      	cbz	r5, 800061a <__udivmoddi4+0x27a>
 8000602:	ebb3 020e 	subs.w	r2, r3, lr
 8000606:	eb67 0701 	sbc.w	r7, r7, r1
 800060a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800060e:	40f2      	lsrs	r2, r6
 8000610:	ea4c 0202 	orr.w	r2, ip, r2
 8000614:	40f7      	lsrs	r7, r6
 8000616:	e9c5 2700 	strd	r2, r7, [r5]
 800061a:	2600      	movs	r6, #0
 800061c:	4631      	mov	r1, r6
 800061e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000622:	462e      	mov	r6, r5
 8000624:	4628      	mov	r0, r5
 8000626:	e70b      	b.n	8000440 <__udivmoddi4+0xa0>
 8000628:	4606      	mov	r6, r0
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0x60>
 800062c:	4618      	mov	r0, r3
 800062e:	e6fd      	b.n	800042c <__udivmoddi4+0x8c>
 8000630:	4543      	cmp	r3, r8
 8000632:	d2e5      	bcs.n	8000600 <__udivmoddi4+0x260>
 8000634:	ebb8 0e02 	subs.w	lr, r8, r2
 8000638:	eb69 0104 	sbc.w	r1, r9, r4
 800063c:	3801      	subs	r0, #1
 800063e:	e7df      	b.n	8000600 <__udivmoddi4+0x260>
 8000640:	4608      	mov	r0, r1
 8000642:	e7d2      	b.n	80005ea <__udivmoddi4+0x24a>
 8000644:	4660      	mov	r0, ip
 8000646:	e78d      	b.n	8000564 <__udivmoddi4+0x1c4>
 8000648:	4681      	mov	r9, r0
 800064a:	e7b9      	b.n	80005c0 <__udivmoddi4+0x220>
 800064c:	4666      	mov	r6, ip
 800064e:	e775      	b.n	800053c <__udivmoddi4+0x19c>
 8000650:	4630      	mov	r0, r6
 8000652:	e74a      	b.n	80004ea <__udivmoddi4+0x14a>
 8000654:	f1ac 0c02 	sub.w	ip, ip, #2
 8000658:	4439      	add	r1, r7
 800065a:	e713      	b.n	8000484 <__udivmoddi4+0xe4>
 800065c:	3802      	subs	r0, #2
 800065e:	443c      	add	r4, r7
 8000660:	e724      	b.n	80004ac <__udivmoddi4+0x10c>
 8000662:	bf00      	nop

08000664 <__aeabi_idiv0>:
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <vApplicationGetIdleTaskMemory+0x2c>)
 8000678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <vApplicationGetIdleTaskMemory+0x30>)
 800067e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	2000002c 	.word	0x2000002c
 8000698:	20000080 	.word	0x20000080

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f001 fa64 	bl	8001b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f831 	bl	800070c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006aa:	f000 f8a7 	bl	80007fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 fbb7 	bl	8000e20 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b2:	f000 fac3 	bl	8000c3c <MX_DMA_Init>
  MX_ETH_Init();
 80006b6:	f000 f8ff 	bl	80008b8 <MX_ETH_Init>
  MX_I2C1_Init();
 80006ba:	f000 f93f 	bl	800093c <MX_I2C1_Init>
  MX_SAI1_Init();
 80006be:	f000 fa2d 	bl	8000b1c <MX_SAI1_Init>
  MX_UART7_Init();
 80006c2:	f000 fa8b 	bl	8000bdc <MX_UART7_Init>
  MX_CAN1_Init();
 80006c6:	f000 f8c1 	bl	800084c <MX_CAN1_Init>
  MX_FMC_Init();
 80006ca:	f000 faf9 	bl	8000cc0 <MX_FMC_Init>
  MX_I2C2_Init();
 80006ce:	f000 f975 	bl	80009bc <MX_I2C2_Init>
  MX_RNG_Init();
 80006d2:	f000 f9b3 	bl	8000a3c <MX_RNG_Init>
  MX_RTC_Init();
 80006d6:	f000 f9c5 	bl	8000a64 <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <main+0x68>)
 80006dc:	1d3c      	adds	r4, r7, #4
 80006de:	461d      	mov	r5, r3
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f007 f85e 	bl	80077b2 <osThreadCreate>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a03      	ldr	r2, [pc, #12]	; (8000708 <main+0x6c>)
 80006fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006fc:	f007 f852 	bl	80077a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x64>
 8000702:	bf00      	nop
 8000704:	08008c18 	.word	0x08008c18
 8000708:	20003fdc 	.word	0x20003fdc

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2234      	movs	r2, #52	; 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fdd8 	bl	80002d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <SystemClock_Config+0xe8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <SystemClock_Config+0xe8>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <SystemClock_Config+0xe8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <SystemClock_Config+0xec>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <SystemClock_Config+0xec>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xec>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000760:	2309      	movs	r3, #9
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000778:	2319      	movs	r3, #25
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 800077c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000780:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000786:	2309      	movs	r3, #9
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4618      	mov	r0, r3
 8000794:	f003 fce2 	bl	800415c <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079e:	f000 fc5d 	bl	800105c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a2:	f003 fc8b 	bl	80040bc <HAL_PWREx_EnableOverDrive>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007ac:	f000 fc56 	bl	800105c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2107      	movs	r1, #7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 ff72 	bl	80046b8 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007da:	f000 fc3f 	bl	800105c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80007e4:	2000      	movs	r0, #0
 80007e6:	f004 f853 	bl	8004890 <HAL_RCC_MCOConfig>
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0a4      	sub	sp, #144	; 0x90
 8000800:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2290      	movs	r2, #144	; 0x90
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd61 	bl	80002d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800080e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000812:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8000814:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8000818:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
 8000822:	2307      	movs	r3, #7
 8000824:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800082a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4618      	mov	r0, r3
 8000834:	f004 f9ac 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 800083e:	f000 fc0d 	bl	800105c <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3790      	adds	r7, #144	; 0x90
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <MX_CAN1_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000858:	2210      	movs	r2, #16
 800085a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_CAN1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_CAN1_Init+0x64>)
 800086a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800086e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000872:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000876:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_CAN1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_CAN1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_CAN1_Init+0x64>)
 800089e:	f001 f9b7 	bl	8001c10 <HAL_CAN_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008a8:	f000 fbd8 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000444c 	.word	0x2000444c
 80008b4:	40006400 	.word	0x40006400

080008b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ETH_Init+0x78>)
 80008be:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <MX_ETH_Init+0x7c>)
 80008c0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_ETH_Init+0x78>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ETH_Init+0x78>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ce:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ETH_Init+0x78>)
 80008d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008d6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_ETH_Init+0x78>)
 80008da:	2201      	movs	r2, #1
 80008dc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_ETH_Init+0x80>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_ETH_Init+0x80>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_ETH_Init+0x80>)
 80008ec:	22e1      	movs	r2, #225	; 0xe1
 80008ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ETH_Init+0x80>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_ETH_Init+0x80>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ETH_Init+0x80>)
 80008fe:	2200      	movs	r2, #0
 8000900:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_ETH_Init+0x78>)
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <MX_ETH_Init+0x80>)
 8000906:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_ETH_Init+0x78>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_ETH_Init+0x78>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_ETH_Init+0x78>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ETH_Init+0x78>)
 800091c:	f001 fee0 	bl	80026e0 <HAL_ETH_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ETH_Init+0x72>
  {
    Error_Handler();
 8000926:	f000 fb99 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20004474 	.word	0x20004474
 8000934:	40028000 	.word	0x40028000
 8000938:	20000280 	.word	0x20000280

0800093c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_I2C1_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <MX_I2C1_Init+0x7c>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000954:	2201      	movs	r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_I2C1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000978:	f002 fce2 	bl	8003340 <HAL_I2C_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000982:	f000 fb6b 	bl	800105c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <MX_I2C1_Init+0x74>)
 800098a:	f003 fb00 	bl	8003f8e <HAL_I2CEx_ConfigAnalogFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 fb62 	bl	800105c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_I2C1_Init+0x74>)
 800099c:	f003 fb42 	bl	8004024 <HAL_I2CEx_ConfigDigitalFilter>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 fb59 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20004064 	.word	0x20004064
 80009b4:	40005400 	.word	0x40005400
 80009b8:	20404768 	.word	0x20404768

080009bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_I2C2_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <MX_I2C2_Init+0x7c>)
 80009ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009f6:	480e      	ldr	r0, [pc, #56]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009f8:	f002 fca2 	bl	8003340 <HAL_I2C_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a02:	f000 fb2b 	bl	800105c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <MX_I2C2_Init+0x74>)
 8000a0a:	f003 fac0 	bl	8003f8e <HAL_I2CEx_ConfigAnalogFilter>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f000 fb22 	bl	800105c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_I2C2_Init+0x74>)
 8000a1c:	f003 fb02 	bl	8004024 <HAL_I2CEx_ConfigDigitalFilter>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 fb19 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200040b0 	.word	0x200040b0
 8000a34:	40005800 	.word	0x40005800
 8000a38:	20404768 	.word	0x20404768

08000a3c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_RNG_Init+0x20>)
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <MX_RNG_Init+0x24>)
 8000a44:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_RNG_Init+0x20>)
 8000a48:	f004 fe3c 	bl	80056c4 <HAL_RNG_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000a52:	f000 fb03 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20004358 	.word	0x20004358
 8000a60:	50060800 	.word	0x50060800

08000a64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000a82:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <MX_RTC_Init+0xb4>)
 8000a84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000a8e:	227f      	movs	r2, #127	; 0x7f
 8000a90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000a94:	22ff      	movs	r2, #255	; 0xff
 8000a96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aaa:	481a      	ldr	r0, [pc, #104]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000aac:	f004 fe34 	bl	8005718 <HAL_RTC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000ab6:	f000 fad1 	bl	800105c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480f      	ldr	r0, [pc, #60]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000ad8:	f004 feb0 	bl	800583c <HAL_RTC_SetTime>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000ae2:	f000 fabb 	bl	800105c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000aea:	2301      	movs	r3, #1
 8000aec:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_RTC_Init+0xb0>)
 8000afe:	f004 ff5b 	bl	80059b8 <HAL_RTC_SetDate>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b08:	f000 faa8 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200042ec 	.word	0x200042ec
 8000b18:	40002800 	.word	0x40002800

08000b1c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b22:	4a2b      	ldr	r2, [pc, #172]	; (8000bd0 <MX_SAI1_Init+0xb4>)
 8000b24:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b46:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000b4a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000b64:	2302      	movs	r3, #2
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4818      	ldr	r0, [pc, #96]	; (8000bcc <MX_SAI1_Init+0xb0>)
 8000b6c:	f005 f83e 	bl	8005bec <HAL_SAI_InitProtocol>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000b76:	f000 fa71 	bl	800105c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000b7c:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <MX_SAI1_Init+0xbc>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000b82:	2203      	movs	r2, #3
 8000b84:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_SAI1_Init+0xb8>)
 8000bb8:	f005 f818 	bl	8005bec <HAL_SAI_InitProtocol>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000bc2:	f000 fa4b 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200043c8 	.word	0x200043c8
 8000bd0:	40015804 	.word	0x40015804
 8000bd4:	200041a8 	.word	0x200041a8
 8000bd8:	40015824 	.word	0x40015824

08000bdc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_UART7_Init+0x58>)
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <MX_UART7_Init+0x5c>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_UART7_Init+0x58>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_UART7_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_UART7_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_UART7_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_UART7_Init+0x58>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_UART7_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_UART7_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_UART7_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_UART7_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_UART7_Init+0x58>)
 8000c20:	f006 f830 	bl	8006c84 <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000c2a:	f000 fa17 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20003fe0 	.word	0x20003fe0
 8000c38:	40007800 	.word	0x40007800

08000c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_DMA_Init+0x80>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <MX_DMA_Init+0x80>)
 8000c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_DMA_Init+0x80>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_DMA_Init+0x80>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <MX_DMA_Init+0x80>)
 8000c60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_DMA_Init+0x80>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	200d      	movs	r0, #13
 8000c78:	f001 f97e 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c7c:	200d      	movs	r0, #13
 8000c7e:	f001 f997 	bl	8001fb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2105      	movs	r1, #5
 8000c86:	200f      	movs	r0, #15
 8000c88:	f001 f976 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c8c:	200f      	movs	r0, #15
 8000c8e:	f001 f98f 	bl	8001fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2105      	movs	r1, #5
 8000c96:	203b      	movs	r0, #59	; 0x3b
 8000c98:	f001 f96e 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c9c:	203b      	movs	r0, #59	; 0x3b
 8000c9e:	f001 f987 	bl	8001fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2105      	movs	r1, #5
 8000ca6:	203c      	movs	r0, #60	; 0x3c
 8000ca8:	f001 f966 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000cac:	203c      	movs	r0, #60	; 0x3c
 8000cae:	f001 f97f 	bl	8001fb0 <HAL_NVIC_EnableIRQ>

}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000cd8:	4b4e      	ldr	r3, [pc, #312]	; (8000e14 <MX_FMC_Init+0x154>)
 8000cda:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000cde:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000ce0:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <MX_FMC_Init+0x154>)
 8000ce2:	4a4d      	ldr	r2, [pc, #308]	; (8000e18 <MX_FMC_Init+0x158>)
 8000ce4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000ce6:	4b4b      	ldr	r3, [pc, #300]	; (8000e14 <MX_FMC_Init+0x154>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000cec:	4b49      	ldr	r3, [pc, #292]	; (8000e14 <MX_FMC_Init+0x154>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000cf2:	4b48      	ldr	r3, [pc, #288]	; (8000e14 <MX_FMC_Init+0x154>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000cf8:	4b46      	ldr	r3, [pc, #280]	; (8000e14 <MX_FMC_Init+0x154>)
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000cfe:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d04:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d0a:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d10:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d16:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d1c:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d22:	4b3c      	ldr	r3, [pc, #240]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d28:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d2e:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d3a:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d40:	230f      	movs	r3, #15
 8000d42:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000d44:	230f      	movs	r3, #15
 8000d46:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000d48:	23ff      	movs	r3, #255	; 0xff
 8000d4a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d50:	2310      	movs	r3, #16
 8000d52:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d54:	2311      	movs	r3, #17
 8000d56:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	482c      	ldr	r0, [pc, #176]	; (8000e14 <MX_FMC_Init+0x154>)
 8000d64:	f005 fc67 	bl	8006636 <HAL_SRAM_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8000d6e:	f000 f975 	bl	800105c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000d74:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d78:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000d7c:	4a26      	ldr	r2, [pc, #152]	; (8000e18 <MX_FMC_Init+0x158>)
 8000d7e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000d94:	2220      	movs	r2, #32
 8000d96:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000dde:	230f      	movs	r3, #15
 8000de0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000de2:	23ff      	movs	r3, #255	; 0xff
 8000de4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000de6:	230f      	movs	r3, #15
 8000de8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000dea:	2310      	movs	r3, #16
 8000dec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000dee:	2311      	movs	r3, #17
 8000df0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <MX_FMC_Init+0x15c>)
 8000dfe:	f005 fc1a 	bl	8006636 <HAL_SRAM_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_FMC_Init+0x14c>
  {
    Error_Handler( );
 8000e08:	f000 f928 	bl	800105c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200040fc 	.word	0x200040fc
 8000e18:	a0000104 	.word	0xa0000104
 8000e1c:	2000430c 	.word	0x2000430c

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08e      	sub	sp, #56	; 0x38
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e36:	4b76      	ldr	r3, [pc, #472]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a75      	ldr	r2, [pc, #468]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b73      	ldr	r3, [pc, #460]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	623b      	str	r3, [r7, #32]
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b70      	ldr	r3, [pc, #448]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a6f      	ldr	r2, [pc, #444]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b6d      	ldr	r3, [pc, #436]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e66:	4b6a      	ldr	r3, [pc, #424]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a69      	ldr	r2, [pc, #420]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b67      	ldr	r3, [pc, #412]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b64      	ldr	r3, [pc, #400]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a63      	ldr	r2, [pc, #396]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b61      	ldr	r3, [pc, #388]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	4b5e      	ldr	r3, [pc, #376]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a5d      	ldr	r2, [pc, #372]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b5b      	ldr	r3, [pc, #364]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b58      	ldr	r3, [pc, #352]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a57      	ldr	r2, [pc, #348]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b55      	ldr	r3, [pc, #340]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b52      	ldr	r3, [pc, #328]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a51      	ldr	r2, [pc, #324]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ede:	4b4c      	ldr	r3, [pc, #304]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a4b      	ldr	r2, [pc, #300]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b49      	ldr	r3, [pc, #292]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	4b46      	ldr	r3, [pc, #280]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a45      	ldr	r2, [pc, #276]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b43      	ldr	r3, [pc, #268]	; (8001010 <MX_GPIO_Init+0x1f0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f14:	483f      	ldr	r0, [pc, #252]	; (8001014 <MX_GPIO_Init+0x1f4>)
 8000f16:	f002 f9f9 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7|TEST_LED_Pin|RESET_UPR_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f246 01c0 	movw	r1, #24768	; 0x60c0
 8000f20:	483d      	ldr	r0, [pc, #244]	; (8001018 <MX_GPIO_Init+0x1f8>)
 8000f22:	f002 f9f3 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4835      	ldr	r0, [pc, #212]	; (8001014 <MX_GPIO_Init+0x1f4>)
 8000f40:	f002 f838 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	4830      	ldr	r0, [pc, #192]	; (800101c <MX_GPIO_Init+0x1fc>)
 8000f5a:	f002 f82b 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	482b      	ldr	r0, [pc, #172]	; (8001020 <MX_GPIO_Init+0x200>)
 8000f74:	f002 f81e 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 TEST_LED_Pin RESET_UPR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|TEST_LED_Pin|RESET_UPR_Pin;
 8000f78:	f246 03c0 	movw	r3, #24768	; 0x60c0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4821      	ldr	r0, [pc, #132]	; (8001018 <MX_GPIO_Init+0x1f8>)
 8000f92:	f002 f80f 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f96:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	481a      	ldr	r0, [pc, #104]	; (8001014 <MX_GPIO_Init+0x1f4>)
 8000fac:	f002 f802 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_MCO_Pin */
  GPIO_InitStruct.Pin = ETH_MCO_Pin;
 8000fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ETH_MCO_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4815      	ldr	r0, [pc, #84]	; (8001024 <MX_GPIO_Init+0x204>)
 8000fce:	f001 fff1 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <MX_GPIO_Init+0x204>)
 8000fe8:	f001 ffe4 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_BUT_Pin RESET_EXT_Pin */
  GPIO_InitStruct.Pin = TEST_BUT_Pin|RESET_EXT_Pin;
 8000fec:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_GPIO_Init+0x1f8>)
 8001002:	f001 ffd7 	bl	8002fb4 <HAL_GPIO_Init>

}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40021800 	.word	0x40021800
 800101c:	40021400 	.word	0x40021400
 8001020:	40020400 	.word	0x40020400
 8001024:	40020000 	.word	0x40020000

08001028 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f006 fc0a 	bl	800784a <osDelay>
 8001036:	e7fb      	b.n	8001030 <StartDefaultTask+0x8>

08001038 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800104a:	f000 fd9d 	bl	8001b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40000400 	.word	0x40000400

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_MspInit+0x4c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_MspInit+0x4c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	210f      	movs	r1, #15
 80010a2:	f06f 0001 	mvn.w	r0, #1
 80010a6:	f000 ff67 	bl	8001f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800

080010b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_CAN_MspInit+0x7c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d128      	bne.n	800112c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_CAN_MspInit+0x80>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a16      	ldr	r2, [pc, #88]	; (8001138 <HAL_CAN_MspInit+0x80>)
 80010e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_CAN_MspInit+0x80>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_CAN_MspInit+0x80>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_CAN_MspInit+0x80>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_CAN_MspInit+0x80>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800110a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800111c:	2309      	movs	r3, #9
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_CAN_MspInit+0x84>)
 8001128:	f001 ff44 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40006400 	.word	0x40006400
 8001138:	40023800 	.word	0x40023800
 800113c:	40020000 	.word	0x40020000

08001140 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	; 0x38
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a4e      	ldr	r2, [pc, #312]	; (8001298 <HAL_ETH_MspInit+0x158>)
 800115e:	4293      	cmp	r3, r2
 8001160:	f040 8095 	bne.w	800128e <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001164:	4b4d      	ldr	r3, [pc, #308]	; (800129c <HAL_ETH_MspInit+0x15c>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	4a4c      	ldr	r2, [pc, #304]	; (800129c <HAL_ETH_MspInit+0x15c>)
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116e:	6313      	str	r3, [r2, #48]	; 0x30
 8001170:	4b4a      	ldr	r3, [pc, #296]	; (800129c <HAL_ETH_MspInit+0x15c>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_ETH_MspInit+0x15c>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	4a46      	ldr	r2, [pc, #280]	; (800129c <HAL_ETH_MspInit+0x15c>)
 8001182:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	4b44      	ldr	r3, [pc, #272]	; (800129c <HAL_ETH_MspInit+0x15c>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_ETH_MspInit+0x15c>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a40      	ldr	r2, [pc, #256]	; (800129c <HAL_ETH_MspInit+0x15c>)
 800119a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b3e      	ldr	r3, [pc, #248]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	4b3b      	ldr	r3, [pc, #236]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a3a      	ldr	r2, [pc, #232]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b38      	ldr	r3, [pc, #224]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a34      	ldr	r2, [pc, #208]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a2e      	ldr	r2, [pc, #184]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b29      	ldr	r3, [pc, #164]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <HAL_ETH_MspInit+0x15c>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_ETH_MspInit+0x15c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PB8     ------> ETH_TXD3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800120c:	233e      	movs	r3, #62	; 0x3e
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800121c:	230b      	movs	r3, #11
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	481e      	ldr	r0, [pc, #120]	; (80012a0 <HAL_ETH_MspInit+0x160>)
 8001228:	f001 fec4 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800122c:	2387      	movs	r3, #135	; 0x87
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800123c:	230b      	movs	r3, #11
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	4817      	ldr	r0, [pc, #92]	; (80012a4 <HAL_ETH_MspInit+0x164>)
 8001248:	f001 feb4 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800124c:	2308      	movs	r3, #8
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125c:	230b      	movs	r3, #11
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <HAL_ETH_MspInit+0x168>)
 8001268:	f001 fea4 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800126c:	f643 5303 	movw	r3, #15619	; 0x3d03
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127e:	230b      	movs	r3, #11
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <HAL_ETH_MspInit+0x16c>)
 800128a:	f001 fe93 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3738      	adds	r7, #56	; 0x38
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40028000 	.word	0x40028000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40021c00 	.word	0x40021c00
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0b0      	sub	sp, #192	; 0xc0
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	2290      	movs	r2, #144	; 0x90
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe fffd 	bl	80002d0 <memset>
  if(hi2c->Instance==I2C1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a7a      	ldr	r2, [pc, #488]	; (80014c4 <HAL_I2C_MspInit+0x214>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d13d      	bne.n	800135c <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fc4d 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80012fc:	f7ff feae 	bl	800105c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001300:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a70      	ldr	r2, [pc, #448]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001318:	23c0      	movs	r3, #192	; 0xc0
 800131a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131e:	2312      	movs	r3, #18
 8001320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001330:	2304      	movs	r3, #4
 8001332:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800133a:	4619      	mov	r1, r3
 800133c:	4863      	ldr	r0, [pc, #396]	; (80014cc <HAL_I2C_MspInit+0x21c>)
 800133e:	f001 fe39 	bl	8002fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001342:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a60      	ldr	r2, [pc, #384]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800135a:	e0ae      	b.n	80014ba <HAL_I2C_MspInit+0x20a>
  else if(hi2c->Instance==I2C2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a5b      	ldr	r2, [pc, #364]	; (80014d0 <HAL_I2C_MspInit+0x220>)
 8001362:	4293      	cmp	r3, r2
 8001364:	f040 80a9 	bne.w	80014ba <HAL_I2C_MspInit+0x20a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800136c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fc09 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001384:	f7ff fe6a 	bl	800105c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001388:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 800138e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013a0:	2330      	movs	r3, #48	; 0x30
 80013a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a6:	2312      	movs	r3, #18
 80013a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013b8:	2304      	movs	r3, #4
 80013ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013c2:	4619      	mov	r1, r3
 80013c4:	4843      	ldr	r0, [pc, #268]	; (80014d4 <HAL_I2C_MspInit+0x224>)
 80013c6:	f001 fdf5 	bl	8002fb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a3e      	ldr	r2, [pc, #248]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 80013d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <HAL_I2C_MspInit+0x218>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 80013e4:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <HAL_I2C_MspInit+0x22c>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 80013ea:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80013ee:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 80013fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001402:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001404:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001422:	482d      	ldr	r0, [pc, #180]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 8001424:	f000 fdd2 	bl	8001fcc <HAL_DMA_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2C_MspInit+0x182>
      Error_Handler();
 800142e:	f7ff fe15 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a28      	ldr	r2, [pc, #160]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c
 8001438:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <HAL_I2C_MspInit+0x228>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream4;
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 8001440:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <HAL_I2C_MspInit+0x234>)
 8001442:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_8;
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 8001446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800144a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 800144e:	2240      	movs	r2, #64	; 0x40
 8001450:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 800145a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800147e:	4818      	ldr	r0, [pc, #96]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 8001480:	f000 fda4 	bl	8001fcc <HAL_DMA_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_MspInit+0x1de>
      Error_Handler();
 800148a:	f7ff fde7 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 8001492:	639a      	str	r2, [r3, #56]	; 0x38
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_I2C_MspInit+0x230>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	2021      	movs	r0, #33	; 0x21
 80014a0:	f000 fd6a 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80014a4:	2021      	movs	r0, #33	; 0x21
 80014a6:	f000 fd83 	bl	8001fb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2105      	movs	r1, #5
 80014ae:	2022      	movs	r0, #34	; 0x22
 80014b0:	f000 fd62 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80014b4:	2022      	movs	r0, #34	; 0x22
 80014b6:	f000 fd7b 	bl	8001fb0 <HAL_NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	37c0      	adds	r7, #192	; 0xc0
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40005400 	.word	0x40005400
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40005800 	.word	0x40005800
 80014d4:	40021c00 	.word	0x40021c00
 80014d8:	20004148 	.word	0x20004148
 80014dc:	40026040 	.word	0x40026040
 80014e0:	2000422c 	.word	0x2000422c
 80014e4:	40026070 	.word	0x40026070

080014e8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0a8      	sub	sp, #160	; 0xa0
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	2290      	movs	r2, #144	; 0x90
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fee9 	bl	80002d0 <memset>
  if(hrng->Instance==RNG)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a11      	ldr	r2, [pc, #68]	; (8001548 <HAL_RNG_MspInit+0x60>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d11b      	bne.n	8001540 <HAL_RNG_MspInit+0x58>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800150c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4618      	mov	r0, r3
 800151a:	f003 fb39 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001524:	f7ff fd9a 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_RNG_MspInit+0x64>)
 800152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_RNG_MspInit+0x64>)
 800152e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001532:	6353      	str	r3, [r2, #52]	; 0x34
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RNG_MspInit+0x64>)
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	37a0      	adds	r7, #160	; 0xa0
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	50060800 	.word	0x50060800
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0a6      	sub	sp, #152	; 0x98
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	2290      	movs	r2, #144	; 0x90
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe feb5 	bl	80002d0 <memset>
  if(hrtc->Instance==RTC)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_RTC_MspInit+0x54>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d114      	bne.n	800159a <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001570:	2320      	movs	r3, #32
 8001572:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fb06 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800158a:	f7ff fd67 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_RTC_MspInit+0x58>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <HAL_RTC_MspInit+0x58>)
 8001594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001598:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3798      	adds	r7, #152	; 0x98
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40002800 	.word	0x40002800
 80015a8:	40023800 	.word	0x40023800

080015ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0ae      	sub	sp, #184	; 0xb8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2290      	movs	r2, #144	; 0x90
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe fe7f 	bl	80002d0 <memset>
  if(huart->Instance==UART7)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <HAL_UART_MspInit+0xb0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d13b      	bne.n	8001654 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fad0 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015f6:	f7ff fd31 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_UART_MspInit+0xb4>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_UART_MspInit+0xb4>)
 8001600:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_UART_MspInit+0xb4>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_UART_MspInit+0xb4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HAL_UART_MspInit+0xb4>)
 8001618:	f043 0320 	orr.w	r3, r3, #32
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_UART_MspInit+0xb4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0320 	and.w	r3, r3, #32
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800162a:	23c0      	movs	r3, #192	; 0xc0
 800162c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001642:	2308      	movs	r3, #8
 8001644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001648:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_UART_MspInit+0xb8>)
 8001650:	f001 fcb0 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	37b8      	adds	r7, #184	; 0xb8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40007800 	.word	0x40007800
 8001660:	40023800 	.word	0x40023800
 8001664:	40021400 	.word	0x40021400

08001668 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_FMC_MspInit+0x104>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d16f      	bne.n	8001764 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <HAL_FMC_MspInit+0x104>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <HAL_FMC_MspInit+0x108>)
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	4a38      	ldr	r2, [pc, #224]	; (8001770 <HAL_FMC_MspInit+0x108>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6393      	str	r3, [r2, #56]	; 0x38
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_FMC_MspInit+0x108>)
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]
  PI4   ------> FMC_NBL2
  PI5   ------> FMC_NBL3
  PI6   ------> FMC_D28
  PI7   ------> FMC_D29
  */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80016a2:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80016a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b4:	230c      	movs	r3, #12
 80016b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	482d      	ldr	r0, [pc, #180]	; (8001774 <HAL_FMC_MspInit+0x10c>)
 80016be:	f001 fc79 	bl	8002fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016c2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80016c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016d4:	230c      	movs	r3, #12
 80016d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4826      	ldr	r0, [pc, #152]	; (8001778 <HAL_FMC_MspInit+0x110>)
 80016de:	f001 fc69 	bl	8002fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016e2:	f240 233f 	movw	r3, #575	; 0x23f
 80016e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f4:	230c      	movs	r3, #12
 80016f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	481f      	ldr	r0, [pc, #124]	; (800177c <HAL_FMC_MspInit+0x114>)
 80016fe:	f001 fc59 	bl	8002fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001702:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001706:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001714:	230c      	movs	r3, #12
 8001716:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4818      	ldr	r0, [pc, #96]	; (8001780 <HAL_FMC_MspInit+0x118>)
 800171e:	f001 fc49 	bl	8002fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001722:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001726:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001734:	230c      	movs	r3, #12
 8001736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4811      	ldr	r0, [pc, #68]	; (8001784 <HAL_FMC_MspInit+0x11c>)
 800173e:	f001 fc39 	bl	8002fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001742:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001746:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001754:	230c      	movs	r3, #12
 8001756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	480a      	ldr	r0, [pc, #40]	; (8001788 <HAL_FMC_MspInit+0x120>)
 800175e:	f001 fc29 	bl	8002fb4 <HAL_GPIO_Init>
 8001762:	e000      	b.n	8001766 <HAL_FMC_MspInit+0xfe>
    return;
 8001764:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000288 	.word	0x20000288
 8001770:	40023800 	.word	0x40023800
 8001774:	40022000 	.word	0x40022000
 8001778:	40021400 	.word	0x40021400
 800177c:	40021800 	.word	0x40021800
 8001780:	40021000 	.word	0x40021000
 8001784:	40021c00 	.word	0x40021c00
 8001788:	40020c00 	.word	0x40020c00

0800178c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001794:	f7ff ff68 	bl	8001668 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a68      	ldr	r2, [pc, #416]	; (8001950 <HAL_SAI_MspInit+0x1b0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d161      	bne.n	8001876 <HAL_SAI_MspInit+0xd6>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80017b2:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_SAI_MspInit+0x1b4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d113      	bne.n	80017e2 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80017ba:	4b67      	ldr	r3, [pc, #412]	; (8001958 <HAL_SAI_MspInit+0x1b8>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a66      	ldr	r2, [pc, #408]	; (8001958 <HAL_SAI_MspInit+0x1b8>)
 80017c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b64      	ldr	r3, [pc, #400]	; (8001958 <HAL_SAI_MspInit+0x1b8>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	2057      	movs	r0, #87	; 0x57
 80017d8:	f000 fbce 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80017dc:	2057      	movs	r0, #87	; 0x57
 80017de:	f000 fbe7 	bl	8001fb0 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 80017e2:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <HAL_SAI_MspInit+0x1b4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a5a      	ldr	r2, [pc, #360]	; (8001954 <HAL_SAI_MspInit+0x1b4>)
 80017ea:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017ec:	2374      	movs	r3, #116	; 0x74
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80017fc:	2306      	movs	r3, #6
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4855      	ldr	r0, [pc, #340]	; (800195c <HAL_SAI_MspInit+0x1bc>)
 8001808:	f001 fbd4 	bl	8002fb4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream3;
 800180c:	4b54      	ldr	r3, [pc, #336]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 800180e:	4a55      	ldr	r2, [pc, #340]	; (8001964 <HAL_SAI_MspInit+0x1c4>)
 8001810:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001812:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001818:	4b51      	ldr	r3, [pc, #324]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800181e:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001824:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800182c:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 800182e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001832:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001834:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 800183c:	4b48      	ldr	r3, [pc, #288]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001848:	4b45      	ldr	r3, [pc, #276]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800184e:	4844      	ldr	r0, [pc, #272]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001850:	f000 fbbc 	bl	8001fcc <HAL_DMA_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_SAI_MspInit+0xbe>
    {
      Error_Handler();
 800185a:	f7ff fbff 	bl	800105c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a3f      	ldr	r2, [pc, #252]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001862:	671a      	str	r2, [r3, #112]	; 0x70
 8001864:	4a3e      	ldr	r2, [pc, #248]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a3c      	ldr	r2, [pc, #240]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 800186e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001870:	4a3b      	ldr	r2, [pc, #236]	; (8001960 <HAL_SAI_MspInit+0x1c0>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a3b      	ldr	r2, [pc, #236]	; (8001968 <HAL_SAI_MspInit+0x1c8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d162      	bne.n	8001946 <HAL_SAI_MspInit+0x1a6>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001880:	4b34      	ldr	r3, [pc, #208]	; (8001954 <HAL_SAI_MspInit+0x1b4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d113      	bne.n	80018b0 <HAL_SAI_MspInit+0x110>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001888:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_SAI_MspInit+0x1b8>)
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_SAI_MspInit+0x1b8>)
 800188e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001892:	6453      	str	r3, [r2, #68]	; 0x44
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_SAI_MspInit+0x1b8>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 5, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2105      	movs	r1, #5
 80018a4:	2057      	movs	r0, #87	; 0x57
 80018a6:	f000 fb67 	bl	8001f78 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80018aa:	2057      	movs	r0, #87	; 0x57
 80018ac:	f000 fb80 	bl	8001fb0 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_SAI_MspInit+0x1b4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_SAI_MspInit+0x1b4>)
 80018b8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018ba:	2308      	movs	r3, #8
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80018ca:	2306      	movs	r3, #6
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4821      	ldr	r0, [pc, #132]	; (800195c <HAL_SAI_MspInit+0x1bc>)
 80018d6:	f001 fb6d 	bl	8002fb4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 80018dc:	4a24      	ldr	r2, [pc, #144]	; (8001970 <HAL_SAI_MspInit+0x1d0>)
 80018de:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 80018e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e6:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 80018f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fa:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 80018fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001902:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 8001906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190a:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800191e:	4813      	ldr	r0, [pc, #76]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 8001920:	f000 fb54 	bl	8001fcc <HAL_DMA_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_SAI_MspInit+0x18e>
    {
      Error_Handler();
 800192a:	f7ff fb97 	bl	800105c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 8001932:	671a      	str	r2, [r3, #112]	; 0x70
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 800193e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_SAI_MspInit+0x1cc>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40015804 	.word	0x40015804
 8001954:	2000028c 	.word	0x2000028c
 8001958:	40023800 	.word	0x40023800
 800195c:	40021000 	.word	0x40021000
 8001960:	2000428c 	.word	0x2000428c
 8001964:	40026458 	.word	0x40026458
 8001968:	40015824 	.word	0x40015824
 800196c:	20004368 	.word	0x20004368
 8001970:	40026470 	.word	0x40026470

08001974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	; 0x30
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001984:	2200      	movs	r2, #0
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	201d      	movs	r0, #29
 800198a:	f000 faf5 	bl	8001f78 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800198e:	201d      	movs	r0, #29
 8001990:	f000 fb0e 	bl	8001fb0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <HAL_InitTick+0xa0>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <HAL_InitTick+0xa0>)
 800199a:	f043 0302 	orr.w	r3, r3, #2
 800199e:	6413      	str	r3, [r2, #64]	; 0x40
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_InitTick+0xa0>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019ac:	f107 0210 	add.w	r2, r7, #16
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 f8b8 	bl	8004b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80019bc:	f003 f88e 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 80019c0:	4603      	mov	r3, r0
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c8:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <HAL_InitTick+0xa4>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	3b01      	subs	r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_InitTick+0xa8>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_InitTick+0xac>)
 80019d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_InitTick+0xa8>)
 80019dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019e0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_InitTick+0xa8>)
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_InitTick+0xa8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_InitTick+0xa8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <HAL_InitTick+0xa8>)
 80019f6:	f004 fe66 	bl	80066c6 <HAL_TIM_Base_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d104      	bne.n	8001a0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001a00:	4806      	ldr	r0, [pc, #24]	; (8001a1c <HAL_InitTick+0xa8>)
 8001a02:	f004 fec1 	bl	8006788 <HAL_TIM_Base_Start_IT>
 8001a06:	4603      	mov	r3, r0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3730      	adds	r7, #48	; 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	200044bc 	.word	0x200044bc
 8001a20:	40000400 	.word	0x40000400

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <DMA1_Stream2_IRQHandler+0x10>)
 8001a56:	f000 fbf9 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20004148 	.word	0x20004148

08001a64 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <DMA1_Stream4_IRQHandler+0x10>)
 8001a6a:	f000 fbef 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000422c 	.word	0x2000422c

08001a78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM3_IRQHandler+0x10>)
 8001a7e:	f004 fefb 	bl	8006878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200044bc 	.word	0x200044bc

08001a8c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <I2C2_EV_IRQHandler+0x10>)
 8001a92:	f001 fce5 	bl	8003460 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200040b0 	.word	0x200040b0

08001aa0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <I2C2_ER_IRQHandler+0x10>)
 8001aa6:	f001 fcf5 	bl	8003494 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200040b0 	.word	0x200040b0

08001ab4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <DMA2_Stream3_IRQHandler+0x10>)
 8001aba:	f000 fbc7 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000428c 	.word	0x2000428c

08001ac8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <DMA2_Stream4_IRQHandler+0x10>)
 8001ace:	f000 fbbd 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20004368 	.word	0x20004368

08001adc <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <SAI1_IRQHandler+0x14>)
 8001ae2:	f004 fab9 	bl	8006058 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <SAI1_IRQHandler+0x18>)
 8001ae8:	f004 fab6 	bl	8006058 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200043c8 	.word	0x200043c8
 8001af4:	200041a8 	.word	0x200041a8

08001af8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b46:	f7ff ffd7 	bl	8001af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f7fe fb9d 	bl	8000288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7fe fda5 	bl	800069c <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b60:	08008c6c 	.word	0x08008c6c
  ldr r2, =_sbss
 8001b64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b68:	2000450c 	.word	0x2000450c

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>

08001b6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 f9f5 	bl	8001f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fefb 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7e:	f7ff fa73 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20004508 	.word	0x20004508

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20004508 	.word	0x20004508

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008

08001c10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0ed      	b.n	8001dfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fa42 	bl	80010b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c44:	f7ff ffb4 	bl	8001bb0 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c4a:	e012      	b.n	8001c72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c4c:	f7ff ffb0 	bl	8001bb0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d90b      	bls.n	8001c72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2205      	movs	r2, #5
 8001c6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0c5      	b.n	8001dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0e5      	beq.n	8001c4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0202 	bic.w	r2, r2, #2
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c90:	f7ff ff8e 	bl	8001bb0 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c96:	e012      	b.n	8001cbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c98:	f7ff ff8a 	bl	8001bb0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b0a      	cmp	r3, #10
 8001ca4:	d90b      	bls.n	8001cbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e09f      	b.n	8001dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e5      	bne.n	8001c98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7e1b      	ldrb	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d108      	bne.n	8001ce6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e007      	b.n	8001cf6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7e5b      	ldrb	r3, [r3, #25]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d108      	bne.n	8001d10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e007      	b.n	8001d20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7e9b      	ldrb	r3, [r3, #26]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d108      	bne.n	8001d3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e007      	b.n	8001d4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0220 	bic.w	r2, r2, #32
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7edb      	ldrb	r3, [r3, #27]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d108      	bne.n	8001d64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0210 	bic.w	r2, r2, #16
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e007      	b.n	8001d74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0210 	orr.w	r2, r2, #16
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7f1b      	ldrb	r3, [r3, #28]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d108      	bne.n	8001d8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e007      	b.n	8001d9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0208 	bic.w	r2, r2, #8
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7f5b      	ldrb	r3, [r3, #29]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d108      	bne.n	8001db8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0204 	orr.w	r2, r2, #4
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e007      	b.n	8001dc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0204 	bic.w	r2, r2, #4
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	ea42 0103 	orr.w	r1, r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <__NVIC_SetPriorityGrouping+0x40>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x40>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00
 8001e4c:	05fa0000 	.word	0x05fa0000

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4907      	ldr	r1, [pc, #28]	; (8001ea4 <__NVIC_EnableIRQ+0x38>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff4c 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8a:	f7ff ff61 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	6978      	ldr	r0, [r7, #20]
 8001f96:	f7ff ffb1 	bl	8001efc <NVIC_EncodePriority>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff80 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fa8:	bf00      	nop
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff54 	bl	8001e6c <__NVIC_EnableIRQ>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff fdea 	bl	8001bb0 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e099      	b.n	800211c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002008:	e00f      	b.n	800202a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200a:	f7ff fdd1 	bl	8001bb0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b05      	cmp	r3, #5
 8002016:	d908      	bls.n	800202a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2203      	movs	r2, #3
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e078      	b.n	800211c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e8      	bne.n	800200a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <HAL_DMA_Init+0x158>)
 8002044:	4013      	ands	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	2b04      	cmp	r3, #4
 8002082:	d107      	bne.n	8002094 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4313      	orrs	r3, r2
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f023 0307 	bic.w	r3, r3, #7
 80020aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d117      	bne.n	80020ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00e      	beq.n	80020ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fa89 	bl	80025e8 <DMA_CheckFifoParam>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ea:	2301      	movs	r3, #1
 80020ec:	e016      	b.n	800211c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fa40 	bl	800257c <DMA_CalcBaseAndBitshift>
 80020fc:	4603      	mov	r3, r0
 80020fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	223f      	movs	r2, #63	; 0x3f
 8002106:	409a      	lsls	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	e010803f 	.word	0xe010803f

08002128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002136:	f7ff fd3b 	bl	8001bb0 <HAL_GetTick>
 800213a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d008      	beq.n	800215a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e052      	b.n	8002200 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0216 	bic.w	r2, r2, #22
 8002168:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_DMA_Abort+0x62>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021aa:	e013      	b.n	80021d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ac:	f7ff fd00 	bl	8001bb0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d90c      	bls.n	80021d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2203      	movs	r2, #3
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e015      	b.n	8002200 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e4      	bne.n	80021ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	223f      	movs	r2, #63	; 0x3f
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d004      	beq.n	8002226 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e00c      	b.n	8002240 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2205      	movs	r2, #5
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002258:	4b92      	ldr	r3, [pc, #584]	; (80024a4 <HAL_DMA_IRQHandler+0x258>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a92      	ldr	r2, [pc, #584]	; (80024a8 <HAL_DMA_IRQHandler+0x25c>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0a9b      	lsrs	r3, r3, #10
 8002264:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	2208      	movs	r2, #8
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01a      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2208      	movs	r2, #8
 80022a6:	409a      	lsls	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2201      	movs	r2, #1
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2201      	movs	r2, #1
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f043 0202 	orr.w	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	2204      	movs	r2, #4
 80022f4:	409a      	lsls	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d012      	beq.n	8002324 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00b      	beq.n	8002324 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	2204      	movs	r2, #4
 8002312:	409a      	lsls	r2, r3
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2210      	movs	r2, #16
 800232a:	409a      	lsls	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d043      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03c      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	2210      	movs	r2, #16
 8002348:	409a      	lsls	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d018      	beq.n	800238e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d108      	bne.n	800237c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d024      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
 800237a:	e01f      	b.n	80023bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01b      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
 800238c:	e016      	b.n	80023bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0208 	bic.w	r2, r2, #8
 80023aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	2220      	movs	r2, #32
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 808e 	beq.w	80024ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8086 	beq.w	80024ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	2220      	movs	r2, #32
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d136      	bne.n	8002464 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0216 	bic.w	r2, r2, #22
 8002404:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002414:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <HAL_DMA_IRQHandler+0x1da>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0208 	bic.w	r2, r2, #8
 8002434:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	223f      	movs	r2, #63	; 0x3f
 800243c:	409a      	lsls	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002456:	2b00      	cmp	r3, #0
 8002458:	d07d      	beq.n	8002556 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
        }
        return;
 8002462:	e078      	b.n	8002556 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01c      	beq.n	80024ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d108      	bne.n	8002492 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	2b00      	cmp	r3, #0
 8002486:	d030      	beq.n	80024ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
 8002490:	e02b      	b.n	80024ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d027      	beq.n	80024ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
 80024a2:	e022      	b.n	80024ea <HAL_DMA_IRQHandler+0x29e>
 80024a4:	20000000 	.word	0x20000000
 80024a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0210 	bic.w	r2, r2, #16
 80024c8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d032      	beq.n	8002558 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d022      	beq.n	8002544 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2205      	movs	r2, #5
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	429a      	cmp	r2, r3
 8002520:	d307      	bcc.n	8002532 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f2      	bne.n	8002516 <HAL_DMA_IRQHandler+0x2ca>
 8002530:	e000      	b.n	8002534 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002532:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
 8002554:	e000      	b.n	8002558 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002556:	bf00      	nop
    }
  }
}
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop

08002560 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256e:	b2db      	uxtb	r3, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3b10      	subs	r3, #16
 800258c:	4a13      	ldr	r2, [pc, #76]	; (80025dc <DMA_CalcBaseAndBitshift+0x60>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <DMA_CalcBaseAndBitshift+0x64>)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d908      	bls.n	80025bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <DMA_CalcBaseAndBitshift+0x68>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	1d1a      	adds	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	659a      	str	r2, [r3, #88]	; 0x58
 80025ba:	e006      	b.n	80025ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <DMA_CalcBaseAndBitshift+0x68>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	aaaaaaab 	.word	0xaaaaaaab
 80025e0:	08008c54 	.word	0x08008c54
 80025e4:	fffffc00 	.word	0xfffffc00

080025e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11f      	bne.n	8002642 <DMA_CheckFifoParam+0x5a>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d856      	bhi.n	80026b6 <DMA_CheckFifoParam+0xce>
 8002608:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <DMA_CheckFifoParam+0x28>)
 800260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	08002621 	.word	0x08002621
 8002614:	08002633 	.word	0x08002633
 8002618:	08002621 	.word	0x08002621
 800261c:	080026b7 	.word	0x080026b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d046      	beq.n	80026ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002630:	e043      	b.n	80026ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800263a:	d140      	bne.n	80026be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002640:	e03d      	b.n	80026be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264a:	d121      	bne.n	8002690 <DMA_CheckFifoParam+0xa8>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d837      	bhi.n	80026c2 <DMA_CheckFifoParam+0xda>
 8002652:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <DMA_CheckFifoParam+0x70>)
 8002654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002658:	08002669 	.word	0x08002669
 800265c:	0800266f 	.word	0x0800266f
 8002660:	08002669 	.word	0x08002669
 8002664:	08002681 	.word	0x08002681
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
      break;
 800266c:	e030      	b.n	80026d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d025      	beq.n	80026c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267e:	e022      	b.n	80026c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002688:	d11f      	bne.n	80026ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800268e:	e01c      	b.n	80026ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d903      	bls.n	800269e <DMA_CheckFifoParam+0xb6>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b03      	cmp	r3, #3
 800269a:	d003      	beq.n	80026a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800269c:	e018      	b.n	80026d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
      break;
 80026a2:	e015      	b.n	80026d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00e      	beq.n	80026ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      break;
 80026b4:	e00b      	b.n	80026ce <DMA_CheckFifoParam+0xe6>
      break;
 80026b6:	bf00      	nop
 80026b8:	e00a      	b.n	80026d0 <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e008      	b.n	80026d0 <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
 80026c0:	e006      	b.n	80026d0 <DMA_CheckFifoParam+0xe8>
      break;
 80026c2:	bf00      	nop
 80026c4:	e004      	b.n	80026d0 <DMA_CheckFifoParam+0xe8>
      break;
 80026c6:	bf00      	nop
 80026c8:	e002      	b.n	80026d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80026ca:	bf00      	nop
 80026cc:	e000      	b.n	80026d0 <DMA_CheckFifoParam+0xe8>
      break;
 80026ce:	bf00      	nop
    }
  } 
  
  return status; 
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80026f0:	4ba9      	ldr	r3, [pc, #676]	; (8002998 <HAL_ETH_Init+0x2b8>)
 80026f2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e181      	b.n	8002a0a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fd10 	bl	8001140 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002720:	4b9e      	ldr	r3, [pc, #632]	; (800299c <HAL_ETH_Init+0x2bc>)
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	4a9d      	ldr	r2, [pc, #628]	; (800299c <HAL_ETH_Init+0x2bc>)
 8002726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800272a:	6453      	str	r3, [r2, #68]	; 0x44
 800272c:	4b9b      	ldr	r3, [pc, #620]	; (800299c <HAL_ETH_Init+0x2bc>)
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002738:	4b99      	ldr	r3, [pc, #612]	; (80029a0 <HAL_ETH_Init+0x2c0>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a98      	ldr	r2, [pc, #608]	; (80029a0 <HAL_ETH_Init+0x2c0>)
 800273e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002742:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002744:	4b96      	ldr	r3, [pc, #600]	; (80029a0 <HAL_ETH_Init+0x2c0>)
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4994      	ldr	r1, [pc, #592]	; (80029a0 <HAL_ETH_Init+0x2c0>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002768:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800276a:	f7ff fa21 	bl	8001bb0 <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002770:	e011      	b.n	8002796 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002772:	f7ff fa1d 	bl	8001bb0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002780:	d909      	bls.n	8002796 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2203      	movs	r2, #3
 8002786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e139      	b.n	8002a0a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e4      	bne.n	8002772 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f023 031c 	bic.w	r3, r3, #28
 80027b6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80027b8:	f002 f984 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 80027bc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4a78      	ldr	r2, [pc, #480]	; (80029a4 <HAL_ETH_Init+0x2c4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d908      	bls.n	80027d8 <HAL_ETH_Init+0xf8>
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4a77      	ldr	r2, [pc, #476]	; (80029a8 <HAL_ETH_Init+0x2c8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d804      	bhi.n	80027d8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e027      	b.n	8002828 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4a73      	ldr	r2, [pc, #460]	; (80029a8 <HAL_ETH_Init+0x2c8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d908      	bls.n	80027f2 <HAL_ETH_Init+0x112>
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4a6d      	ldr	r2, [pc, #436]	; (8002998 <HAL_ETH_Init+0x2b8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d204      	bcs.n	80027f2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f043 030c 	orr.w	r3, r3, #12
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	e01a      	b.n	8002828 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4a68      	ldr	r2, [pc, #416]	; (8002998 <HAL_ETH_Init+0x2b8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d303      	bcc.n	8002802 <HAL_ETH_Init+0x122>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4a6b      	ldr	r2, [pc, #428]	; (80029ac <HAL_ETH_Init+0x2cc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d911      	bls.n	8002826 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4a69      	ldr	r2, [pc, #420]	; (80029ac <HAL_ETH_Init+0x2cc>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d908      	bls.n	800281c <HAL_ETH_Init+0x13c>
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4a68      	ldr	r2, [pc, #416]	; (80029b0 <HAL_ETH_Init+0x2d0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d804      	bhi.n	800281c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e005      	b.n	8002828 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	e000      	b.n	8002828 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002826:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002830:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002834:	2100      	movs	r1, #0
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f954 	bl	8002ae4 <HAL_ETH_WritePHYRegister>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002846:	6939      	ldr	r1, [r7, #16]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f9b1 	bl	8002bb0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0d7      	b.n	8002a0a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800285a:	20ff      	movs	r0, #255	; 0xff
 800285c:	f7ff f9b4 	bl	8001bc8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80a5 	beq.w	80029b4 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800286a:	f7ff f9a1 	bl	8001bb0 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	461a      	mov	r2, r3
 8002876:	2101      	movs	r1, #1
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f8cb 	bl	8002a14 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800287e:	f7ff f997 	bl	8001bb0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d90f      	bls.n	80028b0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002894:	6939      	ldr	r1, [r7, #16]
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f98a 	bl	8002bb0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0ac      	b.n	8002a0a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0da      	beq.n	8002870 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80028ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028be:	2100      	movs	r1, #0
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f90f 	bl	8002ae4 <HAL_ETH_WritePHYRegister>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80028d0:	6939      	ldr	r1, [r7, #16]
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f96c 	bl	8002bb0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80028e0:	2301      	movs	r3, #1
 80028e2:	e092      	b.n	8002a0a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80028e4:	f7ff f964 	bl	8001bb0 <HAL_GetTick>
 80028e8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	461a      	mov	r2, r3
 80028f0:	2101      	movs	r1, #1
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f88e 	bl	8002a14 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80028f8:	f7ff f95a 	bl	8001bb0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d90f      	bls.n	800292a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800290e:	6939      	ldr	r1, [r7, #16]
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f94d 	bl	8002bb0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e06f      	b.n	8002a0a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0da      	beq.n	80028ea <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	461a      	mov	r2, r3
 800293a:	2110      	movs	r1, #16
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f869 	bl	8002a14 <HAL_ETH_ReadPHYRegister>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f92e 	bl	8002bb0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800295c:	2301      	movs	r3, #1
 800295e:	e054      	b.n	8002a0a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	e002      	b.n	800297a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	e035      	b.n	80029f8 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e030      	b.n	80029f8 <HAL_ETH_Init+0x318>
 8002996:	bf00      	nop
 8002998:	03938700 	.word	0x03938700
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	01312cff 	.word	0x01312cff
 80029a8:	02160ebf 	.word	0x02160ebf
 80029ac:	05f5e0ff 	.word	0x05f5e0ff
 80029b0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	08db      	lsrs	r3, r3, #3
 80029ba:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	2100      	movs	r1, #0
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f889 	bl	8002ae4 <HAL_ETH_WritePHYRegister>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8e6 	bl	8002bb0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e00c      	b.n	8002a0a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80029f0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80029f4:	f7ff f8e8 	bl	8001bc8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8d8 	bl	8002bb0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop

08002a14 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b82      	cmp	r3, #130	; 0x82
 8002a34:	d101      	bne.n	8002a3a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	e050      	b.n	8002adc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2282      	movs	r2, #130	; 0x82
 8002a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 031c 	and.w	r3, r3, #28
 8002a50:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8a1b      	ldrh	r3, [r3, #16]
 8002a56:	02db      	lsls	r3, r3, #11
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002a60:	897b      	ldrh	r3, [r7, #10]
 8002a62:	019b      	lsls	r3, r3, #6
 8002a64:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f023 0302 	bic.w	r3, r3, #2
 8002a74:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a86:	f7ff f893 	bl	8001bb0 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a8c:	e015      	b.n	8002aba <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002a8e:	f7ff f88f 	bl	8001bb0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d309      	bcc.n	8002ab2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e014      	b.n	8002adc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e4      	bne.n	8002a8e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	460b      	mov	r3, r1
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b42      	cmp	r3, #66	; 0x42
 8002b04:	d101      	bne.n	8002b0a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
 8002b08:	e04e      	b.n	8002ba8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2242      	movs	r2, #66	; 0x42
 8002b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 031c 	and.w	r3, r3, #28
 8002b20:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8a1b      	ldrh	r3, [r3, #16]
 8002b26:	02db      	lsls	r3, r3, #11
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002b30:	897b      	ldrh	r3, [r7, #10]
 8002b32:	019b      	lsls	r3, r3, #6
 8002b34:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b60:	f7ff f826 	bl	8001bb0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b66:	e015      	b.n	8002b94 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002b68:	f7ff f822 	bl	8001bb0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b76:	d309      	bcc.n	8002b8c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e00d      	b.n	8002ba8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e4      	bne.n	8002b68 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0b0      	sub	sp, #192	; 0xc0
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bcc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002bde:	2300      	movs	r3, #0
 8002be0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8002bfc:	e001      	b.n	8002c02 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c06:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002c1c:	2340      	movs	r3, #64	; 0x40
 8002c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002c84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c88:	4bab      	ldr	r3, [pc, #684]	; (8002f38 <ETH_MACDMAConfig+0x388>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c94:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002c98:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002c9c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002ca2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002ca6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002caa:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002cb0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002cb4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002cb8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002cba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002cbc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002cc0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002cc4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002cc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cd8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f7fe ff6f 	bl	8001bc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cf2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cf8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002cfc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002d02:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002d08:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002d0e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002d14:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002d18:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002d20:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d22:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f7fe ff4a 	bl	8001bc8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d3c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d46:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002d50:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002d5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d60:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d64:	4013      	ands	r3, r2
 8002d66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d6e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002d70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002d74:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002d7a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002d80:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002d86:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002d88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002d8c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002d8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002da0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7fe ff0b 	bl	8001bc8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dba:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002dbc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002dc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7fe fef6 	bl	8001bc8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002de4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dee:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002df4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002df8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e3a:	4413      	add	r3, r2
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002e42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e46:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <ETH_MACDMAConfig+0x38c>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e4e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002e50:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e52:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002e54:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002e56:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002e58:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002e5a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002e5c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002e5e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002e60:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002e62:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002e64:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002e66:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002e6a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002e6e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e82:	4413      	add	r3, r2
 8002e84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e88:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e92:	4413      	add	r3, r2
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f7fe fe94 	bl	8001bc8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002eae:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002eb4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002eb8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002ebc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002ec0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002ec6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002eca:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ee8:	2001      	movs	r0, #1
 8002eea:	f7fe fe6d 	bl	8001bc8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002efa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10d      	bne.n	8002f20 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	f241 031c 	movw	r3, #4124	; 0x101c
 8002f0c:	4413      	add	r3, r2
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6811      	ldr	r1, [r2, #0]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <ETH_MACDMAConfig+0x390>)
 8002f16:	431a      	orrs	r2, r3
 8002f18:	f241 031c 	movw	r3, #4124	; 0x101c
 8002f1c:	440b      	add	r3, r1
 8002f1e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	461a      	mov	r2, r3
 8002f26:	2100      	movs	r1, #0
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f80b 	bl	8002f44 <ETH_MACAddressConfig>
}
 8002f2e:	bf00      	nop
 8002f30:	37c0      	adds	r7, #192	; 0xc0
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	ff20810f 	.word	0xff20810f
 8002f3c:	f8de3f23 	.word	0xf8de3f23
 8002f40:	00010040 	.word	0x00010040

08002f44 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3305      	adds	r3, #5
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	3204      	adds	r2, #4
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <ETH_MACAddressConfig+0x68>)
 8002f66:	4413      	add	r3, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3303      	adds	r3, #3
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	061a      	lsls	r2, r3, #24
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3302      	adds	r3, #2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3301      	adds	r3, #1
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	7812      	ldrb	r2, [r2, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <ETH_MACAddressConfig+0x6c>)
 8002f96:	4413      	add	r3, r2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6013      	str	r3, [r2, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40028040 	.word	0x40028040
 8002fb0:	40028044 	.word	0x40028044

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	e175      	b.n	80032c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 8164 	bne.w	80032ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d005      	beq.n	800300a <HAL_GPIO_Init+0x56>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d130      	bne.n	800306c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003040:	2201      	movs	r2, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 0201 	and.w	r2, r3, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b03      	cmp	r3, #3
 8003076:	d017      	beq.n	80030a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d123      	bne.n	80030fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80be 	beq.w	80032ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_GPIO_Init+0x324>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_GPIO_Init+0x324>)
 8003144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <HAL_GPIO_Init+0x324>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003156:	4a61      	ldr	r2, [pc, #388]	; (80032dc <HAL_GPIO_Init+0x328>)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_GPIO_Init+0x32c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d037      	beq.n	80031f2 <HAL_GPIO_Init+0x23e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a57      	ldr	r2, [pc, #348]	; (80032e4 <HAL_GPIO_Init+0x330>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_GPIO_Init+0x23a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <HAL_GPIO_Init+0x334>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02b      	beq.n	80031ea <HAL_GPIO_Init+0x236>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a55      	ldr	r2, [pc, #340]	; (80032ec <HAL_GPIO_Init+0x338>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d025      	beq.n	80031e6 <HAL_GPIO_Init+0x232>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a54      	ldr	r2, [pc, #336]	; (80032f0 <HAL_GPIO_Init+0x33c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <HAL_GPIO_Init+0x22e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a53      	ldr	r2, [pc, #332]	; (80032f4 <HAL_GPIO_Init+0x340>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x22a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <HAL_GPIO_Init+0x344>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x226>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a51      	ldr	r2, [pc, #324]	; (80032fc <HAL_GPIO_Init+0x348>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x222>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a50      	ldr	r2, [pc, #320]	; (8003300 <HAL_GPIO_Init+0x34c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x21e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4f      	ldr	r2, [pc, #316]	; (8003304 <HAL_GPIO_Init+0x350>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x21a>
 80031ca:	2309      	movs	r3, #9
 80031cc:	e012      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ce:	230a      	movs	r3, #10
 80031d0:	e010      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031d2:	2308      	movs	r3, #8
 80031d4:	e00e      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031d6:	2307      	movs	r3, #7
 80031d8:	e00c      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031da:	2306      	movs	r3, #6
 80031dc:	e00a      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031de:	2305      	movs	r3, #5
 80031e0:	e008      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031e6:	2303      	movs	r3, #3
 80031e8:	e004      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031f2:	2300      	movs	r3, #0
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f002 0203 	and.w	r2, r2, #3
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	4093      	lsls	r3, r2
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003204:	4935      	ldr	r1, [pc, #212]	; (80032dc <HAL_GPIO_Init+0x328>)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003236:	4a34      	ldr	r2, [pc, #208]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_GPIO_Init+0x354>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003260:	4a29      	ldr	r2, [pc, #164]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003266:	4b28      	ldr	r3, [pc, #160]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <HAL_GPIO_Init+0x354>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <HAL_GPIO_Init+0x354>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	f67f ae86 	bls.w	8002fd4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	3724      	adds	r7, #36	; 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40020000 	.word	0x40020000
 80032e4:	40020400 	.word	0x40020400
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40021400 	.word	0x40021400
 80032f8:	40021800 	.word	0x40021800
 80032fc:	40021c00 	.word	0x40021c00
 8003300:	40022000 	.word	0x40022000
 8003304:	40022400 	.word	0x40022400
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
 8003318:	4613      	mov	r3, r2
 800331a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800331c:	787b      	ldrb	r3, [r7, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003328:	e003      	b.n	8003332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e07f      	b.n	8003452 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd ffa2 	bl	80012b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003390:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	e006      	b.n	80033c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d104      	bne.n	80033da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_I2C_Init+0x11c>)
 80033e6:	430b      	orrs	r3, r1
 80033e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69d9      	ldr	r1, [r3, #28]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1a      	ldr	r2, [r3, #32]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	02008000 	.word	0x02008000

08003460 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
  }
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d010      	beq.n	80034da <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	09db      	lsrs	r3, r3, #7
 80034bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	f043 0201 	orr.w	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034d8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	0a9b      	lsrs	r3, r3, #10
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d010      	beq.n	8003508 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	09db      	lsrs	r3, r3, #7
 80034ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f043 0208 	orr.w	r2, r3, #8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003506:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	0a5b      	lsrs	r3, r3, #9
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d010      	beq.n	8003536 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	09db      	lsrs	r3, r3, #7
 8003518:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f043 0202 	orr.w	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003534:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 030b 	and.w	r3, r3, #11
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003546:	68f9      	ldr	r1, [r7, #12]
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fb89 	bl	8003c60 <I2C_ITError>
  }
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	70fb      	strb	r3, [r7, #3]
 800358a:	4613      	mov	r3, r2
 800358c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <I2C_Slave_ISR_IT+0x24>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0ec      	b.n	80037d4 <I2C_Slave_ISR_IT+0x1fe>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800361a:	6939      	ldr	r1, [r7, #16]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f9bf 	bl	80039a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d04d      	beq.n	80036ca <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003636:	2b00      	cmp	r3, #0
 8003638:	d047      	beq.n	80036ca <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d128      	bne.n	8003696 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b28      	cmp	r3, #40	; 0x28
 800364e:	d108      	bne.n	8003662 <I2C_Slave_ISR_IT+0x8c>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003656:	d104      	bne.n	8003662 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003658:	6939      	ldr	r1, [r7, #16]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 faaa 	bl	8003bb4 <I2C_ITListenCplt>
 8003660:	e032      	b.n	80036c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b29      	cmp	r3, #41	; 0x29
 800366c:	d10e      	bne.n	800368c <I2C_Slave_ISR_IT+0xb6>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003674:	d00a      	beq.n	800368c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2210      	movs	r2, #16
 800367c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fbe5 	bl	8003e4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f92d 	bl	80038e4 <I2C_ITSlaveSeqCplt>
 800368a:	e01d      	b.n	80036c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2210      	movs	r2, #16
 8003692:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003694:	e096      	b.n	80037c4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2210      	movs	r2, #16
 800369c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f043 0204 	orr.w	r2, r3, #4
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <I2C_Slave_ISR_IT+0xe4>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b6:	f040 8085 	bne.w	80037c4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	4619      	mov	r1, r3
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 facd 	bl	8003c60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80036c6:	e07d      	b.n	80037c4 <I2C_Slave_ISR_IT+0x1ee>
 80036c8:	e07c      	b.n	80037c4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d030      	beq.n	8003738 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02a      	beq.n	8003738 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d018      	beq.n	800371e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d14f      	bne.n	80037c8 <I2C_Slave_ISR_IT+0x1f2>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800372e:	d04b      	beq.n	80037c8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f8d7 	bl	80038e4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003736:	e047      	b.n	80037c8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	08db      	lsrs	r3, r3, #3
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	08db      	lsrs	r3, r3, #3
 8003748:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003750:	6939      	ldr	r1, [r7, #16]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f842 	bl	80037dc <I2C_ITAddrCplt>
 8003758:	e037      	b.n	80037ca <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d031      	beq.n	80037ca <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02b      	beq.n	80037ca <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d018      	beq.n	80037ae <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80037ac:	e00d      	b.n	80037ca <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b4:	d002      	beq.n	80037bc <I2C_Slave_ISR_IT+0x1e6>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f891 	bl	80038e4 <I2C_ITSlaveSeqCplt>
 80037c2:	e002      	b.n	80037ca <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80037c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037f2:	2b28      	cmp	r3, #40	; 0x28
 80037f4:	d16a      	bne.n	80038cc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	b29b      	uxth	r3, r3
 8003810:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003814:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003822:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003830:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d138      	bne.n	80038ac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800383a:	897b      	ldrh	r3, [r7, #10]
 800383c:	09db      	lsrs	r3, r3, #7
 800383e:	b29a      	uxth	r2, r3
 8003840:	89bb      	ldrh	r3, [r7, #12]
 8003842:	4053      	eors	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	f003 0306 	and.w	r3, r3, #6
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11c      	bne.n	8003888 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	2b02      	cmp	r3, #2
 8003862:	d13b      	bne.n	80038dc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2208      	movs	r2, #8
 8003870:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800387a:	89ba      	ldrh	r2, [r7, #12]
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fe7c 	bl	800357e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003886:	e029      	b.n	80038dc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003888:	893b      	ldrh	r3, [r7, #8]
 800388a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800388c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fb1e 	bl	8003ed2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800389e:	89ba      	ldrh	r2, [r7, #12]
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fe6a 	bl	800357e <HAL_I2C_AddrCallback>
}
 80038aa:	e017      	b.n	80038dc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80038ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fb0e 	bl	8003ed2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038be:	89ba      	ldrh	r2, [r7, #12]
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fe5a 	bl	800357e <HAL_I2C_AddrCallback>
}
 80038ca:	e007      	b.n	80038dc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2208      	movs	r2, #8
 80038d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	0b9b      	lsrs	r3, r3, #14
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e00d      	b.n	8003936 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	0bdb      	lsrs	r3, r3, #15
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003934:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b29      	cmp	r3, #41	; 0x29
 8003940:	d112      	bne.n	8003968 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2228      	movs	r2, #40	; 0x28
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2221      	movs	r2, #33	; 0x21
 800394e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003950:	2101      	movs	r1, #1
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fabd 	bl	8003ed2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fdf8 	bl	8003556 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003966:	e017      	b.n	8003998 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b2a      	cmp	r3, #42	; 0x2a
 8003972:	d111      	bne.n	8003998 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2228      	movs	r2, #40	; 0x28
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2222      	movs	r2, #34	; 0x22
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003982:	2102      	movs	r1, #2
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 faa4 	bl	8003ed2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fde9 	bl	800356a <HAL_I2C_SlaveRxCpltCallback>
}
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039bc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2220      	movs	r2, #32
 80039c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	2b21      	cmp	r3, #33	; 0x21
 80039ca:	d002      	beq.n	80039d2 <I2C_ITSlaveCplt+0x32>
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b29      	cmp	r3, #41	; 0x29
 80039d0:	d108      	bne.n	80039e4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80039d2:	f248 0101 	movw	r1, #32769	; 0x8001
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa7b 	bl	8003ed2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2221      	movs	r2, #33	; 0x21
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
 80039e2:	e00d      	b.n	8003a00 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b22      	cmp	r3, #34	; 0x22
 80039e8:	d002      	beq.n	80039f0 <I2C_ITSlaveCplt+0x50>
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b2a      	cmp	r3, #42	; 0x2a
 80039ee:	d107      	bne.n	8003a00 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80039f0:	f248 0102 	movw	r1, #32770	; 0x8002
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fa6c 	bl	8003ed2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2222      	movs	r2, #34	; 0x22
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b64      	ldr	r3, [pc, #400]	; (8003bac <I2C_ITSlaveCplt+0x20c>)
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fa14 	bl	8003e4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	0b9b      	lsrs	r3, r3, #14
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d013      	beq.n	8003a5a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a40:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d020      	beq.n	8003a8c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a58:	e018      	b.n	8003a8c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	0bdb      	lsrs	r3, r3, #15
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d012      	beq.n	8003a8c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0304 	bic.w	r3, r3, #4
 8003a9e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f043 0204 	orr.w	r2, r3, #4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d010      	beq.n	8003b28 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8a7 	bl	8003c60 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b28      	cmp	r3, #40	; 0x28
 8003b1c:	d141      	bne.n	8003ba2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b1e:	6979      	ldr	r1, [r7, #20]
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f847 	bl	8003bb4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b26:	e03c      	b.n	8003ba2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b30:	d014      	beq.n	8003b5c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fed6 	bl	80038e4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <I2C_ITSlaveCplt+0x210>)
 8003b3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fd20 	bl	800359a <HAL_I2C_ListenCpltCallback>
}
 8003b5a:	e022      	b.n	8003ba2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b22      	cmp	r3, #34	; 0x22
 8003b66:	d10e      	bne.n	8003b86 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fcf3 	bl	800356a <HAL_I2C_SlaveRxCpltCallback>
}
 8003b84:	e00d      	b.n	8003ba2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fcda 	bl	8003556 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ba2:	bf00      	nop
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	fe00e800 	.word	0xfe00e800
 8003bb0:	ffff0000 	.word	0xffff0000

08003bb4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <I2C_ITListenCplt+0xa8>)
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d022      	beq.n	8003c32 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f043 0204 	orr.w	r2, r3, #4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c32:	f248 0103 	movw	r1, #32771	; 0x8003
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f94b 	bl	8003ed2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2210      	movs	r2, #16
 8003c42:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fca4 	bl	800359a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	ffff0000 	.word	0xffff0000

08003c60 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a5d      	ldr	r2, [pc, #372]	; (8003df4 <I2C_ITError+0x194>)
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	2b28      	cmp	r3, #40	; 0x28
 8003c96:	d005      	beq.n	8003ca4 <I2C_ITError+0x44>
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b29      	cmp	r3, #41	; 0x29
 8003c9c:	d002      	beq.n	8003ca4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca2:	d10b      	bne.n	8003cbc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ca4:	2103      	movs	r1, #3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f913 	bl	8003ed2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2228      	movs	r2, #40	; 0x28
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a50      	ldr	r2, [pc, #320]	; (8003df8 <I2C_ITError+0x198>)
 8003cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8003cba:	e011      	b.n	8003ce0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cbc:	f248 0103 	movw	r1, #32771	; 0x8003
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f906 	bl	8003ed2 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b60      	cmp	r3, #96	; 0x60
 8003cd0:	d003      	beq.n	8003cda <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d039      	beq.n	8003d62 <I2C_ITError+0x102>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b11      	cmp	r3, #17
 8003cf2:	d002      	beq.n	8003cfa <I2C_ITError+0x9a>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b21      	cmp	r3, #33	; 0x21
 8003cf8:	d133      	bne.n	8003d62 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d08:	d107      	bne.n	8003d1a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d18:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fc1e 	bl	8002560 <HAL_DMA_GetState>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d017      	beq.n	8003d5a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	4a33      	ldr	r2, [pc, #204]	; (8003dfc <I2C_ITError+0x19c>)
 8003d30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fa62 	bl	8002208 <HAL_DMA_Abort_IT>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d04d      	beq.n	8003de6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d54:	4610      	mov	r0, r2
 8003d56:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d58:	e045      	b.n	8003de6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f850 	bl	8003e00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d60:	e041      	b.n	8003de6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d039      	beq.n	8003dde <I2C_ITError+0x17e>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b12      	cmp	r3, #18
 8003d6e:	d002      	beq.n	8003d76 <I2C_ITError+0x116>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b22      	cmp	r3, #34	; 0x22
 8003d74:	d133      	bne.n	8003dde <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d84:	d107      	bne.n	8003d96 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fbe0 	bl	8002560 <HAL_DMA_GetState>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d017      	beq.n	8003dd6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <I2C_ITError+0x19c>)
 8003dac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fa24 	bl	8002208 <HAL_DMA_Abort_IT>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d011      	beq.n	8003dea <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dd4:	e009      	b.n	8003dea <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f812 	bl	8003e00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ddc:	e005      	b.n	8003dea <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f80e 	bl	8003e00 <I2C_TreatErrorCallback>
  }
}
 8003de4:	e002      	b.n	8003dec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dea:	bf00      	nop
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	ffff0000 	.word	0xffff0000
 8003df8:	080035d7 	.word	0x080035d7
 8003dfc:	08003e97 	.word	0x08003e97

08003e00 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b60      	cmp	r3, #96	; 0x60
 8003e12:	d10e      	bne.n	8003e32 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fbc9 	bl	80035c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e30:	e009      	b.n	8003e46 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fbb4 	bl	80035ae <HAL_I2C_ErrorCallback>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d103      	bne.n	8003e6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d007      	beq.n	8003e8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699a      	ldr	r2, [r3, #24]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	619a      	str	r2, [r3, #24]
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ff9b 	bl	8003e00 <I2C_TreatErrorCallback>
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	460b      	mov	r3, r1
 8003edc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00f      	beq.n	8003f0c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ef2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f00:	2b28      	cmp	r3, #40	; 0x28
 8003f02:	d003      	beq.n	8003f0c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00f      	beq.n	8003f36 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003f1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f2a:	2b28      	cmp	r3, #40	; 0x28
 8003f2c:	d003      	beq.n	8003f36 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da03      	bge.n	8003f46 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d103      	bne.n	8003f54 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d103      	bne.n	8003f62 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f043 0320 	orr.w	r3, r3, #32
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d103      	bne.n	8003f70 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6819      	ldr	r1, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	400a      	ands	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d138      	bne.n	8004016 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e032      	b.n	8004018 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2224      	movs	r2, #36	; 0x24
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b20      	cmp	r3, #32
 8004038:	d139      	bne.n	80040ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004044:	2302      	movs	r3, #2
 8004046:	e033      	b.n	80040b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004076:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	4b23      	ldr	r3, [pc, #140]	; (8004154 <HAL_PWREx_EnableOverDrive+0x98>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a22      	ldr	r2, [pc, #136]	; (8004154 <HAL_PWREx_EnableOverDrive+0x98>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
 80040d2:	4b20      	ldr	r3, [pc, #128]	; (8004154 <HAL_PWREx_EnableOverDrive+0x98>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040de:	4b1e      	ldr	r3, [pc, #120]	; (8004158 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040ea:	f7fd fd61 	bl	8001bb0 <HAL_GetTick>
 80040ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040f0:	e009      	b.n	8004106 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040f2:	f7fd fd5d 	bl	8001bb0 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004100:	d901      	bls.n	8004106 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e022      	b.n	800414c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004112:	d1ee      	bne.n	80040f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004114:	4b10      	ldr	r3, [pc, #64]	; (8004158 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0f      	ldr	r2, [pc, #60]	; (8004158 <HAL_PWREx_EnableOverDrive+0x9c>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004120:	f7fd fd46 	bl	8001bb0 <HAL_GetTick>
 8004124:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004126:	e009      	b.n	800413c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004128:	f7fd fd42 	bl	8001bb0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004136:	d901      	bls.n	800413c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e007      	b.n	800414c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_PWREx_EnableOverDrive+0x9c>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004148:	d1ee      	bne.n	8004128 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40023800 	.word	0x40023800
 8004158:	40007000 	.word	0x40007000

0800415c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004164:	2300      	movs	r3, #0
 8004166:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e29b      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8087 	beq.w	800428e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004180:	4b96      	ldr	r3, [pc, #600]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b04      	cmp	r3, #4
 800418a:	d00c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418c:	4b93      	ldr	r3, [pc, #588]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b08      	cmp	r3, #8
 8004196:	d112      	bne.n	80041be <HAL_RCC_OscConfig+0x62>
 8004198:	4b90      	ldr	r3, [pc, #576]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a4:	d10b      	bne.n	80041be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a6:	4b8d      	ldr	r3, [pc, #564]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d06c      	beq.n	800428c <HAL_RCC_OscConfig+0x130>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d168      	bne.n	800428c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e275      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c6:	d106      	bne.n	80041d6 <HAL_RCC_OscConfig+0x7a>
 80041c8:	4b84      	ldr	r3, [pc, #528]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a83      	ldr	r2, [pc, #524]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80041ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	e02e      	b.n	8004234 <HAL_RCC_OscConfig+0xd8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x9c>
 80041de:	4b7f      	ldr	r3, [pc, #508]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a7e      	ldr	r2, [pc, #504]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80041e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	4b7c      	ldr	r3, [pc, #496]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7b      	ldr	r2, [pc, #492]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80041f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e01d      	b.n	8004234 <HAL_RCC_OscConfig+0xd8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0xc0>
 8004202:	4b76      	ldr	r3, [pc, #472]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a75      	ldr	r2, [pc, #468]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b73      	ldr	r3, [pc, #460]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a72      	ldr	r2, [pc, #456]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0xd8>
 800421c:	4b6f      	ldr	r3, [pc, #444]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6e      	ldr	r2, [pc, #440]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b6c      	ldr	r3, [pc, #432]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a6b      	ldr	r2, [pc, #428]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 800422e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fd fcb8 	bl	8001bb0 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004244:	f7fd fcb4 	bl	8001bb0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e229      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b61      	ldr	r3, [pc, #388]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0xe8>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fca4 	bl	8001bb0 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7fd fca0 	bl	8001bb0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e215      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	4b57      	ldr	r3, [pc, #348]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x110>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d069      	beq.n	800436e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800429a:	4b50      	ldr	r3, [pc, #320]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b4d      	ldr	r3, [pc, #308]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d11c      	bne.n	80042ec <HAL_RCC_OscConfig+0x190>
 80042b2:	4b4a      	ldr	r3, [pc, #296]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d116      	bne.n	80042ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x17a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1e9      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b41      	ldr	r3, [pc, #260]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	493d      	ldr	r1, [pc, #244]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	e040      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d023      	beq.n	800433c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f4:	4b39      	ldr	r3, [pc, #228]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a38      	ldr	r2, [pc, #224]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fd fc56 	bl	8001bb0 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004308:	f7fd fc52 	bl	8001bb0 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1c7      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	4b30      	ldr	r3, [pc, #192]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4929      	ldr	r1, [pc, #164]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
 800433a:	e018      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433c:	4b27      	ldr	r3, [pc, #156]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a26      	ldr	r2, [pc, #152]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fc32 	bl	8001bb0 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004350:	f7fd fc2e 	bl	8001bb0 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e1a3      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004362:	4b1e      	ldr	r3, [pc, #120]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d038      	beq.n	80043ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d019      	beq.n	80043b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004382:	4b16      	ldr	r3, [pc, #88]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	4a15      	ldr	r2, [pc, #84]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438e:	f7fd fc0f 	bl	8001bb0 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004396:	f7fd fc0b 	bl	8001bb0 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e180      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x23a>
 80043b4:	e01a      	b.n	80043ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80043b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <HAL_RCC_OscConfig+0x280>)
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c2:	f7fd fbf5 	bl	8001bb0 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ca:	f7fd fbf1 	bl	8001bb0 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d903      	bls.n	80043e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e166      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
 80043dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	4b92      	ldr	r3, [pc, #584]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80043e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ee      	bne.n	80043ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80a4 	beq.w	8004542 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fa:	4b8c      	ldr	r3, [pc, #560]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10d      	bne.n	8004422 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	4a88      	ldr	r2, [pc, #544]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 800440c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004410:	6413      	str	r3, [r2, #64]	; 0x40
 8004412:	4b86      	ldr	r3, [pc, #536]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004422:	4b83      	ldr	r3, [pc, #524]	; (8004630 <HAL_RCC_OscConfig+0x4d4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d118      	bne.n	8004460 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800442e:	4b80      	ldr	r3, [pc, #512]	; (8004630 <HAL_RCC_OscConfig+0x4d4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7f      	ldr	r2, [pc, #508]	; (8004630 <HAL_RCC_OscConfig+0x4d4>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443a:	f7fd fbb9 	bl	8001bb0 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004442:	f7fd fbb5 	bl	8001bb0 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b64      	cmp	r3, #100	; 0x64
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e12a      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004454:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCC_OscConfig+0x4d4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x31a>
 8004468:	4b70      	ldr	r3, [pc, #448]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	4a6f      	ldr	r2, [pc, #444]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6713      	str	r3, [r2, #112]	; 0x70
 8004474:	e02d      	b.n	80044d2 <HAL_RCC_OscConfig+0x376>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x33c>
 800447e:	4b6b      	ldr	r3, [pc, #428]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a6a      	ldr	r2, [pc, #424]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	6713      	str	r3, [r2, #112]	; 0x70
 800448a:	4b68      	ldr	r3, [pc, #416]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	4a67      	ldr	r2, [pc, #412]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004490:	f023 0304 	bic.w	r3, r3, #4
 8004494:	6713      	str	r3, [r2, #112]	; 0x70
 8004496:	e01c      	b.n	80044d2 <HAL_RCC_OscConfig+0x376>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d10c      	bne.n	80044ba <HAL_RCC_OscConfig+0x35e>
 80044a0:	4b62      	ldr	r3, [pc, #392]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a61      	ldr	r2, [pc, #388]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80044a6:	f043 0304 	orr.w	r3, r3, #4
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	4b5f      	ldr	r3, [pc, #380]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	4a5e      	ldr	r2, [pc, #376]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	; 0x70
 80044b8:	e00b      	b.n	80044d2 <HAL_RCC_OscConfig+0x376>
 80044ba:	4b5c      	ldr	r3, [pc, #368]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a5b      	ldr	r2, [pc, #364]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	4b59      	ldr	r3, [pc, #356]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	4a58      	ldr	r2, [pc, #352]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80044cc:	f023 0304 	bic.w	r3, r3, #4
 80044d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d015      	beq.n	8004506 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fd fb69 	bl	8001bb0 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e0:	e00a      	b.n	80044f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e2:	f7fd fb65 	bl	8001bb0 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e0d8      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f8:	4b4c      	ldr	r3, [pc, #304]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ee      	beq.n	80044e2 <HAL_RCC_OscConfig+0x386>
 8004504:	e014      	b.n	8004530 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004506:	f7fd fb53 	bl	8001bb0 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fd fb4f 	bl	8001bb0 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e0c2      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004524:	4b41      	ldr	r3, [pc, #260]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ee      	bne.n	800450e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d105      	bne.n	8004542 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004536:	4b3d      	ldr	r3, [pc, #244]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a3c      	ldr	r2, [pc, #240]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80ae 	beq.w	80046a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800454c:	4b37      	ldr	r3, [pc, #220]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b08      	cmp	r3, #8
 8004556:	d06d      	beq.n	8004634 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d14b      	bne.n	80045f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004560:	4b32      	ldr	r3, [pc, #200]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a31      	ldr	r2, [pc, #196]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fd fb20 	bl	8001bb0 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004574:	f7fd fb1c 	bl	8001bb0 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e091      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004586:	4b29      	ldr	r3, [pc, #164]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69da      	ldr	r2, [r3, #28]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	3b01      	subs	r3, #1
 80045ac:	041b      	lsls	r3, r3, #16
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	071b      	lsls	r3, r3, #28
 80045be:	491b      	ldr	r1, [pc, #108]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80045ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd faee 	bl	8001bb0 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fd faea 	bl	8001bb0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e05f      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x47c>
 80045f6:	e057      	b.n	80046a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0b      	ldr	r2, [pc, #44]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 80045fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd fad4 	bl	8001bb0 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460c:	f7fd fad0 	bl	8001bb0 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e045      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461e:	4b03      	ldr	r3, [pc, #12]	; (800462c <HAL_RCC_OscConfig+0x4d0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x4b0>
 800462a:	e03d      	b.n	80046a8 <HAL_RCC_OscConfig+0x54c>
 800462c:	40023800 	.word	0x40023800
 8004630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004634:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <HAL_RCC_OscConfig+0x558>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d030      	beq.n	80046a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d129      	bne.n	80046a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d122      	bne.n	80046a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004664:	4013      	ands	r3, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800466a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800466c:	4293      	cmp	r3, r2
 800466e:	d119      	bne.n	80046a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	3b01      	subs	r3, #1
 800467e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d10f      	bne.n	80046a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d107      	bne.n	80046a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40023800 	.word	0x40023800

080046b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0d0      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b6a      	ldr	r3, [pc, #424]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d910      	bls.n	8004700 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b67      	ldr	r3, [pc, #412]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 020f 	bic.w	r2, r3, #15
 80046e6:	4965      	ldr	r1, [pc, #404]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b63      	ldr	r3, [pc, #396]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0b8      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d020      	beq.n	800474e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004718:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4a58      	ldr	r2, [pc, #352]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800471e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004722:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004730:	4b53      	ldr	r3, [pc, #332]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a52      	ldr	r2, [pc, #328]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800473a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800473c:	4b50      	ldr	r3, [pc, #320]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	494d      	ldr	r1, [pc, #308]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d040      	beq.n	80047dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d115      	bne.n	800479a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07f      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e073      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e06b      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4936      	ldr	r1, [pc, #216]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ac:	f7fd fa00 	bl	8001bb0 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fd f9fc 	bl	8001bb0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e053      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d210      	bcs.n	800480c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 020f 	bic.w	r2, r3, #15
 80047f2:	4922      	ldr	r1, [pc, #136]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e032      	b.n	8004872 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4916      	ldr	r1, [pc, #88]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	490e      	ldr	r1, [pc, #56]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 8004846:	4313      	orrs	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800484a:	f000 f885 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 800484e:	4602      	mov	r2, r0
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	490a      	ldr	r1, [pc, #40]	; (8004884 <HAL_RCC_ClockConfig+0x1cc>)
 800485c:	5ccb      	ldrb	r3, [r1, r3]
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <HAL_RCC_ClockConfig+0x1d0>)
 8004864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1d4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fd f882 	bl	8001974 <HAL_InitTick>

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40023c00 	.word	0x40023c00
 8004880:	40023800 	.word	0x40023800
 8004884:	08008c3c 	.word	0x08008c3c
 8004888:	20000000 	.word	0x20000000
 800488c:	20000004 	.word	0x20000004

08004890 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08c      	sub	sp, #48	; 0x30
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d127      	bne.n	80048f2 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80048a2:	4b2a      	ldr	r3, [pc, #168]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	4a29      	ldr	r2, [pc, #164]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	6313      	str	r3, [r2, #48]	; 0x30
 80048ae:	4b27      	ldr	r3, [pc, #156]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80048ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c0:	2302      	movs	r3, #2
 80048c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80048c4:	2303      	movs	r3, #3
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80048d0:	f107 031c 	add.w	r3, r7, #28
 80048d4:	4619      	mov	r1, r3
 80048d6:	481e      	ldr	r0, [pc, #120]	; (8004950 <HAL_RCC_MCOConfig+0xc0>)
 80048d8:	f7fe fb6c 	bl	8002fb4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	430b      	orrs	r3, r1
 80048ea:	4918      	ldr	r1, [pc, #96]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 80048f0:	e027      	b.n	8004942 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 80048f2:	4b16      	ldr	r3, [pc, #88]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	4a15      	ldr	r2, [pc, #84]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	6313      	str	r3, [r2, #48]	; 0x30
 80048fe:	4b13      	ldr	r3, [pc, #76]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800490a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800490e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004910:	2302      	movs	r3, #2
 8004912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004914:	2303      	movs	r3, #3
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800491c:	2300      	movs	r3, #0
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004920:	f107 031c 	add.w	r3, r7, #28
 8004924:	4619      	mov	r1, r3
 8004926:	480b      	ldr	r0, [pc, #44]	; (8004954 <HAL_RCC_MCOConfig+0xc4>)
 8004928:	f7fe fb44 	bl	8002fb4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	00d9      	lsls	r1, r3, #3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	430b      	orrs	r3, r1
 800493c:	4903      	ldr	r1, [pc, #12]	; (800494c <HAL_RCC_MCOConfig+0xbc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
}
 8004942:	bf00      	nop
 8004944:	3730      	adds	r7, #48	; 0x30
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800
 8004950:	40020000 	.word	0x40020000
 8004954:	40020800 	.word	0x40020800

08004958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	b5b0      	push	{r4, r5, r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800495e:	2100      	movs	r1, #0
 8004960:	6079      	str	r1, [r7, #4]
 8004962:	2100      	movs	r1, #0
 8004964:	60f9      	str	r1, [r7, #12]
 8004966:	2100      	movs	r1, #0
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800496a:	2100      	movs	r1, #0
 800496c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496e:	4952      	ldr	r1, [pc, #328]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004970:	6889      	ldr	r1, [r1, #8]
 8004972:	f001 010c 	and.w	r1, r1, #12
 8004976:	2908      	cmp	r1, #8
 8004978:	d00d      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0x3e>
 800497a:	2908      	cmp	r1, #8
 800497c:	f200 8094 	bhi.w	8004aa8 <HAL_RCC_GetSysClockFreq+0x150>
 8004980:	2900      	cmp	r1, #0
 8004982:	d002      	beq.n	800498a <HAL_RCC_GetSysClockFreq+0x32>
 8004984:	2904      	cmp	r1, #4
 8004986:	d003      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0x38>
 8004988:	e08e      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800498a:	4b4c      	ldr	r3, [pc, #304]	; (8004abc <HAL_RCC_GetSysClockFreq+0x164>)
 800498c:	60bb      	str	r3, [r7, #8]
      break;
 800498e:	e08e      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004990:	4b4b      	ldr	r3, [pc, #300]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004992:	60bb      	str	r3, [r7, #8]
      break;
 8004994:	e08b      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004996:	4948      	ldr	r1, [pc, #288]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004998:	6849      	ldr	r1, [r1, #4]
 800499a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800499e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049a0:	4945      	ldr	r1, [pc, #276]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049a2:	6849      	ldr	r1, [r1, #4]
 80049a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80049a8:	2900      	cmp	r1, #0
 80049aa:	d024      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ac:	4942      	ldr	r1, [pc, #264]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ae:	6849      	ldr	r1, [r1, #4]
 80049b0:	0989      	lsrs	r1, r1, #6
 80049b2:	4608      	mov	r0, r1
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80049bc:	f04f 0500 	mov.w	r5, #0
 80049c0:	ea00 0204 	and.w	r2, r0, r4
 80049c4:	ea01 0305 	and.w	r3, r1, r5
 80049c8:	493d      	ldr	r1, [pc, #244]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x168>)
 80049ca:	fb01 f003 	mul.w	r0, r1, r3
 80049ce:	2100      	movs	r1, #0
 80049d0:	fb01 f102 	mul.w	r1, r1, r2
 80049d4:	1844      	adds	r4, r0, r1
 80049d6:	493a      	ldr	r1, [pc, #232]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x168>)
 80049d8:	fba2 0101 	umull	r0, r1, r2, r1
 80049dc:	1863      	adds	r3, r4, r1
 80049de:	4619      	mov	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	f7fb fcc2 	bl	8000370 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e04a      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f6:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	461a      	mov	r2, r3
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a06:	f04f 0100 	mov.w	r1, #0
 8004a0a:	ea02 0400 	and.w	r4, r2, r0
 8004a0e:	ea03 0501 	and.w	r5, r3, r1
 8004a12:	4620      	mov	r0, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	014b      	lsls	r3, r1, #5
 8004a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a24:	0142      	lsls	r2, r0, #5
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	1b00      	subs	r0, r0, r4
 8004a2c:	eb61 0105 	sbc.w	r1, r1, r5
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	018b      	lsls	r3, r1, #6
 8004a3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a3e:	0182      	lsls	r2, r0, #6
 8004a40:	1a12      	subs	r2, r2, r0
 8004a42:	eb63 0301 	sbc.w	r3, r3, r1
 8004a46:	f04f 0000 	mov.w	r0, #0
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	00d9      	lsls	r1, r3, #3
 8004a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a54:	00d0      	lsls	r0, r2, #3
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	1912      	adds	r2, r2, r4
 8004a5c:	eb45 0303 	adc.w	r3, r5, r3
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	0299      	lsls	r1, r3, #10
 8004a6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a6e:	0290      	lsls	r0, r2, #10
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	f7fb fc76 	bl	8000370 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	3301      	adds	r3, #1
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	60bb      	str	r3, [r7, #8]
      break;
 8004aa6:	e002      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <HAL_RCC_GetSysClockFreq+0x164>)
 8004aaa:	60bb      	str	r3, [r7, #8]
      break;
 8004aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aae:	68bb      	ldr	r3, [r7, #8]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	017d7840 	.word	0x017d7840

08004ac4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000000 	.word	0x20000000

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ae0:	f7ff fff0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	0a9b      	lsrs	r3, r3, #10
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	08008c4c 	.word	0x08008c4c

08004b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b08:	f7ff ffdc 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	0b5b      	lsrs	r3, r3, #13
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	4903      	ldr	r1, [pc, #12]	; (8004b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800
 8004b28:	08008c4c 	.word	0x08008c4c

08004b2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	220f      	movs	r2, #15
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <HAL_RCC_GetClockConfig+0x5c>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0203 	and.w	r2, r3, #3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <HAL_RCC_GetClockConfig+0x5c>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <HAL_RCC_GetClockConfig+0x5c>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_GetClockConfig+0x5c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	08db      	lsrs	r3, r3, #3
 8004b66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <HAL_RCC_GetClockConfig+0x60>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 020f 	and.w	r2, r3, #15
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	601a      	str	r2, [r3, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40023c00 	.word	0x40023c00

08004b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d012      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bb8:	4b69      	ldr	r3, [pc, #420]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4a68      	ldr	r2, [pc, #416]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004bc2:	6093      	str	r3, [r2, #8]
 8004bc4:	4b66      	ldr	r3, [pc, #408]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bcc:	4964      	ldr	r1, [pc, #400]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d017      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bea:	4b5d      	ldr	r3, [pc, #372]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf8:	4959      	ldr	r1, [pc, #356]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c08:	d101      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c16:	2301      	movs	r3, #1
 8004c18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d017      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c26:	4b4e      	ldr	r3, [pc, #312]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	494a      	ldr	r1, [pc, #296]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c44:	d101      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c46:	2301      	movs	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c52:	2301      	movs	r3, #1
 8004c54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c62:	2301      	movs	r3, #1
 8004c64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 808b 	beq.w	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c74:	4b3a      	ldr	r3, [pc, #232]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	4a39      	ldr	r2, [pc, #228]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004c80:	4b37      	ldr	r3, [pc, #220]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c8c:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fc ff8a 	bl	8001bb0 <HAL_GetTick>
 8004c9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca0:	f7fc ff86 	bl	8001bb0 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	; 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e38f      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cb2:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cbe:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d035      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d02e      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cdc:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ce6:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf2:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	4a1a      	ldr	r2, [pc, #104]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004cfe:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d04:	4b16      	ldr	r3, [pc, #88]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d114      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fc ff4e 	bl	8001bb0 <HAL_GetTick>
 8004d14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d16:	e00a      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d18:	f7fc ff4a 	bl	8001bb0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e351      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0ee      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d46:	d111      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d56:	400b      	ands	r3, r1
 8004d58:	4901      	ldr	r1, [pc, #4]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
 8004d5e:	e00b      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40007000 	.word	0x40007000
 8004d68:	0ffffcff 	.word	0x0ffffcff
 8004d6c:	4bb3      	ldr	r3, [pc, #716]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4ab2      	ldr	r2, [pc, #712]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d76:	6093      	str	r3, [r2, #8]
 8004d78:	4bb0      	ldr	r3, [pc, #704]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d84:	49ad      	ldr	r1, [pc, #692]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d010      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d96:	4ba9      	ldr	r3, [pc, #676]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d9c:	4aa7      	ldr	r2, [pc, #668]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004da6:	4ba5      	ldr	r3, [pc, #660]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004da8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	49a2      	ldr	r1, [pc, #648]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dc4:	4b9d      	ldr	r3, [pc, #628]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd2:	499a      	ldr	r1, [pc, #616]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004de6:	4b95      	ldr	r3, [pc, #596]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df4:	4991      	ldr	r1, [pc, #580]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e08:	4b8c      	ldr	r3, [pc, #560]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e16:	4989      	ldr	r1, [pc, #548]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e2a:	4b84      	ldr	r3, [pc, #528]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	4980      	ldr	r1, [pc, #512]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e4c:	4b7b      	ldr	r3, [pc, #492]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	4978      	ldr	r1, [pc, #480]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e6e:	4b73      	ldr	r3, [pc, #460]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f023 020c 	bic.w	r2, r3, #12
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	496f      	ldr	r1, [pc, #444]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e90:	4b6a      	ldr	r3, [pc, #424]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9e:	4967      	ldr	r1, [pc, #412]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eb2:	4b62      	ldr	r3, [pc, #392]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec0:	495e      	ldr	r1, [pc, #376]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ed4:	4b59      	ldr	r3, [pc, #356]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	4956      	ldr	r1, [pc, #344]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ef6:	4b51      	ldr	r3, [pc, #324]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	494d      	ldr	r1, [pc, #308]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f18:	4b48      	ldr	r3, [pc, #288]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f26:	4945      	ldr	r1, [pc, #276]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f3a:	4b40      	ldr	r3, [pc, #256]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f48:	493c      	ldr	r1, [pc, #240]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f5c:	4b37      	ldr	r3, [pc, #220]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6a:	4934      	ldr	r1, [pc, #208]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d011      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f7e:	4b2f      	ldr	r3, [pc, #188]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f8c:	492b      	ldr	r1, [pc, #172]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fbe:	4b1f      	ldr	r3, [pc, #124]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fcc:	491b      	ldr	r1, [pc, #108]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00b      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fe0:	4b16      	ldr	r3, [pc, #88]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff0:	4912      	ldr	r1, [pc, #72]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00b      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005014:	4909      	ldr	r1, [pc, #36]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00f      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800502a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800502e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005038:	e002      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800503a:	bf00      	nop
 800503c:	40023800 	.word	0x40023800
 8005040:	4986      	ldr	r1, [pc, #536]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00b      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005054:	4b81      	ldr	r3, [pc, #516]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005064:	497d      	ldr	r1, [pc, #500]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d006      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80d6 	beq.w	800522c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005080:	4b76      	ldr	r3, [pc, #472]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a75      	ldr	r2, [pc, #468]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005086:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800508a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508c:	f7fc fd90 	bl	8001bb0 <HAL_GetTick>
 8005090:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005094:	f7fc fd8c 	bl	8001bb0 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e195      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050a6:	4b6d      	ldr	r3, [pc, #436]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d021      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d11d      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050c6:	4b65      	ldr	r3, [pc, #404]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050d4:	4b61      	ldr	r3, [pc, #388]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050da:	0e1b      	lsrs	r3, r3, #24
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	019a      	lsls	r2, r3, #6
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	431a      	orrs	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	061b      	lsls	r3, r3, #24
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	071b      	lsls	r3, r3, #28
 80050fa:	4958      	ldr	r1, [pc, #352]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005120:	2b00      	cmp	r3, #0
 8005122:	d02e      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800512c:	d129      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800512e:	4b4b      	ldr	r3, [pc, #300]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800513c:	4b47      	ldr	r3, [pc, #284]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005142:	0f1b      	lsrs	r3, r3, #28
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	019a      	lsls	r2, r3, #6
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	061b      	lsls	r3, r3, #24
 800515c:	431a      	orrs	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	071b      	lsls	r3, r3, #28
 8005162:	493e      	ldr	r1, [pc, #248]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800516a:	4b3c      	ldr	r3, [pc, #240]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005170:	f023 021f 	bic.w	r2, r3, #31
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	3b01      	subs	r3, #1
 800517a:	4938      	ldr	r1, [pc, #224]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01d      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800518e:	4b33      	ldr	r3, [pc, #204]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005194:	0e1b      	lsrs	r3, r3, #24
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800519c:	4b2f      	ldr	r3, [pc, #188]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a2:	0f1b      	lsrs	r3, r3, #28
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	019a      	lsls	r2, r3, #6
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	041b      	lsls	r3, r3, #16
 80051b6:	431a      	orrs	r2, r3
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	061b      	lsls	r3, r3, #24
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	071b      	lsls	r3, r3, #28
 80051c2:	4926      	ldr	r1, [pc, #152]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d011      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	019a      	lsls	r2, r3, #6
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	071b      	lsls	r3, r3, #28
 80051f2:	491a      	ldr	r1, [pc, #104]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a17      	ldr	r2, [pc, #92]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005206:	f7fc fcd3 	bl	8001bb0 <HAL_GetTick>
 800520a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800520e:	f7fc fccf 	bl	8001bb0 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b64      	cmp	r3, #100	; 0x64
 800521a:	d901      	bls.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e0d8      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005220:	4b0e      	ldr	r3, [pc, #56]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b01      	cmp	r3, #1
 8005230:	f040 80ce 	bne.w	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a08      	ldr	r2, [pc, #32]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005240:	f7fc fcb6 	bl	8001bb0 <HAL_GetTick>
 8005244:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005246:	e00b      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005248:	f7fc fcb2 	bl	8001bb0 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b64      	cmp	r3, #100	; 0x64
 8005254:	d904      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e0bb      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005260:	4b5e      	ldr	r3, [pc, #376]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800526c:	d0ec      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800528a:	2b00      	cmp	r3, #0
 800528c:	d02e      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d12a      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005296:	4b51      	ldr	r3, [pc, #324]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052a4:	4b4d      	ldr	r3, [pc, #308]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	0f1b      	lsrs	r3, r3, #28
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	019a      	lsls	r2, r3, #6
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	4944      	ldr	r1, [pc, #272]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052d2:	4b42      	ldr	r3, [pc, #264]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	493d      	ldr	r1, [pc, #244]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d022      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005300:	d11d      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005302:	4b36      	ldr	r3, [pc, #216]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005308:	0e1b      	lsrs	r3, r3, #24
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005310:	4b32      	ldr	r3, [pc, #200]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	0f1b      	lsrs	r3, r3, #28
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	019a      	lsls	r2, r3, #6
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	431a      	orrs	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	431a      	orrs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	071b      	lsls	r3, r3, #28
 8005336:	4929      	ldr	r1, [pc, #164]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d028      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800534a:	4b24      	ldr	r3, [pc, #144]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	0e1b      	lsrs	r3, r3, #24
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005358:	4b20      	ldr	r3, [pc, #128]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	019a      	lsls	r2, r3, #6
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	041b      	lsls	r3, r3, #16
 8005370:	431a      	orrs	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	071b      	lsls	r3, r3, #28
 800537e:	4917      	ldr	r1, [pc, #92]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005386:	4b15      	ldr	r3, [pc, #84]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800538c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	4911      	ldr	r1, [pc, #68]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800539c:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0e      	ldr	r2, [pc, #56]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a8:	f7fc fc02 	bl	8001bb0 <HAL_GetTick>
 80053ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053b0:	f7fc fbfe 	bl	8001bb0 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e007      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ce:	d1ef      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800

080053e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053fe:	f040 80a3 	bne.w	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005402:	4bac      	ldr	r3, [pc, #688]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005408:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005410:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005418:	f000 808a 	beq.w	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005422:	f200 8093 	bhi.w	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542c:	d07d      	beq.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005434:	f200 808a 	bhi.w	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005444:	d039      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005446:	e081      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005448:	4b9a      	ldr	r3, [pc, #616]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d108      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005454:	4b97      	ldr	r3, [pc, #604]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800545c:	4a96      	ldr	r2, [pc, #600]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e007      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005466:	4b93      	ldr	r3, [pc, #588]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800546e:	4a93      	ldr	r2, [pc, #588]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005476:	4b8f      	ldr	r3, [pc, #572]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	0e1b      	lsrs	r3, r3, #24
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005484:	4b8b      	ldr	r3, [pc, #556]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	099b      	lsrs	r3, r3, #6
 800548c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	fb02 f203 	mul.w	r2, r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800549e:	4b85      	ldr	r3, [pc, #532]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	617b      	str	r3, [r7, #20]
        break;
 80054b8:	e049      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054ba:	4b7e      	ldr	r3, [pc, #504]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d108      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054c6:	4b7b      	ldr	r3, [pc, #492]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ce:	4a7a      	ldr	r2, [pc, #488]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	e007      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054d8:	4b76      	ldr	r3, [pc, #472]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e0:	4a76      	ldr	r2, [pc, #472]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80054e8:	4b72      	ldr	r3, [pc, #456]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ee:	0e1b      	lsrs	r3, r3, #24
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80054f6:	4b6f      	ldr	r3, [pc, #444]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fc:	099b      	lsrs	r3, r3, #6
 80054fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	fb02 f203 	mul.w	r2, r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005510:	4b68      	ldr	r3, [pc, #416]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	617b      	str	r3, [r7, #20]
        break;
 8005528:	e011      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800552a:	4b65      	ldr	r3, [pc, #404]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800552c:	617b      	str	r3, [r7, #20]
        break;
 800552e:	e00e      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005530:	4b60      	ldr	r3, [pc, #384]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800553c:	4b5e      	ldr	r3, [pc, #376]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800553e:	617b      	str	r3, [r7, #20]
        break;
 8005540:	e005      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8005542:	4b5e      	ldr	r3, [pc, #376]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005544:	617b      	str	r3, [r7, #20]
        break;
 8005546:	e002      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 800554c:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005554:	f040 80a3 	bne.w	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005558:	4b56      	ldr	r3, [pc, #344]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800555a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800555e:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005566:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800556e:	f000 808a 	beq.w	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005578:	f200 8093 	bhi.w	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005582:	d07d      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800558a:	f200 808a 	bhi.w	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559a:	d039      	beq.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800559c:	e081      	b.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800559e:	4b45      	ldr	r3, [pc, #276]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d108      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055aa:	4b42      	ldr	r3, [pc, #264]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b2:	4a41      	ldr	r2, [pc, #260]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e007      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80055bc:	4b3d      	ldr	r3, [pc, #244]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055c4:	4a3d      	ldr	r2, [pc, #244]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80055c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80055cc:	4b39      	ldr	r3, [pc, #228]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	0e1b      	lsrs	r3, r3, #24
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80055da:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	099b      	lsrs	r3, r3, #6
 80055e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	fb02 f203 	mul.w	r2, r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80055f4:	4b2f      	ldr	r3, [pc, #188]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055fa:	0a1b      	lsrs	r3, r3, #8
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	3301      	adds	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
        break;
 800560e:	e049      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005610:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d108      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800561c:	4b25      	ldr	r3, [pc, #148]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005624:	4a24      	ldr	r2, [pc, #144]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e007      	b.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800562e:	4b21      	ldr	r3, [pc, #132]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005636:	4a21      	ldr	r2, [pc, #132]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005644:	0e1b      	lsrs	r3, r3, #24
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800564c:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800564e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005652:	099b      	lsrs	r3, r3, #6
 8005654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	fb02 f203 	mul.w	r2, r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	fbb2 f3f3 	udiv	r3, r2, r3
 800567c:	617b      	str	r3, [r7, #20]
        break;
 800567e:	e011      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005680:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005682:	617b      	str	r3, [r7, #20]
        break;
 8005684:	e00e      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005694:	617b      	str	r3, [r7, #20]
        break;
 8005696:	e005      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 8005698:	4b08      	ldr	r3, [pc, #32]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800569a:	617b      	str	r3, [r7, #20]
        break;
 800569c:	e002      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 80056a2:	bf00      	nop

  return frequency;
 80056a4:	697b      	ldr	r3, [r7, #20]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40023800 	.word	0x40023800
 80056b8:	00f42400 	.word	0x00f42400
 80056bc:	017d7840 	.word	0x017d7840
 80056c0:	00bb8000 	.word	0x00bb8000

080056c4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e01c      	b.n	8005710 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	795b      	ldrb	r3, [r3, #5]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fb fefe 	bl	80014e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0204 	orr.w	r2, r2, #4
 8005700:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e081      	b.n	800582e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	7f5b      	ldrb	r3, [r3, #29]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fb ff08 	bl	8001550 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	22ca      	movs	r2, #202	; 0xca
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2253      	movs	r2, #83	; 0x53
 8005754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f9fe 	bl	8005b58 <RTC_EnterInitMode>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	22ff      	movs	r2, #255	; 0xff
 8005768:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2204      	movs	r2, #4
 800576e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e05c      	b.n	800582e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6899      	ldr	r1, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <HAL_RTC_Init+0x120>)
 8005780:	400b      	ands	r3, r1
 8005782:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6899      	ldr	r1, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68d2      	ldr	r2, [r2, #12]
 80057aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6919      	ldr	r1, [r3, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	041a      	lsls	r2, r3, #16
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ce:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10e      	bne.n	80057fc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f992 	bl	8005b08 <HAL_RTC_WaitForSynchro>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	22ff      	movs	r2, #255	; 0xff
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2204      	movs	r2, #4
 80057f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e018      	b.n	800582e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0208 	bic.w	r2, r2, #8
 800580a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	22ff      	movs	r2, #255	; 0xff
 8005824:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800582c:	2300      	movs	r3, #0
  }
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	ff8fffbf 	.word	0xff8fffbf

0800583c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	7f1b      	ldrb	r3, [r3, #28]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_RTC_SetTime+0x1c>
 8005854:	2302      	movs	r3, #2
 8005856:	e0a8      	b.n	80059aa <HAL_RTC_SetTime+0x16e>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2202      	movs	r2, #2
 8005862:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d126      	bne.n	80058b8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d102      	bne.n	800587e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2200      	movs	r2, #0
 800587c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 f994 	bl	8005bb0 <RTC_ByteToBcd2>
 8005888:	4603      	mov	r3, r0
 800588a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f98d 	bl	8005bb0 <RTC_ByteToBcd2>
 8005896:	4603      	mov	r3, r0
 8005898:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800589a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	789b      	ldrb	r3, [r3, #2]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 f985 	bl	8005bb0 <RTC_ByteToBcd2>
 80058a6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80058a8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	7b1b      	ldrb	r3, [r3, #12]
 80058b0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e018      	b.n	80058ea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2200      	movs	r2, #0
 80058ca:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	785b      	ldrb	r3, [r3, #1]
 80058d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80058d8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80058de:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	7b1b      	ldrb	r3, [r3, #12]
 80058e4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	22ca      	movs	r2, #202	; 0xca
 80058f0:	625a      	str	r2, [r3, #36]	; 0x24
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2253      	movs	r2, #83	; 0x53
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f92c 	bl	8005b58 <RTC_EnterInitMode>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	22ff      	movs	r2, #255	; 0xff
 800590c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2204      	movs	r2, #4
 8005912:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e045      	b.n	80059aa <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	6979      	ldr	r1, [r7, #20]
 8005924:	4b23      	ldr	r3, [pc, #140]	; (80059b4 <HAL_RTC_SetTime+0x178>)
 8005926:	400b      	ands	r3, r1
 8005928:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005938:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6899      	ldr	r1, [r3, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	431a      	orrs	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005960:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d111      	bne.n	8005994 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f8c9 	bl	8005b08 <HAL_RTC_WaitForSynchro>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	22ff      	movs	r2, #255	; 0xff
 8005982:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2204      	movs	r2, #4
 8005988:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e00a      	b.n	80059aa <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	22ff      	movs	r2, #255	; 0xff
 800599a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80059a8:	2300      	movs	r3, #0
  }
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	007f7f7f 	.word	0x007f7f7f

080059b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059b8:	b590      	push	{r4, r7, lr}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	7f1b      	ldrb	r3, [r3, #28]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_RTC_SetDate+0x1c>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e092      	b.n	8005afa <HAL_RTC_SetDate+0x142>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2202      	movs	r2, #2
 80059de:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10e      	bne.n	8005a04 <HAL_RTC_SetDate+0x4c>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d008      	beq.n	8005a04 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	f023 0310 	bic.w	r3, r3, #16
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	330a      	adds	r3, #10
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d11c      	bne.n	8005a44 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	78db      	ldrb	r3, [r3, #3]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f8ce 	bl	8005bb0 <RTC_ByteToBcd2>
 8005a14:	4603      	mov	r3, r0
 8005a16:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 f8c7 	bl	8005bb0 <RTC_ByteToBcd2>
 8005a22:	4603      	mov	r3, r0
 8005a24:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a26:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	789b      	ldrb	r3, [r3, #2]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 f8bf 	bl	8005bb0 <RTC_ByteToBcd2>
 8005a32:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005a34:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	e00e      	b.n	8005a62 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	78db      	ldrb	r3, [r3, #3]
 8005a48:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005a50:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005a56:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	22ca      	movs	r2, #202	; 0xca
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2253      	movs	r2, #83	; 0x53
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f870 	bl	8005b58 <RTC_EnterInitMode>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	22ff      	movs	r2, #255	; 0xff
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2204      	movs	r2, #4
 8005a8a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e031      	b.n	8005afa <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	6979      	ldr	r1, [r7, #20]
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <HAL_RTC_SetDate+0x14c>)
 8005a9e:	400b      	ands	r3, r1
 8005aa0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ab0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d111      	bne.n	8005ae4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f821 	bl	8005b08 <HAL_RTC_WaitForSynchro>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	22ff      	movs	r2, #255	; 0xff
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e00a      	b.n	8005afa <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	22ff      	movs	r2, #255	; 0xff
 8005aea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd90      	pop	{r4, r7, pc}
 8005b02:	bf00      	nop
 8005b04:	00ffff3f 	.word	0x00ffff3f

08005b08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b22:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b24:	f7fc f844 	bl	8001bb0 <HAL_GetTick>
 8005b28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005b2a:	e009      	b.n	8005b40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b2c:	f7fc f840 	bl	8001bb0 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b3a:	d901      	bls.n	8005b40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e007      	b.n	8005b50 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0ee      	beq.n	8005b2c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d119      	bne.n	8005ba6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b7c:	f7fc f818 	bl	8001bb0 <HAL_GetTick>
 8005b80:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005b82:	e009      	b.n	8005b98 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b84:	f7fc f814 	bl	8001bb0 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b92:	d901      	bls.n	8005b98 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e007      	b.n	8005ba8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ee      	beq.n	8005b84 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005bbe:	e005      	b.n	8005bcc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	3b0a      	subs	r3, #10
 8005bca:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	d8f6      	bhi.n	8005bc0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	b2db      	uxtb	r3, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d904      	bls.n	8005c0e <HAL_SAI_InitProtocol+0x22>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	3b03      	subs	r3, #3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d812      	bhi.n	8005c32 <HAL_SAI_InitProtocol+0x46>
 8005c0c:	e008      	b.n	8005c20 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fb71 	bl	80062fc <SAI_InitI2S>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1e:	e00b      	b.n	8005c38 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fc16 	bl	8006458 <SAI_InitPCM>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c30:	e002      	b.n	8005c38 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	75fb      	strb	r3, [r7, #23]
      break;
 8005c36:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f808 	bl	8005c54 <HAL_SAI_Init>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e156      	b.n	8005f20 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fb fd8a 	bl	80017a0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fc5f 	bl	8006558 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d00c      	beq.n	8005cbc <HAL_SAI_Init+0x68>
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d80d      	bhi.n	8005cc2 <HAL_SAI_Init+0x6e>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_SAI_Init+0x5c>
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d003      	beq.n	8005cb6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005cae:	e008      	b.n	8005cc2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
      break;
 8005cb4:	e006      	b.n	8005cc4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	61fb      	str	r3, [r7, #28]
      break;
 8005cba:	e003      	b.n	8005cc4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	61fb      	str	r3, [r7, #28]
      break;
 8005cc0:	e000      	b.n	8005cc4 <HAL_SAI_Init+0x70>
      break;
 8005cc2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d81e      	bhi.n	8005d0a <HAL_SAI_Init+0xb6>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <HAL_SAI_Init+0x80>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005ceb 	.word	0x08005ceb
 8005cdc:	08005cf3 	.word	0x08005cf3
 8005ce0:	08005cfb 	.word	0x08005cfb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ce8:	e010      	b.n	8005d0c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cee:	617b      	str	r3, [r7, #20]
    }
    break;
 8005cf0:	e00c      	b.n	8005d0c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cf6:	617b      	str	r3, [r7, #20]
    }
    break;
 8005cf8:	e008      	b.n	8005d0c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cfe:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005d08:	e000      	b.n	8005d0c <HAL_SAI_Init+0xb8>
    default:
      break;
 8005d0a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a85      	ldr	r2, [pc, #532]	; (8005f28 <HAL_SAI_Init+0x2d4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d004      	beq.n	8005d20 <HAL_SAI_Init+0xcc>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a84      	ldr	r2, [pc, #528]	; (8005f2c <HAL_SAI_Init+0x2d8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d103      	bne.n	8005d28 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005d20:	4a83      	ldr	r2, [pc, #524]	; (8005f30 <HAL_SAI_Init+0x2dc>)
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e002      	b.n	8005d2e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005d28:	4a82      	ldr	r2, [pc, #520]	; (8005f34 <HAL_SAI_Init+0x2e0>)
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d04c      	beq.n	8005dd0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a7a      	ldr	r2, [pc, #488]	; (8005f28 <HAL_SAI_Init+0x2d4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_SAI_Init+0xfa>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a78      	ldr	r2, [pc, #480]	; (8005f2c <HAL_SAI_Init+0x2d8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d104      	bne.n	8005d58 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005d4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005d52:	f7ff fb45 	bl	80053e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d56:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a76      	ldr	r2, [pc, #472]	; (8005f38 <HAL_SAI_Init+0x2e4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_SAI_Init+0x118>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a75      	ldr	r2, [pc, #468]	; (8005f3c <HAL_SAI_Init+0x2e8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d104      	bne.n	8005d76 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005d6c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005d70:	f7ff fb36 	bl	80053e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d74:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	461a      	mov	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	025b      	lsls	r3, r3, #9
 8005d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4a6b      	ldr	r2, [pc, #428]	; (8005f40 <HAL_SAI_Init+0x2ec>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	08da      	lsrs	r2, r3, #3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005d9c:	68f9      	ldr	r1, [r7, #12]
 8005d9e:	4b68      	ldr	r3, [pc, #416]	; (8005f40 <HAL_SAI_Init+0x2ec>)
 8005da0:	fba3 2301 	umull	r2, r3, r3, r1
 8005da4:	08da      	lsrs	r2, r3, #3
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	1aca      	subs	r2, r1, r3
 8005db0:	2a08      	cmp	r2, #8
 8005db2:	d904      	bls.n	8005dbe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d104      	bne.n	8005dd0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	085a      	lsrs	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_SAI_Init+0x18c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d109      	bne.n	8005df4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_SAI_Init+0x198>
 8005de8:	2300      	movs	r3, #0
 8005dea:	e001      	b.n	8005df0 <HAL_SAI_Init+0x19c>
 8005dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	e008      	b.n	8005e06 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d102      	bne.n	8005e02 <HAL_SAI_Init+0x1ae>
 8005dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e00:	e000      	b.n	8005e04 <HAL_SAI_Init+0x1b0>
 8005e02:	2300      	movs	r3, #0
 8005e04:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4b4c      	ldr	r3, [pc, #304]	; (8005f44 <HAL_SAI_Init+0x2f0>)
 8005e12:	400b      	ands	r3, r1
 8005e14:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e2a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	431a      	orrs	r2, r3
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005e3e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e4a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	051b      	lsls	r3, r3, #20
 8005e52:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6859      	ldr	r1, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b38      	ldr	r3, [pc, #224]	; (8005f48 <HAL_SAI_Init+0x2f4>)
 8005e68:	400b      	ands	r3, r1
 8005e6a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6859      	ldr	r1, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6899      	ldr	r1, [r3, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <HAL_SAI_Init+0x2f8>)
 8005e96:	400b      	ands	r3, r1
 8005e98:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6899      	ldr	r1, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005eaa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005eb0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005eb6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005ec0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68d9      	ldr	r1, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005ed8:	400b      	ands	r3, r1
 8005eda:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68d9      	ldr	r1, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef0:	041b      	lsls	r3, r3, #16
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40015804 	.word	0x40015804
 8005f2c:	40015824 	.word	0x40015824
 8005f30:	40015800 	.word	0x40015800
 8005f34:	40015c00 	.word	0x40015c00
 8005f38:	40015c04 	.word	0x40015c04
 8005f3c:	40015c24 	.word	0x40015c24
 8005f40:	cccccccd 	.word	0xcccccccd
 8005f44:	ff05c010 	.word	0xff05c010
 8005f48:	ffff1ff0 	.word	0xffff1ff0
 8005f4c:	fff88000 	.word	0xfff88000

08005f50 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_SAI_Abort+0x1a>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e072      	b.n	8006050 <HAL_SAI_Abort+0x100>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f80:	d149      	bne.n	8006016 <HAL_SAI_Abort+0xc6>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005f90:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01c      	beq.n	8005fd4 <HAL_SAI_Abort+0x84>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b12      	cmp	r3, #18
 8005fa4:	d116      	bne.n	8005fd4 <HAL_SAI_Abort+0x84>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fc f8bc 	bl	8002128 <HAL_DMA_Abort>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00e      	beq.n	8005fd4 <HAL_SAI_Abort+0x84>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d009      	beq.n	8005fd4 <HAL_SAI_Abort+0x84>
        {
          status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01c      	beq.n	8006016 <HAL_SAI_Abort+0xc6>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b22      	cmp	r3, #34	; 0x22
 8005fe6:	d116      	bne.n	8006016 <HAL_SAI_Abort+0xc6>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fc f89b 	bl	8002128 <HAL_DMA_Abort>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00e      	beq.n	8006016 <HAL_SAI_Abort+0xc6>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	d009      	beq.n	8006016 <HAL_SAI_Abort+0xc6>
        {
          status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800600c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006026:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa95 	bl	8006558 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0208 	orr.w	r2, r2, #8
 800603c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8137 	beq.w	80062dc <HAL_SAI_IRQHandler+0x284>
  {
    uint32_t itflags = hsai->Instance->SR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d009      	beq.n	80060a4 <HAL_SAI_IRQHandler+0x4c>
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d004      	beq.n	80060a4 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
 80060a2:	e11b      	b.n	80062dc <HAL_SAI_IRQHandler+0x284>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01e      	beq.n	80060ec <HAL_SAI_IRQHandler+0x94>
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d019      	beq.n	80060ec <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2201      	movs	r2, #1
 80060be:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b22      	cmp	r3, #34	; 0x22
 80060ca:	d101      	bne.n	80060d0 <HAL_SAI_IRQHandler+0x78>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <HAL_SAI_IRQHandler+0x7a>
 80060d0:	2302      	movs	r3, #2
 80060d2:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f8ff 	bl	80062e8 <HAL_SAI_ErrorCallback>
 80060ea:	e0f7      	b.n	80062dc <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d011      	beq.n	800611a <HAL_SAI_IRQHandler+0xc2>
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00c      	beq.n	800611a <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2202      	movs	r2, #2
 8006106:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80e5 	beq.w	80062dc <HAL_SAI_IRQHandler+0x284>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006116:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 8006118:	e0e0      	b.n	80062dc <HAL_SAI_IRQHandler+0x284>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d039      	beq.n	8006198 <HAL_SAI_IRQHandler+0x140>
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d034      	beq.n	8006198 <HAL_SAI_IRQHandler+0x140>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2220      	movs	r2, #32
 8006134:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800613c:	f043 0204 	orr.w	r2, r3, #4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01c      	beq.n	800618a <HAL_SAI_IRQHandler+0x132>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <HAL_SAI_IRQHandler+0x114>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800615c:	4a61      	ldr	r2, [pc, #388]	; (80062e4 <HAL_SAI_IRQHandler+0x28c>)
 800615e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006164:	4618      	mov	r0, r3
 8006166:	f7fc f84f 	bl	8002208 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800616a:	e0b4      	b.n	80062d6 <HAL_SAI_IRQHandler+0x27e>
        }
        else if (hsai->hdmarx != NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80b0 	beq.w	80062d6 <HAL_SAI_IRQHandler+0x27e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	4a5a      	ldr	r2, [pc, #360]	; (80062e4 <HAL_SAI_IRQHandler+0x28c>)
 800617c:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006182:	4618      	mov	r0, r3
 8006184:	f7fc f840 	bl	8002208 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006188:	e0a5      	b.n	80062d6 <HAL_SAI_IRQHandler+0x27e>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff fee0 	bl	8005f50 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f8a9 	bl	80062e8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006196:	e09e      	b.n	80062d6 <HAL_SAI_IRQHandler+0x27e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d038      	beq.n	8006214 <HAL_SAI_IRQHandler+0x1bc>
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d033      	beq.n	8006214 <HAL_SAI_IRQHandler+0x1bc>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2240      	movs	r2, #64	; 0x40
 80061b2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ba:	f043 0208 	orr.w	r2, r3, #8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01b      	beq.n	8006206 <HAL_SAI_IRQHandler+0x1ae>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_SAI_IRQHandler+0x192>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061da:	4a42      	ldr	r2, [pc, #264]	; (80062e4 <HAL_SAI_IRQHandler+0x28c>)
 80061dc:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fc f810 	bl	8002208 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80061e8:	e077      	b.n	80062da <HAL_SAI_IRQHandler+0x282>
        }
        else if (hsai->hdmarx != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d073      	beq.n	80062da <HAL_SAI_IRQHandler+0x282>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	4a3b      	ldr	r2, [pc, #236]	; (80062e4 <HAL_SAI_IRQHandler+0x28c>)
 80061f8:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fc f802 	bl	8002208 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006204:	e069      	b.n	80062da <HAL_SAI_IRQHandler+0x282>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fea2 	bl	8005f50 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f86b 	bl	80062e8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006212:	e062      	b.n	80062da <HAL_SAI_IRQHandler+0x282>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d041      	beq.n	80062a2 <HAL_SAI_IRQHandler+0x24a>
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d03c      	beq.n	80062a2 <HAL_SAI_IRQHandler+0x24a>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2204      	movs	r2, #4
 800622e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006236:	f043 0220 	orr.w	r2, r3, #32
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <HAL_SAI_IRQHandler+0x204>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800624c:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <HAL_SAI_IRQHandler+0x28c>)
 800624e:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmatx);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006254:	4618      	mov	r0, r3
 8006256:	f7fb ffd7 	bl	8002208 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 800625a:	e03f      	b.n	80062dc <HAL_SAI_IRQHandler+0x284>
      }
      else if (hsai->hdmarx != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <HAL_SAI_IRQHandler+0x220>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006268:	4a1e      	ldr	r2, [pc, #120]	; (80062e4 <HAL_SAI_IRQHandler+0x28c>)
 800626a:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmarx);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	4618      	mov	r0, r3
 8006272:	f7fb ffc9 	bl	8002208 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 8006276:	e031      	b.n	80062dc <HAL_SAI_IRQHandler+0x284>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2200      	movs	r2, #0
 800627e:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006288:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f824 	bl	80062e8 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 80062a0:	e01c      	b.n	80062dc <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d017      	beq.n	80062dc <HAL_SAI_IRQHandler+0x284>
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d012      	beq.n	80062dc <HAL_SAI_IRQHandler+0x284>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2210      	movs	r2, #16
 80062bc:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c4:	f043 0210 	orr.w	r2, r3, #16
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f80a 	bl	80062e8 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80062d4:	e002      	b.n	80062dc <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80062d6:	bf00      	nop
 80062d8:	e000      	b.n	80062dc <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80062da:	bf00      	nop
}
 80062dc:	bf00      	nop
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	080065c9 	.word	0x080065c9

080062e8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <SAI_InitI2S+0x2a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d103      	bne.n	800632e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	63da      	str	r2, [r3, #60]	; 0x3c
 800632c:	e002      	b.n	8006334 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800633a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006342:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e076      	b.n	800644c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d107      	bne.n	8006374 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006370:	651a      	str	r2, [r3, #80]	; 0x50
 8006372:	e006      	b.n	8006382 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800637a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	651a      	str	r2, [r3, #80]	; 0x50
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d84f      	bhi.n	8006428 <SAI_InitI2S+0x12c>
 8006388:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <SAI_InitI2S+0x94>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063c3 	.word	0x080063c3
 8006398:	080063e5 	.word	0x080063e5
 800639c:	08006407 	.word	0x08006407

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2280      	movs	r2, #128	; 0x80
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	085b      	lsrs	r3, r3, #1
 80063b4:	011a      	lsls	r2, r3, #4
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2240      	movs	r2, #64	; 0x40
 80063be:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80063c0:	e034      	b.n	800642c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2280      	movs	r2, #128	; 0x80
 80063c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	019a      	lsls	r2, r3, #6
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2280      	movs	r2, #128	; 0x80
 80063e0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80063e2:	e023      	b.n	800642c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	22c0      	movs	r2, #192	; 0xc0
 80063e8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	019a      	lsls	r2, r3, #6
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006404:	e012      	b.n	800642c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	22e0      	movs	r2, #224	; 0xe0
 800640a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	019a      	lsls	r2, r3, #6
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	085b      	lsrs	r3, r3, #1
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2280      	movs	r2, #128	; 0x80
 8006424:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006426:	e001      	b.n	800642c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e00f      	b.n	800644c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d10b      	bne.n	800644a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d102      	bne.n	800643e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2210      	movs	r2, #16
 800643c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b02      	cmp	r3, #2
 8006442:	d102      	bne.n	800644a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2208      	movs	r2, #8
 8006448:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <SAI_InitPCM+0x2a>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d103      	bne.n	800648a <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	63da      	str	r2, [r3, #60]	; 0x3c
 8006488:	e002      	b.n	8006490 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800649c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80064a4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064b8:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d103      	bne.n	80064c8 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	645a      	str	r2, [r3, #68]	; 0x44
 80064c6:	e002      	b.n	80064ce <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	220d      	movs	r2, #13
 80064cc:	645a      	str	r2, [r3, #68]	; 0x44
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d837      	bhi.n	8006544 <SAI_InitPCM+0xec>
 80064d4:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <SAI_InitPCM+0x84>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	08006503 	.word	0x08006503
 80064e4:	08006519 	.word	0x08006519
 80064e8:	0800652f 	.word	0x0800652f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2280      	movs	r2, #128	; 0x80
 80064f0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	011a      	lsls	r2, r3, #4
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2240      	movs	r2, #64	; 0x40
 80064fe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006500:	e022      	b.n	8006548 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2280      	movs	r2, #128	; 0x80
 8006506:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2280      	movs	r2, #128	; 0x80
 8006514:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006516:	e017      	b.n	8006548 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	22c0      	movs	r2, #192	; 0xc0
 800651c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2280      	movs	r2, #128	; 0x80
 800652a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800652c:	e00c      	b.n	8006548 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	22e0      	movs	r2, #224	; 0xe0
 8006532:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2280      	movs	r2, #128	; 0x80
 8006540:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006542:	e001      	b.n	8006548 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop

08006558 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006560:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <SAI_Disable+0x68>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a17      	ldr	r2, [pc, #92]	; (80065c4 <SAI_Disable+0x6c>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	0b1b      	lsrs	r3, r3, #12
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006582:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	1e5a      	subs	r2, r3, #1
 8006588:	60fa      	str	r2, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006594:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	72fb      	strb	r3, [r7, #11]
      break;
 80065a2:	e006      	b.n	80065b2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e8      	bne.n	8006584 <SAI_Disable+0x2c>

  return status;
 80065b2:	7afb      	ldrb	r3, [r7, #11]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	20000000 	.word	0x20000000
 80065c4:	95cbec1b 	.word	0x95cbec1b

080065c8 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80065e4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065f6:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d00a      	beq.n	8006618 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f7ff ffa8 	bl	8006558 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0208 	orr.w	r2, r2, #8
 8006616:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7ff fe5d 	bl	80062e8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e038      	b.n	80066be <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7fb f893 	bl	800178c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3308      	adds	r3, #8
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f000 ff67 	bl	8007544 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	461a      	mov	r2, r3
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	f000 ffef 	bl	8007664 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6858      	ldr	r0, [r3, #4]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	f001 f836 	bl	8007704 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	6892      	ldr	r2, [r2, #8]
 80066a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	6892      	ldr	r2, [r2, #8]
 80066ac:	f041 0101 	orr.w	r1, r1, #1
 80066b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e049      	b.n	800676c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f841 	bl	8006774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f000 f9ff 	bl	8006b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d001      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e054      	b.n	800684a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a26      	ldr	r2, [pc, #152]	; (8006858 <HAL_TIM_Base_Start_IT+0xd0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d022      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ca:	d01d      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a22      	ldr	r2, [pc, #136]	; (800685c <HAL_TIM_Base_Start_IT+0xd4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d018      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a21      	ldr	r2, [pc, #132]	; (8006860 <HAL_TIM_Base_Start_IT+0xd8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <HAL_TIM_Base_Start_IT+0xdc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00e      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1e      	ldr	r2, [pc, #120]	; (8006868 <HAL_TIM_Base_Start_IT+0xe0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1c      	ldr	r2, [pc, #112]	; (800686c <HAL_TIM_Base_Start_IT+0xe4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <HAL_TIM_Base_Start_IT+0xe8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d115      	bne.n	8006834 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <HAL_TIM_Base_Start_IT+0xec>)
 8006810:	4013      	ands	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b06      	cmp	r3, #6
 8006818:	d015      	beq.n	8006846 <HAL_TIM_Base_Start_IT+0xbe>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006820:	d011      	beq.n	8006846 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0201 	orr.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006832:	e008      	b.n	8006846 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e000      	b.n	8006848 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006846:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40010400 	.word	0x40010400
 800686c:	40014000 	.word	0x40014000
 8006870:	40001800 	.word	0x40001800
 8006874:	00010007 	.word	0x00010007

08006878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d122      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b02      	cmp	r3, #2
 800689a:	d11b      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0202 	mvn.w	r2, #2
 80068a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f905 	bl	8006aca <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f8f7 	bl	8006ab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f908 	bl	8006ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d122      	bne.n	8006928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d11b      	bne.n	8006928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0204 	mvn.w	r2, #4
 80068f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f8db 	bl	8006aca <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8cd 	bl	8006ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f8de 	bl	8006ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b08      	cmp	r3, #8
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b08      	cmp	r3, #8
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0208 	mvn.w	r2, #8
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2204      	movs	r2, #4
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f8b1 	bl	8006aca <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8a3 	bl	8006ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f8b4 	bl	8006ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b10      	cmp	r3, #16
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b10      	cmp	r3, #16
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0210 	mvn.w	r2, #16
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2208      	movs	r2, #8
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f887 	bl	8006aca <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f879 	bl	8006ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f88a 	bl	8006ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d10e      	bne.n	80069fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d107      	bne.n	80069fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0201 	mvn.w	r2, #1
 80069f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fa fb1e 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	2b80      	cmp	r3, #128	; 0x80
 8006a08:	d10e      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	d107      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f91a 	bl	8006c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a36:	d10e      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a42:	2b80      	cmp	r3, #128	; 0x80
 8006a44:	d107      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f90d 	bl	8006c70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b40      	cmp	r3, #64	; 0x40
 8006a62:	d10e      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f838 	bl	8006af2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d10e      	bne.n	8006aae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d107      	bne.n	8006aae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f06f 0220 	mvn.w	r2, #32
 8006aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f8cd 	bl	8006c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a40      	ldr	r2, [pc, #256]	; (8006c1c <TIM_Base_SetConfig+0x114>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d013      	beq.n	8006b48 <TIM_Base_SetConfig+0x40>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b26:	d00f      	beq.n	8006b48 <TIM_Base_SetConfig+0x40>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a3d      	ldr	r2, [pc, #244]	; (8006c20 <TIM_Base_SetConfig+0x118>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00b      	beq.n	8006b48 <TIM_Base_SetConfig+0x40>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a3c      	ldr	r2, [pc, #240]	; (8006c24 <TIM_Base_SetConfig+0x11c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <TIM_Base_SetConfig+0x40>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a3b      	ldr	r2, [pc, #236]	; (8006c28 <TIM_Base_SetConfig+0x120>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_Base_SetConfig+0x40>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a3a      	ldr	r2, [pc, #232]	; (8006c2c <TIM_Base_SetConfig+0x124>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d108      	bne.n	8006b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a2f      	ldr	r2, [pc, #188]	; (8006c1c <TIM_Base_SetConfig+0x114>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d02b      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b68:	d027      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a2c      	ldr	r2, [pc, #176]	; (8006c20 <TIM_Base_SetConfig+0x118>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d023      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a2b      	ldr	r2, [pc, #172]	; (8006c24 <TIM_Base_SetConfig+0x11c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d01f      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a2a      	ldr	r2, [pc, #168]	; (8006c28 <TIM_Base_SetConfig+0x120>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01b      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a29      	ldr	r2, [pc, #164]	; (8006c2c <TIM_Base_SetConfig+0x124>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d017      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a28      	ldr	r2, [pc, #160]	; (8006c30 <TIM_Base_SetConfig+0x128>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a27      	ldr	r2, [pc, #156]	; (8006c34 <TIM_Base_SetConfig+0x12c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00f      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a26      	ldr	r2, [pc, #152]	; (8006c38 <TIM_Base_SetConfig+0x130>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00b      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a25      	ldr	r2, [pc, #148]	; (8006c3c <TIM_Base_SetConfig+0x134>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a24      	ldr	r2, [pc, #144]	; (8006c40 <TIM_Base_SetConfig+0x138>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a23      	ldr	r2, [pc, #140]	; (8006c44 <TIM_Base_SetConfig+0x13c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d108      	bne.n	8006bcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <TIM_Base_SetConfig+0x114>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_Base_SetConfig+0xf8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <TIM_Base_SetConfig+0x124>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d103      	bne.n	8006c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	691a      	ldr	r2, [r3, #16]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	615a      	str	r2, [r3, #20]
}
 8006c0e:	bf00      	nop
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40010000 	.word	0x40010000
 8006c20:	40000400 	.word	0x40000400
 8006c24:	40000800 	.word	0x40000800
 8006c28:	40000c00 	.word	0x40000c00
 8006c2c:	40010400 	.word	0x40010400
 8006c30:	40014000 	.word	0x40014000
 8006c34:	40014400 	.word	0x40014400
 8006c38:	40014800 	.word	0x40014800
 8006c3c:	40001800 	.word	0x40001800
 8006c40:	40001c00 	.word	0x40001c00
 8006c44:	40002000 	.word	0x40002000

08006c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e040      	b.n	8006d18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fa fc80 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2224      	movs	r2, #36	; 0x24
 8006cb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f82c 	bl	8006d20 <UART_SetConfig>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e022      	b.n	8006d18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa82 	bl	80071e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0201 	orr.w	r2, r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fb09 	bl	8007328 <UART_CheckIdleState>
 8006d16:	4603      	mov	r3, r0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4ba7      	ldr	r3, [pc, #668]	; (8006fe8 <UART_SetConfig+0x2c8>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6812      	ldr	r2, [r2, #0]
 8006d52:	6979      	ldr	r1, [r7, #20]
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a95      	ldr	r2, [pc, #596]	; (8006fec <UART_SetConfig+0x2cc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d120      	bne.n	8006dde <UART_SetConfig+0xbe>
 8006d9c:	4b94      	ldr	r3, [pc, #592]	; (8006ff0 <UART_SetConfig+0x2d0>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d816      	bhi.n	8006dd8 <UART_SetConfig+0xb8>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x90>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006dcd 	.word	0x08006dcd
 8006db8:	08006dc7 	.word	0x08006dc7
 8006dbc:	08006dd3 	.word	0x08006dd3
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	e14f      	b.n	8007066 <UART_SetConfig+0x346>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	77fb      	strb	r3, [r7, #31]
 8006dca:	e14c      	b.n	8007066 <UART_SetConfig+0x346>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e149      	b.n	8007066 <UART_SetConfig+0x346>
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	e146      	b.n	8007066 <UART_SetConfig+0x346>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e143      	b.n	8007066 <UART_SetConfig+0x346>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a84      	ldr	r2, [pc, #528]	; (8006ff4 <UART_SetConfig+0x2d4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d132      	bne.n	8006e4e <UART_SetConfig+0x12e>
 8006de8:	4b81      	ldr	r3, [pc, #516]	; (8006ff0 <UART_SetConfig+0x2d0>)
 8006dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dee:	f003 030c 	and.w	r3, r3, #12
 8006df2:	2b0c      	cmp	r3, #12
 8006df4:	d828      	bhi.n	8006e48 <UART_SetConfig+0x128>
 8006df6:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <UART_SetConfig+0xdc>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e31 	.word	0x08006e31
 8006e00:	08006e49 	.word	0x08006e49
 8006e04:	08006e49 	.word	0x08006e49
 8006e08:	08006e49 	.word	0x08006e49
 8006e0c:	08006e3d 	.word	0x08006e3d
 8006e10:	08006e49 	.word	0x08006e49
 8006e14:	08006e49 	.word	0x08006e49
 8006e18:	08006e49 	.word	0x08006e49
 8006e1c:	08006e37 	.word	0x08006e37
 8006e20:	08006e49 	.word	0x08006e49
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e49 	.word	0x08006e49
 8006e2c:	08006e43 	.word	0x08006e43
 8006e30:	2300      	movs	r3, #0
 8006e32:	77fb      	strb	r3, [r7, #31]
 8006e34:	e117      	b.n	8007066 <UART_SetConfig+0x346>
 8006e36:	2302      	movs	r3, #2
 8006e38:	77fb      	strb	r3, [r7, #31]
 8006e3a:	e114      	b.n	8007066 <UART_SetConfig+0x346>
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	e111      	b.n	8007066 <UART_SetConfig+0x346>
 8006e42:	2308      	movs	r3, #8
 8006e44:	77fb      	strb	r3, [r7, #31]
 8006e46:	e10e      	b.n	8007066 <UART_SetConfig+0x346>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e10b      	b.n	8007066 <UART_SetConfig+0x346>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a69      	ldr	r2, [pc, #420]	; (8006ff8 <UART_SetConfig+0x2d8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d120      	bne.n	8006e9a <UART_SetConfig+0x17a>
 8006e58:	4b65      	ldr	r3, [pc, #404]	; (8006ff0 <UART_SetConfig+0x2d0>)
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e62:	2b30      	cmp	r3, #48	; 0x30
 8006e64:	d013      	beq.n	8006e8e <UART_SetConfig+0x16e>
 8006e66:	2b30      	cmp	r3, #48	; 0x30
 8006e68:	d814      	bhi.n	8006e94 <UART_SetConfig+0x174>
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	d009      	beq.n	8006e82 <UART_SetConfig+0x162>
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	d810      	bhi.n	8006e94 <UART_SetConfig+0x174>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <UART_SetConfig+0x15c>
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d006      	beq.n	8006e88 <UART_SetConfig+0x168>
 8006e7a:	e00b      	b.n	8006e94 <UART_SetConfig+0x174>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e0f1      	b.n	8007066 <UART_SetConfig+0x346>
 8006e82:	2302      	movs	r3, #2
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e0ee      	b.n	8007066 <UART_SetConfig+0x346>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e0eb      	b.n	8007066 <UART_SetConfig+0x346>
 8006e8e:	2308      	movs	r3, #8
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e0e8      	b.n	8007066 <UART_SetConfig+0x346>
 8006e94:	2310      	movs	r3, #16
 8006e96:	77fb      	strb	r3, [r7, #31]
 8006e98:	e0e5      	b.n	8007066 <UART_SetConfig+0x346>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a57      	ldr	r2, [pc, #348]	; (8006ffc <UART_SetConfig+0x2dc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d120      	bne.n	8006ee6 <UART_SetConfig+0x1c6>
 8006ea4:	4b52      	ldr	r3, [pc, #328]	; (8006ff0 <UART_SetConfig+0x2d0>)
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006eae:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb0:	d013      	beq.n	8006eda <UART_SetConfig+0x1ba>
 8006eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb4:	d814      	bhi.n	8006ee0 <UART_SetConfig+0x1c0>
 8006eb6:	2b80      	cmp	r3, #128	; 0x80
 8006eb8:	d009      	beq.n	8006ece <UART_SetConfig+0x1ae>
 8006eba:	2b80      	cmp	r3, #128	; 0x80
 8006ebc:	d810      	bhi.n	8006ee0 <UART_SetConfig+0x1c0>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <UART_SetConfig+0x1a8>
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d006      	beq.n	8006ed4 <UART_SetConfig+0x1b4>
 8006ec6:	e00b      	b.n	8006ee0 <UART_SetConfig+0x1c0>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	e0cb      	b.n	8007066 <UART_SetConfig+0x346>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e0c8      	b.n	8007066 <UART_SetConfig+0x346>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e0c5      	b.n	8007066 <UART_SetConfig+0x346>
 8006eda:	2308      	movs	r3, #8
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e0c2      	b.n	8007066 <UART_SetConfig+0x346>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e0bf      	b.n	8007066 <UART_SetConfig+0x346>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a45      	ldr	r2, [pc, #276]	; (8007000 <UART_SetConfig+0x2e0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d125      	bne.n	8006f3c <UART_SetConfig+0x21c>
 8006ef0:	4b3f      	ldr	r3, [pc, #252]	; (8006ff0 <UART_SetConfig+0x2d0>)
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006efe:	d017      	beq.n	8006f30 <UART_SetConfig+0x210>
 8006f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f04:	d817      	bhi.n	8006f36 <UART_SetConfig+0x216>
 8006f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0a:	d00b      	beq.n	8006f24 <UART_SetConfig+0x204>
 8006f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f10:	d811      	bhi.n	8006f36 <UART_SetConfig+0x216>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <UART_SetConfig+0x1fe>
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1a:	d006      	beq.n	8006f2a <UART_SetConfig+0x20a>
 8006f1c:	e00b      	b.n	8006f36 <UART_SetConfig+0x216>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	77fb      	strb	r3, [r7, #31]
 8006f22:	e0a0      	b.n	8007066 <UART_SetConfig+0x346>
 8006f24:	2302      	movs	r3, #2
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e09d      	b.n	8007066 <UART_SetConfig+0x346>
 8006f2a:	2304      	movs	r3, #4
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e09a      	b.n	8007066 <UART_SetConfig+0x346>
 8006f30:	2308      	movs	r3, #8
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e097      	b.n	8007066 <UART_SetConfig+0x346>
 8006f36:	2310      	movs	r3, #16
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	e094      	b.n	8007066 <UART_SetConfig+0x346>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a30      	ldr	r2, [pc, #192]	; (8007004 <UART_SetConfig+0x2e4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d125      	bne.n	8006f92 <UART_SetConfig+0x272>
 8006f46:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <UART_SetConfig+0x2d0>)
 8006f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f54:	d017      	beq.n	8006f86 <UART_SetConfig+0x266>
 8006f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f5a:	d817      	bhi.n	8006f8c <UART_SetConfig+0x26c>
 8006f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f60:	d00b      	beq.n	8006f7a <UART_SetConfig+0x25a>
 8006f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f66:	d811      	bhi.n	8006f8c <UART_SetConfig+0x26c>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <UART_SetConfig+0x254>
 8006f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f70:	d006      	beq.n	8006f80 <UART_SetConfig+0x260>
 8006f72:	e00b      	b.n	8006f8c <UART_SetConfig+0x26c>
 8006f74:	2301      	movs	r3, #1
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e075      	b.n	8007066 <UART_SetConfig+0x346>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e072      	b.n	8007066 <UART_SetConfig+0x346>
 8006f80:	2304      	movs	r3, #4
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e06f      	b.n	8007066 <UART_SetConfig+0x346>
 8006f86:	2308      	movs	r3, #8
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e06c      	b.n	8007066 <UART_SetConfig+0x346>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e069      	b.n	8007066 <UART_SetConfig+0x346>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a1c      	ldr	r2, [pc, #112]	; (8007008 <UART_SetConfig+0x2e8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d137      	bne.n	800700c <UART_SetConfig+0x2ec>
 8006f9c:	4b14      	ldr	r3, [pc, #80]	; (8006ff0 <UART_SetConfig+0x2d0>)
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006fa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006faa:	d017      	beq.n	8006fdc <UART_SetConfig+0x2bc>
 8006fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fb0:	d817      	bhi.n	8006fe2 <UART_SetConfig+0x2c2>
 8006fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb6:	d00b      	beq.n	8006fd0 <UART_SetConfig+0x2b0>
 8006fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fbc:	d811      	bhi.n	8006fe2 <UART_SetConfig+0x2c2>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <UART_SetConfig+0x2aa>
 8006fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc6:	d006      	beq.n	8006fd6 <UART_SetConfig+0x2b6>
 8006fc8:	e00b      	b.n	8006fe2 <UART_SetConfig+0x2c2>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	77fb      	strb	r3, [r7, #31]
 8006fce:	e04a      	b.n	8007066 <UART_SetConfig+0x346>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	77fb      	strb	r3, [r7, #31]
 8006fd4:	e047      	b.n	8007066 <UART_SetConfig+0x346>
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	77fb      	strb	r3, [r7, #31]
 8006fda:	e044      	b.n	8007066 <UART_SetConfig+0x346>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	77fb      	strb	r3, [r7, #31]
 8006fe0:	e041      	b.n	8007066 <UART_SetConfig+0x346>
 8006fe2:	2310      	movs	r3, #16
 8006fe4:	77fb      	strb	r3, [r7, #31]
 8006fe6:	e03e      	b.n	8007066 <UART_SetConfig+0x346>
 8006fe8:	efff69f3 	.word	0xefff69f3
 8006fec:	40011000 	.word	0x40011000
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	40004400 	.word	0x40004400
 8006ff8:	40004800 	.word	0x40004800
 8006ffc:	40004c00 	.word	0x40004c00
 8007000:	40005000 	.word	0x40005000
 8007004:	40011400 	.word	0x40011400
 8007008:	40007800 	.word	0x40007800
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a71      	ldr	r2, [pc, #452]	; (80071d8 <UART_SetConfig+0x4b8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d125      	bne.n	8007062 <UART_SetConfig+0x342>
 8007016:	4b71      	ldr	r3, [pc, #452]	; (80071dc <UART_SetConfig+0x4bc>)
 8007018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007020:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007024:	d017      	beq.n	8007056 <UART_SetConfig+0x336>
 8007026:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800702a:	d817      	bhi.n	800705c <UART_SetConfig+0x33c>
 800702c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007030:	d00b      	beq.n	800704a <UART_SetConfig+0x32a>
 8007032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007036:	d811      	bhi.n	800705c <UART_SetConfig+0x33c>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <UART_SetConfig+0x324>
 800703c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007040:	d006      	beq.n	8007050 <UART_SetConfig+0x330>
 8007042:	e00b      	b.n	800705c <UART_SetConfig+0x33c>
 8007044:	2300      	movs	r3, #0
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e00d      	b.n	8007066 <UART_SetConfig+0x346>
 800704a:	2302      	movs	r3, #2
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e00a      	b.n	8007066 <UART_SetConfig+0x346>
 8007050:	2304      	movs	r3, #4
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e007      	b.n	8007066 <UART_SetConfig+0x346>
 8007056:	2308      	movs	r3, #8
 8007058:	77fb      	strb	r3, [r7, #31]
 800705a:	e004      	b.n	8007066 <UART_SetConfig+0x346>
 800705c:	2310      	movs	r3, #16
 800705e:	77fb      	strb	r3, [r7, #31]
 8007060:	e001      	b.n	8007066 <UART_SetConfig+0x346>
 8007062:	2310      	movs	r3, #16
 8007064:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800706e:	d15a      	bne.n	8007126 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007070:	7ffb      	ldrb	r3, [r7, #31]
 8007072:	2b08      	cmp	r3, #8
 8007074:	d827      	bhi.n	80070c6 <UART_SetConfig+0x3a6>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <UART_SetConfig+0x35c>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070a9 	.word	0x080070a9
 8007084:	080070b1 	.word	0x080070b1
 8007088:	080070c7 	.word	0x080070c7
 800708c:	080070b7 	.word	0x080070b7
 8007090:	080070c7 	.word	0x080070c7
 8007094:	080070c7 	.word	0x080070c7
 8007098:	080070c7 	.word	0x080070c7
 800709c:	080070bf 	.word	0x080070bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a0:	f7fd fd1c 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 80070a4:	61b8      	str	r0, [r7, #24]
        break;
 80070a6:	e013      	b.n	80070d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a8:	f7fd fd2c 	bl	8004b04 <HAL_RCC_GetPCLK2Freq>
 80070ac:	61b8      	str	r0, [r7, #24]
        break;
 80070ae:	e00f      	b.n	80070d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b0:	4b4b      	ldr	r3, [pc, #300]	; (80071e0 <UART_SetConfig+0x4c0>)
 80070b2:	61bb      	str	r3, [r7, #24]
        break;
 80070b4:	e00c      	b.n	80070d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b6:	f7fd fc4f 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80070ba:	61b8      	str	r0, [r7, #24]
        break;
 80070bc:	e008      	b.n	80070d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070c2:	61bb      	str	r3, [r7, #24]
        break;
 80070c4:	e004      	b.n	80070d0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	77bb      	strb	r3, [r7, #30]
        break;
 80070ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d074      	beq.n	80071c0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	005a      	lsls	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	441a      	add	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d916      	bls.n	8007120 <UART_SetConfig+0x400>
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f8:	d212      	bcs.n	8007120 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f023 030f 	bic.w	r3, r3, #15
 8007102:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	b29b      	uxth	r3, r3
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	b29a      	uxth	r2, r3
 8007110:	89fb      	ldrh	r3, [r7, #14]
 8007112:	4313      	orrs	r3, r2
 8007114:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	89fa      	ldrh	r2, [r7, #14]
 800711c:	60da      	str	r2, [r3, #12]
 800711e:	e04f      	b.n	80071c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	77bb      	strb	r3, [r7, #30]
 8007124:	e04c      	b.n	80071c0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007126:	7ffb      	ldrb	r3, [r7, #31]
 8007128:	2b08      	cmp	r3, #8
 800712a:	d828      	bhi.n	800717e <UART_SetConfig+0x45e>
 800712c:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <UART_SetConfig+0x414>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	08007159 	.word	0x08007159
 8007138:	08007161 	.word	0x08007161
 800713c:	08007169 	.word	0x08007169
 8007140:	0800717f 	.word	0x0800717f
 8007144:	0800716f 	.word	0x0800716f
 8007148:	0800717f 	.word	0x0800717f
 800714c:	0800717f 	.word	0x0800717f
 8007150:	0800717f 	.word	0x0800717f
 8007154:	08007177 	.word	0x08007177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007158:	f7fd fcc0 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 800715c:	61b8      	str	r0, [r7, #24]
        break;
 800715e:	e013      	b.n	8007188 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007160:	f7fd fcd0 	bl	8004b04 <HAL_RCC_GetPCLK2Freq>
 8007164:	61b8      	str	r0, [r7, #24]
        break;
 8007166:	e00f      	b.n	8007188 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007168:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <UART_SetConfig+0x4c0>)
 800716a:	61bb      	str	r3, [r7, #24]
        break;
 800716c:	e00c      	b.n	8007188 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800716e:	f7fd fbf3 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8007172:	61b8      	str	r0, [r7, #24]
        break;
 8007174:	e008      	b.n	8007188 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800717a:	61bb      	str	r3, [r7, #24]
        break;
 800717c:	e004      	b.n	8007188 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	77bb      	strb	r3, [r7, #30]
        break;
 8007186:	bf00      	nop
    }

    if (pclk != 0U)
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d018      	beq.n	80071c0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	085a      	lsrs	r2, r3, #1
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	441a      	add	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b0f      	cmp	r3, #15
 80071a6:	d909      	bls.n	80071bc <UART_SetConfig+0x49c>
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ae:	d205      	bcs.n	80071bc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	e001      	b.n	80071c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80071cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3720      	adds	r7, #32
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40007c00 	.word	0x40007c00
 80071dc:	40023800 	.word	0x40023800
 80071e0:	00f42400 	.word	0x00f42400

080071e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01a      	beq.n	80072fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072e2:	d10a      	bne.n	80072fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	605a      	str	r2, [r3, #4]
  }
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af02      	add	r7, sp, #8
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007338:	f7fa fc3a 	bl	8001bb0 <HAL_GetTick>
 800733c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b08      	cmp	r3, #8
 800734a:	d10e      	bne.n	800736a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800734c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f82d 	bl	80073ba <UART_WaitOnFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e023      	b.n	80073b2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b04      	cmp	r3, #4
 8007376:	d10e      	bne.n	8007396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f817 	bl	80073ba <UART_WaitOnFlagUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e00d      	b.n	80073b2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2220      	movs	r2, #32
 800739a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b09c      	sub	sp, #112	; 0x70
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	603b      	str	r3, [r7, #0]
 80073c6:	4613      	mov	r3, r2
 80073c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ca:	e0a5      	b.n	8007518 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073d2:	f000 80a1 	beq.w	8007518 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073d6:	f7fa fbeb 	bl	8001bb0 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d302      	bcc.n	80073ec <UART_WaitOnFlagUntilTimeout+0x32>
 80073e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d13e      	bne.n	800746a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007400:	667b      	str	r3, [r7, #100]	; 0x64
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800740a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800740c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007410:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e6      	bne.n	80073ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	663b      	str	r3, [r7, #96]	; 0x60
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800743e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007440:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800744c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e5      	bne.n	800741e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e067      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d04f      	beq.n	8007518 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007486:	d147      	bne.n	8007518 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007490:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
 80074b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	613b      	str	r3, [r7, #16]
   return(result);
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	66bb      	str	r3, [r7, #104]	; 0x68
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074e4:	623a      	str	r2, [r7, #32]
 80074e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	69f9      	ldr	r1, [r7, #28]
 80074ea:	6a3a      	ldr	r2, [r7, #32]
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2220      	movs	r2, #32
 80074fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2220      	movs	r2, #32
 8007508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e010      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69da      	ldr	r2, [r3, #28]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4013      	ands	r3, r2
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	bf0c      	ite	eq
 8007528:	2301      	moveq	r3, #1
 800752a:	2300      	movne	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	461a      	mov	r2, r3
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	429a      	cmp	r2, r3
 8007534:	f43f af4a 	beq.w	80073cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3770      	adds	r7, #112	; 0x70
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	6812      	ldr	r2, [r2, #0]
 800755c:	f023 0101 	bic.w	r1, r3, #1
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b08      	cmp	r3, #8
 800756c:	d102      	bne.n	8007574 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800756e:	2340      	movs	r3, #64	; 0x40
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	e001      	b.n	8007578 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007584:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800758a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007590:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007596:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800759c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80075a2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80075a8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80075ae:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80075b4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 80075dc:	4b20      	ldr	r3, [pc, #128]	; (8007660 <FMC_NORSRAM_Init+0x11c>)
 80075de:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075e6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075ee:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80075f6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	43db      	mvns	r3, r3
 8007606:	ea02 0103 	and.w	r1, r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	4319      	orrs	r1, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007620:	d10c      	bne.n	800763c <FMC_NORSRAM_Init+0xf8>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d008      	beq.n	800763c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	0008fb7f 	.word	0x0008fb7f

08007664 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	431a      	orrs	r2, r3
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	431a      	orrs	r2, r3
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	431a      	orrs	r2, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	3b01      	subs	r3, #1
 80076a0:	051b      	lsls	r3, r3, #20
 80076a2:	431a      	orrs	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	3b02      	subs	r3, #2
 80076aa:	061b      	lsls	r3, r3, #24
 80076ac:	431a      	orrs	r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	3201      	adds	r2, #1
 80076b8:	4319      	orrs	r1, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076cc:	d113      	bne.n	80076f6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076d6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	3b01      	subs	r3, #1
 80076de:	051b      	lsls	r3, r3, #20
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	431a      	orrs	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007718:	d11d      	bne.n	8007756 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007724:	4013      	ands	r3, r2
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	6811      	ldr	r1, [r2, #0]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	6852      	ldr	r2, [r2, #4]
 800772e:	0112      	lsls	r2, r2, #4
 8007730:	4311      	orrs	r1, r2
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	6892      	ldr	r2, [r2, #8]
 8007736:	0212      	lsls	r2, r2, #8
 8007738:	4311      	orrs	r1, r2
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	6992      	ldr	r2, [r2, #24]
 800773e:	4311      	orrs	r1, r2
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	68d2      	ldr	r2, [r2, #12]
 8007744:	0412      	lsls	r2, r2, #16
 8007746:	430a      	orrs	r2, r1
 8007748:	ea43 0102 	orr.w	r1, r3, r2
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007754:	e005      	b.n	8007762 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800775e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	cff00000 	.word	0xcff00000

08007774 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007786:	2b84      	cmp	r3, #132	; 0x84
 8007788:	d005      	beq.n	8007796 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800778a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4413      	add	r3, r2
 8007792:	3303      	adds	r3, #3
 8007794:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007796:	68fb      	ldr	r3, [r7, #12]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80077a8:	f000 fae8 	bl	8007d7c <vTaskStartScheduler>
  
  return osOK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80077b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077b4:	b089      	sub	sp, #36	; 0x24
 80077b6:	af04      	add	r7, sp, #16
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d020      	beq.n	8007806 <osThreadCreate+0x54>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01c      	beq.n	8007806 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685c      	ldr	r4, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681d      	ldr	r5, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691e      	ldr	r6, [r3, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff ffc8 	bl	8007774 <makeFreeRtosPriority>
 80077e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077ee:	9202      	str	r2, [sp, #8]
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	9100      	str	r1, [sp, #0]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4632      	mov	r2, r6
 80077f8:	4629      	mov	r1, r5
 80077fa:	4620      	mov	r0, r4
 80077fc:	f000 f8ed 	bl	80079da <xTaskCreateStatic>
 8007800:	4603      	mov	r3, r0
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e01c      	b.n	8007840 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685c      	ldr	r4, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007812:	b29e      	uxth	r6, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff ffaa 	bl	8007774 <makeFreeRtosPriority>
 8007820:	4602      	mov	r2, r0
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	9200      	str	r2, [sp, #0]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	4632      	mov	r2, r6
 800782e:	4629      	mov	r1, r5
 8007830:	4620      	mov	r0, r4
 8007832:	f000 f935 	bl	8007aa0 <xTaskCreate>
 8007836:	4603      	mov	r3, r0
 8007838:	2b01      	cmp	r3, #1
 800783a:	d001      	beq.n	8007840 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800783c:	2300      	movs	r3, #0
 800783e:	e000      	b.n	8007842 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800784a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <osDelay+0x16>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	e000      	b.n	8007862 <osDelay+0x18>
 8007860:	2301      	movs	r3, #1
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fa54 	bl	8007d10 <vTaskDelay>
  
  return osOK;
 8007868:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f103 0208 	add.w	r2, r3, #8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800788a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f103 0208 	add.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f103 0208 	add.w	r2, r3, #8
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
}
 8007908:	bf00      	nop
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800792a:	d103      	bne.n	8007934 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	e00c      	b.n	800794e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3308      	adds	r3, #8
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	e002      	b.n	8007942 <vListInsert+0x2e>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	429a      	cmp	r2, r3
 800794c:	d2f6      	bcs.n	800793c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	601a      	str	r2, [r3, #0]
}
 800797a:	bf00      	nop
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6892      	ldr	r2, [r2, #8]
 800799c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6852      	ldr	r2, [r2, #4]
 80079a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d103      	bne.n	80079ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	1e5a      	subs	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b08e      	sub	sp, #56	; 0x38
 80079de:	af04      	add	r7, sp, #16
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	607a      	str	r2, [r7, #4]
 80079e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10c      	bne.n	8007a08 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	b672      	cpsid	i
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	b662      	cpsie	i
 8007a02:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10c      	bne.n	8007a28 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	b672      	cpsid	i
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	b662      	cpsie	i
 8007a22:	61fb      	str	r3, [r7, #28]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a28:	2354      	movs	r3, #84	; 0x54
 8007a2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	2b54      	cmp	r3, #84	; 0x54
 8007a30:	d00c      	beq.n	8007a4c <xTaskCreateStatic+0x72>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	b672      	cpsid	i
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	b662      	cpsie	i
 8007a46:	61bb      	str	r3, [r7, #24]
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01e      	beq.n	8007a92 <xTaskCreateStatic+0xb8>
 8007a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01b      	beq.n	8007a92 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9303      	str	r3, [sp, #12]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	9302      	str	r3, [sp, #8]
 8007a74:	f107 0314 	add.w	r3, r7, #20
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f850 	bl	8007b2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a8c:	f000 f8d6 	bl	8007c3c <prvAddNewTaskToReadyList>
 8007a90:	e001      	b.n	8007a96 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a96:	697b      	ldr	r3, [r7, #20]
	}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3728      	adds	r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	; 0x30
 8007aa4:	af04      	add	r7, sp, #16
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 feb9 	bl	800882c <pvPortMalloc>
 8007aba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00e      	beq.n	8007ae0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ac2:	2054      	movs	r0, #84	; 0x54
 8007ac4:	f000 feb2 	bl	800882c <pvPortMalloc>
 8007ac8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ad6:	e005      	b.n	8007ae4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ad8:	6978      	ldr	r0, [r7, #20]
 8007ada:	f000 ff71 	bl	80089c0 <vPortFree>
 8007ade:	e001      	b.n	8007ae4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d017      	beq.n	8007b1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007af2:	88fa      	ldrh	r2, [r7, #6]
 8007af4:	2300      	movs	r3, #0
 8007af6:	9303      	str	r3, [sp, #12]
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	9302      	str	r3, [sp, #8]
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f80e 	bl	8007b2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b0e:	69f8      	ldr	r0, [r7, #28]
 8007b10:	f000 f894 	bl	8007c3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b14:	2301      	movs	r3, #1
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	e002      	b.n	8007b20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b20:	69bb      	ldr	r3, [r7, #24]
	}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3720      	adds	r7, #32
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b088      	sub	sp, #32
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
 8007b36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b3c:	6879      	ldr	r1, [r7, #4]
 8007b3e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007b42:	440b      	add	r3, r1
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	f023 0307 	bic.w	r3, r3, #7
 8007b50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00c      	beq.n	8007b76 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	b672      	cpsid	i
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	b662      	cpsie	i
 8007b70:	617b      	str	r3, [r7, #20]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01f      	beq.n	8007bbc <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	e012      	b.n	8007ba8 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4413      	add	r3, r2
 8007b88:	7819      	ldrb	r1, [r3, #0]
 8007b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	3334      	adds	r3, #52	; 0x34
 8007b92:	460a      	mov	r2, r1
 8007b94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d006      	beq.n	8007bb0 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	61fb      	str	r3, [r7, #28]
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	2b0f      	cmp	r3, #15
 8007bac:	d9e9      	bls.n	8007b82 <prvInitialiseNewTask+0x58>
 8007bae:	e000      	b.n	8007bb2 <prvInitialiseNewTask+0x88>
			{
				break;
 8007bb0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bba:	e003      	b.n	8007bc4 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	2b06      	cmp	r3, #6
 8007bc8:	d901      	bls.n	8007bce <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bca:	2306      	movs	r3, #6
 8007bcc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bd2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bd8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	2200      	movs	r2, #0
 8007bde:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	3304      	adds	r3, #4
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fe64 	bl	80078b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	3318      	adds	r3, #24
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff fe5f 	bl	80078b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bf8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	f1c3 0207 	rsb	r2, r3, #7
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	69b8      	ldr	r0, [r7, #24]
 8007c1e:	f000 fc13 	bl	8008448 <pxPortInitialiseStack>
 8007c22:	4602      	mov	r2, r0
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c34:	bf00      	nop
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c44:	f000 fd0a 	bl	800865c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c48:	4b2a      	ldr	r3, [pc, #168]	; (8007cf4 <prvAddNewTaskToReadyList+0xb8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	4a29      	ldr	r2, [pc, #164]	; (8007cf4 <prvAddNewTaskToReadyList+0xb8>)
 8007c50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c52:	4b29      	ldr	r3, [pc, #164]	; (8007cf8 <prvAddNewTaskToReadyList+0xbc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d109      	bne.n	8007c6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c5a:	4a27      	ldr	r2, [pc, #156]	; (8007cf8 <prvAddNewTaskToReadyList+0xbc>)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c60:	4b24      	ldr	r3, [pc, #144]	; (8007cf4 <prvAddNewTaskToReadyList+0xb8>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d110      	bne.n	8007c8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c68:	f000 fac8 	bl	80081fc <prvInitialiseTaskLists>
 8007c6c:	e00d      	b.n	8007c8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c6e:	4b23      	ldr	r3, [pc, #140]	; (8007cfc <prvAddNewTaskToReadyList+0xc0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c76:	4b20      	ldr	r3, [pc, #128]	; (8007cf8 <prvAddNewTaskToReadyList+0xbc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d802      	bhi.n	8007c8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c84:	4a1c      	ldr	r2, [pc, #112]	; (8007cf8 <prvAddNewTaskToReadyList+0xbc>)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c8a:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <prvAddNewTaskToReadyList+0xc4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	4a1b      	ldr	r2, [pc, #108]	; (8007d00 <prvAddNewTaskToReadyList+0xc4>)
 8007c92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	2201      	movs	r2, #1
 8007c9a:	409a      	lsls	r2, r3
 8007c9c:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <prvAddNewTaskToReadyList+0xc8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	4a18      	ldr	r2, [pc, #96]	; (8007d04 <prvAddNewTaskToReadyList+0xc8>)
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <prvAddNewTaskToReadyList+0xcc>)
 8007cb4:	441a      	add	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	f7ff fe05 	bl	80078cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cc2:	f000 fcff 	bl	80086c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <prvAddNewTaskToReadyList+0xc0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00e      	beq.n	8007cec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cce:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <prvAddNewTaskToReadyList+0xbc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d207      	bcs.n	8007cec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <prvAddNewTaskToReadyList+0xd0>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20000390 	.word	0x20000390
 8007cf8:	20000290 	.word	0x20000290
 8007cfc:	2000039c 	.word	0x2000039c
 8007d00:	200003ac 	.word	0x200003ac
 8007d04:	20000398 	.word	0x20000398
 8007d08:	20000294 	.word	0x20000294
 8007d0c:	e000ed04 	.word	0xe000ed04

08007d10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d019      	beq.n	8007d56 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d22:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <vTaskDelay+0x64>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00c      	beq.n	8007d44 <vTaskDelay+0x34>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	b672      	cpsid	i
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	b662      	cpsie	i
 8007d3e:	60bb      	str	r3, [r7, #8]
}
 8007d40:	bf00      	nop
 8007d42:	e7fe      	b.n	8007d42 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007d44:	f000 f87e 	bl	8007e44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fb16 	bl	800837c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d50:	f000 f886 	bl	8007e60 <xTaskResumeAll>
 8007d54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d107      	bne.n	8007d6c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007d5c:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <vTaskDelay+0x68>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	200003b8 	.word	0x200003b8
 8007d78:	e000ed04 	.word	0xe000ed04

08007d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d8a:	463a      	mov	r2, r7
 8007d8c:	1d39      	adds	r1, r7, #4
 8007d8e:	f107 0308 	add.w	r3, r7, #8
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7f8 fc68 	bl	8000668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	9202      	str	r2, [sp, #8]
 8007da0:	9301      	str	r3, [sp, #4]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	2300      	movs	r3, #0
 8007da8:	460a      	mov	r2, r1
 8007daa:	4920      	ldr	r1, [pc, #128]	; (8007e2c <vTaskStartScheduler+0xb0>)
 8007dac:	4820      	ldr	r0, [pc, #128]	; (8007e30 <vTaskStartScheduler+0xb4>)
 8007dae:	f7ff fe14 	bl	80079da <xTaskCreateStatic>
 8007db2:	4603      	mov	r3, r0
 8007db4:	4a1f      	ldr	r2, [pc, #124]	; (8007e34 <vTaskStartScheduler+0xb8>)
 8007db6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007db8:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <vTaskStartScheduler+0xb8>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	e001      	b.n	8007dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d118      	bne.n	8007e02 <vTaskStartScheduler+0x86>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	b672      	cpsid	i
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	b662      	cpsie	i
 8007de4:	613b      	str	r3, [r7, #16]
}
 8007de6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007de8:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <vTaskStartScheduler+0xbc>)
 8007dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007df0:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <vTaskStartScheduler+0xc0>)
 8007df2:	2201      	movs	r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007df6:	4b12      	ldr	r3, [pc, #72]	; (8007e40 <vTaskStartScheduler+0xc4>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dfc:	f000 fbb0 	bl	8008560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e00:	e010      	b.n	8007e24 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e08:	d10c      	bne.n	8007e24 <vTaskStartScheduler+0xa8>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	b672      	cpsid	i
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	b662      	cpsie	i
 8007e1e:	60fb      	str	r3, [r7, #12]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <vTaskStartScheduler+0xa6>
}
 8007e24:	bf00      	nop
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	08008c34 	.word	0x08008c34
 8007e30:	080081cd 	.word	0x080081cd
 8007e34:	200003b4 	.word	0x200003b4
 8007e38:	200003b0 	.word	0x200003b0
 8007e3c:	2000039c 	.word	0x2000039c
 8007e40:	20000394 	.word	0x20000394

08007e44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <vTaskSuspendAll+0x18>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	4a03      	ldr	r2, [pc, #12]	; (8007e5c <vTaskSuspendAll+0x18>)
 8007e50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007e52:	bf00      	nop
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	200003b8 	.word	0x200003b8

08007e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e6e:	4b42      	ldr	r3, [pc, #264]	; (8007f78 <xTaskResumeAll+0x118>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10c      	bne.n	8007e90 <xTaskResumeAll+0x30>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	b672      	cpsid	i
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	b662      	cpsie	i
 8007e8a:	603b      	str	r3, [r7, #0]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e90:	f000 fbe4 	bl	800865c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e94:	4b38      	ldr	r3, [pc, #224]	; (8007f78 <xTaskResumeAll+0x118>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	4a37      	ldr	r2, [pc, #220]	; (8007f78 <xTaskResumeAll+0x118>)
 8007e9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e9e:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <xTaskResumeAll+0x118>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d161      	bne.n	8007f6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ea6:	4b35      	ldr	r3, [pc, #212]	; (8007f7c <xTaskResumeAll+0x11c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d05d      	beq.n	8007f6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eae:	e02e      	b.n	8007f0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb0:	4b33      	ldr	r3, [pc, #204]	; (8007f80 <xTaskResumeAll+0x120>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3318      	adds	r3, #24
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff fd62 	bl	8007986 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff fd5d 	bl	8007986 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	409a      	lsls	r2, r3
 8007ed4:	4b2b      	ldr	r3, [pc, #172]	; (8007f84 <xTaskResumeAll+0x124>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	4a2a      	ldr	r2, [pc, #168]	; (8007f84 <xTaskResumeAll+0x124>)
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4a27      	ldr	r2, [pc, #156]	; (8007f88 <xTaskResumeAll+0x128>)
 8007eec:	441a      	add	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f7ff fce9 	bl	80078cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	4b23      	ldr	r3, [pc, #140]	; (8007f8c <xTaskResumeAll+0x12c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d302      	bcc.n	8007f0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007f08:	4b21      	ldr	r3, [pc, #132]	; (8007f90 <xTaskResumeAll+0x130>)
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f0e:	4b1c      	ldr	r3, [pc, #112]	; (8007f80 <xTaskResumeAll+0x120>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1cc      	bne.n	8007eb0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f1c:	f000 fa0e 	bl	800833c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007f20:	4b1c      	ldr	r3, [pc, #112]	; (8007f94 <xTaskResumeAll+0x134>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d010      	beq.n	8007f4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f2c:	f000 f836 	bl	8007f9c <xTaskIncrementTick>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d002      	beq.n	8007f3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007f36:	4b16      	ldr	r3, [pc, #88]	; (8007f90 <xTaskResumeAll+0x130>)
 8007f38:	2201      	movs	r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1f1      	bne.n	8007f2c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007f48:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <xTaskResumeAll+0x134>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f4e:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <xTaskResumeAll+0x130>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d009      	beq.n	8007f6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f56:	2301      	movs	r3, #1
 8007f58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f5a:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <xTaskResumeAll+0x138>)
 8007f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f6a:	f000 fbab 	bl	80086c4 <vPortExitCritical>

	return xAlreadyYielded;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	200003b8 	.word	0x200003b8
 8007f7c:	20000390 	.word	0x20000390
 8007f80:	20000350 	.word	0x20000350
 8007f84:	20000398 	.word	0x20000398
 8007f88:	20000294 	.word	0x20000294
 8007f8c:	20000290 	.word	0x20000290
 8007f90:	200003a4 	.word	0x200003a4
 8007f94:	200003a0 	.word	0x200003a0
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa6:	4b4f      	ldr	r3, [pc, #316]	; (80080e4 <xTaskIncrementTick+0x148>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 808a 	bne.w	80080c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fb0:	4b4d      	ldr	r3, [pc, #308]	; (80080e8 <xTaskIncrementTick+0x14c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fb8:	4a4b      	ldr	r2, [pc, #300]	; (80080e8 <xTaskIncrementTick+0x14c>)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d122      	bne.n	800800a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fc4:	4b49      	ldr	r3, [pc, #292]	; (80080ec <xTaskIncrementTick+0x150>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00c      	beq.n	8007fe8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	b672      	cpsid	i
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	b662      	cpsie	i
 8007fe2:	603b      	str	r3, [r7, #0]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <xTaskIncrementTick+0x4a>
 8007fe8:	4b40      	ldr	r3, [pc, #256]	; (80080ec <xTaskIncrementTick+0x150>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	4b40      	ldr	r3, [pc, #256]	; (80080f0 <xTaskIncrementTick+0x154>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a3e      	ldr	r2, [pc, #248]	; (80080ec <xTaskIncrementTick+0x150>)
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	4a3e      	ldr	r2, [pc, #248]	; (80080f0 <xTaskIncrementTick+0x154>)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	4b3d      	ldr	r3, [pc, #244]	; (80080f4 <xTaskIncrementTick+0x158>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3301      	adds	r3, #1
 8008002:	4a3c      	ldr	r2, [pc, #240]	; (80080f4 <xTaskIncrementTick+0x158>)
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	f000 f999 	bl	800833c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800800a:	4b3b      	ldr	r3, [pc, #236]	; (80080f8 <xTaskIncrementTick+0x15c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	429a      	cmp	r2, r3
 8008012:	d348      	bcc.n	80080a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008014:	4b35      	ldr	r3, [pc, #212]	; (80080ec <xTaskIncrementTick+0x150>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d104      	bne.n	8008028 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801e:	4b36      	ldr	r3, [pc, #216]	; (80080f8 <xTaskIncrementTick+0x15c>)
 8008020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008024:	601a      	str	r2, [r3, #0]
					break;
 8008026:	e03e      	b.n	80080a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008028:	4b30      	ldr	r3, [pc, #192]	; (80080ec <xTaskIncrementTick+0x150>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	429a      	cmp	r2, r3
 800803e:	d203      	bcs.n	8008048 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008040:	4a2d      	ldr	r2, [pc, #180]	; (80080f8 <xTaskIncrementTick+0x15c>)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008046:	e02e      	b.n	80080a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3304      	adds	r3, #4
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fc9a 	bl	8007986 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008056:	2b00      	cmp	r3, #0
 8008058:	d004      	beq.n	8008064 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	3318      	adds	r3, #24
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff fc91 	bl	8007986 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	2201      	movs	r2, #1
 800806a:	409a      	lsls	r2, r3
 800806c:	4b23      	ldr	r3, [pc, #140]	; (80080fc <xTaskIncrementTick+0x160>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4313      	orrs	r3, r2
 8008072:	4a22      	ldr	r2, [pc, #136]	; (80080fc <xTaskIncrementTick+0x160>)
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <xTaskIncrementTick+0x164>)
 8008084:	441a      	add	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7ff fc1d 	bl	80078cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <xTaskIncrementTick+0x168>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	429a      	cmp	r2, r3
 800809e:	d3b9      	bcc.n	8008014 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80080a0:	2301      	movs	r3, #1
 80080a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080a4:	e7b6      	b.n	8008014 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080a6:	4b17      	ldr	r3, [pc, #92]	; (8008104 <xTaskIncrementTick+0x168>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	4914      	ldr	r1, [pc, #80]	; (8008100 <xTaskIncrementTick+0x164>)
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d907      	bls.n	80080ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80080be:	2301      	movs	r3, #1
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	e004      	b.n	80080ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80080c4:	4b10      	ldr	r3, [pc, #64]	; (8008108 <xTaskIncrementTick+0x16c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3301      	adds	r3, #1
 80080ca:	4a0f      	ldr	r2, [pc, #60]	; (8008108 <xTaskIncrementTick+0x16c>)
 80080cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <xTaskIncrementTick+0x170>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80080d6:	2301      	movs	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080da:	697b      	ldr	r3, [r7, #20]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	200003b8 	.word	0x200003b8
 80080e8:	20000394 	.word	0x20000394
 80080ec:	20000348 	.word	0x20000348
 80080f0:	2000034c 	.word	0x2000034c
 80080f4:	200003a8 	.word	0x200003a8
 80080f8:	200003b0 	.word	0x200003b0
 80080fc:	20000398 	.word	0x20000398
 8008100:	20000294 	.word	0x20000294
 8008104:	20000290 	.word	0x20000290
 8008108:	200003a0 	.word	0x200003a0
 800810c:	200003a4 	.word	0x200003a4

08008110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008116:	4b28      	ldr	r3, [pc, #160]	; (80081b8 <vTaskSwitchContext+0xa8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800811e:	4b27      	ldr	r3, [pc, #156]	; (80081bc <vTaskSwitchContext+0xac>)
 8008120:	2201      	movs	r2, #1
 8008122:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008124:	e041      	b.n	80081aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008126:	4b25      	ldr	r3, [pc, #148]	; (80081bc <vTaskSwitchContext+0xac>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800812c:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <vTaskSwitchContext+0xb0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	fab3 f383 	clz	r3, r3
 8008138:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	f1c3 031f 	rsb	r3, r3, #31
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	4920      	ldr	r1, [pc, #128]	; (80081c4 <vTaskSwitchContext+0xb4>)
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10c      	bne.n	8008170 <vTaskSwitchContext+0x60>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	b672      	cpsid	i
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	b662      	cpsie	i
 800816a:	607b      	str	r3, [r7, #4]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <vTaskSwitchContext+0x5e>
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4613      	mov	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4a12      	ldr	r2, [pc, #72]	; (80081c4 <vTaskSwitchContext+0xb4>)
 800817c:	4413      	add	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	605a      	str	r2, [r3, #4]
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	3308      	adds	r3, #8
 8008192:	429a      	cmp	r2, r3
 8008194:	d104      	bne.n	80081a0 <vTaskSwitchContext+0x90>
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	605a      	str	r2, [r3, #4]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	4a08      	ldr	r2, [pc, #32]	; (80081c8 <vTaskSwitchContext+0xb8>)
 80081a8:	6013      	str	r3, [r2, #0]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	200003b8 	.word	0x200003b8
 80081bc:	200003a4 	.word	0x200003a4
 80081c0:	20000398 	.word	0x20000398
 80081c4:	20000294 	.word	0x20000294
 80081c8:	20000290 	.word	0x20000290

080081cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081d4:	f000 f852 	bl	800827c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <prvIdleTask+0x28>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d9f9      	bls.n	80081d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <prvIdleTask+0x2c>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081f0:	e7f0      	b.n	80081d4 <prvIdleTask+0x8>
 80081f2:	bf00      	nop
 80081f4:	20000294 	.word	0x20000294
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008202:	2300      	movs	r3, #0
 8008204:	607b      	str	r3, [r7, #4]
 8008206:	e00c      	b.n	8008222 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4a12      	ldr	r2, [pc, #72]	; (800825c <prvInitialiseTaskLists+0x60>)
 8008214:	4413      	add	r3, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff fb2b 	bl	8007872 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3301      	adds	r3, #1
 8008220:	607b      	str	r3, [r7, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b06      	cmp	r3, #6
 8008226:	d9ef      	bls.n	8008208 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008228:	480d      	ldr	r0, [pc, #52]	; (8008260 <prvInitialiseTaskLists+0x64>)
 800822a:	f7ff fb22 	bl	8007872 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800822e:	480d      	ldr	r0, [pc, #52]	; (8008264 <prvInitialiseTaskLists+0x68>)
 8008230:	f7ff fb1f 	bl	8007872 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008234:	480c      	ldr	r0, [pc, #48]	; (8008268 <prvInitialiseTaskLists+0x6c>)
 8008236:	f7ff fb1c 	bl	8007872 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800823a:	480c      	ldr	r0, [pc, #48]	; (800826c <prvInitialiseTaskLists+0x70>)
 800823c:	f7ff fb19 	bl	8007872 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008240:	480b      	ldr	r0, [pc, #44]	; (8008270 <prvInitialiseTaskLists+0x74>)
 8008242:	f7ff fb16 	bl	8007872 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <prvInitialiseTaskLists+0x78>)
 8008248:	4a05      	ldr	r2, [pc, #20]	; (8008260 <prvInitialiseTaskLists+0x64>)
 800824a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800824c:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <prvInitialiseTaskLists+0x7c>)
 800824e:	4a05      	ldr	r2, [pc, #20]	; (8008264 <prvInitialiseTaskLists+0x68>)
 8008250:	601a      	str	r2, [r3, #0]
}
 8008252:	bf00      	nop
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20000294 	.word	0x20000294
 8008260:	20000320 	.word	0x20000320
 8008264:	20000334 	.word	0x20000334
 8008268:	20000350 	.word	0x20000350
 800826c:	20000364 	.word	0x20000364
 8008270:	2000037c 	.word	0x2000037c
 8008274:	20000348 	.word	0x20000348
 8008278:	2000034c 	.word	0x2000034c

0800827c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008282:	e019      	b.n	80082b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008284:	f000 f9ea 	bl	800865c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008288:	4b10      	ldr	r3, [pc, #64]	; (80082cc <prvCheckTasksWaitingTermination+0x50>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3304      	adds	r3, #4
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff fb76 	bl	8007986 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800829a:	4b0d      	ldr	r3, [pc, #52]	; (80082d0 <prvCheckTasksWaitingTermination+0x54>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3b01      	subs	r3, #1
 80082a0:	4a0b      	ldr	r2, [pc, #44]	; (80082d0 <prvCheckTasksWaitingTermination+0x54>)
 80082a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <prvCheckTasksWaitingTermination+0x58>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	4a0a      	ldr	r2, [pc, #40]	; (80082d4 <prvCheckTasksWaitingTermination+0x58>)
 80082ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082ae:	f000 fa09 	bl	80086c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f810 	bl	80082d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <prvCheckTasksWaitingTermination+0x58>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e1      	bne.n	8008284 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000364 	.word	0x20000364
 80082d0:	20000390 	.word	0x20000390
 80082d4:	20000378 	.word	0x20000378

080082d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d108      	bne.n	80082fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fb66 	bl	80089c0 <vPortFree>
				vPortFree( pxTCB );
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fb63 	bl	80089c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082fa:	e01a      	b.n	8008332 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008302:	2b01      	cmp	r3, #1
 8008304:	d103      	bne.n	800830e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fb5a 	bl	80089c0 <vPortFree>
	}
 800830c:	e011      	b.n	8008332 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008314:	2b02      	cmp	r3, #2
 8008316:	d00c      	beq.n	8008332 <prvDeleteTCB+0x5a>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	b672      	cpsid	i
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	b662      	cpsie	i
 800832c:	60fb      	str	r3, [r7, #12]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <prvDeleteTCB+0x58>
	}
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008342:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <prvResetNextTaskUnblockTime+0x38>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800834c:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <prvResetNextTaskUnblockTime+0x3c>)
 800834e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008352:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008354:	e008      	b.n	8008368 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008356:	4b07      	ldr	r3, [pc, #28]	; (8008374 <prvResetNextTaskUnblockTime+0x38>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	4a04      	ldr	r2, [pc, #16]	; (8008378 <prvResetNextTaskUnblockTime+0x3c>)
 8008366:	6013      	str	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	20000348 	.word	0x20000348
 8008378:	200003b0 	.word	0x200003b0

0800837c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008386:	4b29      	ldr	r3, [pc, #164]	; (800842c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800838c:	4b28      	ldr	r3, [pc, #160]	; (8008430 <prvAddCurrentTaskToDelayedList+0xb4>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3304      	adds	r3, #4
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff faf7 	bl	8007986 <uxListRemove>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10b      	bne.n	80083b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	2201      	movs	r2, #1
 80083a6:	fa02 f303 	lsl.w	r3, r2, r3
 80083aa:	43da      	mvns	r2, r3
 80083ac:	4b21      	ldr	r3, [pc, #132]	; (8008434 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4013      	ands	r3, r2
 80083b2:	4a20      	ldr	r2, [pc, #128]	; (8008434 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083bc:	d10a      	bne.n	80083d4 <prvAddCurrentTaskToDelayedList+0x58>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083c4:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3304      	adds	r3, #4
 80083ca:	4619      	mov	r1, r3
 80083cc:	481a      	ldr	r0, [pc, #104]	; (8008438 <prvAddCurrentTaskToDelayedList+0xbc>)
 80083ce:	f7ff fa7d 	bl	80078cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083d2:	e026      	b.n	8008422 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4413      	add	r3, r2
 80083da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083dc:	4b14      	ldr	r3, [pc, #80]	; (8008430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d209      	bcs.n	8008400 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ec:	4b13      	ldr	r3, [pc, #76]	; (800843c <prvAddCurrentTaskToDelayedList+0xc0>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	4b0f      	ldr	r3, [pc, #60]	; (8008430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f7ff fa8b 	bl	8007914 <vListInsert>
}
 80083fe:	e010      	b.n	8008422 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008400:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3304      	adds	r3, #4
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f7ff fa81 	bl	8007914 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008412:	4b0c      	ldr	r3, [pc, #48]	; (8008444 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	429a      	cmp	r2, r3
 800841a:	d202      	bcs.n	8008422 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800841c:	4a09      	ldr	r2, [pc, #36]	; (8008444 <prvAddCurrentTaskToDelayedList+0xc8>)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6013      	str	r3, [r2, #0]
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000394 	.word	0x20000394
 8008430:	20000290 	.word	0x20000290
 8008434:	20000398 	.word	0x20000398
 8008438:	2000037c 	.word	0x2000037c
 800843c:	2000034c 	.word	0x2000034c
 8008440:	20000348 	.word	0x20000348
 8008444:	200003b0 	.word	0x200003b0

08008448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3b04      	subs	r3, #4
 8008458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3b04      	subs	r3, #4
 8008466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f023 0201 	bic.w	r2, r3, #1
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3b04      	subs	r3, #4
 8008476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008478:	4a0c      	ldr	r2, [pc, #48]	; (80084ac <pxPortInitialiseStack+0x64>)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3b14      	subs	r3, #20
 8008482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3b04      	subs	r3, #4
 800848e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f06f 0202 	mvn.w	r2, #2
 8008496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3b20      	subs	r3, #32
 800849c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800849e:	68fb      	ldr	r3, [r7, #12]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	080084b1 	.word	0x080084b1

080084b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084ba:	4b14      	ldr	r3, [pc, #80]	; (800850c <prvTaskExitError+0x5c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c2:	d00c      	beq.n	80084de <prvTaskExitError+0x2e>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	b672      	cpsid	i
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	b662      	cpsie	i
 80084d8:	60fb      	str	r3, [r7, #12]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <prvTaskExitError+0x2c>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	b672      	cpsid	i
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	b662      	cpsie	i
 80084f2:	60bb      	str	r3, [r7, #8]
}
 80084f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084f6:	bf00      	nop
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0fc      	beq.n	80084f8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084fe:	bf00      	nop
 8008500:	bf00      	nop
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	2000000c 	.word	0x2000000c

08008510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <pxCurrentTCBConst2>)
 8008512:	6819      	ldr	r1, [r3, #0]
 8008514:	6808      	ldr	r0, [r1, #0]
 8008516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	f380 8809 	msr	PSP, r0
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	f380 8811 	msr	BASEPRI, r0
 800852a:	4770      	bx	lr
 800852c:	f3af 8000 	nop.w

08008530 <pxCurrentTCBConst2>:
 8008530:	20000290 	.word	0x20000290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop

08008538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008538:	4808      	ldr	r0, [pc, #32]	; (800855c <prvPortStartFirstTask+0x24>)
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	6800      	ldr	r0, [r0, #0]
 800853e:	f380 8808 	msr	MSP, r0
 8008542:	f04f 0000 	mov.w	r0, #0
 8008546:	f380 8814 	msr	CONTROL, r0
 800854a:	b662      	cpsie	i
 800854c:	b661      	cpsie	f
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	df00      	svc	0
 8008558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800855a:	bf00      	nop
 800855c:	e000ed08 	.word	0xe000ed08

08008560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008566:	4b37      	ldr	r3, [pc, #220]	; (8008644 <xPortStartScheduler+0xe4>)
 8008568:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	22ff      	movs	r2, #255	; 0xff
 8008576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008588:	b2da      	uxtb	r2, r3
 800858a:	4b2f      	ldr	r3, [pc, #188]	; (8008648 <xPortStartScheduler+0xe8>)
 800858c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800858e:	4b2f      	ldr	r3, [pc, #188]	; (800864c <xPortStartScheduler+0xec>)
 8008590:	2207      	movs	r2, #7
 8008592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008594:	e009      	b.n	80085aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008596:	4b2d      	ldr	r3, [pc, #180]	; (800864c <xPortStartScheduler+0xec>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3b01      	subs	r3, #1
 800859c:	4a2b      	ldr	r2, [pc, #172]	; (800864c <xPortStartScheduler+0xec>)
 800859e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b2:	2b80      	cmp	r3, #128	; 0x80
 80085b4:	d0ef      	beq.n	8008596 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085b6:	4b25      	ldr	r3, [pc, #148]	; (800864c <xPortStartScheduler+0xec>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f1c3 0307 	rsb	r3, r3, #7
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d00c      	beq.n	80085dc <xPortStartScheduler+0x7c>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	b672      	cpsid	i
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	b662      	cpsie	i
 80085d6:	60bb      	str	r3, [r7, #8]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <xPortStartScheduler+0xec>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	021b      	lsls	r3, r3, #8
 80085e2:	4a1a      	ldr	r2, [pc, #104]	; (800864c <xPortStartScheduler+0xec>)
 80085e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085e6:	4b19      	ldr	r3, [pc, #100]	; (800864c <xPortStartScheduler+0xec>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085ee:	4a17      	ldr	r2, [pc, #92]	; (800864c <xPortStartScheduler+0xec>)
 80085f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <xPortStartScheduler+0xf0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a14      	ldr	r2, [pc, #80]	; (8008650 <xPortStartScheduler+0xf0>)
 8008600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008604:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008606:	4b12      	ldr	r3, [pc, #72]	; (8008650 <xPortStartScheduler+0xf0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a11      	ldr	r2, [pc, #68]	; (8008650 <xPortStartScheduler+0xf0>)
 800860c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008610:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008612:	f000 f8dd 	bl	80087d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008616:	4b0f      	ldr	r3, [pc, #60]	; (8008654 <xPortStartScheduler+0xf4>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800861c:	f000 f8fc 	bl	8008818 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <xPortStartScheduler+0xf8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a0c      	ldr	r2, [pc, #48]	; (8008658 <xPortStartScheduler+0xf8>)
 8008626:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800862a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800862c:	f7ff ff84 	bl	8008538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008630:	f7ff fd6e 	bl	8008110 <vTaskSwitchContext>
	prvTaskExitError();
 8008634:	f7ff ff3c 	bl	80084b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	e000e400 	.word	0xe000e400
 8008648:	200003bc 	.word	0x200003bc
 800864c:	200003c0 	.word	0x200003c0
 8008650:	e000ed20 	.word	0xe000ed20
 8008654:	2000000c 	.word	0x2000000c
 8008658:	e000ef34 	.word	0xe000ef34

0800865c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	b672      	cpsid	i
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	b662      	cpsie	i
 8008676:	607b      	str	r3, [r7, #4]
}
 8008678:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800867a:	4b10      	ldr	r3, [pc, #64]	; (80086bc <vPortEnterCritical+0x60>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	4a0e      	ldr	r2, [pc, #56]	; (80086bc <vPortEnterCritical+0x60>)
 8008682:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008684:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <vPortEnterCritical+0x60>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d111      	bne.n	80086b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800868c:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <vPortEnterCritical+0x64>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00c      	beq.n	80086b0 <vPortEnterCritical+0x54>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	b672      	cpsid	i
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	b662      	cpsie	i
 80086aa:	603b      	str	r3, [r7, #0]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <vPortEnterCritical+0x52>
	}
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	2000000c 	.word	0x2000000c
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <vPortExitCritical+0x54>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10c      	bne.n	80086ec <vPortExitCritical+0x28>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	b672      	cpsid	i
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	b662      	cpsie	i
 80086e6:	607b      	str	r3, [r7, #4]
}
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <vPortExitCritical+0x54>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	4a09      	ldr	r2, [pc, #36]	; (8008718 <vPortExitCritical+0x54>)
 80086f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <vPortExitCritical+0x54>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d105      	bne.n	800870a <vPortExitCritical+0x46>
 80086fe:	2300      	movs	r3, #0
 8008700:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008708:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	2000000c 	.word	0x2000000c
 800871c:	00000000 	.word	0x00000000

08008720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008720:	f3ef 8009 	mrs	r0, PSP
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4b15      	ldr	r3, [pc, #84]	; (8008780 <pxCurrentTCBConst>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f01e 0f10 	tst.w	lr, #16
 8008730:	bf08      	it	eq
 8008732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008744:	b672      	cpsid	i
 8008746:	f380 8811 	msr	BASEPRI, r0
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	b662      	cpsie	i
 8008754:	f7ff fcdc 	bl	8008110 <vTaskSwitchContext>
 8008758:	f04f 0000 	mov.w	r0, #0
 800875c:	f380 8811 	msr	BASEPRI, r0
 8008760:	bc09      	pop	{r0, r3}
 8008762:	6819      	ldr	r1, [r3, #0]
 8008764:	6808      	ldr	r0, [r1, #0]
 8008766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	f01e 0f10 	tst.w	lr, #16
 800876e:	bf08      	it	eq
 8008770:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008774:	f380 8809 	msr	PSP, r0
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop

08008780 <pxCurrentTCBConst>:
 8008780:	20000290 	.word	0x20000290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop

08008788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	b672      	cpsid	i
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	b662      	cpsie	i
 80087a2:	607b      	str	r3, [r7, #4]
}
 80087a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087a6:	f7ff fbf9 	bl	8007f9c <xTaskIncrementTick>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <SysTick_Handler+0x44>)
 80087b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	2300      	movs	r3, #0
 80087ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f383 8811 	msr	BASEPRI, r3
}
 80087c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087d4:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <vPortSetupTimerInterrupt+0x34>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087da:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <vPortSetupTimerInterrupt+0x38>)
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <vPortSetupTimerInterrupt+0x3c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a0a      	ldr	r2, [pc, #40]	; (8008810 <vPortSetupTimerInterrupt+0x40>)
 80087e6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ea:	099b      	lsrs	r3, r3, #6
 80087ec:	4a09      	ldr	r2, [pc, #36]	; (8008814 <vPortSetupTimerInterrupt+0x44>)
 80087ee:	3b01      	subs	r3, #1
 80087f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087f2:	4b04      	ldr	r3, [pc, #16]	; (8008804 <vPortSetupTimerInterrupt+0x34>)
 80087f4:	2207      	movs	r2, #7
 80087f6:	601a      	str	r2, [r3, #0]
}
 80087f8:	bf00      	nop
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	e000e010 	.word	0xe000e010
 8008808:	e000e018 	.word	0xe000e018
 800880c:	20000000 	.word	0x20000000
 8008810:	10624dd3 	.word	0x10624dd3
 8008814:	e000e014 	.word	0xe000e014

08008818 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008818:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008828 <vPortEnableVFP+0x10>
 800881c:	6801      	ldr	r1, [r0, #0]
 800881e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008822:	6001      	str	r1, [r0, #0]
 8008824:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008826:	bf00      	nop
 8008828:	e000ed88 	.word	0xe000ed88

0800882c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	; 0x28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008834:	2300      	movs	r3, #0
 8008836:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008838:	f7ff fb04 	bl	8007e44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800883c:	4b5b      	ldr	r3, [pc, #364]	; (80089ac <pvPortMalloc+0x180>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008844:	f000 f91a 	bl	8008a7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008848:	4b59      	ldr	r3, [pc, #356]	; (80089b0 <pvPortMalloc+0x184>)
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4013      	ands	r3, r2
 8008850:	2b00      	cmp	r3, #0
 8008852:	f040 8092 	bne.w	800897a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d01f      	beq.n	800889c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800885c:	2208      	movs	r2, #8
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4413      	add	r3, r2
 8008862:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	2b00      	cmp	r3, #0
 800886c:	d016      	beq.n	800889c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f023 0307 	bic.w	r3, r3, #7
 8008874:	3308      	adds	r3, #8
 8008876:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00c      	beq.n	800889c <pvPortMalloc+0x70>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008886:	b672      	cpsid	i
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	b662      	cpsie	i
 8008896:	617b      	str	r3, [r7, #20]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d06b      	beq.n	800897a <pvPortMalloc+0x14e>
 80088a2:	4b44      	ldr	r3, [pc, #272]	; (80089b4 <pvPortMalloc+0x188>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d866      	bhi.n	800897a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088ac:	4b42      	ldr	r3, [pc, #264]	; (80089b8 <pvPortMalloc+0x18c>)
 80088ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088b0:	4b41      	ldr	r3, [pc, #260]	; (80089b8 <pvPortMalloc+0x18c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088b6:	e004      	b.n	80088c2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d903      	bls.n	80088d4 <pvPortMalloc+0xa8>
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f1      	bne.n	80088b8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088d4:	4b35      	ldr	r3, [pc, #212]	; (80089ac <pvPortMalloc+0x180>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088da:	429a      	cmp	r2, r3
 80088dc:	d04d      	beq.n	800897a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2208      	movs	r2, #8
 80088e4:	4413      	add	r3, r2
 80088e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	1ad2      	subs	r2, r2, r3
 80088f8:	2308      	movs	r3, #8
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d921      	bls.n	8008944 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00c      	beq.n	800892c <pvPortMalloc+0x100>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	b672      	cpsid	i
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	b662      	cpsie	i
 8008926:	613b      	str	r3, [r7, #16]
}
 8008928:	bf00      	nop
 800892a:	e7fe      	b.n	800892a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	1ad2      	subs	r2, r2, r3
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800893e:	69b8      	ldr	r0, [r7, #24]
 8008940:	f000 f8fe 	bl	8008b40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008944:	4b1b      	ldr	r3, [pc, #108]	; (80089b4 <pvPortMalloc+0x188>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	4a19      	ldr	r2, [pc, #100]	; (80089b4 <pvPortMalloc+0x188>)
 8008950:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008952:	4b18      	ldr	r3, [pc, #96]	; (80089b4 <pvPortMalloc+0x188>)
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	4b19      	ldr	r3, [pc, #100]	; (80089bc <pvPortMalloc+0x190>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d203      	bcs.n	8008966 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800895e:	4b15      	ldr	r3, [pc, #84]	; (80089b4 <pvPortMalloc+0x188>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a16      	ldr	r2, [pc, #88]	; (80089bc <pvPortMalloc+0x190>)
 8008964:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <pvPortMalloc+0x184>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	431a      	orrs	r2, r3
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	2200      	movs	r2, #0
 8008978:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800897a:	f7ff fa71 	bl	8007e60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00c      	beq.n	80089a2 <pvPortMalloc+0x176>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	b672      	cpsid	i
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	b662      	cpsie	i
 800899c:	60fb      	str	r3, [r7, #12]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <pvPortMalloc+0x174>
	return pvReturn;
 80089a2:	69fb      	ldr	r3, [r7, #28]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3728      	adds	r7, #40	; 0x28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20003fcc 	.word	0x20003fcc
 80089b0:	20003fd8 	.word	0x20003fd8
 80089b4:	20003fd0 	.word	0x20003fd0
 80089b8:	20003fc4 	.word	0x20003fc4
 80089bc:	20003fd4 	.word	0x20003fd4

080089c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d04c      	beq.n	8008a6c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089d2:	2308      	movs	r3, #8
 80089d4:	425b      	negs	r3, r3
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	4413      	add	r3, r2
 80089da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	4b23      	ldr	r3, [pc, #140]	; (8008a74 <vPortFree+0xb4>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4013      	ands	r3, r2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10c      	bne.n	8008a08 <vPortFree+0x48>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	b672      	cpsid	i
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	b662      	cpsie	i
 8008a02:	60fb      	str	r3, [r7, #12]
}
 8008a04:	bf00      	nop
 8008a06:	e7fe      	b.n	8008a06 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00c      	beq.n	8008a2a <vPortFree+0x6a>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	b672      	cpsid	i
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	b662      	cpsie	i
 8008a24:	60bb      	str	r3, [r7, #8]
}
 8008a26:	bf00      	nop
 8008a28:	e7fe      	b.n	8008a28 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <vPortFree+0xb4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4013      	ands	r3, r2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d019      	beq.n	8008a6c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d115      	bne.n	8008a6c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <vPortFree+0xb4>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	43db      	mvns	r3, r3
 8008a4a:	401a      	ands	r2, r3
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a50:	f7ff f9f8 	bl	8007e44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <vPortFree+0xb8>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	4a06      	ldr	r2, [pc, #24]	; (8008a78 <vPortFree+0xb8>)
 8008a60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a62:	6938      	ldr	r0, [r7, #16]
 8008a64:	f000 f86c 	bl	8008b40 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a68:	f7ff f9fa 	bl	8007e60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a6c:	bf00      	nop
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20003fd8 	.word	0x20003fd8
 8008a78:	20003fd0 	.word	0x20003fd0

08008a7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a82:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a88:	4b27      	ldr	r3, [pc, #156]	; (8008b28 <prvHeapInit+0xac>)
 8008a8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00c      	beq.n	8008ab0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3307      	adds	r3, #7
 8008a9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0307 	bic.w	r3, r3, #7
 8008aa2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	4a1f      	ldr	r2, [pc, #124]	; (8008b28 <prvHeapInit+0xac>)
 8008aac:	4413      	add	r3, r2
 8008aae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ab4:	4a1d      	ldr	r2, [pc, #116]	; (8008b2c <prvHeapInit+0xb0>)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008aba:	4b1c      	ldr	r3, [pc, #112]	; (8008b2c <prvHeapInit+0xb0>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ac8:	2208      	movs	r2, #8
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	1a9b      	subs	r3, r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0307 	bic.w	r3, r3, #7
 8008ad6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4a15      	ldr	r2, [pc, #84]	; (8008b30 <prvHeapInit+0xb4>)
 8008adc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ade:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <prvHeapInit+0xb4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ae6:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <prvHeapInit+0xb4>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008afc:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <prvHeapInit+0xb4>)
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4a0a      	ldr	r2, [pc, #40]	; (8008b34 <prvHeapInit+0xb8>)
 8008b0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	4a09      	ldr	r2, [pc, #36]	; (8008b38 <prvHeapInit+0xbc>)
 8008b12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b14:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <prvHeapInit+0xc0>)
 8008b16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b1a:	601a      	str	r2, [r3, #0]
}
 8008b1c:	bf00      	nop
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	200003c4 	.word	0x200003c4
 8008b2c:	20003fc4 	.word	0x20003fc4
 8008b30:	20003fcc 	.word	0x20003fcc
 8008b34:	20003fd4 	.word	0x20003fd4
 8008b38:	20003fd0 	.word	0x20003fd0
 8008b3c:	20003fd8 	.word	0x20003fd8

08008b40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b48:	4b28      	ldr	r3, [pc, #160]	; (8008bec <prvInsertBlockIntoFreeList+0xac>)
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	e002      	b.n	8008b54 <prvInsertBlockIntoFreeList+0x14>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d8f7      	bhi.n	8008b4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	4413      	add	r3, r2
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d108      	bne.n	8008b82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	441a      	add	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	441a      	add	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d118      	bne.n	8008bc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b15      	ldr	r3, [pc, #84]	; (8008bf0 <prvInsertBlockIntoFreeList+0xb0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d00d      	beq.n	8008bbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	441a      	add	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	e008      	b.n	8008bd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bbe:	4b0c      	ldr	r3, [pc, #48]	; (8008bf0 <prvInsertBlockIntoFreeList+0xb0>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	e003      	b.n	8008bd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d002      	beq.n	8008bde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	20003fc4 	.word	0x20003fc4
 8008bf0:	20003fcc 	.word	0x20003fcc

08008bf4 <_init>:
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf6:	bf00      	nop
 8008bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfa:	bc08      	pop	{r3}
 8008bfc:	469e      	mov	lr, r3
 8008bfe:	4770      	bx	lr

08008c00 <_fini>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	bf00      	nop
 8008c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c06:	bc08      	pop	{r3}
 8008c08:	469e      	mov	lr, r3
 8008c0a:	4770      	bx	lr
