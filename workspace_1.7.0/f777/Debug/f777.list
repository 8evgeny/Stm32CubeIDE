
f777.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000894c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008b4c  08008b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b9c  08008b9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008b9c  08008b9c  00018b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba4  08008ba4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044fc  20000010  08008bbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000450c  08008bbc  0002450c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002638e  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004861  00000000  00000000  00046473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d08  00000000  00000000  0004acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b90  00000000  00000000  0004c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c883  00000000  00000000  0004e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb84  00000000  00000000  0007adf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012120d  00000000  00000000  00097977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078c4  00000000  00000000  001b8b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000128d  00000000  00000000  001c0448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <deregister_tm_clones>:
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <deregister_tm_clones+0x10>)
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <deregister_tm_clones+0x14>)
 8000204:	4283      	cmp	r3, r0
 8000206:	d002      	beq.n	800020e <deregister_tm_clones+0xe>
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <deregister_tm_clones+0x18>)
 800020a:	b103      	cbz	r3, 800020e <deregister_tm_clones+0xe>
 800020c:	4718      	bx	r3
 800020e:	4770      	bx	lr
 8000210:	20000010 	.word	0x20000010
 8000214:	20000010 	.word	0x20000010
 8000218:	00000000 	.word	0x00000000

0800021c <register_tm_clones>:
 800021c:	4805      	ldr	r0, [pc, #20]	; (8000234 <register_tm_clones+0x18>)
 800021e:	4906      	ldr	r1, [pc, #24]	; (8000238 <register_tm_clones+0x1c>)
 8000220:	1a0b      	subs	r3, r1, r0
 8000222:	0fd9      	lsrs	r1, r3, #31
 8000224:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000228:	1049      	asrs	r1, r1, #1
 800022a:	d002      	beq.n	8000232 <register_tm_clones+0x16>
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <register_tm_clones+0x20>)
 800022e:	b103      	cbz	r3, 8000232 <register_tm_clones+0x16>
 8000230:	4718      	bx	r3
 8000232:	4770      	bx	lr
 8000234:	20000010 	.word	0x20000010
 8000238:	20000010 	.word	0x20000010
 800023c:	00000000 	.word	0x00000000

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c06      	ldr	r4, [pc, #24]	; (800025c <__do_global_dtors_aux+0x1c>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b943      	cbnz	r3, 800025a <__do_global_dtors_aux+0x1a>
 8000248:	f7ff ffda 	bl	8000200 <deregister_tm_clones>
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	b113      	cbz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <__do_global_dtors_aux+0x24>)
 8000252:	f3af 8000 	nop.w
 8000256:	2301      	movs	r3, #1
 8000258:	7023      	strb	r3, [r4, #0]
 800025a:	bd10      	pop	{r4, pc}
 800025c:	20000010 	.word	0x20000010
 8000260:	00000000 	.word	0x00000000
 8000264:	08008b34 	.word	0x08008b34

08000268 <frame_dummy>:
 8000268:	b508      	push	{r3, lr}
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <frame_dummy+0x14>)
 800026c:	b11b      	cbz	r3, 8000276 <frame_dummy+0xe>
 800026e:	4904      	ldr	r1, [pc, #16]	; (8000280 <frame_dummy+0x18>)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <frame_dummy+0x1c>)
 8000272:	f3af 8000 	nop.w
 8000276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800027a:	e7cf      	b.n	800021c <register_tm_clones>
 800027c:	00000000 	.word	0x00000000
 8000280:	20000014 	.word	0x20000014
 8000284:	08008b34 	.word	0x08008b34

08000288 <__libc_init_array>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	4e0d      	ldr	r6, [pc, #52]	; (80002c0 <__libc_init_array+0x38>)
 800028c:	4d0d      	ldr	r5, [pc, #52]	; (80002c4 <__libc_init_array+0x3c>)
 800028e:	1b76      	subs	r6, r6, r5
 8000290:	10b6      	asrs	r6, r6, #2
 8000292:	d006      	beq.n	80002a2 <__libc_init_array+0x1a>
 8000294:	2400      	movs	r4, #0
 8000296:	3401      	adds	r4, #1
 8000298:	f855 3b04 	ldr.w	r3, [r5], #4
 800029c:	4798      	blx	r3
 800029e:	42a6      	cmp	r6, r4
 80002a0:	d1f9      	bne.n	8000296 <__libc_init_array+0xe>
 80002a2:	4e09      	ldr	r6, [pc, #36]	; (80002c8 <__libc_init_array+0x40>)
 80002a4:	4d09      	ldr	r5, [pc, #36]	; (80002cc <__libc_init_array+0x44>)
 80002a6:	1b76      	subs	r6, r6, r5
 80002a8:	f008 fc44 	bl	8008b34 <_init>
 80002ac:	10b6      	asrs	r6, r6, #2
 80002ae:	d006      	beq.n	80002be <__libc_init_array+0x36>
 80002b0:	2400      	movs	r4, #0
 80002b2:	3401      	adds	r4, #1
 80002b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b8:	4798      	blx	r3
 80002ba:	42a6      	cmp	r6, r4
 80002bc:	d1f9      	bne.n	80002b2 <__libc_init_array+0x2a>
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	08008ba4 	.word	0x08008ba4
 80002c4:	08008ba4 	.word	0x08008ba4
 80002c8:	08008ba8 	.word	0x08008ba8
 80002cc:	08008ba4 	.word	0x08008ba4

080002d0 <memset>:
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	0786      	lsls	r6, r0, #30
 80002d4:	d046      	beq.n	8000364 <memset+0x94>
 80002d6:	1e54      	subs	r4, r2, #1
 80002d8:	2a00      	cmp	r2, #0
 80002da:	d03c      	beq.n	8000356 <memset+0x86>
 80002dc:	b2ca      	uxtb	r2, r1
 80002de:	4603      	mov	r3, r0
 80002e0:	e002      	b.n	80002e8 <memset+0x18>
 80002e2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80002e6:	d336      	bcc.n	8000356 <memset+0x86>
 80002e8:	f803 2b01 	strb.w	r2, [r3], #1
 80002ec:	079d      	lsls	r5, r3, #30
 80002ee:	d1f8      	bne.n	80002e2 <memset+0x12>
 80002f0:	2c03      	cmp	r4, #3
 80002f2:	d929      	bls.n	8000348 <memset+0x78>
 80002f4:	b2cd      	uxtb	r5, r1
 80002f6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000300:	d933      	bls.n	800036a <memset+0x9a>
 8000302:	f1a4 0610 	sub.w	r6, r4, #16
 8000306:	0936      	lsrs	r6, r6, #4
 8000308:	f103 0720 	add.w	r7, r3, #32
 800030c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000310:	f103 0210 	add.w	r2, r3, #16
 8000314:	e942 5504 	strd	r5, r5, [r2, #-16]
 8000318:	e942 5502 	strd	r5, r5, [r2, #-8]
 800031c:	3210      	adds	r2, #16
 800031e:	42ba      	cmp	r2, r7
 8000320:	d1f8      	bne.n	8000314 <memset+0x44>
 8000322:	1c72      	adds	r2, r6, #1
 8000324:	f014 0f0c 	tst.w	r4, #12
 8000328:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800032c:	f004 060f 	and.w	r6, r4, #15
 8000330:	d013      	beq.n	800035a <memset+0x8a>
 8000332:	1f33      	subs	r3, r6, #4
 8000334:	f023 0303 	bic.w	r3, r3, #3
 8000338:	3304      	adds	r3, #4
 800033a:	4413      	add	r3, r2
 800033c:	f842 5b04 	str.w	r5, [r2], #4
 8000340:	4293      	cmp	r3, r2
 8000342:	d1fb      	bne.n	800033c <memset+0x6c>
 8000344:	f006 0403 	and.w	r4, r6, #3
 8000348:	b12c      	cbz	r4, 8000356 <memset+0x86>
 800034a:	b2c9      	uxtb	r1, r1
 800034c:	441c      	add	r4, r3
 800034e:	f803 1b01 	strb.w	r1, [r3], #1
 8000352:	429c      	cmp	r4, r3
 8000354:	d1fb      	bne.n	800034e <memset+0x7e>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	4770      	bx	lr
 800035a:	4634      	mov	r4, r6
 800035c:	4613      	mov	r3, r2
 800035e:	2c00      	cmp	r4, #0
 8000360:	d1f3      	bne.n	800034a <memset+0x7a>
 8000362:	e7f8      	b.n	8000356 <memset+0x86>
 8000364:	4614      	mov	r4, r2
 8000366:	4603      	mov	r3, r0
 8000368:	e7c2      	b.n	80002f0 <memset+0x20>
 800036a:	461a      	mov	r2, r3
 800036c:	4626      	mov	r6, r4
 800036e:	e7e0      	b.n	8000332 <memset+0x62>

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000384:	f000 b96e 	b.w	8000664 <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	4604      	mov	r4, r0
 80003a8:	468c      	mov	ip, r1
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8083 	bne.w	80004b6 <__udivmoddi4+0x116>
 80003b0:	428a      	cmp	r2, r1
 80003b2:	4617      	mov	r7, r2
 80003b4:	d947      	bls.n	8000446 <__udivmoddi4+0xa6>
 80003b6:	fab2 f282 	clz	r2, r2
 80003ba:	b142      	cbz	r2, 80003ce <__udivmoddi4+0x2e>
 80003bc:	f1c2 0020 	rsb	r0, r2, #32
 80003c0:	fa24 f000 	lsr.w	r0, r4, r0
 80003c4:	4091      	lsls	r1, r2
 80003c6:	4097      	lsls	r7, r2
 80003c8:	ea40 0c01 	orr.w	ip, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fbbc f6f8 	udiv	r6, ip, r8
 80003d8:	fa1f fe87 	uxth.w	lr, r7
 80003dc:	fb08 c116 	mls	r1, r8, r6, ip
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f10e 	mul.w	r1, r6, lr
 80003e8:	4299      	cmp	r1, r3
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x60>
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003f2:	f080 8119 	bcs.w	8000628 <__udivmoddi4+0x288>
 80003f6:	4299      	cmp	r1, r3
 80003f8:	f240 8116 	bls.w	8000628 <__udivmoddi4+0x288>
 80003fc:	3e02      	subs	r6, #2
 80003fe:	443b      	add	r3, r7
 8000400:	1a5b      	subs	r3, r3, r1
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x8c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800041e:	f080 8105 	bcs.w	800062c <__udivmoddi4+0x28c>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f240 8102 	bls.w	800062c <__udivmoddi4+0x28c>
 8000428:	3802      	subs	r0, #2
 800042a:	443c      	add	r4, r7
 800042c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000430:	eba4 040e 	sub.w	r4, r4, lr
 8000434:	2600      	movs	r6, #0
 8000436:	b11d      	cbz	r5, 8000440 <__udivmoddi4+0xa0>
 8000438:	40d4      	lsrs	r4, r2
 800043a:	2300      	movs	r3, #0
 800043c:	e9c5 4300 	strd	r4, r3, [r5]
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	b902      	cbnz	r2, 800044a <__udivmoddi4+0xaa>
 8000448:	deff      	udf	#255	; 0xff
 800044a:	fab2 f282 	clz	r2, r2
 800044e:	2a00      	cmp	r2, #0
 8000450:	d150      	bne.n	80004f4 <__udivmoddi4+0x154>
 8000452:	1bcb      	subs	r3, r1, r7
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	fa1f f887 	uxth.w	r8, r7
 800045c:	2601      	movs	r6, #1
 800045e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000462:	0c21      	lsrs	r1, r4, #16
 8000464:	fb0e 331c 	mls	r3, lr, ip, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb08 f30c 	mul.w	r3, r8, ip
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0xe4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0xe2>
 800047c:	428b      	cmp	r3, r1
 800047e:	f200 80e9 	bhi.w	8000654 <__udivmoddi4+0x2b4>
 8000482:	4684      	mov	ip, r0
 8000484:	1ac9      	subs	r1, r1, r3
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000490:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x10c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x10a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80d9 	bhi.w	800065c <__udivmoddi4+0x2bc>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e7bf      	b.n	8000436 <__udivmoddi4+0x96>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d909      	bls.n	80004ce <__udivmoddi4+0x12e>
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	f000 80b1 	beq.w	8000622 <__udivmoddi4+0x282>
 80004c0:	2600      	movs	r6, #0
 80004c2:	e9c5 0100 	strd	r0, r1, [r5]
 80004c6:	4630      	mov	r0, r6
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	fab3 f683 	clz	r6, r3
 80004d2:	2e00      	cmp	r6, #0
 80004d4:	d14a      	bne.n	800056c <__udivmoddi4+0x1cc>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d302      	bcc.n	80004e0 <__udivmoddi4+0x140>
 80004da:	4282      	cmp	r2, r0
 80004dc:	f200 80b8 	bhi.w	8000650 <__udivmoddi4+0x2b0>
 80004e0:	1a84      	subs	r4, r0, r2
 80004e2:	eb61 0103 	sbc.w	r1, r1, r3
 80004e6:	2001      	movs	r0, #1
 80004e8:	468c      	mov	ip, r1
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d0a8      	beq.n	8000440 <__udivmoddi4+0xa0>
 80004ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80004f2:	e7a5      	b.n	8000440 <__udivmoddi4+0xa0>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f603 	lsr.w	r6, r0, r3
 80004fc:	4097      	lsls	r7, r2
 80004fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000502:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000506:	40d9      	lsrs	r1, r3
 8000508:	4330      	orrs	r0, r6
 800050a:	0c03      	lsrs	r3, r0, #16
 800050c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000510:	fa1f f887 	uxth.w	r8, r7
 8000514:	fb0e 1116 	mls	r1, lr, r6, r1
 8000518:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051c:	fb06 f108 	mul.w	r1, r6, r8
 8000520:	4299      	cmp	r1, r3
 8000522:	fa04 f402 	lsl.w	r4, r4, r2
 8000526:	d909      	bls.n	800053c <__udivmoddi4+0x19c>
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800052e:	f080 808d 	bcs.w	800064c <__udivmoddi4+0x2ac>
 8000532:	4299      	cmp	r1, r3
 8000534:	f240 808a 	bls.w	800064c <__udivmoddi4+0x2ac>
 8000538:	3e02      	subs	r6, #2
 800053a:	443b      	add	r3, r7
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b281      	uxth	r1, r0
 8000540:	fbb3 f0fe 	udiv	r0, r3, lr
 8000544:	fb0e 3310 	mls	r3, lr, r0, r3
 8000548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054c:	fb00 f308 	mul.w	r3, r0, r8
 8000550:	428b      	cmp	r3, r1
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0x1c4>
 8000554:	1879      	adds	r1, r7, r1
 8000556:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800055a:	d273      	bcs.n	8000644 <__udivmoddi4+0x2a4>
 800055c:	428b      	cmp	r3, r1
 800055e:	d971      	bls.n	8000644 <__udivmoddi4+0x2a4>
 8000560:	3802      	subs	r0, #2
 8000562:	4439      	add	r1, r7
 8000564:	1acb      	subs	r3, r1, r3
 8000566:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800056a:	e778      	b.n	800045e <__udivmoddi4+0xbe>
 800056c:	f1c6 0c20 	rsb	ip, r6, #32
 8000570:	fa03 f406 	lsl.w	r4, r3, r6
 8000574:	fa22 f30c 	lsr.w	r3, r2, ip
 8000578:	431c      	orrs	r4, r3
 800057a:	fa20 f70c 	lsr.w	r7, r0, ip
 800057e:	fa01 f306 	lsl.w	r3, r1, r6
 8000582:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000586:	fa21 f10c 	lsr.w	r1, r1, ip
 800058a:	431f      	orrs	r7, r3
 800058c:	0c3b      	lsrs	r3, r7, #16
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fa1f f884 	uxth.w	r8, r4
 8000596:	fb0e 1119 	mls	r1, lr, r9, r1
 800059a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800059e:	fb09 fa08 	mul.w	sl, r9, r8
 80005a2:	458a      	cmp	sl, r1
 80005a4:	fa02 f206 	lsl.w	r2, r2, r6
 80005a8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x220>
 80005ae:	1861      	adds	r1, r4, r1
 80005b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005b4:	d248      	bcs.n	8000648 <__udivmoddi4+0x2a8>
 80005b6:	458a      	cmp	sl, r1
 80005b8:	d946      	bls.n	8000648 <__udivmoddi4+0x2a8>
 80005ba:	f1a9 0902 	sub.w	r9, r9, #2
 80005be:	4421      	add	r1, r4
 80005c0:	eba1 010a 	sub.w	r1, r1, sl
 80005c4:	b2bf      	uxth	r7, r7
 80005c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005d2:	fb00 f808 	mul.w	r8, r0, r8
 80005d6:	45b8      	cmp	r8, r7
 80005d8:	d907      	bls.n	80005ea <__udivmoddi4+0x24a>
 80005da:	19e7      	adds	r7, r4, r7
 80005dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005e0:	d22e      	bcs.n	8000640 <__udivmoddi4+0x2a0>
 80005e2:	45b8      	cmp	r8, r7
 80005e4:	d92c      	bls.n	8000640 <__udivmoddi4+0x2a0>
 80005e6:	3802      	subs	r0, #2
 80005e8:	4427      	add	r7, r4
 80005ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ee:	eba7 0708 	sub.w	r7, r7, r8
 80005f2:	fba0 8902 	umull	r8, r9, r0, r2
 80005f6:	454f      	cmp	r7, r9
 80005f8:	46c6      	mov	lr, r8
 80005fa:	4649      	mov	r1, r9
 80005fc:	d31a      	bcc.n	8000634 <__udivmoddi4+0x294>
 80005fe:	d017      	beq.n	8000630 <__udivmoddi4+0x290>
 8000600:	b15d      	cbz	r5, 800061a <__udivmoddi4+0x27a>
 8000602:	ebb3 020e 	subs.w	r2, r3, lr
 8000606:	eb67 0701 	sbc.w	r7, r7, r1
 800060a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800060e:	40f2      	lsrs	r2, r6
 8000610:	ea4c 0202 	orr.w	r2, ip, r2
 8000614:	40f7      	lsrs	r7, r6
 8000616:	e9c5 2700 	strd	r2, r7, [r5]
 800061a:	2600      	movs	r6, #0
 800061c:	4631      	mov	r1, r6
 800061e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000622:	462e      	mov	r6, r5
 8000624:	4628      	mov	r0, r5
 8000626:	e70b      	b.n	8000440 <__udivmoddi4+0xa0>
 8000628:	4606      	mov	r6, r0
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0x60>
 800062c:	4618      	mov	r0, r3
 800062e:	e6fd      	b.n	800042c <__udivmoddi4+0x8c>
 8000630:	4543      	cmp	r3, r8
 8000632:	d2e5      	bcs.n	8000600 <__udivmoddi4+0x260>
 8000634:	ebb8 0e02 	subs.w	lr, r8, r2
 8000638:	eb69 0104 	sbc.w	r1, r9, r4
 800063c:	3801      	subs	r0, #1
 800063e:	e7df      	b.n	8000600 <__udivmoddi4+0x260>
 8000640:	4608      	mov	r0, r1
 8000642:	e7d2      	b.n	80005ea <__udivmoddi4+0x24a>
 8000644:	4660      	mov	r0, ip
 8000646:	e78d      	b.n	8000564 <__udivmoddi4+0x1c4>
 8000648:	4681      	mov	r9, r0
 800064a:	e7b9      	b.n	80005c0 <__udivmoddi4+0x220>
 800064c:	4666      	mov	r6, ip
 800064e:	e775      	b.n	800053c <__udivmoddi4+0x19c>
 8000650:	4630      	mov	r0, r6
 8000652:	e74a      	b.n	80004ea <__udivmoddi4+0x14a>
 8000654:	f1ac 0c02 	sub.w	ip, ip, #2
 8000658:	4439      	add	r1, r7
 800065a:	e713      	b.n	8000484 <__udivmoddi4+0xe4>
 800065c:	3802      	subs	r0, #2
 800065e:	443c      	add	r4, r7
 8000660:	e724      	b.n	80004ac <__udivmoddi4+0x10c>
 8000662:	bf00      	nop

08000664 <__aeabi_idiv0>:
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <vApplicationGetIdleTaskMemory+0x2c>)
 8000678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <vApplicationGetIdleTaskMemory+0x30>)
 800067e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	2000002c 	.word	0x2000002c
 8000698:	20000080 	.word	0x20000080

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f001 fa04 	bl	8001aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f82f 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f000 fbcd 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ae:	f000 fad9 	bl	8000c64 <MX_DMA_Init>
  MX_ETH_Init();
 80006b2:	f000 f915 	bl	80008e0 <MX_ETH_Init>
  MX_I2C1_Init();
 80006b6:	f000 f955 	bl	8000964 <MX_I2C1_Init>
  MX_SAI1_Init();
 80006ba:	f000 fa43 	bl	8000b44 <MX_SAI1_Init>
  MX_UART7_Init();
 80006be:	f000 faa1 	bl	8000c04 <MX_UART7_Init>
  MX_CAN1_Init();
 80006c2:	f000 f8d7 	bl	8000874 <MX_CAN1_Init>
  MX_FMC_Init();
 80006c6:	f000 fb0f 	bl	8000ce8 <MX_FMC_Init>
  MX_I2C2_Init();
 80006ca:	f000 f98b 	bl	80009e4 <MX_I2C2_Init>
  MX_RNG_Init();
 80006ce:	f000 f9c9 	bl	8000a64 <MX_RNG_Init>
  MX_RTC_Init();
 80006d2:	f000 f9db 	bl	8000a8c <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <main+0x64>)
 80006d8:	1d3c      	adds	r4, r7, #4
 80006da:	461d      	mov	r5, r3
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f007 f800 	bl	80076f2 <osThreadCreate>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <main+0x68>)
 80006f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f8:	f006 fff4 	bl	80076e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <main+0x60>
 80006fe:	bf00      	nop
 8000700:	08008b58 	.word	0x08008b58
 8000704:	20003fdc 	.word	0x20003fdc

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0b8      	sub	sp, #224	; 0xe0
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000712:	2234      	movs	r2, #52	; 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fdda 	bl	80002d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2290      	movs	r2, #144	; 0x90
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fdcb 	bl	80002d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <SystemClock_Config+0x160>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	4a4a      	ldr	r2, [pc, #296]	; (8000868 <SystemClock_Config+0x160>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6413      	str	r3, [r2, #64]	; 0x40
 8000746:	4b48      	ldr	r3, [pc, #288]	; (8000868 <SystemClock_Config+0x160>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000752:	4b46      	ldr	r3, [pc, #280]	; (800086c <SystemClock_Config+0x164>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a45      	ldr	r2, [pc, #276]	; (800086c <SystemClock_Config+0x164>)
 8000758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	4b43      	ldr	r3, [pc, #268]	; (800086c <SystemClock_Config+0x164>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800076a:	2309      	movs	r3, #9
 800076c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000784:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000788:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800078c:	2319      	movs	r3, #25
 800078e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000792:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000796:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007a0:	2309      	movs	r3, #9
 80007a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fc73 	bl	800409c <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007bc:	f000 fc62 	bl	8001084 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c0:	f003 fc1c 	bl	8003ffc <HAL_PWREx_EnableOverDrive>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ca:	f000 fc5b 	bl	8001084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007f4:	2107      	movs	r1, #7
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fefe 	bl	80045f8 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000802:	f000 fc3f 	bl	8001084 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART7
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <SystemClock_Config+0x168>)
 8000808:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 800080a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800080e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
 8000818:	2307      	movs	r3, #7
 800081a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800081c:	2301      	movs	r3, #1
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000826:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800082c:	2300      	movs	r3, #0
 800082e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000830:	2300      	movs	r3, #0
 8000832:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000834:	2300      	movs	r3, #0
 8000836:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4618      	mov	r0, r3
 8000844:	f004 f944 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800084e:	f000 fc19 	bl	8001084 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000858:	2000      	movs	r0, #0
 800085a:	f003 ffb9 	bl	80047d0 <HAL_RCC_MCOConfig>
}
 800085e:	bf00      	nop
 8000860:	37e0      	adds	r7, #224	; 0xe0
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000
 8000870:	0028d020 	.word	0x0028d020

08000874 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_CAN1_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_CAN1_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_CAN1_Init+0x64>)
 8000880:	2210      	movs	r2, #16
 8000882:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_CAN1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_CAN1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_CAN1_Init+0x64>)
 8000892:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000896:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_CAN1_Init+0x64>)
 800089a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800089e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008c6:	f001 f943 	bl	8001b50 <HAL_CAN_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008d0:	f000 fbd8 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000444c 	.word	0x2000444c
 80008dc:	40006400 	.word	0x40006400

080008e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_ETH_Init+0x78>)
 80008e6:	4a1d      	ldr	r2, [pc, #116]	; (800095c <MX_ETH_Init+0x7c>)
 80008e8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_ETH_Init+0x78>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_ETH_Init+0x78>)
 80008f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_ETH_Init+0x78>)
 80008fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008fe:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_ETH_Init+0x78>)
 8000902:	2201      	movs	r2, #1
 8000904:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_ETH_Init+0x80>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_ETH_Init+0x80>)
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_ETH_Init+0x80>)
 8000914:	22e1      	movs	r2, #225	; 0xe1
 8000916:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_ETH_Init+0x80>)
 800091a:	2200      	movs	r2, #0
 800091c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_ETH_Init+0x80>)
 8000920:	2200      	movs	r2, #0
 8000922:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_ETH_Init+0x80>)
 8000926:	2200      	movs	r2, #0
 8000928:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_ETH_Init+0x78>)
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <MX_ETH_Init+0x80>)
 800092e:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_ETH_Init+0x78>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_ETH_Init+0x78>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_ETH_Init+0x78>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_ETH_Init+0x78>)
 8000944:	f001 fe6c 	bl	8002620 <HAL_ETH_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ETH_Init+0x72>
  {
    Error_Handler();
 800094e:	f000 fb99 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20004474 	.word	0x20004474
 800095c:	40028000 	.word	0x40028000
 8000960:	20000280 	.word	0x20000280

08000964 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_I2C1_Init+0x74>)
 800096a:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <MX_I2C1_Init+0x78>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <MX_I2C1_Init+0x7c>)
 8000972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_I2C1_Init+0x74>)
 800097c:	2201      	movs	r2, #1
 800097e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_I2C1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <MX_I2C1_Init+0x74>)
 80009a0:	f002 fc6e 	bl	8003280 <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009aa:	f000 fb6b 	bl	8001084 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <MX_I2C1_Init+0x74>)
 80009b2:	f003 fa8c 	bl	8003ece <HAL_I2CEx_ConfigAnalogFilter>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009bc:	f000 fb62 	bl	8001084 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_I2C1_Init+0x74>)
 80009c4:	f003 face 	bl	8003f64 <HAL_I2CEx_ConfigDigitalFilter>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 fb59 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20004064 	.word	0x20004064
 80009dc:	40005400 	.word	0x40005400
 80009e0:	20404768 	.word	0x20404768

080009e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_I2C2_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_I2C2_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_I2C2_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <MX_I2C2_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_I2C2_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_I2C2_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a20:	f002 fc2e 	bl	8003280 <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f000 fb2b 	bl	8001084 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a32:	f003 fa4c 	bl	8003ece <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 fb22 	bl	8001084 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a44:	f003 fa8e 	bl	8003f64 <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 fb19 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200040b0 	.word	0x200040b0
 8000a5c:	40005800 	.word	0x40005800
 8000a60:	20404768 	.word	0x20404768

08000a64 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_RNG_Init+0x20>)
 8000a6a:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <MX_RNG_Init+0x24>)
 8000a6c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_RNG_Init+0x20>)
 8000a70:	f004 fdc8 	bl	8005604 <HAL_RNG_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000a7a:	f000 fb03 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20004358 	.word	0x20004358
 8000a88:	50060800 	.word	0x50060800

08000a8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000aaa:	4a25      	ldr	r2, [pc, #148]	; (8000b40 <MX_RTC_Init+0xb4>)
 8000aac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ab6:	227f      	movs	r2, #127	; 0x7f
 8000ab8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000abc:	22ff      	movs	r2, #255	; 0xff
 8000abe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ad2:	481a      	ldr	r0, [pc, #104]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ad4:	f004 fdc0 	bl	8005658 <HAL_RTC_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000ade:	f000 fad1 	bl	8001084 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	2201      	movs	r2, #1
 8000afc:	4619      	mov	r1, r3
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000b00:	f004 fe3c 	bl	800577c <HAL_RTC_SetTime>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000b0a:	f000 fabb 	bl	8001084 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b12:	2301      	movs	r3, #1
 8000b14:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2201      	movs	r2, #1
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000b26:	f004 fee7 	bl	80058f8 <HAL_RTC_SetDate>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b30:	f000 faa8 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200042ec 	.word	0x200042ec
 8000b40:	40002800 	.word	0x40002800

08000b44 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b48:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b4a:	4a2b      	ldr	r2, [pc, #172]	; (8000bf8 <MX_SAI1_Init+0xb4>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b6e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000b72:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <MX_SAI1_Init+0xb0>)
 8000b94:	f004 ffca 	bl	8005b2c <HAL_SAI_InitProtocol>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000b9e:	f000 fa71 	bl	8001084 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000ba4:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <MX_SAI1_Init+0xbc>)
 8000ba6:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000baa:	2203      	movs	r2, #3
 8000bac:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000bd8:	2302      	movs	r3, #2
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <MX_SAI1_Init+0xb8>)
 8000be0:	f004 ffa4 	bl	8005b2c <HAL_SAI_InitProtocol>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000bea:	f000 fa4b 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200043c8 	.word	0x200043c8
 8000bf8:	40015804 	.word	0x40015804
 8000bfc:	200041a8 	.word	0x200041a8
 8000c00:	40015824 	.word	0x40015824

08000c04 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_UART7_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_UART7_Init+0x58>)
 8000c48:	f005 ffbc 	bl	8006bc4 <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000c52:	f000 fa17 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20003fe0 	.word	0x20003fe0
 8000c60:	40007800 	.word	0x40007800

08000c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_DMA_Init+0x80>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <MX_DMA_Init+0x80>)
 8000c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_DMA_Init+0x80>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_DMA_Init+0x80>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <MX_DMA_Init+0x80>)
 8000c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_DMA_Init+0x80>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	200d      	movs	r0, #13
 8000ca0:	f001 f90a 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ca4:	200d      	movs	r0, #13
 8000ca6:	f001 f923 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2105      	movs	r1, #5
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f001 f902 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000cb4:	200f      	movs	r0, #15
 8000cb6:	f001 f91b 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	203b      	movs	r0, #59	; 0x3b
 8000cc0:	f001 f8fa 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000cc4:	203b      	movs	r0, #59	; 0x3b
 8000cc6:	f001 f913 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2105      	movs	r1, #5
 8000cce:	203c      	movs	r0, #60	; 0x3c
 8000cd0:	f001 f8f2 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000cd4:	203c      	movs	r0, #60	; 0x3c
 8000cd6:	f001 f90b 	bl	8001ef0 <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000d00:	4b4e      	ldr	r3, [pc, #312]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d02:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d06:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d08:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d0a:	4a4d      	ldr	r2, [pc, #308]	; (8000e40 <MX_FMC_Init+0x158>)
 8000d0c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000d0e:	4b4b      	ldr	r3, [pc, #300]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d14:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d22:	2220      	movs	r2, #32
 8000d24:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d50:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d56:	4b39      	ldr	r3, [pc, #228]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000d5c:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d68:	230f      	movs	r3, #15
 8000d6a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000d70:	23ff      	movs	r3, #255	; 0xff
 8000d72:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000d74:	230f      	movs	r3, #15
 8000d76:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d78:	2310      	movs	r3, #16
 8000d7a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d7c:	2311      	movs	r3, #17
 8000d7e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	482c      	ldr	r0, [pc, #176]	; (8000e3c <MX_FMC_Init+0x154>)
 8000d8c:	f005 fbf3 	bl	8006576 <HAL_SRAM_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8000d96:	f000 f975 	bl	8001084 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000d9c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000da0:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <MX_FMC_Init+0x158>)
 8000da6:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000dba:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000dc0:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e02:	230f      	movs	r3, #15
 8000e04:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000e06:	230f      	movs	r3, #15
 8000e08:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000e0a:	23ff      	movs	r3, #255	; 0xff
 8000e0c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000e0e:	230f      	movs	r3, #15
 8000e10:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e12:	2310      	movs	r3, #16
 8000e14:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e16:	2311      	movs	r3, #17
 8000e18:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <MX_FMC_Init+0x15c>)
 8000e26:	f005 fba6 	bl	8006576 <HAL_SRAM_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_FMC_Init+0x14c>
  {
    Error_Handler( );
 8000e30:	f000 f928 	bl	8001084 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200040fc 	.word	0x200040fc
 8000e40:	a0000104 	.word	0xa0000104
 8000e44:	2000430c 	.word	0x2000430c

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	; 0x38
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5e:	4b76      	ldr	r3, [pc, #472]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a75      	ldr	r2, [pc, #468]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b73      	ldr	r3, [pc, #460]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	623b      	str	r3, [r7, #32]
 8000e74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b70      	ldr	r3, [pc, #448]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a6f      	ldr	r2, [pc, #444]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b6d      	ldr	r3, [pc, #436]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e8e:	4b6a      	ldr	r3, [pc, #424]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a69      	ldr	r2, [pc, #420]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	4b64      	ldr	r3, [pc, #400]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a63      	ldr	r2, [pc, #396]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b61      	ldr	r3, [pc, #388]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	4b5e      	ldr	r3, [pc, #376]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a5d      	ldr	r2, [pc, #372]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b5b      	ldr	r3, [pc, #364]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b58      	ldr	r3, [pc, #352]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a57      	ldr	r2, [pc, #348]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b55      	ldr	r3, [pc, #340]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b52      	ldr	r3, [pc, #328]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a51      	ldr	r2, [pc, #324]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b4f      	ldr	r3, [pc, #316]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f06:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b49      	ldr	r3, [pc, #292]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b46      	ldr	r3, [pc, #280]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a45      	ldr	r2, [pc, #276]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b43      	ldr	r3, [pc, #268]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3c:	483f      	ldr	r0, [pc, #252]	; (800103c <MX_GPIO_Init+0x1f4>)
 8000f3e:	f002 f985 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7|TEST_LED_Pin|RESET_UPR_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f246 01c0 	movw	r1, #24768	; 0x60c0
 8000f48:	483d      	ldr	r0, [pc, #244]	; (8001040 <MX_GPIO_Init+0x1f8>)
 8000f4a:	f002 f97f 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	4835      	ldr	r0, [pc, #212]	; (800103c <MX_GPIO_Init+0x1f4>)
 8000f68:	f001 ffc4 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4830      	ldr	r0, [pc, #192]	; (8001044 <MX_GPIO_Init+0x1fc>)
 8000f82:	f001 ffb7 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <MX_GPIO_Init+0x200>)
 8000f9c:	f001 ffaa 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 TEST_LED_Pin RESET_UPR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|TEST_LED_Pin|RESET_UPR_Pin;
 8000fa0:	f246 03c0 	movw	r3, #24768	; 0x60c0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4821      	ldr	r0, [pc, #132]	; (8001040 <MX_GPIO_Init+0x1f8>)
 8000fba:	f001 ff9b 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000fbe:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <MX_GPIO_Init+0x1f4>)
 8000fd4:	f001 ff8e 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_MCO_Pin */
  GPIO_InitStruct.Pin = ETH_MCO_Pin;
 8000fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ETH_MCO_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4815      	ldr	r0, [pc, #84]	; (800104c <MX_GPIO_Init+0x204>)
 8000ff6:	f001 ff7d 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	480f      	ldr	r0, [pc, #60]	; (800104c <MX_GPIO_Init+0x204>)
 8001010:	f001 ff70 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_BUT_Pin RESET_EXT_Pin */
  GPIO_InitStruct.Pin = TEST_BUT_Pin|RESET_EXT_Pin;
 8001014:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_GPIO_Init+0x1f8>)
 800102a:	f001 ff63 	bl	8002ef4 <HAL_GPIO_Init>

}
 800102e:	bf00      	nop
 8001030:	3738      	adds	r7, #56	; 0x38
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40020800 	.word	0x40020800
 8001040:	40021800 	.word	0x40021800
 8001044:	40021400 	.word	0x40021400
 8001048:	40020400 	.word	0x40020400
 800104c:	40020000 	.word	0x40020000

08001050 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f006 fb96 	bl	800778a <osDelay>
 800105e:	e7fb      	b.n	8001058 <StartDefaultTask+0x8>

08001060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001072:	f000 fd29 	bl	8001ac8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40000400 	.word	0x40000400

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_MspInit+0x4c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_MspInit+0x4c>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	210f      	movs	r1, #15
 80010ca:	f06f 0001 	mvn.w	r0, #1
 80010ce:	f000 fef3 	bl	8001eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_CAN_MspInit+0x7c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d128      	bne.n	8001154 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_CAN_MspInit+0x80>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a16      	ldr	r2, [pc, #88]	; (8001160 <HAL_CAN_MspInit+0x80>)
 8001108:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_CAN_MspInit+0x80>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_CAN_MspInit+0x80>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <HAL_CAN_MspInit+0x80>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_CAN_MspInit+0x80>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001132:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001144:	2309      	movs	r3, #9
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_CAN_MspInit+0x84>)
 8001150:	f001 fed0 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40006400 	.word	0x40006400
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000

08001168 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	; 0x38
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_ETH_MspInit+0x158>)
 8001186:	4293      	cmp	r3, r2
 8001188:	f040 8095 	bne.w	80012b6 <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800118c:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	623b      	str	r3, [r7, #32]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a3a      	ldr	r2, [pc, #232]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001204:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800120a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PB8     ------> ETH_TXD3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001234:	233e      	movs	r3, #62	; 0x3e
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001244:	230b      	movs	r3, #11
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	481e      	ldr	r0, [pc, #120]	; (80012c8 <HAL_ETH_MspInit+0x160>)
 8001250:	f001 fe50 	bl	8002ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001254:	2387      	movs	r3, #135	; 0x87
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001264:	230b      	movs	r3, #11
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	4619      	mov	r1, r3
 800126e:	4817      	ldr	r0, [pc, #92]	; (80012cc <HAL_ETH_MspInit+0x164>)
 8001270:	f001 fe40 	bl	8002ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001274:	2308      	movs	r3, #8
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001284:	230b      	movs	r3, #11
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_ETH_MspInit+0x168>)
 8001290:	f001 fe30 	bl	8002ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001294:	f643 5303 	movw	r3, #15619	; 0x3d03
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a6:	230b      	movs	r3, #11
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <HAL_ETH_MspInit+0x16c>)
 80012b2:	f001 fe1f 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	3738      	adds	r7, #56	; 0x38
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40028000 	.word	0x40028000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40020400 	.word	0x40020400

080012d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a64      	ldr	r2, [pc, #400]	; (8001488 <HAL_I2C_MspInit+0x1b0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d128      	bne.n	800134c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b64      	ldr	r3, [pc, #400]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a63      	ldr	r2, [pc, #396]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b61      	ldr	r3, [pc, #388]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001312:	23c0      	movs	r3, #192	; 0xc0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001316:	2312      	movs	r3, #18
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131a:	2301      	movs	r3, #1
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001322:	2304      	movs	r3, #4
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4858      	ldr	r0, [pc, #352]	; (8001490 <HAL_I2C_MspInit+0x1b8>)
 800132e:	f001 fde1 	bl	8002ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001332:	4b56      	ldr	r3, [pc, #344]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a55      	ldr	r2, [pc, #340]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 8001338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b53      	ldr	r3, [pc, #332]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800134a:	e099      	b.n	8001480 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a50      	ldr	r2, [pc, #320]	; (8001494 <HAL_I2C_MspInit+0x1bc>)
 8001352:	4293      	cmp	r3, r2
 8001354:	f040 8094 	bne.w	8001480 <HAL_I2C_MspInit+0x1a8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001358:	4b4c      	ldr	r3, [pc, #304]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 800135e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
 8001364:	4b49      	ldr	r3, [pc, #292]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001370:	2330      	movs	r3, #48	; 0x30
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001374:	2312      	movs	r3, #18
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001378:	2301      	movs	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001380:	2304      	movs	r3, #4
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4843      	ldr	r0, [pc, #268]	; (8001498 <HAL_I2C_MspInit+0x1c0>)
 800138c:	f001 fdb2 	bl	8002ef4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001390:	4b3e      	ldr	r3, [pc, #248]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a3d      	ldr	r2, [pc, #244]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 8001396:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_I2C_MspInit+0x1b4>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80013a8:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013aa:	4a3d      	ldr	r2, [pc, #244]	; (80014a0 <HAL_I2C_MspInit+0x1c8>)
 80013ac:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013b0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80013b4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013bc:	4b37      	ldr	r3, [pc, #220]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d0:	4b32      	ldr	r3, [pc, #200]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80013e8:	482c      	ldr	r0, [pc, #176]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013ea:	f000 fd8f 	bl	8001f0c <HAL_DMA_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_I2C_MspInit+0x120>
      Error_Handler();
 80013f4:	f7ff fe46 	bl	8001084 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a28      	ldr	r2, [pc, #160]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80013fe:	4a27      	ldr	r2, [pc, #156]	; (800149c <HAL_I2C_MspInit+0x1c4>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream4;
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <HAL_I2C_MspInit+0x1d0>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_8;
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 800140c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001410:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 8001420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001424:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001444:	4817      	ldr	r0, [pc, #92]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 8001446:	f000 fd61 	bl	8001f0c <HAL_DMA_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_I2C_MspInit+0x17c>
      Error_Handler();
 8001450:	f7ff fe18 	bl	8001084 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <HAL_I2C_MspInit+0x1cc>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2105      	movs	r1, #5
 8001464:	2021      	movs	r0, #33	; 0x21
 8001466:	f000 fd27 	bl	8001eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800146a:	2021      	movs	r0, #33	; 0x21
 800146c:	f000 fd40 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2105      	movs	r1, #5
 8001474:	2022      	movs	r0, #34	; 0x22
 8001476:	f000 fd1f 	bl	8001eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800147a:	2022      	movs	r0, #34	; 0x22
 800147c:	f000 fd38 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
}
 8001480:	bf00      	nop
 8001482:	3730      	adds	r7, #48	; 0x30
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40005400 	.word	0x40005400
 800148c:	40023800 	.word	0x40023800
 8001490:	40020400 	.word	0x40020400
 8001494:	40005800 	.word	0x40005800
 8001498:	40021c00 	.word	0x40021c00
 800149c:	20004148 	.word	0x20004148
 80014a0:	40026040 	.word	0x40026040
 80014a4:	2000422c 	.word	0x2000422c
 80014a8:	40026070 	.word	0x40026070

080014ac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_RNG_MspInit+0x38>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10b      	bne.n	80014d6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_RNG_MspInit+0x3c>)
 80014c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_RNG_MspInit+0x3c>)
 80014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c8:	6353      	str	r3, [r2, #52]	; 0x34
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <HAL_RNG_MspInit+0x3c>)
 80014cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	50060800 	.word	0x50060800
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_RTC_MspInit+0x2c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d105      	bne.n	800150a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_RTC_MspInit+0x30>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_RTC_MspInit+0x30>)
 8001504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40002800 	.word	0x40002800
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_UART_MspInit+0x7c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d127      	bne.n	8001592 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_UART_MspInit+0x80>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <HAL_UART_MspInit+0x80>)
 8001548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_UART_MspInit+0x80>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_UART_MspInit+0x80>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_UART_MspInit+0x80>)
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_UART_MspInit+0x80>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001572:	23c0      	movs	r3, #192	; 0xc0
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001582:	2308      	movs	r3, #8
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_UART_MspInit+0x84>)
 800158e:	f001 fcb1 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40007800 	.word	0x40007800
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021400 	.word	0x40021400

080015a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015bc:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <HAL_FMC_MspInit+0x104>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d16f      	bne.n	80016a4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_FMC_MspInit+0x104>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_FMC_MspInit+0x108>)
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ce:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <HAL_FMC_MspInit+0x108>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6393      	str	r3, [r2, #56]	; 0x38
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_FMC_MspInit+0x108>)
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  PI4   ------> FMC_NBL2
  PI5   ------> FMC_NBL3
  PI6   ------> FMC_D28
  PI7   ------> FMC_D29
  */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80015e2:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80015e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f4:	230c      	movs	r3, #12
 80015f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	482d      	ldr	r0, [pc, #180]	; (80016b4 <HAL_FMC_MspInit+0x10c>)
 80015fe:	f001 fc79 	bl	8002ef4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001602:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001606:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001614:	230c      	movs	r3, #12
 8001616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4619      	mov	r1, r3
 800161c:	4826      	ldr	r0, [pc, #152]	; (80016b8 <HAL_FMC_MspInit+0x110>)
 800161e:	f001 fc69 	bl	8002ef4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001622:	f240 233f 	movw	r3, #575	; 0x23f
 8001626:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001634:	230c      	movs	r3, #12
 8001636:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	481f      	ldr	r0, [pc, #124]	; (80016bc <HAL_FMC_MspInit+0x114>)
 800163e:	f001 fc59 	bl	8002ef4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001642:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001646:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001654:	230c      	movs	r3, #12
 8001656:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4619      	mov	r1, r3
 800165c:	4818      	ldr	r0, [pc, #96]	; (80016c0 <HAL_FMC_MspInit+0x118>)
 800165e:	f001 fc49 	bl	8002ef4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001662:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001666:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001674:	230c      	movs	r3, #12
 8001676:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4619      	mov	r1, r3
 800167c:	4811      	ldr	r0, [pc, #68]	; (80016c4 <HAL_FMC_MspInit+0x11c>)
 800167e:	f001 fc39 	bl	8002ef4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001682:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001686:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001694:	230c      	movs	r3, #12
 8001696:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <HAL_FMC_MspInit+0x120>)
 800169e:	f001 fc29 	bl	8002ef4 <HAL_GPIO_Init>
 80016a2:	e000      	b.n	80016a6 <HAL_FMC_MspInit+0xfe>
    return;
 80016a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000288 	.word	0x20000288
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40021400 	.word	0x40021400
 80016bc:	40021800 	.word	0x40021800
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40021c00 	.word	0x40021c00
 80016c8:	40020c00 	.word	0x40020c00

080016cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016d4:	f7ff ff68 	bl	80015a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a68      	ldr	r2, [pc, #416]	; (8001890 <HAL_SAI_MspInit+0x1b0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d161      	bne.n	80017b6 <HAL_SAI_MspInit+0xd6>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80016f2:	4b68      	ldr	r3, [pc, #416]	; (8001894 <HAL_SAI_MspInit+0x1b4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d113      	bne.n	8001722 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_SAI_MspInit+0x1b8>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a66      	ldr	r2, [pc, #408]	; (8001898 <HAL_SAI_MspInit+0x1b8>)
 8001700:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_SAI_MspInit+0x1b8>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 5, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2105      	movs	r1, #5
 8001716:	2057      	movs	r0, #87	; 0x57
 8001718:	f000 fbce 	bl	8001eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800171c:	2057      	movs	r0, #87	; 0x57
 800171e:	f000 fbe7 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001722:	4b5c      	ldr	r3, [pc, #368]	; (8001894 <HAL_SAI_MspInit+0x1b4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a5a      	ldr	r2, [pc, #360]	; (8001894 <HAL_SAI_MspInit+0x1b4>)
 800172a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800172c:	2374      	movs	r3, #116	; 0x74
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800173c:	2306      	movs	r3, #6
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4855      	ldr	r0, [pc, #340]	; (800189c <HAL_SAI_MspInit+0x1bc>)
 8001748:	f001 fbd4 	bl	8002ef4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream3;
 800174c:	4b54      	ldr	r3, [pc, #336]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 800174e:	4a55      	ldr	r2, [pc, #340]	; (80018a4 <HAL_SAI_MspInit+0x1c4>)
 8001750:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001752:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001758:	4b51      	ldr	r3, [pc, #324]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800175e:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001764:	4b4e      	ldr	r3, [pc, #312]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 8001766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800176c:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 800176e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001772:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001774:	4b4a      	ldr	r3, [pc, #296]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 8001776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 800177c:	4b48      	ldr	r3, [pc, #288]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001788:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800178e:	4844      	ldr	r0, [pc, #272]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 8001790:	f000 fbbc 	bl	8001f0c <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_SAI_MspInit+0xbe>
    {
      Error_Handler();
 800179a:	f7ff fc73 	bl	8001084 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a3f      	ldr	r2, [pc, #252]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 80017a2:	671a      	str	r2, [r3, #112]	; 0x70
 80017a4:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a3c      	ldr	r2, [pc, #240]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 80017ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80017b0:	4a3b      	ldr	r2, [pc, #236]	; (80018a0 <HAL_SAI_MspInit+0x1c0>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <HAL_SAI_MspInit+0x1c8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d162      	bne.n	8001886 <HAL_SAI_MspInit+0x1a6>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80017c0:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_SAI_MspInit+0x1b4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d113      	bne.n	80017f0 <HAL_SAI_MspInit+0x110>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <HAL_SAI_MspInit+0x1b8>)
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	4a32      	ldr	r2, [pc, #200]	; (8001898 <HAL_SAI_MspInit+0x1b8>)
 80017ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d2:	6453      	str	r3, [r2, #68]	; 0x44
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_SAI_MspInit+0x1b8>)
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 5, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2105      	movs	r1, #5
 80017e4:	2057      	movs	r0, #87	; 0x57
 80017e6:	f000 fb67 	bl	8001eb8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80017ea:	2057      	movs	r0, #87	; 0x57
 80017ec:	f000 fb80 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_SAI_MspInit+0x1b4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a27      	ldr	r2, [pc, #156]	; (8001894 <HAL_SAI_MspInit+0x1b4>)
 80017f8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fa:	2308      	movs	r3, #8
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800180a:	2306      	movs	r3, #6
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4821      	ldr	r0, [pc, #132]	; (800189c <HAL_SAI_MspInit+0x1bc>)
 8001816:	f001 fb6d 	bl	8002ef4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 800181c:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <HAL_SAI_MspInit+0x1d0>)
 800181e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001820:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 8001822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001826:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 8001836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183a:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 800183e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001842:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 8001846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800184a:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800185e:	4813      	ldr	r0, [pc, #76]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 8001860:	f000 fb54 	bl	8001f0c <HAL_DMA_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_SAI_MspInit+0x18e>
    {
      Error_Handler();
 800186a:	f7ff fc0b 	bl	8001084 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 8001872:	671a      	str	r2, [r3, #112]	; 0x70
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 800187e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_SAI_MspInit+0x1cc>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40015804 	.word	0x40015804
 8001894:	2000028c 	.word	0x2000028c
 8001898:	40023800 	.word	0x40023800
 800189c:	40021000 	.word	0x40021000
 80018a0:	2000428c 	.word	0x2000428c
 80018a4:	40026458 	.word	0x40026458
 80018a8:	40015824 	.word	0x40015824
 80018ac:	20004368 	.word	0x20004368
 80018b0:	40026470 	.word	0x40026470

080018b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	201d      	movs	r0, #29
 80018ca:	f000 faf5 	bl	8001eb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018ce:	201d      	movs	r0, #29
 80018d0:	f000 fb0e 	bl	8001ef0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_InitTick+0xa0>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_InitTick+0xa0>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_InitTick+0xa0>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ec:	f107 0210 	add.w	r2, r7, #16
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 f8b8 	bl	8004a6c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018fc:	f003 f88e 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 8001900:	4603      	mov	r3, r0
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	4a13      	ldr	r2, [pc, #76]	; (8001958 <HAL_InitTick+0xa4>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0c9b      	lsrs	r3, r3, #18
 8001910:	3b01      	subs	r3, #1
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_InitTick+0xa8>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <HAL_InitTick+0xac>)
 8001918:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_InitTick+0xa8>)
 800191c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001920:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_InitTick+0xa8>)
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_InitTick+0xa8>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_InitTick+0xa8>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001934:	4809      	ldr	r0, [pc, #36]	; (800195c <HAL_InitTick+0xa8>)
 8001936:	f004 fe66 	bl	8006606 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d104      	bne.n	800194a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001940:	4806      	ldr	r0, [pc, #24]	; (800195c <HAL_InitTick+0xa8>)
 8001942:	f004 fec1 	bl	80066c8 <HAL_TIM_Base_Start_IT>
 8001946:	4603      	mov	r3, r0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3730      	adds	r7, #48	; 0x30
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	431bde83 	.word	0x431bde83
 800195c:	200044bc 	.word	0x200044bc
 8001960:	40000400 	.word	0x40000400

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <DMA1_Stream2_IRQHandler+0x10>)
 8001996:	f000 fbf9 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20004148 	.word	0x20004148

080019a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <DMA1_Stream4_IRQHandler+0x10>)
 80019aa:	f000 fbef 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000422c 	.word	0x2000422c

080019b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM3_IRQHandler+0x10>)
 80019be:	f004 fefb 	bl	80067b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200044bc 	.word	0x200044bc

080019cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <I2C2_EV_IRQHandler+0x10>)
 80019d2:	f001 fce5 	bl	80033a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200040b0 	.word	0x200040b0

080019e0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <I2C2_ER_IRQHandler+0x10>)
 80019e6:	f001 fcf5 	bl	80033d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200040b0 	.word	0x200040b0

080019f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA2_Stream3_IRQHandler+0x10>)
 80019fa:	f000 fbc7 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000428c 	.word	0x2000428c

08001a08 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <DMA2_Stream4_IRQHandler+0x10>)
 8001a0e:	f000 fbbd 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20004368 	.word	0x20004368

08001a1c <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <SAI1_IRQHandler+0x14>)
 8001a22:	f004 fab9 	bl	8005f98 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8001a26:	4803      	ldr	r0, [pc, #12]	; (8001a34 <SAI1_IRQHandler+0x18>)
 8001a28:	f004 fab6 	bl	8005f98 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200043c8 	.word	0x200043c8
 8001a34:	200041a8 	.word	0x200041a8

08001a38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a62:	490e      	ldr	r1, [pc, #56]	; (8001a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a78:	4c0b      	ldr	r4, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a86:	f7ff ffd7 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f7fe fbfd 	bl	8000288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8e:	f7fe fe05 	bl	800069c <main>
  bx  lr    
 8001a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001aa0:	08008bac 	.word	0x08008bac
  ldr r2, =_sbss
 8001aa4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001aa8:	2000450c 	.word	0x2000450c

08001aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC_IRQHandler>

08001aae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f000 f9f5 	bl	8001ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fefb 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abe:	f7ff fae7 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x24>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_IncTick+0x24>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	20004508 	.word	0x20004508

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20004508 	.word	0x20004508

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff ffee 	bl	8001af0 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b20:	d005      	beq.n	8001b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_Delay+0x44>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2e:	bf00      	nop
 8001b30:	f7ff ffde 	bl	8001af0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8f7      	bhi.n	8001b30 <HAL_Delay+0x28>
  {
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000008 	.word	0x20000008

08001b50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0ed      	b.n	8001d3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fab6 	bl	80010e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b84:	f7ff ffb4 	bl	8001af0 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b8a:	e012      	b.n	8001bb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b8c:	f7ff ffb0 	bl	8001af0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b0a      	cmp	r3, #10
 8001b98:	d90b      	bls.n	8001bb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2205      	movs	r2, #5
 8001baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0c5      	b.n	8001d3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0e5      	beq.n	8001b8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0202 	bic.w	r2, r2, #2
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd0:	f7ff ff8e 	bl	8001af0 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bd6:	e012      	b.n	8001bfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bd8:	f7ff ff8a 	bl	8001af0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b0a      	cmp	r3, #10
 8001be4:	d90b      	bls.n	8001bfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e09f      	b.n	8001d3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e5      	bne.n	8001bd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e1b      	ldrb	r3, [r3, #24]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d108      	bne.n	8001c26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e007      	b.n	8001c36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7e5b      	ldrb	r3, [r3, #25]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d108      	bne.n	8001c50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e007      	b.n	8001c60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7e9b      	ldrb	r3, [r3, #26]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0220 	orr.w	r2, r2, #32
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e007      	b.n	8001c8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0220 	bic.w	r2, r2, #32
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7edb      	ldrb	r3, [r3, #27]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0210 	bic.w	r2, r2, #16
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e007      	b.n	8001cb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0210 	orr.w	r2, r2, #16
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7f1b      	ldrb	r3, [r3, #28]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d108      	bne.n	8001cce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0208 	orr.w	r2, r2, #8
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e007      	b.n	8001cde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0208 	bic.w	r2, r2, #8
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7f5b      	ldrb	r3, [r3, #29]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d108      	bne.n	8001cf8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0204 	orr.w	r2, r2, #4
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e007      	b.n	8001d08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0204 	bic.w	r2, r2, #4
 8001d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	ea42 0103 	orr.w	r1, r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <__NVIC_SetPriorityGrouping+0x40>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x40>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00
 8001d8c:	05fa0000 	.word	0x05fa0000

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff4c 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eca:	f7ff ff61 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	6978      	ldr	r0, [r7, #20]
 8001ed6:	f7ff ffb1 	bl	8001e3c <NVIC_EncodePriority>
 8001eda:	4602      	mov	r2, r0
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff80 	bl	8001de8 <__NVIC_SetPriority>
}
 8001ee8:	bf00      	nop
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff54 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fdea 	bl	8001af0 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e099      	b.n	800205c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f48:	e00f      	b.n	8001f6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4a:	f7ff fdd1 	bl	8001af0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d908      	bls.n	8001f6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e078      	b.n	800205c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e8      	bne.n	8001f4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4b38      	ldr	r3, [pc, #224]	; (8002064 <HAL_DMA_Init+0x158>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d107      	bne.n	8001fd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d117      	bne.n	800202e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00e      	beq.n	800202e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fa89 	bl	8002528 <DMA_CheckFifoParam>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2240      	movs	r2, #64	; 0x40
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800202a:	2301      	movs	r3, #1
 800202c:	e016      	b.n	800205c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fa40 	bl	80024bc <DMA_CalcBaseAndBitshift>
 800203c:	4603      	mov	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	223f      	movs	r2, #63	; 0x3f
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	e010803f 	.word	0xe010803f

08002068 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002076:	f7ff fd3b 	bl	8001af0 <HAL_GetTick>
 800207a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d008      	beq.n	800209a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e052      	b.n	8002140 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0216 	bic.w	r2, r2, #22
 80020a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <HAL_DMA_Abort+0x62>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0208 	bic.w	r2, r2, #8
 80020d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ea:	e013      	b.n	8002114 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ec:	f7ff fd00 	bl	8001af0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d90c      	bls.n	8002114 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2203      	movs	r2, #3
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e015      	b.n	8002140 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1e4      	bne.n	80020ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	223f      	movs	r2, #63	; 0x3f
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d004      	beq.n	8002166 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00c      	b.n	8002180 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2205      	movs	r2, #5
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002198:	4b92      	ldr	r3, [pc, #584]	; (80023e4 <HAL_DMA_IRQHandler+0x258>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a92      	ldr	r2, [pc, #584]	; (80023e8 <HAL_DMA_IRQHandler+0x25c>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0a9b      	lsrs	r3, r3, #10
 80021a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	2208      	movs	r2, #8
 80021b8:	409a      	lsls	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01a      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0204 	bic.w	r2, r2, #4
 80021de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2208      	movs	r2, #8
 80021e6:	409a      	lsls	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2201      	movs	r2, #1
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d012      	beq.n	800222e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221a:	2201      	movs	r2, #1
 800221c:	409a      	lsls	r2, r3
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f043 0202 	orr.w	r2, r3, #2
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2204      	movs	r2, #4
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d012      	beq.n	8002264 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2204      	movs	r2, #4
 8002252:	409a      	lsls	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	f043 0204 	orr.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	2210      	movs	r2, #16
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d043      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d03c      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	2210      	movs	r2, #16
 8002288:	409a      	lsls	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d018      	beq.n	80022ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d108      	bne.n	80022bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d024      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
 80022ba:	e01f      	b.n	80022fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01b      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
 80022cc:	e016      	b.n	80022fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0208 	bic.w	r2, r2, #8
 80022ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	2220      	movs	r2, #32
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 808e 	beq.w	800242a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8086 	beq.w	800242a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	2220      	movs	r2, #32
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b05      	cmp	r3, #5
 8002334:	d136      	bne.n	80023a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0216 	bic.w	r2, r2, #22
 8002344:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002354:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_DMA_IRQHandler+0x1da>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0208 	bic.w	r2, r2, #8
 8002374:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	223f      	movs	r2, #63	; 0x3f
 800237c:	409a      	lsls	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002396:	2b00      	cmp	r3, #0
 8002398:	d07d      	beq.n	8002496 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	4798      	blx	r3
        }
        return;
 80023a2:	e078      	b.n	8002496 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01c      	beq.n	80023ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d108      	bne.n	80023d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d030      	beq.n	800242a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
 80023d0:	e02b      	b.n	800242a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d027      	beq.n	800242a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
 80023e2:	e022      	b.n	800242a <HAL_DMA_IRQHandler+0x29e>
 80023e4:	20000000 	.word	0x20000000
 80023e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10f      	bne.n	800241a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0210 	bic.w	r2, r2, #16
 8002408:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	2b00      	cmp	r3, #0
 8002430:	d032      	beq.n	8002498 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d022      	beq.n	8002484 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2205      	movs	r2, #5
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0201 	bic.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3301      	adds	r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	429a      	cmp	r2, r3
 8002460:	d307      	bcc.n	8002472 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f2      	bne.n	8002456 <HAL_DMA_IRQHandler+0x2ca>
 8002470:	e000      	b.n	8002474 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002472:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
 8002494:	e000      	b.n	8002498 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002496:	bf00      	nop
    }
  }
}
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop

080024a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ae:	b2db      	uxtb	r3, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	3b10      	subs	r3, #16
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <DMA_CalcBaseAndBitshift+0x60>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <DMA_CalcBaseAndBitshift+0x64>)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d908      	bls.n	80024fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <DMA_CalcBaseAndBitshift+0x68>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	1d1a      	adds	r2, r3, #4
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	659a      	str	r2, [r3, #88]	; 0x58
 80024fa:	e006      	b.n	800250a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <DMA_CalcBaseAndBitshift+0x68>)
 8002504:	4013      	ands	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	aaaaaaab 	.word	0xaaaaaaab
 8002520:	08008b94 	.word	0x08008b94
 8002524:	fffffc00 	.word	0xfffffc00

08002528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d11f      	bne.n	8002582 <DMA_CheckFifoParam+0x5a>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d856      	bhi.n	80025f6 <DMA_CheckFifoParam+0xce>
 8002548:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <DMA_CheckFifoParam+0x28>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002561 	.word	0x08002561
 8002554:	08002573 	.word	0x08002573
 8002558:	08002561 	.word	0x08002561
 800255c:	080025f7 	.word	0x080025f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d046      	beq.n	80025fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002570:	e043      	b.n	80025fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800257a:	d140      	bne.n	80025fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002580:	e03d      	b.n	80025fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258a:	d121      	bne.n	80025d0 <DMA_CheckFifoParam+0xa8>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d837      	bhi.n	8002602 <DMA_CheckFifoParam+0xda>
 8002592:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <DMA_CheckFifoParam+0x70>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025af 	.word	0x080025af
 80025a0:	080025a9 	.word	0x080025a9
 80025a4:	080025c1 	.word	0x080025c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      break;
 80025ac:	e030      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d025      	beq.n	8002606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025be:	e022      	b.n	8002606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c8:	d11f      	bne.n	800260a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ce:	e01c      	b.n	800260a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d903      	bls.n	80025de <DMA_CheckFifoParam+0xb6>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d003      	beq.n	80025e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025dc:	e018      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
      break;
 80025e2:	e015      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00e      	beq.n	800260e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      break;
 80025f4:	e00b      	b.n	800260e <DMA_CheckFifoParam+0xe6>
      break;
 80025f6:	bf00      	nop
 80025f8:	e00a      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e008      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e006      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
 8002604:	e004      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;   
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 800260e:	bf00      	nop
    }
  } 
  
  return status; 
 8002610:	7bfb      	ldrb	r3, [r7, #15]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop

08002620 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002630:	4ba9      	ldr	r3, [pc, #676]	; (80028d8 <HAL_ETH_Init+0x2b8>)
 8002632:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e181      	b.n	800294a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fd84 	bl	8001168 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4b9e      	ldr	r3, [pc, #632]	; (80028dc <HAL_ETH_Init+0x2bc>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	4a9d      	ldr	r2, [pc, #628]	; (80028dc <HAL_ETH_Init+0x2bc>)
 8002666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266a:	6453      	str	r3, [r2, #68]	; 0x44
 800266c:	4b9b      	ldr	r3, [pc, #620]	; (80028dc <HAL_ETH_Init+0x2bc>)
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002678:	4b99      	ldr	r3, [pc, #612]	; (80028e0 <HAL_ETH_Init+0x2c0>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a98      	ldr	r2, [pc, #608]	; (80028e0 <HAL_ETH_Init+0x2c0>)
 800267e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002682:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002684:	4b96      	ldr	r3, [pc, #600]	; (80028e0 <HAL_ETH_Init+0x2c0>)
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4994      	ldr	r1, [pc, #592]	; (80028e0 <HAL_ETH_Init+0x2c0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026aa:	f7ff fa21 	bl	8001af0 <HAL_GetTick>
 80026ae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80026b0:	e011      	b.n	80026d6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80026b2:	f7ff fa1d 	bl	8001af0 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026c0:	d909      	bls.n	80026d6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2203      	movs	r2, #3
 80026c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e139      	b.n	800294a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1e4      	bne.n	80026b2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f023 031c 	bic.w	r3, r3, #28
 80026f6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026f8:	f002 f984 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 80026fc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4a78      	ldr	r2, [pc, #480]	; (80028e4 <HAL_ETH_Init+0x2c4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d908      	bls.n	8002718 <HAL_ETH_Init+0xf8>
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <HAL_ETH_Init+0x2c8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d804      	bhi.n	8002718 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e027      	b.n	8002768 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4a73      	ldr	r2, [pc, #460]	; (80028e8 <HAL_ETH_Init+0x2c8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d908      	bls.n	8002732 <HAL_ETH_Init+0x112>
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4a6d      	ldr	r2, [pc, #436]	; (80028d8 <HAL_ETH_Init+0x2b8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d204      	bcs.n	8002732 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f043 030c 	orr.w	r3, r3, #12
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	e01a      	b.n	8002768 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4a68      	ldr	r2, [pc, #416]	; (80028d8 <HAL_ETH_Init+0x2b8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d303      	bcc.n	8002742 <HAL_ETH_Init+0x122>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4a6b      	ldr	r2, [pc, #428]	; (80028ec <HAL_ETH_Init+0x2cc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d911      	bls.n	8002766 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4a69      	ldr	r2, [pc, #420]	; (80028ec <HAL_ETH_Init+0x2cc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d908      	bls.n	800275c <HAL_ETH_Init+0x13c>
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_ETH_Init+0x2d0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d804      	bhi.n	800275c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e005      	b.n	8002768 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f043 0310 	orr.w	r3, r3, #16
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	e000      	b.n	8002768 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002766:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002770:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002774:	2100      	movs	r1, #0
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f954 	bl	8002a24 <HAL_ETH_WritePHYRegister>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002786:	6939      	ldr	r1, [r7, #16]
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f9b1 	bl	8002af0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0d7      	b.n	800294a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800279a:	20ff      	movs	r0, #255	; 0xff
 800279c:	f7ff f9b4 	bl	8001b08 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80a5 	beq.w	80028f4 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80027aa:	f7ff f9a1 	bl	8001af0 <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	461a      	mov	r2, r3
 80027b6:	2101      	movs	r1, #1
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f8cb 	bl	8002954 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80027be:	f7ff f997 	bl	8001af0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d90f      	bls.n	80027f0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80027d4:	6939      	ldr	r1, [r7, #16]
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f98a 	bl	8002af0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0ac      	b.n	800294a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0da      	beq.n	80027b0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80027fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027fe:	2100      	movs	r1, #0
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f90f 	bl	8002a24 <HAL_ETH_WritePHYRegister>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002810:	6939      	ldr	r1, [r7, #16]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f96c 	bl	8002af0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002820:	2301      	movs	r3, #1
 8002822:	e092      	b.n	800294a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002824:	f7ff f964 	bl	8001af0 <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800282a:	f107 030c 	add.w	r3, r7, #12
 800282e:	461a      	mov	r2, r3
 8002830:	2101      	movs	r1, #1
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f88e 	bl	8002954 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002838:	f7ff f95a 	bl	8001af0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d90f      	bls.n	800286a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800284e:	6939      	ldr	r1, [r7, #16]
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f94d 	bl	8002af0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e06f      	b.n	800294a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0da      	beq.n	800282a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	461a      	mov	r2, r3
 800287a:	2110      	movs	r1, #16
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f869 	bl	8002954 <HAL_ETH_ReadPHYRegister>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800288c:	6939      	ldr	r1, [r7, #16]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f92e 	bl	8002af0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800289c:	2301      	movs	r3, #1
 800289e:	e054      	b.n	800294a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	e002      	b.n	80028ba <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	e035      	b.n	8002938 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e030      	b.n	8002938 <HAL_ETH_Init+0x318>
 80028d6:	bf00      	nop
 80028d8:	03938700 	.word	0x03938700
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40013800 	.word	0x40013800
 80028e4:	01312cff 	.word	0x01312cff
 80028e8:	02160ebf 	.word	0x02160ebf
 80028ec:	05f5e0ff 	.word	0x05f5e0ff
 80028f0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002904:	4313      	orrs	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f889 	bl	8002a24 <HAL_ETH_WritePHYRegister>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800291c:	6939      	ldr	r1, [r7, #16]
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8e6 	bl	8002af0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e00c      	b.n	800294a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002930:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002934:	f7ff f8e8 	bl	8001b08 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002938:	6939      	ldr	r1, [r7, #16]
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8d8 	bl	8002af0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop

08002954 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	460b      	mov	r3, r1
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b82      	cmp	r3, #130	; 0x82
 8002974:	d101      	bne.n	800297a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	e050      	b.n	8002a1c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2282      	movs	r2, #130	; 0x82
 800297e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 031c 	and.w	r3, r3, #28
 8002990:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8a1b      	ldrh	r3, [r3, #16]
 8002996:	02db      	lsls	r3, r3, #11
 8002998:	b29b      	uxth	r3, r3
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80029a0:	897b      	ldrh	r3, [r7, #10]
 80029a2:	019b      	lsls	r3, r3, #6
 80029a4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f023 0302 	bic.w	r3, r3, #2
 80029b4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80029c6:	f7ff f893 	bl	8001af0 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029cc:	e015      	b.n	80029fa <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80029ce:	f7ff f88f 	bl	8001af0 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d309      	bcc.n	80029f2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e014      	b.n	8002a1c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e4      	bne.n	80029ce <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b42      	cmp	r3, #66	; 0x42
 8002a44:	d101      	bne.n	8002a4a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
 8002a48:	e04e      	b.n	8002ae8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2242      	movs	r2, #66	; 0x42
 8002a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 031c 	and.w	r3, r3, #28
 8002a60:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8a1b      	ldrh	r3, [r3, #16]
 8002a66:	02db      	lsls	r3, r3, #11
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002a70:	897b      	ldrh	r3, [r7, #10]
 8002a72:	019b      	lsls	r3, r3, #6
 8002a74:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa0:	f7ff f826 	bl	8001af0 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002aa6:	e015      	b.n	8002ad4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002aa8:	f7ff f822 	bl	8001af0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab6:	d309      	bcc.n	8002acc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e00d      	b.n	8002ae8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e4      	bne.n	8002aa8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0b0      	sub	sp, #192	; 0xc0
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b0c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b14:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b3c:	e001      	b.n	8002b42 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b46:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002b5c:	2340      	movs	r3, #64	; 0x40
 8002b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002bc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bc8:	4bab      	ldr	r3, [pc, #684]	; (8002e78 <ETH_MACDMAConfig+0x388>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bd4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002bd8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002bdc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002be2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002be6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002bea:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002bf0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002bf4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002bf8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002bfc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002c00:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002c04:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c18:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7fe ff6f 	bl	8001b08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c32:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c38:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002c3c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002c42:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002c48:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002c4e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002c54:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002c58:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002c60:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c62:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7fe ff4a 	bl	8001b08 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c7c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c86:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c90:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002c9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ca0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002caa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cae:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002cb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002cb4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002cba:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002cc0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002cc6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002cc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002ccc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002cce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ce0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cec:	2001      	movs	r0, #1
 8002cee:	f7fe ff0b 	bl	8001b08 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cfa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cfc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002d00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d16:	2001      	movs	r0, #1
 8002d18:	f7fe fef6 	bl	8001b08 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d24:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002d34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d38:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d46:	2300      	movs	r3, #0
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d58:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d7a:	4413      	add	r3, r2
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002d82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d86:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <ETH_MACDMAConfig+0x38c>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d8e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d90:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d92:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d94:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d96:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d98:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d9a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d9c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d9e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002da0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002da2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002da4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002da6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002daa:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002dae:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002db0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	f241 0318 	movw	r3, #4120	; 0x1018
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dc8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f241 0318 	movw	r3, #4120	; 0x1018
 8002dd2:	4413      	add	r3, r2
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f7fe fe94 	bl	8001b08 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002de8:	4413      	add	r3, r2
 8002dea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dee:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002df4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002df8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002dfc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002e00:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e04:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002e06:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002e0a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e18:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f7fe fe6d 	bl	8001b08 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e3a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10d      	bne.n	8002e60 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	f241 031c 	movw	r3, #4124	; 0x101c
 8002e4c:	4413      	add	r3, r2
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6811      	ldr	r1, [r2, #0]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <ETH_MACDMAConfig+0x390>)
 8002e56:	431a      	orrs	r2, r3
 8002e58:	f241 031c 	movw	r3, #4124	; 0x101c
 8002e5c:	440b      	add	r3, r1
 8002e5e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	461a      	mov	r2, r3
 8002e66:	2100      	movs	r1, #0
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f80b 	bl	8002e84 <ETH_MACAddressConfig>
}
 8002e6e:	bf00      	nop
 8002e70:	37c0      	adds	r7, #192	; 0xc0
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	ff20810f 	.word	0xff20810f
 8002e7c:	f8de3f23 	.word	0xf8de3f23
 8002e80:	00010040 	.word	0x00010040

08002e84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3305      	adds	r3, #5
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	3204      	adds	r2, #4
 8002e9c:	7812      	ldrb	r2, [r2, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <ETH_MACAddressConfig+0x68>)
 8002ea6:	4413      	add	r3, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3303      	adds	r3, #3
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	061a      	lsls	r2, r3, #24
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	7812      	ldrb	r2, [r2, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <ETH_MACAddressConfig+0x6c>)
 8002ed6:	4413      	add	r3, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6013      	str	r3, [r2, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40028040 	.word	0x40028040
 8002ef0:	40028044 	.word	0x40028044

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	e175      	b.n	8003200 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f14:	2201      	movs	r2, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	f040 8164 	bne.w	80031fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d005      	beq.n	8002f4a <HAL_GPIO_Init+0x56>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d130      	bne.n	8002fac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	2203      	movs	r2, #3
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f80:	2201      	movs	r2, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 0201 	and.w	r2, r3, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d017      	beq.n	8002fe8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d123      	bne.n	800303c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	08da      	lsrs	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3208      	adds	r2, #8
 8002ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	220f      	movs	r2, #15
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	08da      	lsrs	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3208      	adds	r2, #8
 8003036:	69b9      	ldr	r1, [r7, #24]
 8003038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0203 	and.w	r2, r3, #3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80be 	beq.w	80031fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307e:	4b66      	ldr	r3, [pc, #408]	; (8003218 <HAL_GPIO_Init+0x324>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	4a65      	ldr	r2, [pc, #404]	; (8003218 <HAL_GPIO_Init+0x324>)
 8003084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003088:	6453      	str	r3, [r2, #68]	; 0x44
 800308a:	4b63      	ldr	r3, [pc, #396]	; (8003218 <HAL_GPIO_Init+0x324>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003096:	4a61      	ldr	r2, [pc, #388]	; (800321c <HAL_GPIO_Init+0x328>)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_GPIO_Init+0x32c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d037      	beq.n	8003132 <HAL_GPIO_Init+0x23e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a57      	ldr	r2, [pc, #348]	; (8003224 <HAL_GPIO_Init+0x330>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d031      	beq.n	800312e <HAL_GPIO_Init+0x23a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a56      	ldr	r2, [pc, #344]	; (8003228 <HAL_GPIO_Init+0x334>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02b      	beq.n	800312a <HAL_GPIO_Init+0x236>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a55      	ldr	r2, [pc, #340]	; (800322c <HAL_GPIO_Init+0x338>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d025      	beq.n	8003126 <HAL_GPIO_Init+0x232>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a54      	ldr	r2, [pc, #336]	; (8003230 <HAL_GPIO_Init+0x33c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01f      	beq.n	8003122 <HAL_GPIO_Init+0x22e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a53      	ldr	r2, [pc, #332]	; (8003234 <HAL_GPIO_Init+0x340>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d019      	beq.n	800311e <HAL_GPIO_Init+0x22a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_GPIO_Init+0x344>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0x226>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a51      	ldr	r2, [pc, #324]	; (800323c <HAL_GPIO_Init+0x348>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00d      	beq.n	8003116 <HAL_GPIO_Init+0x222>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a50      	ldr	r2, [pc, #320]	; (8003240 <HAL_GPIO_Init+0x34c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x21e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4f      	ldr	r2, [pc, #316]	; (8003244 <HAL_GPIO_Init+0x350>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_GPIO_Init+0x21a>
 800310a:	2309      	movs	r3, #9
 800310c:	e012      	b.n	8003134 <HAL_GPIO_Init+0x240>
 800310e:	230a      	movs	r3, #10
 8003110:	e010      	b.n	8003134 <HAL_GPIO_Init+0x240>
 8003112:	2308      	movs	r3, #8
 8003114:	e00e      	b.n	8003134 <HAL_GPIO_Init+0x240>
 8003116:	2307      	movs	r3, #7
 8003118:	e00c      	b.n	8003134 <HAL_GPIO_Init+0x240>
 800311a:	2306      	movs	r3, #6
 800311c:	e00a      	b.n	8003134 <HAL_GPIO_Init+0x240>
 800311e:	2305      	movs	r3, #5
 8003120:	e008      	b.n	8003134 <HAL_GPIO_Init+0x240>
 8003122:	2304      	movs	r3, #4
 8003124:	e006      	b.n	8003134 <HAL_GPIO_Init+0x240>
 8003126:	2303      	movs	r3, #3
 8003128:	e004      	b.n	8003134 <HAL_GPIO_Init+0x240>
 800312a:	2302      	movs	r3, #2
 800312c:	e002      	b.n	8003134 <HAL_GPIO_Init+0x240>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <HAL_GPIO_Init+0x240>
 8003132:	2300      	movs	r3, #0
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	f002 0203 	and.w	r2, r2, #3
 800313a:	0092      	lsls	r2, r2, #2
 800313c:	4093      	lsls	r3, r2
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003144:	4935      	ldr	r1, [pc, #212]	; (800321c <HAL_GPIO_Init+0x328>)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	3302      	adds	r3, #2
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_GPIO_Init+0x354>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003176:	4a34      	ldr	r2, [pc, #208]	; (8003248 <HAL_GPIO_Init+0x354>)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800317c:	4b32      	ldr	r3, [pc, #200]	; (8003248 <HAL_GPIO_Init+0x354>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a0:	4a29      	ldr	r2, [pc, #164]	; (8003248 <HAL_GPIO_Init+0x354>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031a6:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_GPIO_Init+0x354>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ca:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <HAL_GPIO_Init+0x354>)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_GPIO_Init+0x354>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f4:	4a14      	ldr	r2, [pc, #80]	; (8003248 <HAL_GPIO_Init+0x354>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3301      	adds	r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	f67f ae86 	bls.w	8002f14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	40013800 	.word	0x40013800
 8003220:	40020000 	.word	0x40020000
 8003224:	40020400 	.word	0x40020400
 8003228:	40020800 	.word	0x40020800
 800322c:	40020c00 	.word	0x40020c00
 8003230:	40021000 	.word	0x40021000
 8003234:	40021400 	.word	0x40021400
 8003238:	40021800 	.word	0x40021800
 800323c:	40021c00 	.word	0x40021c00
 8003240:	40022000 	.word	0x40022000
 8003244:	40022400 	.word	0x40022400
 8003248:	40013c00 	.word	0x40013c00

0800324c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
 8003258:	4613      	mov	r3, r2
 800325a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800325c:	787b      	ldrb	r3, [r7, #1]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003268:	e003      	b.n	8003272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	041a      	lsls	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	619a      	str	r2, [r3, #24]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e07f      	b.n	8003392 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fe f816 	bl	80012d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	e006      	b.n	8003308 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003306:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d104      	bne.n	800331a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003318:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_I2C_Init+0x11c>)
 8003326:	430b      	orrs	r3, r1
 8003328:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003338:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69d9      	ldr	r1, [r3, #28]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	02008000 	.word	0x02008000

080033a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
  }
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	09db      	lsrs	r3, r3, #7
 80033fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003418:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	0a9b      	lsrs	r3, r3, #10
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	09db      	lsrs	r3, r3, #7
 800342a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f043 0208 	orr.w	r2, r3, #8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003446:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	0a5b      	lsrs	r3, r3, #9
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	09db      	lsrs	r3, r3, #7
 8003458:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	f043 0202 	orr.w	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003474:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 030b 	and.w	r3, r3, #11
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fb89 	bl	8003ba0 <I2C_ITError>
  }
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	70fb      	strb	r3, [r7, #3]
 80034ca:	4613      	mov	r3, r2
 80034cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <I2C_Slave_ISR_IT+0x24>
 8003536:	2302      	movs	r3, #2
 8003538:	e0ec      	b.n	8003714 <I2C_Slave_ISR_IT+0x1fe>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800355a:	6939      	ldr	r1, [r7, #16]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f9bf 	bl	80038e0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d04d      	beq.n	800360a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003576:	2b00      	cmp	r3, #0
 8003578:	d047      	beq.n	800360a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d128      	bne.n	80035d6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b28      	cmp	r3, #40	; 0x28
 800358e:	d108      	bne.n	80035a2 <I2C_Slave_ISR_IT+0x8c>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003596:	d104      	bne.n	80035a2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003598:	6939      	ldr	r1, [r7, #16]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 faaa 	bl	8003af4 <I2C_ITListenCplt>
 80035a0:	e032      	b.n	8003608 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b29      	cmp	r3, #41	; 0x29
 80035ac:	d10e      	bne.n	80035cc <I2C_Slave_ISR_IT+0xb6>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035b4:	d00a      	beq.n	80035cc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2210      	movs	r2, #16
 80035bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fbe5 	bl	8003d8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f92d 	bl	8003824 <I2C_ITSlaveSeqCplt>
 80035ca:	e01d      	b.n	8003608 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2210      	movs	r2, #16
 80035d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80035d4:	e096      	b.n	8003704 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2210      	movs	r2, #16
 80035dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0204 	orr.w	r2, r3, #4
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <I2C_Slave_ISR_IT+0xe4>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f6:	f040 8085 	bne.w	8003704 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4619      	mov	r1, r3
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 facd 	bl	8003ba0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003606:	e07d      	b.n	8003704 <I2C_Slave_ISR_IT+0x1ee>
 8003608:	e07c      	b.n	8003704 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d030      	beq.n	8003678 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800361e:	2b00      	cmp	r3, #0
 8003620:	d02a      	beq.n	8003678 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d018      	beq.n	800365e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d14f      	bne.n	8003708 <I2C_Slave_ISR_IT+0x1f2>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800366e:	d04b      	beq.n	8003708 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f8d7 	bl	8003824 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003676:	e047      	b.n	8003708 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	08db      	lsrs	r3, r3, #3
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	08db      	lsrs	r3, r3, #3
 8003688:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003690:	6939      	ldr	r1, [r7, #16]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f842 	bl	800371c <I2C_ITAddrCplt>
 8003698:	e037      	b.n	800370a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d031      	beq.n	800370a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d02b      	beq.n	800370a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d018      	beq.n	80036ee <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80036ec:	e00d      	b.n	800370a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f4:	d002      	beq.n	80036fc <I2C_Slave_ISR_IT+0x1e6>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d106      	bne.n	800370a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f891 	bl	8003824 <I2C_ITSlaveSeqCplt>
 8003702:	e002      	b.n	800370a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003704:	bf00      	nop
 8003706:	e000      	b.n	800370a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003708:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003732:	2b28      	cmp	r3, #40	; 0x28
 8003734:	d16a      	bne.n	800380c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	b29b      	uxth	r3, r3
 8003750:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003754:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003762:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003770:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d138      	bne.n	80037ec <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	09db      	lsrs	r3, r3, #7
 800377e:	b29a      	uxth	r2, r3
 8003780:	89bb      	ldrh	r3, [r7, #12]
 8003782:	4053      	eors	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	f003 0306 	and.w	r3, r3, #6
 800378a:	2b00      	cmp	r3, #0
 800378c:	d11c      	bne.n	80037c8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d13b      	bne.n	800381c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2208      	movs	r2, #8
 80037b0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037ba:	89ba      	ldrh	r2, [r7, #12]
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fe7c 	bl	80034be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037c6:	e029      	b.n	800381c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80037c8:	893b      	ldrh	r3, [r7, #8]
 80037ca:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fb1e 	bl	8003e12 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037de:	89ba      	ldrh	r2, [r7, #12]
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fe6a 	bl	80034be <HAL_I2C_AddrCallback>
}
 80037ea:	e017      	b.n	800381c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fb0e 	bl	8003e12 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037fe:	89ba      	ldrh	r2, [r7, #12]
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff fe5a 	bl	80034be <HAL_I2C_AddrCallback>
}
 800380a:	e007      	b.n	800381c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2208      	movs	r2, #8
 8003812:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	0b9b      	lsrs	r3, r3, #14
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e00d      	b.n	8003876 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	0bdb      	lsrs	r3, r3, #15
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003874:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b29      	cmp	r3, #41	; 0x29
 8003880:	d112      	bne.n	80038a8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2228      	movs	r2, #40	; 0x28
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2221      	movs	r2, #33	; 0x21
 800388e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003890:	2101      	movs	r1, #1
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fabd 	bl	8003e12 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fdf8 	bl	8003496 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80038a6:	e017      	b.n	80038d8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b2a      	cmp	r3, #42	; 0x2a
 80038b2:	d111      	bne.n	80038d8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2228      	movs	r2, #40	; 0x28
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2222      	movs	r2, #34	; 0x22
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038c2:	2102      	movs	r1, #2
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 faa4 	bl	8003e12 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fde9 	bl	80034aa <HAL_I2C_SlaveRxCpltCallback>
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038fc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2220      	movs	r2, #32
 8003904:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b21      	cmp	r3, #33	; 0x21
 800390a:	d002      	beq.n	8003912 <I2C_ITSlaveCplt+0x32>
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b29      	cmp	r3, #41	; 0x29
 8003910:	d108      	bne.n	8003924 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003912:	f248 0101 	movw	r1, #32769	; 0x8001
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa7b 	bl	8003e12 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2221      	movs	r2, #33	; 0x21
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
 8003922:	e00d      	b.n	8003940 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b22      	cmp	r3, #34	; 0x22
 8003928:	d002      	beq.n	8003930 <I2C_ITSlaveCplt+0x50>
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b2a      	cmp	r3, #42	; 0x2a
 800392e:	d107      	bne.n	8003940 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003930:	f248 0102 	movw	r1, #32770	; 0x8002
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fa6c 	bl	8003e12 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2222      	movs	r2, #34	; 0x22
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b64      	ldr	r3, [pc, #400]	; (8003aec <I2C_ITSlaveCplt+0x20c>)
 800395c:	400b      	ands	r3, r1
 800395e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa14 	bl	8003d8e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	0b9b      	lsrs	r3, r3, #14
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d013      	beq.n	800399a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003980:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	2b00      	cmp	r3, #0
 8003988:	d020      	beq.n	80039cc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003998:	e018      	b.n	80039cc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	0bdb      	lsrs	r3, r3, #15
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d012      	beq.n	80039cc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d006      	beq.n	80039cc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0304 	bic.w	r3, r3, #4
 80039de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00c      	beq.n	8003a1a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f8a7 	bl	8003ba0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b28      	cmp	r3, #40	; 0x28
 8003a5c:	d141      	bne.n	8003ae2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a5e:	6979      	ldr	r1, [r7, #20]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f847 	bl	8003af4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a66:	e03c      	b.n	8003ae2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a70:	d014      	beq.n	8003a9c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fed6 	bl	8003824 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <I2C_ITSlaveCplt+0x210>)
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fd20 	bl	80034da <HAL_I2C_ListenCpltCallback>
}
 8003a9a:	e022      	b.n	8003ae2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b22      	cmp	r3, #34	; 0x22
 8003aa6:	d10e      	bne.n	8003ac6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fcf3 	bl	80034aa <HAL_I2C_SlaveRxCpltCallback>
}
 8003ac4:	e00d      	b.n	8003ae2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fcda 	bl	8003496 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	fe00e800 	.word	0xfe00e800
 8003af0:	ffff0000 	.word	0xffff0000

08003af4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a26      	ldr	r2, [pc, #152]	; (8003b9c <I2C_ITListenCplt+0xa8>)
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d012      	beq.n	8003b72 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f043 0204 	orr.w	r2, r3, #4
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b72:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f94b 	bl	8003e12 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2210      	movs	r2, #16
 8003b82:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fca4 	bl	80034da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	ffff0000 	.word	0xffff0000

08003ba0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a5d      	ldr	r2, [pc, #372]	; (8003d34 <I2C_ITError+0x194>)
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b28      	cmp	r3, #40	; 0x28
 8003bd6:	d005      	beq.n	8003be4 <I2C_ITError+0x44>
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b29      	cmp	r3, #41	; 0x29
 8003bdc:	d002      	beq.n	8003be4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b2a      	cmp	r3, #42	; 0x2a
 8003be2:	d10b      	bne.n	8003bfc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003be4:	2103      	movs	r1, #3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f913 	bl	8003e12 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2228      	movs	r2, #40	; 0x28
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a50      	ldr	r2, [pc, #320]	; (8003d38 <I2C_ITError+0x198>)
 8003bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8003bfa:	e011      	b.n	8003c20 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bfc:	f248 0103 	movw	r1, #32771	; 0x8003
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f906 	bl	8003e12 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b60      	cmp	r3, #96	; 0x60
 8003c10:	d003      	beq.n	8003c1a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d039      	beq.n	8003ca2 <I2C_ITError+0x102>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b11      	cmp	r3, #17
 8003c32:	d002      	beq.n	8003c3a <I2C_ITError+0x9a>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b21      	cmp	r3, #33	; 0x21
 8003c38:	d133      	bne.n	8003ca2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c48:	d107      	bne.n	8003c5a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c58:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fc1e 	bl	80024a0 <HAL_DMA_GetState>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d017      	beq.n	8003c9a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	4a33      	ldr	r2, [pc, #204]	; (8003d3c <I2C_ITError+0x19c>)
 8003c70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fa62 	bl	8002148 <HAL_DMA_Abort_IT>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04d      	beq.n	8003d26 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c94:	4610      	mov	r0, r2
 8003c96:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c98:	e045      	b.n	8003d26 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f850 	bl	8003d40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ca0:	e041      	b.n	8003d26 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d039      	beq.n	8003d1e <I2C_ITError+0x17e>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b12      	cmp	r3, #18
 8003cae:	d002      	beq.n	8003cb6 <I2C_ITError+0x116>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b22      	cmp	r3, #34	; 0x22
 8003cb4:	d133      	bne.n	8003d1e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc4:	d107      	bne.n	8003cd6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fbe0 	bl	80024a0 <HAL_DMA_GetState>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d017      	beq.n	8003d16 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <I2C_ITError+0x19c>)
 8003cec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fa24 	bl	8002148 <HAL_DMA_Abort_IT>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d10:	4610      	mov	r0, r2
 8003d12:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d14:	e009      	b.n	8003d2a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f812 	bl	8003d40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d1c:	e005      	b.n	8003d2a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f80e 	bl	8003d40 <I2C_TreatErrorCallback>
  }
}
 8003d24:	e002      	b.n	8003d2c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d2a:	bf00      	nop
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	ffff0000 	.word	0xffff0000
 8003d38:	08003517 	.word	0x08003517
 8003d3c:	08003dd7 	.word	0x08003dd7

08003d40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b60      	cmp	r3, #96	; 0x60
 8003d52:	d10e      	bne.n	8003d72 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff fbc9 	bl	8003502 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d70:	e009      	b.n	8003d86 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fbb4 	bl	80034ee <HAL_I2C_ErrorCallback>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d103      	bne.n	8003dac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2200      	movs	r2, #0
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d007      	beq.n	8003dca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	619a      	str	r2, [r3, #24]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	2200      	movs	r2, #0
 8003df2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	2200      	movs	r2, #0
 8003e02:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff ff9b 	bl	8003d40 <I2C_TreatErrorCallback>
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00f      	beq.n	8003e4c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003e32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e40:	2b28      	cmp	r3, #40	; 0x28
 8003e42:	d003      	beq.n	8003e4c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e4a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e4c:	887b      	ldrh	r3, [r7, #2]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00f      	beq.n	8003e76 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003e5c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e6a:	2b28      	cmp	r3, #40	; 0x28
 8003e6c:	d003      	beq.n	8003e76 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e74:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da03      	bge.n	8003e86 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e86:	887b      	ldrh	r3, [r7, #2]
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d103      	bne.n	8003e94 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d103      	bne.n	8003ea2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f043 0320 	orr.w	r3, r3, #32
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d103      	bne.n	8003eb0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d138      	bne.n	8003f56 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e032      	b.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2224      	movs	r2, #36	; 0x24
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f20:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d139      	bne.n	8003fee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e033      	b.n	8003ff0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	; 0x24
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	4b23      	ldr	r3, [pc, #140]	; (8004094 <HAL_PWREx_EnableOverDrive+0x98>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	4a22      	ldr	r2, [pc, #136]	; (8004094 <HAL_PWREx_EnableOverDrive+0x98>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	6413      	str	r3, [r2, #64]	; 0x40
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_PWREx_EnableOverDrive+0x98>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800402a:	f7fd fd61 	bl	8001af0 <HAL_GetTick>
 800402e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004030:	e009      	b.n	8004046 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004032:	f7fd fd5d 	bl	8001af0 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004040:	d901      	bls.n	8004046 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e022      	b.n	800408c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004052:	d1ee      	bne.n	8004032 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0f      	ldr	r2, [pc, #60]	; (8004098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800405a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004060:	f7fd fd46 	bl	8001af0 <HAL_GetTick>
 8004064:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004066:	e009      	b.n	800407c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004068:	f7fd fd42 	bl	8001af0 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004076:	d901      	bls.n	800407c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e007      	b.n	800408c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004088:	d1ee      	bne.n	8004068 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	40007000 	.word	0x40007000

0800409c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e29b      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8087 	beq.w	80041ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040c0:	4b96      	ldr	r3, [pc, #600]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d00c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040cc:	4b93      	ldr	r3, [pc, #588]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d112      	bne.n	80040fe <HAL_RCC_OscConfig+0x62>
 80040d8:	4b90      	ldr	r3, [pc, #576]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e4:	d10b      	bne.n	80040fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e6:	4b8d      	ldr	r3, [pc, #564]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d06c      	beq.n	80041cc <HAL_RCC_OscConfig+0x130>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d168      	bne.n	80041cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e275      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x7a>
 8004108:	4b84      	ldr	r3, [pc, #528]	; (800431c <HAL_RCC_OscConfig+0x280>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a83      	ldr	r2, [pc, #524]	; (800431c <HAL_RCC_OscConfig+0x280>)
 800410e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	e02e      	b.n	8004174 <HAL_RCC_OscConfig+0xd8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x9c>
 800411e:	4b7f      	ldr	r3, [pc, #508]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a7e      	ldr	r2, [pc, #504]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b7c      	ldr	r3, [pc, #496]	; (800431c <HAL_RCC_OscConfig+0x280>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7b      	ldr	r2, [pc, #492]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e01d      	b.n	8004174 <HAL_RCC_OscConfig+0xd8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0xc0>
 8004142:	4b76      	ldr	r3, [pc, #472]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a75      	ldr	r2, [pc, #468]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b73      	ldr	r3, [pc, #460]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a72      	ldr	r2, [pc, #456]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0xd8>
 800415c:	4b6f      	ldr	r3, [pc, #444]	; (800431c <HAL_RCC_OscConfig+0x280>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a6e      	ldr	r2, [pc, #440]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b6c      	ldr	r3, [pc, #432]	; (800431c <HAL_RCC_OscConfig+0x280>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a6b      	ldr	r2, [pc, #428]	; (800431c <HAL_RCC_OscConfig+0x280>)
 800416e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d013      	beq.n	80041a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd fcb8 	bl	8001af0 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fd fcb4 	bl	8001af0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e229      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	4b61      	ldr	r3, [pc, #388]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0xe8>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd fca4 	bl	8001af0 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fd fca0 	bl	8001af0 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e215      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041be:	4b57      	ldr	r3, [pc, #348]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x110>
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d069      	beq.n	80042ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041da:	4b50      	ldr	r3, [pc, #320]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e6:	4b4d      	ldr	r3, [pc, #308]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d11c      	bne.n	800422c <HAL_RCC_OscConfig+0x190>
 80041f2:	4b4a      	ldr	r3, [pc, #296]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fe:	4b47      	ldr	r3, [pc, #284]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_RCC_OscConfig+0x17a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e1e9      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	493d      	ldr	r1, [pc, #244]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422a:	e040      	b.n	80042ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d023      	beq.n	800427c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004234:	4b39      	ldr	r3, [pc, #228]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a38      	ldr	r2, [pc, #224]	; (800431c <HAL_RCC_OscConfig+0x280>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fd fc56 	bl	8001af0 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004248:	f7fd fc52 	bl	8001af0 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e1c7      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425a:	4b30      	ldr	r3, [pc, #192]	; (800431c <HAL_RCC_OscConfig+0x280>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004266:	4b2d      	ldr	r3, [pc, #180]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4929      	ldr	r1, [pc, #164]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
 800427a:	e018      	b.n	80042ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427c:	4b27      	ldr	r3, [pc, #156]	; (800431c <HAL_RCC_OscConfig+0x280>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a26      	ldr	r2, [pc, #152]	; (800431c <HAL_RCC_OscConfig+0x280>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd fc32 	bl	8001af0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004290:	f7fd fc2e 	bl	8001af0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e1a3      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b1e      	ldr	r3, [pc, #120]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d038      	beq.n	800432c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d019      	beq.n	80042f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80042c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ce:	f7fd fc0f 	bl	8001af0 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d6:	f7fd fc0b 	bl	8001af0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e180      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80042ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x23a>
 80042f4:	e01a      	b.n	800432c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80042f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <HAL_RCC_OscConfig+0x280>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fd fbf5 	bl	8001af0 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800430a:	f7fd fbf1 	bl	8001af0 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d903      	bls.n	8004320 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e166      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
 800431c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004320:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80a4 	beq.w	8004482 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b8c      	ldr	r3, [pc, #560]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	4b89      	ldr	r3, [pc, #548]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4a88      	ldr	r2, [pc, #544]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
 8004352:	4b86      	ldr	r3, [pc, #536]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004362:	4b83      	ldr	r3, [pc, #524]	; (8004570 <HAL_RCC_OscConfig+0x4d4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d118      	bne.n	80043a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800436e:	4b80      	ldr	r3, [pc, #512]	; (8004570 <HAL_RCC_OscConfig+0x4d4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7f      	ldr	r2, [pc, #508]	; (8004570 <HAL_RCC_OscConfig+0x4d4>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437a:	f7fd fbb9 	bl	8001af0 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004382:	f7fd fbb5 	bl	8001af0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b64      	cmp	r3, #100	; 0x64
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e12a      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004394:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCC_OscConfig+0x4d4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x31a>
 80043a8:	4b70      	ldr	r3, [pc, #448]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	4a6f      	ldr	r2, [pc, #444]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6713      	str	r3, [r2, #112]	; 0x70
 80043b4:	e02d      	b.n	8004412 <HAL_RCC_OscConfig+0x376>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x33c>
 80043be:	4b6b      	ldr	r3, [pc, #428]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a6a      	ldr	r2, [pc, #424]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ca:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	4a67      	ldr	r2, [pc, #412]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	6713      	str	r3, [r2, #112]	; 0x70
 80043d6:	e01c      	b.n	8004412 <HAL_RCC_OscConfig+0x376>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d10c      	bne.n	80043fa <HAL_RCC_OscConfig+0x35e>
 80043e0:	4b62      	ldr	r3, [pc, #392]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a61      	ldr	r2, [pc, #388]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
 80043ec:	4b5f      	ldr	r3, [pc, #380]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	4a5e      	ldr	r2, [pc, #376]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6713      	str	r3, [r2, #112]	; 0x70
 80043f8:	e00b      	b.n	8004412 <HAL_RCC_OscConfig+0x376>
 80043fa:	4b5c      	ldr	r3, [pc, #368]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a5b      	ldr	r2, [pc, #364]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6713      	str	r3, [r2, #112]	; 0x70
 8004406:	4b59      	ldr	r3, [pc, #356]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4a58      	ldr	r2, [pc, #352]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d015      	beq.n	8004446 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441a:	f7fd fb69 	bl	8001af0 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fd fb65 	bl	8001af0 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0d8      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	4b4c      	ldr	r3, [pc, #304]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ee      	beq.n	8004422 <HAL_RCC_OscConfig+0x386>
 8004444:	e014      	b.n	8004470 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004446:	f7fd fb53 	bl	8001af0 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fd fb4f 	bl	8001af0 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e0c2      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004464:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	4a3c      	ldr	r2, [pc, #240]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800447c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80ae 	beq.w	80045e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800448c:	4b37      	ldr	r3, [pc, #220]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b08      	cmp	r3, #8
 8004496:	d06d      	beq.n	8004574 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d14b      	bne.n	8004538 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a0:	4b32      	ldr	r3, [pc, #200]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a31      	ldr	r2, [pc, #196]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80044a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fd fb20 	bl	8001af0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fd fb1c 	bl	8001af0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e091      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	4b29      	ldr	r3, [pc, #164]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	019b      	lsls	r3, r3, #6
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	3b01      	subs	r3, #1
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	071b      	lsls	r3, r3, #28
 80044fe:	491b      	ldr	r1, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004500:	4313      	orrs	r3, r2
 8004502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800450a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800450e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd faee 	bl	8001af0 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004518:	f7fd faea 	bl	8001af0 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e05f      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCC_OscConfig+0x47c>
 8004536:	e057      	b.n	80045e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a0b      	ldr	r2, [pc, #44]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 800453e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fd fad4 	bl	8001af0 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fd fad0 	bl	8001af0 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e045      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	4b03      	ldr	r3, [pc, #12]	; (800456c <HAL_RCC_OscConfig+0x4d0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x4b0>
 800456a:	e03d      	b.n	80045e8 <HAL_RCC_OscConfig+0x54c>
 800456c:	40023800 	.word	0x40023800
 8004570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004574:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <HAL_RCC_OscConfig+0x558>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d030      	beq.n	80045e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d129      	bne.n	80045e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d122      	bne.n	80045e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045a4:	4013      	ands	r3, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d119      	bne.n	80045e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	3b01      	subs	r3, #1
 80045be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d10f      	bne.n	80045e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800

080045f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0d0      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004610:	4b6a      	ldr	r3, [pc, #424]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d910      	bls.n	8004640 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b67      	ldr	r3, [pc, #412]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 020f 	bic.w	r2, r3, #15
 8004626:	4965      	ldr	r1, [pc, #404]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0b8      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 800465e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004662:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a52      	ldr	r2, [pc, #328]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	494d      	ldr	r1, [pc, #308]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d040      	beq.n	800471c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d115      	bne.n	80046da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e07f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ba:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e073      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ca:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e06b      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046da:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f023 0203 	bic.w	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4936      	ldr	r1, [pc, #216]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ec:	f7fd fa00 	bl	8001af0 <HAL_GetTick>
 80046f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	e00a      	b.n	800470a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f4:	f7fd f9fc 	bl	8001af0 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e053      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470a:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 020c 	and.w	r2, r3, #12
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	429a      	cmp	r2, r3
 800471a:	d1eb      	bne.n	80046f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d210      	bcs.n	800474c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 020f 	bic.w	r2, r3, #15
 8004732:	4922      	ldr	r1, [pc, #136]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e032      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4916      	ldr	r1, [pc, #88]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800478a:	f000 f885 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 800478e:	4602      	mov	r2, r0
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	490a      	ldr	r1, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x1cc>)
 800479c:	5ccb      	ldrb	r3, [r1, r3]
 800479e:	fa22 f303 	lsr.w	r3, r2, r3
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_ClockConfig+0x1d0>)
 80047a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1d4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fd f882 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40023c00 	.word	0x40023c00
 80047c0:	40023800 	.word	0x40023800
 80047c4:	08008b7c 	.word	0x08008b7c
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000004 	.word	0x20000004

080047d0 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08c      	sub	sp, #48	; 0x30
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d127      	bne.n	8004832 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80047e2:	4b2a      	ldr	r3, [pc, #168]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a29      	ldr	r2, [pc, #164]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b27      	ldr	r3, [pc, #156]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80047fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	2302      	movs	r3, #2
 8004802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004804:	2303      	movs	r3, #3
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004808:	2300      	movs	r3, #0
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800480c:	2300      	movs	r3, #0
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004810:	f107 031c 	add.w	r3, r7, #28
 8004814:	4619      	mov	r1, r3
 8004816:	481e      	ldr	r0, [pc, #120]	; (8004890 <HAL_RCC_MCOConfig+0xc0>)
 8004818:	f7fe fb6c 	bl	8002ef4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	430b      	orrs	r3, r1
 800482a:	4918      	ldr	r1, [pc, #96]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8004830:	e027      	b.n	8004882 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8004832:	4b16      	ldr	r3, [pc, #88]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	6313      	str	r3, [r2, #48]	; 0x30
 800483e:	4b13      	ldr	r3, [pc, #76]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800484a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800484e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004850:	2302      	movs	r3, #2
 8004852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004854:	2303      	movs	r3, #3
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800485c:	2300      	movs	r3, #0
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004860:	f107 031c 	add.w	r3, r7, #28
 8004864:	4619      	mov	r1, r3
 8004866:	480b      	ldr	r0, [pc, #44]	; (8004894 <HAL_RCC_MCOConfig+0xc4>)
 8004868:	f7fe fb44 	bl	8002ef4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	00d9      	lsls	r1, r3, #3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	430b      	orrs	r3, r1
 800487c:	4903      	ldr	r1, [pc, #12]	; (800488c <HAL_RCC_MCOConfig+0xbc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
}
 8004882:	bf00      	nop
 8004884:	3730      	adds	r7, #48	; 0x30
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800
 8004890:	40020000 	.word	0x40020000
 8004894:	40020800 	.word	0x40020800

08004898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800489e:	2100      	movs	r1, #0
 80048a0:	6079      	str	r1, [r7, #4]
 80048a2:	2100      	movs	r1, #0
 80048a4:	60f9      	str	r1, [r7, #12]
 80048a6:	2100      	movs	r1, #0
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80048aa:	2100      	movs	r1, #0
 80048ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ae:	4952      	ldr	r1, [pc, #328]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80048b0:	6889      	ldr	r1, [r1, #8]
 80048b2:	f001 010c 	and.w	r1, r1, #12
 80048b6:	2908      	cmp	r1, #8
 80048b8:	d00d      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80048ba:	2908      	cmp	r1, #8
 80048bc:	f200 8094 	bhi.w	80049e8 <HAL_RCC_GetSysClockFreq+0x150>
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d002      	beq.n	80048ca <HAL_RCC_GetSysClockFreq+0x32>
 80048c4:	2904      	cmp	r1, #4
 80048c6:	d003      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x38>
 80048c8:	e08e      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ca:	4b4c      	ldr	r3, [pc, #304]	; (80049fc <HAL_RCC_GetSysClockFreq+0x164>)
 80048cc:	60bb      	str	r3, [r7, #8]
      break;
 80048ce:	e08e      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048d0:	4b4b      	ldr	r3, [pc, #300]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x168>)
 80048d2:	60bb      	str	r3, [r7, #8]
      break;
 80048d4:	e08b      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d6:	4948      	ldr	r1, [pc, #288]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80048d8:	6849      	ldr	r1, [r1, #4]
 80048da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048de:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048e0:	4945      	ldr	r1, [pc, #276]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80048e2:	6849      	ldr	r1, [r1, #4]
 80048e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80048e8:	2900      	cmp	r1, #0
 80048ea:	d024      	beq.n	8004936 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ec:	4942      	ldr	r1, [pc, #264]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ee:	6849      	ldr	r1, [r1, #4]
 80048f0:	0989      	lsrs	r1, r1, #6
 80048f2:	4608      	mov	r0, r1
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80048fc:	f04f 0500 	mov.w	r5, #0
 8004900:	ea00 0204 	and.w	r2, r0, r4
 8004904:	ea01 0305 	and.w	r3, r1, r5
 8004908:	493d      	ldr	r1, [pc, #244]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x168>)
 800490a:	fb01 f003 	mul.w	r0, r1, r3
 800490e:	2100      	movs	r1, #0
 8004910:	fb01 f102 	mul.w	r1, r1, r2
 8004914:	1844      	adds	r4, r0, r1
 8004916:	493a      	ldr	r1, [pc, #232]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x168>)
 8004918:	fba2 0101 	umull	r0, r1, r2, r1
 800491c:	1863      	adds	r3, r4, r1
 800491e:	4619      	mov	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	461a      	mov	r2, r3
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	f7fb fd22 	bl	8000370 <__aeabi_uldivmod>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4613      	mov	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e04a      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004936:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	099b      	lsrs	r3, r3, #6
 800493c:	461a      	mov	r2, r3
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004946:	f04f 0100 	mov.w	r1, #0
 800494a:	ea02 0400 	and.w	r4, r2, r0
 800494e:	ea03 0501 	and.w	r5, r3, r1
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	014b      	lsls	r3, r1, #5
 8004960:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004964:	0142      	lsls	r2, r0, #5
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	1b00      	subs	r0, r0, r4
 800496c:	eb61 0105 	sbc.w	r1, r1, r5
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	018b      	lsls	r3, r1, #6
 800497a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800497e:	0182      	lsls	r2, r0, #6
 8004980:	1a12      	subs	r2, r2, r0
 8004982:	eb63 0301 	sbc.w	r3, r3, r1
 8004986:	f04f 0000 	mov.w	r0, #0
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	00d9      	lsls	r1, r3, #3
 8004990:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004994:	00d0      	lsls	r0, r2, #3
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	1912      	adds	r2, r2, r4
 800499c:	eb45 0303 	adc.w	r3, r5, r3
 80049a0:	f04f 0000 	mov.w	r0, #0
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	0299      	lsls	r1, r3, #10
 80049aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049ae:	0290      	lsls	r0, r2, #10
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4610      	mov	r0, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	f7fb fcd6 	bl	8000370 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4613      	mov	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	3301      	adds	r3, #1
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	60bb      	str	r3, [r7, #8]
      break;
 80049e6:	e002      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <HAL_RCC_GetSysClockFreq+0x164>)
 80049ea:	60bb      	str	r3, [r7, #8]
      break;
 80049ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ee:	68bb      	ldr	r3, [r7, #8]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bdb0      	pop	{r4, r5, r7, pc}
 80049f8:	40023800 	.word	0x40023800
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	017d7840 	.word	0x017d7840

08004a04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000000 	.word	0x20000000

08004a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a20:	f7ff fff0 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	0a9b      	lsrs	r3, r3, #10
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4903      	ldr	r1, [pc, #12]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	08008b8c 	.word	0x08008b8c

08004a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a48:	f7ff ffdc 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0b5b      	lsrs	r3, r3, #13
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4903      	ldr	r1, [pc, #12]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40023800 	.word	0x40023800
 8004a68:	08008b8c 	.word	0x08008b8c

08004a6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	220f      	movs	r2, #15
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a7c:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0203 	and.w	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	08db      	lsrs	r3, r3, #3
 8004aa6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <HAL_RCC_GetClockConfig+0x60>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 020f 	and.w	r2, r3, #15
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40023c00 	.word	0x40023c00

08004ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004af8:	4b69      	ldr	r3, [pc, #420]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4a68      	ldr	r2, [pc, #416]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b02:	6093      	str	r3, [r2, #8]
 8004b04:	4b66      	ldr	r3, [pc, #408]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	4964      	ldr	r1, [pc, #400]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d017      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	4959      	ldr	r1, [pc, #356]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b48:	d101      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b56:	2301      	movs	r3, #1
 8004b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d017      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b66:	4b4e      	ldr	r3, [pc, #312]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	494a      	ldr	r1, [pc, #296]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b86:	2301      	movs	r3, #1
 8004b88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b92:	2301      	movs	r3, #1
 8004b94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 808b 	beq.w	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bb4:	4b3a      	ldr	r3, [pc, #232]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	4a39      	ldr	r2, [pc, #228]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc0:	4b37      	ldr	r3, [pc, #220]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bcc:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fc ff8a 	bl	8001af0 <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be0:	f7fc ff86 	bl	8001af0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e38f      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bf2:	4b2c      	ldr	r3, [pc, #176]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bfe:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d035      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d02e      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c1c:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c26:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c32:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c3e:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c44:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d114      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fc ff4e 	bl	8001af0 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	e00a      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fc ff4a 	bl	8001af0 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e351      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ee      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c86:	d111      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c96:	400b      	ands	r3, r1
 8004c98:	4901      	ldr	r1, [pc, #4]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	0ffffcff 	.word	0x0ffffcff
 8004cac:	4bb3      	ldr	r3, [pc, #716]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4ab2      	ldr	r2, [pc, #712]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cb6:	6093      	str	r3, [r2, #8]
 8004cb8:	4bb0      	ldr	r3, [pc, #704]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc4:	49ad      	ldr	r1, [pc, #692]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d010      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cd6:	4ba9      	ldr	r3, [pc, #676]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cdc:	4aa7      	ldr	r2, [pc, #668]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ce6:	4ba5      	ldr	r3, [pc, #660]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ce8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	49a2      	ldr	r1, [pc, #648]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d04:	4b9d      	ldr	r3, [pc, #628]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d12:	499a      	ldr	r1, [pc, #616]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d26:	4b95      	ldr	r3, [pc, #596]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d34:	4991      	ldr	r1, [pc, #580]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d48:	4b8c      	ldr	r3, [pc, #560]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d56:	4989      	ldr	r1, [pc, #548]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d6a:	4b84      	ldr	r3, [pc, #528]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	4980      	ldr	r1, [pc, #512]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d8c:	4b7b      	ldr	r3, [pc, #492]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	4978      	ldr	r1, [pc, #480]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dae:	4b73      	ldr	r3, [pc, #460]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f023 020c 	bic.w	r2, r3, #12
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbc:	496f      	ldr	r1, [pc, #444]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dd0:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dde:	4967      	ldr	r1, [pc, #412]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004df2:	4b62      	ldr	r3, [pc, #392]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e00:	495e      	ldr	r1, [pc, #376]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e14:	4b59      	ldr	r3, [pc, #356]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	4956      	ldr	r1, [pc, #344]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e36:	4b51      	ldr	r3, [pc, #324]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e44:	494d      	ldr	r1, [pc, #308]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e58:	4b48      	ldr	r3, [pc, #288]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e66:	4945      	ldr	r1, [pc, #276]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e7a:	4b40      	ldr	r3, [pc, #256]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e88:	493c      	ldr	r1, [pc, #240]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e9c:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eaa:	4934      	ldr	r1, [pc, #208]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d011      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ebe:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ecc:	492b      	ldr	r1, [pc, #172]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004efe:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0c:	491b      	ldr	r1, [pc, #108]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f20:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f30:	4912      	ldr	r1, [pc, #72]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f44:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f54:	4909      	ldr	r1, [pc, #36]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00f      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	e002      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	4986      	ldr	r1, [pc, #536]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f94:	4b81      	ldr	r3, [pc, #516]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa4:	497d      	ldr	r1, [pc, #500]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d006      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80d6 	beq.w	800516c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fc0:	4b76      	ldr	r3, [pc, #472]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a75      	ldr	r2, [pc, #468]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fcc:	f7fc fd90 	bl	8001af0 <HAL_GetTick>
 8004fd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fd4:	f7fc fd8c 	bl	8001af0 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e195      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe6:	4b6d      	ldr	r3, [pc, #436]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d021      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11d      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005006:	4b65      	ldr	r3, [pc, #404]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005014:	4b61      	ldr	r3, [pc, #388]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501a:	0e1b      	lsrs	r3, r3, #24
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	019a      	lsls	r2, r3, #6
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	071b      	lsls	r3, r3, #28
 800503a:	4958      	ldr	r1, [pc, #352]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02e      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800506c:	d129      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800506e:	4b4b      	ldr	r3, [pc, #300]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800507c:	4b47      	ldr	r3, [pc, #284]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800507e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005082:	0f1b      	lsrs	r3, r3, #28
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	019a      	lsls	r2, r3, #6
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	061b      	lsls	r3, r3, #24
 800509c:	431a      	orrs	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	071b      	lsls	r3, r3, #28
 80050a2:	493e      	ldr	r1, [pc, #248]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050aa:	4b3c      	ldr	r3, [pc, #240]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b0:	f023 021f 	bic.w	r2, r3, #31
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	3b01      	subs	r3, #1
 80050ba:	4938      	ldr	r1, [pc, #224]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01d      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050ce:	4b33      	ldr	r3, [pc, #204]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d4:	0e1b      	lsrs	r3, r3, #24
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050dc:	4b2f      	ldr	r3, [pc, #188]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e2:	0f1b      	lsrs	r3, r3, #28
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	019a      	lsls	r2, r3, #6
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	431a      	orrs	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	071b      	lsls	r3, r3, #28
 8005102:	4926      	ldr	r1, [pc, #152]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d011      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	019a      	lsls	r2, r3, #6
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	041b      	lsls	r3, r3, #16
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	071b      	lsls	r3, r3, #28
 8005132:	491a      	ldr	r1, [pc, #104]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800513a:	4b18      	ldr	r3, [pc, #96]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005146:	f7fc fcd3 	bl	8001af0 <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800514c:	e008      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800514e:	f7fc fccf 	bl	8001af0 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b64      	cmp	r3, #100	; 0x64
 800515a:	d901      	bls.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e0d8      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005160:	4b0e      	ldr	r3, [pc, #56]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b01      	cmp	r3, #1
 8005170:	f040 80ce 	bne.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005174:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800517a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800517e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005180:	f7fc fcb6 	bl	8001af0 <HAL_GetTick>
 8005184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005186:	e00b      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005188:	f7fc fcb2 	bl	8001af0 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d904      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e0bb      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051a0:	4b5e      	ldr	r3, [pc, #376]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ac:	d0ec      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d02e      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d12a      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051d6:	4b51      	ldr	r3, [pc, #324]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051e4:	4b4d      	ldr	r3, [pc, #308]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	0f1b      	lsrs	r3, r3, #28
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	019a      	lsls	r2, r3, #6
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	061b      	lsls	r3, r3, #24
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	071b      	lsls	r3, r3, #28
 800520a:	4944      	ldr	r1, [pc, #272]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005212:	4b42      	ldr	r3, [pc, #264]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005218:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	3b01      	subs	r3, #1
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	493d      	ldr	r1, [pc, #244]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d022      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005240:	d11d      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	0e1b      	lsrs	r3, r3, #24
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005250:	4b32      	ldr	r3, [pc, #200]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	0f1b      	lsrs	r3, r3, #28
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	019a      	lsls	r2, r3, #6
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	431a      	orrs	r2, r3
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	061b      	lsls	r3, r3, #24
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	071b      	lsls	r3, r3, #28
 8005276:	4929      	ldr	r1, [pc, #164]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d028      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	0e1b      	lsrs	r3, r3, #24
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005298:	4b20      	ldr	r3, [pc, #128]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	019a      	lsls	r2, r3, #6
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	431a      	orrs	r2, r3
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	061b      	lsls	r3, r3, #24
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	071b      	lsls	r3, r3, #28
 80052be:	4917      	ldr	r1, [pc, #92]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	4911      	ldr	r1, [pc, #68]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a0e      	ldr	r2, [pc, #56]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e8:	f7fc fc02 	bl	8001af0 <HAL_GetTick>
 80052ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052f0:	f7fc fbfe 	bl	8001af0 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	; 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e007      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800530a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800530e:	d1ef      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800

08005320 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800533e:	f040 80a3 	bne.w	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005342:	4bac      	ldr	r3, [pc, #688]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005348:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005350:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005358:	f000 808a 	beq.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005362:	f200 8093 	bhi.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800536c:	d07d      	beq.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005374:	f200 808a 	bhi.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005384:	d039      	beq.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005386:	e081      	b.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005388:	4b9a      	ldr	r3, [pc, #616]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d108      	bne.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005394:	4b97      	ldr	r3, [pc, #604]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800539c:	4a96      	ldr	r2, [pc, #600]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	e007      	b.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80053a6:	4b93      	ldr	r3, [pc, #588]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ae:	4a93      	ldr	r2, [pc, #588]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80053b6:	4b8f      	ldr	r3, [pc, #572]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	0e1b      	lsrs	r3, r3, #24
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80053c4:	4b8b      	ldr	r3, [pc, #556]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	099b      	lsrs	r3, r3, #6
 80053cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	fb02 f203 	mul.w	r2, r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80053de:	4b85      	ldr	r3, [pc, #532]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80053e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	617b      	str	r3, [r7, #20]
        break;
 80053f8:	e049      	b.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80053fa:	4b7e      	ldr	r3, [pc, #504]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d108      	bne.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005406:	4b7b      	ldr	r3, [pc, #492]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800540e:	4a7a      	ldr	r2, [pc, #488]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e007      	b.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005418:	4b76      	ldr	r3, [pc, #472]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005420:	4a76      	ldr	r2, [pc, #472]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005428:	4b72      	ldr	r3, [pc, #456]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800542a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542e:	0e1b      	lsrs	r3, r3, #24
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005436:	4b6f      	ldr	r3, [pc, #444]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543c:	099b      	lsrs	r3, r3, #6
 800543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	fb02 f203 	mul.w	r2, r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	fbb2 f3f3 	udiv	r3, r2, r3
 800544e:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005450:	4b68      	ldr	r3, [pc, #416]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	3301      	adds	r3, #1
 800545c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	617b      	str	r3, [r7, #20]
        break;
 8005468:	e011      	b.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800546a:	4b65      	ldr	r3, [pc, #404]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800546c:	617b      	str	r3, [r7, #20]
        break;
 800546e:	e00e      	b.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005470:	4b60      	ldr	r3, [pc, #384]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800547c:	4b5e      	ldr	r3, [pc, #376]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800547e:	617b      	str	r3, [r7, #20]
        break;
 8005480:	e005      	b.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8005482:	4b5e      	ldr	r3, [pc, #376]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005484:	617b      	str	r3, [r7, #20]
        break;
 8005486:	e002      	b.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8005488:	bf00      	nop
 800548a:	e000      	b.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 800548c:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005494:	f040 80a3 	bne.w	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005498:	4b56      	ldr	r3, [pc, #344]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800549a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800549e:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80054a6:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054ae:	f000 808a 	beq.w	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054b8:	f200 8093 	bhi.w	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054c2:	d07d      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ca:	f200 808a 	bhi.w	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054da:	d039      	beq.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80054dc:	e081      	b.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054de:	4b45      	ldr	r3, [pc, #276]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d108      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054ea:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f2:	4a41      	ldr	r2, [pc, #260]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	e007      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054fc:	4b3d      	ldr	r3, [pc, #244]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005504:	4a3d      	ldr	r2, [pc, #244]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005506:	fbb2 f3f3 	udiv	r3, r2, r3
 800550a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800550c:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	0e1b      	lsrs	r3, r3, #24
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800551a:	4b36      	ldr	r3, [pc, #216]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	099b      	lsrs	r3, r3, #6
 8005522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	fb02 f203 	mul.w	r2, r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005534:	4b2f      	ldr	r3, [pc, #188]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	3301      	adds	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]
        break;
 800554e:	e049      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005550:	4b28      	ldr	r3, [pc, #160]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d108      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800555c:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005564:	4a24      	ldr	r2, [pc, #144]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	e007      	b.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800556e:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005576:	4a21      	ldr	r2, [pc, #132]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800557e:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005584:	0e1b      	lsrs	r3, r3, #24
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800558c:	4b19      	ldr	r3, [pc, #100]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800558e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005592:	099b      	lsrs	r3, r3, #6
 8005594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	fb02 f203 	mul.w	r2, r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80055a6:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	3301      	adds	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]
        break;
 80055be:	e011      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80055c2:	617b      	str	r3, [r7, #20]
        break;
 80055c4:	e00e      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80055d4:	617b      	str	r3, [r7, #20]
        break;
 80055d6:	e005      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 80055d8:	4b08      	ldr	r3, [pc, #32]	; (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80055da:	617b      	str	r3, [r7, #20]
        break;
 80055dc:	e002      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 80055de:	bf00      	nop
 80055e0:	e000      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 80055e2:	bf00      	nop

  return frequency;
 80055e4:	697b      	ldr	r3, [r7, #20]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800
 80055f8:	00f42400 	.word	0x00f42400
 80055fc:	017d7840 	.word	0x017d7840
 8005600:	00bb8000 	.word	0x00bb8000

08005604 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e01c      	b.n	8005650 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	795b      	ldrb	r3, [r3, #5]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fb ff40 	bl	80014ac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0204 	orr.w	r2, r2, #4
 8005640:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e081      	b.n	800576e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	7f5b      	ldrb	r3, [r3, #29]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fb ff36 	bl	80014ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	22ca      	movs	r2, #202	; 0xca
 800568c:	625a      	str	r2, [r3, #36]	; 0x24
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2253      	movs	r2, #83	; 0x53
 8005694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f9fe 	bl	8005a98 <RTC_EnterInitMode>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	22ff      	movs	r2, #255	; 0xff
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2204      	movs	r2, #4
 80056ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e05c      	b.n	800576e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6899      	ldr	r1, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <HAL_RTC_Init+0x120>)
 80056c0:	400b      	ands	r3, r1
 80056c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6899      	ldr	r1, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68d2      	ldr	r2, [r2, #12]
 80056ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6919      	ldr	r1, [r3, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	041a      	lsls	r2, r3, #16
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800570e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10e      	bne.n	800573c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f992 	bl	8005a48 <HAL_RTC_WaitForSynchro>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	22ff      	movs	r2, #255	; 0xff
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2204      	movs	r2, #4
 8005736:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e018      	b.n	800576e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0208 	bic.w	r2, r2, #8
 800574a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	22ff      	movs	r2, #255	; 0xff
 8005764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800576c:	2300      	movs	r3, #0
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	ff8fffbf 	.word	0xff8fffbf

0800577c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	7f1b      	ldrb	r3, [r3, #28]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_RTC_SetTime+0x1c>
 8005794:	2302      	movs	r3, #2
 8005796:	e0a8      	b.n	80058ea <HAL_RTC_SetTime+0x16e>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2202      	movs	r2, #2
 80057a2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d126      	bne.n	80057f8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2200      	movs	r2, #0
 80057bc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f994 	bl	8005af0 <RTC_ByteToBcd2>
 80057c8:	4603      	mov	r3, r0
 80057ca:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f98d 	bl	8005af0 <RTC_ByteToBcd2>
 80057d6:	4603      	mov	r3, r0
 80057d8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80057da:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	789b      	ldrb	r3, [r3, #2]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 f985 	bl	8005af0 <RTC_ByteToBcd2>
 80057e6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80057e8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	7b1b      	ldrb	r3, [r3, #12]
 80057f0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e018      	b.n	800582a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2200      	movs	r2, #0
 800580a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005818:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800581e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	7b1b      	ldrb	r3, [r3, #12]
 8005824:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	22ca      	movs	r2, #202	; 0xca
 8005830:	625a      	str	r2, [r3, #36]	; 0x24
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2253      	movs	r2, #83	; 0x53
 8005838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f92c 	bl	8005a98 <RTC_EnterInitMode>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	22ff      	movs	r2, #255	; 0xff
 800584c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2204      	movs	r2, #4
 8005852:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e045      	b.n	80058ea <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	6979      	ldr	r1, [r7, #20]
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <HAL_RTC_SetTime+0x178>)
 8005866:	400b      	ands	r3, r1
 8005868:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005878:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6899      	ldr	r1, [r3, #8]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	431a      	orrs	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d111      	bne.n	80058d4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f8c9 	bl	8005a48 <HAL_RTC_WaitForSynchro>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2204      	movs	r2, #4
 80058c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e00a      	b.n	80058ea <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	22ff      	movs	r2, #255	; 0xff
 80058da:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80058e8:	2300      	movs	r3, #0
  }
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd90      	pop	{r4, r7, pc}
 80058f2:	bf00      	nop
 80058f4:	007f7f7f 	.word	0x007f7f7f

080058f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	7f1b      	ldrb	r3, [r3, #28]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_RTC_SetDate+0x1c>
 8005910:	2302      	movs	r3, #2
 8005912:	e092      	b.n	8005a3a <HAL_RTC_SetDate+0x142>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2202      	movs	r2, #2
 800591e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10e      	bne.n	8005944 <HAL_RTC_SetDate+0x4c>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	f023 0310 	bic.w	r3, r3, #16
 800593a:	b2db      	uxtb	r3, r3
 800593c:	330a      	adds	r3, #10
 800593e:	b2da      	uxtb	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11c      	bne.n	8005984 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	78db      	ldrb	r3, [r3, #3]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f8ce 	bl	8005af0 <RTC_ByteToBcd2>
 8005954:	4603      	mov	r3, r0
 8005956:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f8c7 	bl	8005af0 <RTC_ByteToBcd2>
 8005962:	4603      	mov	r3, r0
 8005964:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005966:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	789b      	ldrb	r3, [r3, #2]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 f8bf 	bl	8005af0 <RTC_ByteToBcd2>
 8005972:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005974:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e00e      	b.n	80059a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	78db      	ldrb	r3, [r3, #3]
 8005988:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005990:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005996:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	22ca      	movs	r2, #202	; 0xca
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2253      	movs	r2, #83	; 0x53
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f870 	bl	8005a98 <RTC_EnterInitMode>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	22ff      	movs	r2, #255	; 0xff
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2204      	movs	r2, #4
 80059ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e031      	b.n	8005a3a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	6979      	ldr	r1, [r7, #20]
 80059dc:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <HAL_RTC_SetDate+0x14c>)
 80059de:	400b      	ands	r3, r1
 80059e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059f0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d111      	bne.n	8005a24 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f821 	bl	8005a48 <HAL_RTC_WaitForSynchro>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	22ff      	movs	r2, #255	; 0xff
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2204      	movs	r2, #4
 8005a18:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e00a      	b.n	8005a3a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	22ff      	movs	r2, #255	; 0xff
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005a38:	2300      	movs	r3, #0
  }
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd90      	pop	{r4, r7, pc}
 8005a42:	bf00      	nop
 8005a44:	00ffff3f 	.word	0x00ffff3f

08005a48 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a64:	f7fc f844 	bl	8001af0 <HAL_GetTick>
 8005a68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a6a:	e009      	b.n	8005a80 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a6c:	f7fc f840 	bl	8001af0 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a7a:	d901      	bls.n	8005a80 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e007      	b.n	8005a90 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0ee      	beq.n	8005a6c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d119      	bne.n	8005ae6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005abc:	f7fc f818 	bl	8001af0 <HAL_GetTick>
 8005ac0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ac2:	e009      	b.n	8005ad8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ac4:	f7fc f814 	bl	8001af0 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad2:	d901      	bls.n	8005ad8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e007      	b.n	8005ae8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0ee      	beq.n	8005ac4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005afe:	e005      	b.n	8005b0c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	3b0a      	subs	r3, #10
 8005b0a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	2b09      	cmp	r3, #9
 8005b10:	d8f6      	bhi.n	8005b00 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	b2db      	uxtb	r3, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d904      	bls.n	8005b4e <HAL_SAI_InitProtocol+0x22>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	3b03      	subs	r3, #3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d812      	bhi.n	8005b72 <HAL_SAI_InitProtocol+0x46>
 8005b4c:	e008      	b.n	8005b60 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fb71 	bl	800623c <SAI_InitI2S>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5e:	e00b      	b.n	8005b78 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fc16 	bl	8006398 <SAI_InitPCM>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b70:	e002      	b.n	8005b78 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
      break;
 8005b76:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d104      	bne.n	8005b88 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f808 	bl	8005b94 <HAL_SAI_Init>
 8005b84:	4603      	mov	r3, r0
 8005b86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e156      	b.n	8005e60 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fb fd8a 	bl	80016e0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fc5f 	bl	8006498 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d00c      	beq.n	8005bfc <HAL_SAI_Init+0x68>
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d80d      	bhi.n	8005c02 <HAL_SAI_Init+0x6e>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_SAI_Init+0x5c>
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d003      	beq.n	8005bf6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005bee:	e008      	b.n	8005c02 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]
      break;
 8005bf4:	e006      	b.n	8005c04 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005bf6:	2310      	movs	r3, #16
 8005bf8:	61fb      	str	r3, [r7, #28]
      break;
 8005bfa:	e003      	b.n	8005c04 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	61fb      	str	r3, [r7, #28]
      break;
 8005c00:	e000      	b.n	8005c04 <HAL_SAI_Init+0x70>
      break;
 8005c02:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d81e      	bhi.n	8005c4a <HAL_SAI_Init+0xb6>
 8005c0c:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <HAL_SAI_Init+0x80>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005c2b 	.word	0x08005c2b
 8005c1c:	08005c33 	.word	0x08005c33
 8005c20:	08005c3b 	.word	0x08005c3b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]
    }
    break;
 8005c28:	e010      	b.n	8005c4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c2e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005c30:	e00c      	b.n	8005c4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c36:	617b      	str	r3, [r7, #20]
    }
    break;
 8005c38:	e008      	b.n	8005c4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005c3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c3e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005c48:	e000      	b.n	8005c4c <HAL_SAI_Init+0xb8>
    default:
      break;
 8005c4a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a85      	ldr	r2, [pc, #532]	; (8005e68 <HAL_SAI_Init+0x2d4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <HAL_SAI_Init+0xcc>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a84      	ldr	r2, [pc, #528]	; (8005e6c <HAL_SAI_Init+0x2d8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d103      	bne.n	8005c68 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005c60:	4a83      	ldr	r2, [pc, #524]	; (8005e70 <HAL_SAI_Init+0x2dc>)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	e002      	b.n	8005c6e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005c68:	4a82      	ldr	r2, [pc, #520]	; (8005e74 <HAL_SAI_Init+0x2e0>)
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d04c      	beq.n	8005d10 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a7a      	ldr	r2, [pc, #488]	; (8005e68 <HAL_SAI_Init+0x2d4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d004      	beq.n	8005c8e <HAL_SAI_Init+0xfa>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a78      	ldr	r2, [pc, #480]	; (8005e6c <HAL_SAI_Init+0x2d8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d104      	bne.n	8005c98 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005c8e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c92:	f7ff fb45 	bl	8005320 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c96:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a76      	ldr	r2, [pc, #472]	; (8005e78 <HAL_SAI_Init+0x2e4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_SAI_Init+0x118>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a75      	ldr	r2, [pc, #468]	; (8005e7c <HAL_SAI_Init+0x2e8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d104      	bne.n	8005cb6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005cac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005cb0:	f7ff fb36 	bl	8005320 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cb4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	025b      	lsls	r3, r3, #9
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a6b      	ldr	r2, [pc, #428]	; (8005e80 <HAL_SAI_Init+0x2ec>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	08da      	lsrs	r2, r3, #3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005cdc:	68f9      	ldr	r1, [r7, #12]
 8005cde:	4b68      	ldr	r3, [pc, #416]	; (8005e80 <HAL_SAI_Init+0x2ec>)
 8005ce0:	fba3 2301 	umull	r2, r3, r3, r1
 8005ce4:	08da      	lsrs	r2, r3, #3
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	1aca      	subs	r2, r1, r3
 8005cf0:	2a08      	cmp	r2, #8
 8005cf2:	d904      	bls.n	8005cfe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d104      	bne.n	8005d10 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	085a      	lsrs	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_SAI_Init+0x18c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d109      	bne.n	8005d34 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_SAI_Init+0x198>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e001      	b.n	8005d30 <HAL_SAI_Init+0x19c>
 8005d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e008      	b.n	8005d46 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d102      	bne.n	8005d42 <HAL_SAI_Init+0x1ae>
 8005d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d40:	e000      	b.n	8005d44 <HAL_SAI_Init+0x1b0>
 8005d42:	2300      	movs	r3, #0
 8005d44:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6819      	ldr	r1, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4b4c      	ldr	r3, [pc, #304]	; (8005e84 <HAL_SAI_Init+0x2f0>)
 8005d52:	400b      	ands	r3, r1
 8005d54:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6819      	ldr	r1, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005d6a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	431a      	orrs	r2, r3
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005d7e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005d8a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	051b      	lsls	r3, r3, #20
 8005d92:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_SAI_Init+0x2f4>)
 8005da8:	400b      	ands	r3, r1
 8005daa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6859      	ldr	r1, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6899      	ldr	r1, [r3, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	4b2d      	ldr	r3, [pc, #180]	; (8005e8c <HAL_SAI_Init+0x2f8>)
 8005dd6:	400b      	ands	r3, r1
 8005dd8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6899      	ldr	r1, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005dea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005df0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005df6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005e00:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68d9      	ldr	r1, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005e18:	400b      	ands	r3, r1
 8005e1a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68d9      	ldr	r1, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e30:	041b      	lsls	r3, r3, #16
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40015804 	.word	0x40015804
 8005e6c:	40015824 	.word	0x40015824
 8005e70:	40015800 	.word	0x40015800
 8005e74:	40015c00 	.word	0x40015c00
 8005e78:	40015c04 	.word	0x40015c04
 8005e7c:	40015c24 	.word	0x40015c24
 8005e80:	cccccccd 	.word	0xcccccccd
 8005e84:	ff05c010 	.word	0xff05c010
 8005e88:	ffff1ff0 	.word	0xffff1ff0
 8005e8c:	fff88000 	.word	0xfff88000

08005e90 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_SAI_Abort+0x1a>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e072      	b.n	8005f90 <HAL_SAI_Abort+0x100>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ec0:	d149      	bne.n	8005f56 <HAL_SAI_Abort+0xc6>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005ed0:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01c      	beq.n	8005f14 <HAL_SAI_Abort+0x84>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b12      	cmp	r3, #18
 8005ee4:	d116      	bne.n	8005f14 <HAL_SAI_Abort+0x84>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fc f8bc 	bl	8002068 <HAL_DMA_Abort>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00e      	beq.n	8005f14 <HAL_SAI_Abort+0x84>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d009      	beq.n	8005f14 <HAL_SAI_Abort+0x84>
        {
          status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01c      	beq.n	8005f56 <HAL_SAI_Abort+0xc6>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b22      	cmp	r3, #34	; 0x22
 8005f26:	d116      	bne.n	8005f56 <HAL_SAI_Abort+0xc6>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fc f89b 	bl	8002068 <HAL_DMA_Abort>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <HAL_SAI_Abort+0xc6>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3e:	2b80      	cmp	r3, #128	; 0x80
 8005f40:	d009      	beq.n	8005f56 <HAL_SAI_Abort+0xc6>
        {
          status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f66:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fa95 	bl	8006498 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0208 	orr.w	r2, r2, #8
 8005f7c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8137 	beq.w	800621c <HAL_SAI_IRQHandler+0x284>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d009      	beq.n	8005fe4 <HAL_SAI_IRQHandler+0x4c>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
 8005fe2:	e11b      	b.n	800621c <HAL_SAI_IRQHandler+0x284>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01e      	beq.n	800602c <HAL_SAI_IRQHandler+0x94>
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d019      	beq.n	800602c <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b22      	cmp	r3, #34	; 0x22
 800600a:	d101      	bne.n	8006010 <HAL_SAI_IRQHandler+0x78>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <HAL_SAI_IRQHandler+0x7a>
 8006010:	2302      	movs	r3, #2
 8006012:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f8ff 	bl	8006228 <HAL_SAI_ErrorCallback>
 800602a:	e0f7      	b.n	800621c <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d011      	beq.n	800605a <HAL_SAI_IRQHandler+0xc2>
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00c      	beq.n	800605a <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2202      	movs	r2, #2
 8006046:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80e5 	beq.w	800621c <HAL_SAI_IRQHandler+0x284>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006056:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 8006058:	e0e0      	b.n	800621c <HAL_SAI_IRQHandler+0x284>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	d039      	beq.n	80060d8 <HAL_SAI_IRQHandler+0x140>
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d034      	beq.n	80060d8 <HAL_SAI_IRQHandler+0x140>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2220      	movs	r2, #32
 8006074:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800607c:	f043 0204 	orr.w	r2, r3, #4
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01c      	beq.n	80060ca <HAL_SAI_IRQHandler+0x132>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <HAL_SAI_IRQHandler+0x114>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609c:	4a61      	ldr	r2, [pc, #388]	; (8006224 <HAL_SAI_IRQHandler+0x28c>)
 800609e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fc f84f 	bl	8002148 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80060aa:	e0b4      	b.n	8006216 <HAL_SAI_IRQHandler+0x27e>
        }
        else if (hsai->hdmarx != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80b0 	beq.w	8006216 <HAL_SAI_IRQHandler+0x27e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4a5a      	ldr	r2, [pc, #360]	; (8006224 <HAL_SAI_IRQHandler+0x28c>)
 80060bc:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fc f840 	bl	8002148 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80060c8:	e0a5      	b.n	8006216 <HAL_SAI_IRQHandler+0x27e>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fee0 	bl	8005e90 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f8a9 	bl	8006228 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80060d6:	e09e      	b.n	8006216 <HAL_SAI_IRQHandler+0x27e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d038      	beq.n	8006154 <HAL_SAI_IRQHandler+0x1bc>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d033      	beq.n	8006154 <HAL_SAI_IRQHandler+0x1bc>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2240      	movs	r2, #64	; 0x40
 80060f2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fa:	f043 0208 	orr.w	r2, r3, #8
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01b      	beq.n	8006146 <HAL_SAI_IRQHandler+0x1ae>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_SAI_IRQHandler+0x192>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611a:	4a42      	ldr	r2, [pc, #264]	; (8006224 <HAL_SAI_IRQHandler+0x28c>)
 800611c:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006122:	4618      	mov	r0, r3
 8006124:	f7fc f810 	bl	8002148 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006128:	e077      	b.n	800621a <HAL_SAI_IRQHandler+0x282>
        }
        else if (hsai->hdmarx != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	2b00      	cmp	r3, #0
 8006130:	d073      	beq.n	800621a <HAL_SAI_IRQHandler+0x282>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	4a3b      	ldr	r2, [pc, #236]	; (8006224 <HAL_SAI_IRQHandler+0x28c>)
 8006138:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613e:	4618      	mov	r0, r3
 8006140:	f7fc f802 	bl	8002148 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006144:	e069      	b.n	800621a <HAL_SAI_IRQHandler+0x282>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fea2 	bl	8005e90 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f86b 	bl	8006228 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006152:	e062      	b.n	800621a <HAL_SAI_IRQHandler+0x282>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d041      	beq.n	80061e2 <HAL_SAI_IRQHandler+0x24a>
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d03c      	beq.n	80061e2 <HAL_SAI_IRQHandler+0x24a>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2204      	movs	r2, #4
 800616e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_SAI_IRQHandler+0x204>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800618c:	4a25      	ldr	r2, [pc, #148]	; (8006224 <HAL_SAI_IRQHandler+0x28c>)
 800618e:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmatx);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006194:	4618      	mov	r0, r3
 8006196:	f7fb ffd7 	bl	8002148 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 800619a:	e03f      	b.n	800621c <HAL_SAI_IRQHandler+0x284>
      }
      else if (hsai->hdmarx != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <HAL_SAI_IRQHandler+0x220>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a8:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <HAL_SAI_IRQHandler+0x28c>)
 80061aa:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmarx);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fb ffc9 	bl	8002148 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 80061b6:	e031      	b.n	800621c <HAL_SAI_IRQHandler+0x284>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061c8:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f824 	bl	8006228 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 80061e0:	e01c      	b.n	800621c <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d017      	beq.n	800621c <HAL_SAI_IRQHandler+0x284>
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d012      	beq.n	800621c <HAL_SAI_IRQHandler+0x284>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2210      	movs	r2, #16
 80061fc:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006204:	f043 0210 	orr.w	r2, r3, #16
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f80a 	bl	8006228 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8006214:	e002      	b.n	800621c <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800621a:	bf00      	nop
}
 800621c:	bf00      	nop
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	08006509 	.word	0x08006509

08006228 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <SAI_InitI2S+0x2a>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d103      	bne.n	800626e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	63da      	str	r2, [r3, #60]	; 0x3c
 800626c:	e002      	b.n	8006274 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800627a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006282:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e076      	b.n	800638c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d107      	bne.n	80062b4 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80062b0:	651a      	str	r2, [r3, #80]	; 0x50
 80062b2:	e006      	b.n	80062c2 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	651a      	str	r2, [r3, #80]	; 0x50
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d84f      	bhi.n	8006368 <SAI_InitI2S+0x12c>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <SAI_InitI2S+0x94>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	080062e1 	.word	0x080062e1
 80062d4:	08006303 	.word	0x08006303
 80062d8:	08006325 	.word	0x08006325
 80062dc:	08006347 	.word	0x08006347

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2280      	movs	r2, #128	; 0x80
 80062e4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	011a      	lsls	r2, r3, #4
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006300:	e034      	b.n	800636c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2280      	movs	r2, #128	; 0x80
 8006306:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	019a      	lsls	r2, r3, #6
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	085b      	lsrs	r3, r3, #1
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2280      	movs	r2, #128	; 0x80
 8006320:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006322:	e023      	b.n	800636c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	22c0      	movs	r2, #192	; 0xc0
 8006328:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	019a      	lsls	r2, r3, #6
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	085b      	lsrs	r3, r3, #1
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2280      	movs	r2, #128	; 0x80
 8006342:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006344:	e012      	b.n	800636c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	22e0      	movs	r2, #224	; 0xe0
 800634a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	085b      	lsrs	r3, r3, #1
 8006350:	019a      	lsls	r2, r3, #6
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2280      	movs	r2, #128	; 0x80
 8006364:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006366:	e001      	b.n	800636c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e00f      	b.n	800638c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d10b      	bne.n	800638a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d102      	bne.n	800637e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2210      	movs	r2, #16
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d102      	bne.n	800638a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2208      	movs	r2, #8
 8006388:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <SAI_InitPCM+0x2a>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d103      	bne.n	80063ca <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80063c8:	e002      	b.n	80063d0 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80063e4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063f8:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d103      	bne.n	8006408 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	645a      	str	r2, [r3, #68]	; 0x44
 8006406:	e002      	b.n	800640e <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	220d      	movs	r2, #13
 800640c:	645a      	str	r2, [r3, #68]	; 0x44
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b03      	cmp	r3, #3
 8006412:	d837      	bhi.n	8006484 <SAI_InitPCM+0xec>
 8006414:	a201      	add	r2, pc, #4	; (adr r2, 800641c <SAI_InitPCM+0x84>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	0800642d 	.word	0x0800642d
 8006420:	08006443 	.word	0x08006443
 8006424:	08006459 	.word	0x08006459
 8006428:	0800646f 	.word	0x0800646f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2280      	movs	r2, #128	; 0x80
 8006430:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	011a      	lsls	r2, r3, #4
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2240      	movs	r2, #64	; 0x40
 800643e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006440:	e022      	b.n	8006488 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2280      	movs	r2, #128	; 0x80
 8006446:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2280      	movs	r2, #128	; 0x80
 8006454:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006456:	e017      	b.n	8006488 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	22c0      	movs	r2, #192	; 0xc0
 800645c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2280      	movs	r2, #128	; 0x80
 800646a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800646c:	e00c      	b.n	8006488 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	22e0      	movs	r2, #224	; 0xe0
 8006472:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8006482:	e001      	b.n	8006488 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop

08006498 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80064a0:	4b17      	ldr	r3, [pc, #92]	; (8006500 <SAI_Disable+0x68>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a17      	ldr	r2, [pc, #92]	; (8006504 <SAI_Disable+0x6c>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	0b1b      	lsrs	r3, r3, #12
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064c2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	1e5a      	subs	r2, r3, #1
 80064c8:	60fa      	str	r2, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	72fb      	strb	r3, [r7, #11]
      break;
 80064e2:	e006      	b.n	80064f2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e8      	bne.n	80064c4 <SAI_Disable+0x2c>

  return status;
 80064f2:	7afb      	ldrb	r3, [r7, #11]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	20000000 	.word	0x20000000
 8006504:	95cbec1b 	.word	0x95cbec1b

08006508 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006524:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006536:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800653e:	2b20      	cmp	r3, #32
 8006540:	d00a      	beq.n	8006558 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f7ff ffa8 	bl	8006498 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0208 	orr.w	r2, r2, #8
 8006556:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7ff fe5d 	bl	8006228 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800656e:	bf00      	nop
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e038      	b.n	80065fe <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7fb f893 	bl	80016cc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3308      	adds	r3, #8
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f000 ff67 	bl	8007484 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	461a      	mov	r2, r3
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	f000 ffef 	bl	80075a4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6858      	ldr	r0, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	f001 f836 	bl	8007644 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	6892      	ldr	r2, [r2, #8]
 80065e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	6892      	ldr	r2, [r2, #8]
 80065ec:	f041 0101 	orr.w	r1, r1, #1
 80065f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e049      	b.n	80066ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f841 	bl	80066b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f000 f9ff 	bl	8006a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d001      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e054      	b.n	800678a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a26      	ldr	r2, [pc, #152]	; (8006798 <HAL_TIM_Base_Start_IT+0xd0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d022      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670a:	d01d      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a22      	ldr	r2, [pc, #136]	; (800679c <HAL_TIM_Base_Start_IT+0xd4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1c      	ldr	r2, [pc, #112]	; (80067ac <HAL_TIM_Base_Start_IT+0xe4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d115      	bne.n	8006774 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <HAL_TIM_Base_Start_IT+0xec>)
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b06      	cmp	r3, #6
 8006758:	d015      	beq.n	8006786 <HAL_TIM_Base_Start_IT+0xbe>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006760:	d011      	beq.n	8006786 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0201 	orr.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006772:	e008      	b.n	8006786 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e000      	b.n	8006788 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40000400 	.word	0x40000400
 80067a0:	40000800 	.word	0x40000800
 80067a4:	40000c00 	.word	0x40000c00
 80067a8:	40010400 	.word	0x40010400
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40001800 	.word	0x40001800
 80067b4:	00010007 	.word	0x00010007

080067b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d122      	bne.n	8006814 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d11b      	bne.n	8006814 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0202 	mvn.w	r2, #2
 80067e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f905 	bl	8006a0a <HAL_TIM_IC_CaptureCallback>
 8006800:	e005      	b.n	800680e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f8f7 	bl	80069f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f908 	bl	8006a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b04      	cmp	r3, #4
 8006820:	d122      	bne.n	8006868 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b04      	cmp	r3, #4
 800682e:	d11b      	bne.n	8006868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0204 	mvn.w	r2, #4
 8006838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2202      	movs	r2, #2
 800683e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8db 	bl	8006a0a <HAL_TIM_IC_CaptureCallback>
 8006854:	e005      	b.n	8006862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f8cd 	bl	80069f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f8de 	bl	8006a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	2b08      	cmp	r3, #8
 8006874:	d122      	bne.n	80068bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b08      	cmp	r3, #8
 8006882:	d11b      	bne.n	80068bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f06f 0208 	mvn.w	r2, #8
 800688c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2204      	movs	r2, #4
 8006892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f8b1 	bl	8006a0a <HAL_TIM_IC_CaptureCallback>
 80068a8:	e005      	b.n	80068b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8a3 	bl	80069f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f8b4 	bl	8006a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d122      	bne.n	8006910 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d11b      	bne.n	8006910 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0210 	mvn.w	r2, #16
 80068e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2208      	movs	r2, #8
 80068e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f887 	bl	8006a0a <HAL_TIM_IC_CaptureCallback>
 80068fc:	e005      	b.n	800690a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f879 	bl	80069f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f88a 	bl	8006a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b01      	cmp	r3, #1
 800691c:	d10e      	bne.n	800693c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b01      	cmp	r3, #1
 800692a:	d107      	bne.n	800693c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f06f 0201 	mvn.w	r2, #1
 8006934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fa fb92 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006946:	2b80      	cmp	r3, #128	; 0x80
 8006948:	d10e      	bne.n	8006968 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006954:	2b80      	cmp	r3, #128	; 0x80
 8006956:	d107      	bne.n	8006968 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f91a 	bl	8006b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006976:	d10e      	bne.n	8006996 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d107      	bne.n	8006996 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800698e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f90d 	bl	8006bb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d10e      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d107      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f838 	bl	8006a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d10e      	bne.n	80069ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d107      	bne.n	80069ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0220 	mvn.w	r2, #32
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f8cd 	bl	8006b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a40      	ldr	r2, [pc, #256]	; (8006b5c <TIM_Base_SetConfig+0x114>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d013      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d00f      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a3d      	ldr	r2, [pc, #244]	; (8006b60 <TIM_Base_SetConfig+0x118>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00b      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a3c      	ldr	r2, [pc, #240]	; (8006b64 <TIM_Base_SetConfig+0x11c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d007      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a3b      	ldr	r2, [pc, #236]	; (8006b68 <TIM_Base_SetConfig+0x120>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a3a      	ldr	r2, [pc, #232]	; (8006b6c <TIM_Base_SetConfig+0x124>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d108      	bne.n	8006a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a2f      	ldr	r2, [pc, #188]	; (8006b5c <TIM_Base_SetConfig+0x114>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d02b      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa8:	d027      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a2c      	ldr	r2, [pc, #176]	; (8006b60 <TIM_Base_SetConfig+0x118>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d023      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a2b      	ldr	r2, [pc, #172]	; (8006b64 <TIM_Base_SetConfig+0x11c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d01f      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a2a      	ldr	r2, [pc, #168]	; (8006b68 <TIM_Base_SetConfig+0x120>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01b      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a29      	ldr	r2, [pc, #164]	; (8006b6c <TIM_Base_SetConfig+0x124>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d017      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a28      	ldr	r2, [pc, #160]	; (8006b70 <TIM_Base_SetConfig+0x128>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a27      	ldr	r2, [pc, #156]	; (8006b74 <TIM_Base_SetConfig+0x12c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00f      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a26      	ldr	r2, [pc, #152]	; (8006b78 <TIM_Base_SetConfig+0x130>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00b      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a25      	ldr	r2, [pc, #148]	; (8006b7c <TIM_Base_SetConfig+0x134>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d007      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a24      	ldr	r2, [pc, #144]	; (8006b80 <TIM_Base_SetConfig+0x138>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d003      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a23      	ldr	r2, [pc, #140]	; (8006b84 <TIM_Base_SetConfig+0x13c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d108      	bne.n	8006b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <TIM_Base_SetConfig+0x114>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_Base_SetConfig+0xf8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a0c      	ldr	r2, [pc, #48]	; (8006b6c <TIM_Base_SetConfig+0x124>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d103      	bne.n	8006b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	615a      	str	r2, [r3, #20]
}
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800
 8006b7c:	40001800 	.word	0x40001800
 8006b80:	40001c00 	.word	0x40001c00
 8006b84:	40002000 	.word	0x40002000

08006b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e040      	b.n	8006c58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fa fc9a 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2224      	movs	r2, #36	; 0x24
 8006bf0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0201 	bic.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f82c 	bl	8006c60 <UART_SetConfig>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e022      	b.n	8006c58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fa82 	bl	8007124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fb09 	bl	8007268 <UART_CheckIdleState>
 8006c56:	4603      	mov	r3, r0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4ba7      	ldr	r3, [pc, #668]	; (8006f28 <UART_SetConfig+0x2c8>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6812      	ldr	r2, [r2, #0]
 8006c92:	6979      	ldr	r1, [r7, #20]
 8006c94:	430b      	orrs	r3, r1
 8006c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a95      	ldr	r2, [pc, #596]	; (8006f2c <UART_SetConfig+0x2cc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d120      	bne.n	8006d1e <UART_SetConfig+0xbe>
 8006cdc:	4b94      	ldr	r3, [pc, #592]	; (8006f30 <UART_SetConfig+0x2d0>)
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d816      	bhi.n	8006d18 <UART_SetConfig+0xb8>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <UART_SetConfig+0x90>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d0d 	.word	0x08006d0d
 8006cf8:	08006d07 	.word	0x08006d07
 8006cfc:	08006d13 	.word	0x08006d13
 8006d00:	2301      	movs	r3, #1
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	e14f      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d06:	2302      	movs	r3, #2
 8006d08:	77fb      	strb	r3, [r7, #31]
 8006d0a:	e14c      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	e149      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d12:	2308      	movs	r3, #8
 8006d14:	77fb      	strb	r3, [r7, #31]
 8006d16:	e146      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d18:	2310      	movs	r3, #16
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e143      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a84      	ldr	r2, [pc, #528]	; (8006f34 <UART_SetConfig+0x2d4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d132      	bne.n	8006d8e <UART_SetConfig+0x12e>
 8006d28:	4b81      	ldr	r3, [pc, #516]	; (8006f30 <UART_SetConfig+0x2d0>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2e:	f003 030c 	and.w	r3, r3, #12
 8006d32:	2b0c      	cmp	r3, #12
 8006d34:	d828      	bhi.n	8006d88 <UART_SetConfig+0x128>
 8006d36:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <UART_SetConfig+0xdc>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006d71 	.word	0x08006d71
 8006d40:	08006d89 	.word	0x08006d89
 8006d44:	08006d89 	.word	0x08006d89
 8006d48:	08006d89 	.word	0x08006d89
 8006d4c:	08006d7d 	.word	0x08006d7d
 8006d50:	08006d89 	.word	0x08006d89
 8006d54:	08006d89 	.word	0x08006d89
 8006d58:	08006d89 	.word	0x08006d89
 8006d5c:	08006d77 	.word	0x08006d77
 8006d60:	08006d89 	.word	0x08006d89
 8006d64:	08006d89 	.word	0x08006d89
 8006d68:	08006d89 	.word	0x08006d89
 8006d6c:	08006d83 	.word	0x08006d83
 8006d70:	2300      	movs	r3, #0
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e117      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d76:	2302      	movs	r3, #2
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e114      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e111      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d82:	2308      	movs	r3, #8
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e10e      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e10b      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a69      	ldr	r2, [pc, #420]	; (8006f38 <UART_SetConfig+0x2d8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d120      	bne.n	8006dda <UART_SetConfig+0x17a>
 8006d98:	4b65      	ldr	r3, [pc, #404]	; (8006f30 <UART_SetConfig+0x2d0>)
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006da2:	2b30      	cmp	r3, #48	; 0x30
 8006da4:	d013      	beq.n	8006dce <UART_SetConfig+0x16e>
 8006da6:	2b30      	cmp	r3, #48	; 0x30
 8006da8:	d814      	bhi.n	8006dd4 <UART_SetConfig+0x174>
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d009      	beq.n	8006dc2 <UART_SetConfig+0x162>
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d810      	bhi.n	8006dd4 <UART_SetConfig+0x174>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <UART_SetConfig+0x15c>
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d006      	beq.n	8006dc8 <UART_SetConfig+0x168>
 8006dba:	e00b      	b.n	8006dd4 <UART_SetConfig+0x174>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e0f1      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e0ee      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e0eb      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006dce:	2308      	movs	r3, #8
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e0e8      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e0e5      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a57      	ldr	r2, [pc, #348]	; (8006f3c <UART_SetConfig+0x2dc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d120      	bne.n	8006e26 <UART_SetConfig+0x1c6>
 8006de4:	4b52      	ldr	r3, [pc, #328]	; (8006f30 <UART_SetConfig+0x2d0>)
 8006de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dee:	2bc0      	cmp	r3, #192	; 0xc0
 8006df0:	d013      	beq.n	8006e1a <UART_SetConfig+0x1ba>
 8006df2:	2bc0      	cmp	r3, #192	; 0xc0
 8006df4:	d814      	bhi.n	8006e20 <UART_SetConfig+0x1c0>
 8006df6:	2b80      	cmp	r3, #128	; 0x80
 8006df8:	d009      	beq.n	8006e0e <UART_SetConfig+0x1ae>
 8006dfa:	2b80      	cmp	r3, #128	; 0x80
 8006dfc:	d810      	bhi.n	8006e20 <UART_SetConfig+0x1c0>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <UART_SetConfig+0x1a8>
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d006      	beq.n	8006e14 <UART_SetConfig+0x1b4>
 8006e06:	e00b      	b.n	8006e20 <UART_SetConfig+0x1c0>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e0cb      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e0c8      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e14:	2304      	movs	r3, #4
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e0c5      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e1a:	2308      	movs	r3, #8
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e0c2      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e20:	2310      	movs	r3, #16
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e0bf      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a45      	ldr	r2, [pc, #276]	; (8006f40 <UART_SetConfig+0x2e0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d125      	bne.n	8006e7c <UART_SetConfig+0x21c>
 8006e30:	4b3f      	ldr	r3, [pc, #252]	; (8006f30 <UART_SetConfig+0x2d0>)
 8006e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e3e:	d017      	beq.n	8006e70 <UART_SetConfig+0x210>
 8006e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e44:	d817      	bhi.n	8006e76 <UART_SetConfig+0x216>
 8006e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e4a:	d00b      	beq.n	8006e64 <UART_SetConfig+0x204>
 8006e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e50:	d811      	bhi.n	8006e76 <UART_SetConfig+0x216>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <UART_SetConfig+0x1fe>
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5a:	d006      	beq.n	8006e6a <UART_SetConfig+0x20a>
 8006e5c:	e00b      	b.n	8006e76 <UART_SetConfig+0x216>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	77fb      	strb	r3, [r7, #31]
 8006e62:	e0a0      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e64:	2302      	movs	r3, #2
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e09d      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e6a:	2304      	movs	r3, #4
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e09a      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e70:	2308      	movs	r3, #8
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e097      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e76:	2310      	movs	r3, #16
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e094      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a30      	ldr	r2, [pc, #192]	; (8006f44 <UART_SetConfig+0x2e4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d125      	bne.n	8006ed2 <UART_SetConfig+0x272>
 8006e86:	4b2a      	ldr	r3, [pc, #168]	; (8006f30 <UART_SetConfig+0x2d0>)
 8006e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e94:	d017      	beq.n	8006ec6 <UART_SetConfig+0x266>
 8006e96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e9a:	d817      	bhi.n	8006ecc <UART_SetConfig+0x26c>
 8006e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea0:	d00b      	beq.n	8006eba <UART_SetConfig+0x25a>
 8006ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea6:	d811      	bhi.n	8006ecc <UART_SetConfig+0x26c>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <UART_SetConfig+0x254>
 8006eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb0:	d006      	beq.n	8006ec0 <UART_SetConfig+0x260>
 8006eb2:	e00b      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e075      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e072      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	77fb      	strb	r3, [r7, #31]
 8006ec4:	e06f      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006ec6:	2308      	movs	r3, #8
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e06c      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006ecc:	2310      	movs	r3, #16
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e069      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <UART_SetConfig+0x2e8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d137      	bne.n	8006f4c <UART_SetConfig+0x2ec>
 8006edc:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <UART_SetConfig+0x2d0>)
 8006ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ee6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eea:	d017      	beq.n	8006f1c <UART_SetConfig+0x2bc>
 8006eec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ef0:	d817      	bhi.n	8006f22 <UART_SetConfig+0x2c2>
 8006ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef6:	d00b      	beq.n	8006f10 <UART_SetConfig+0x2b0>
 8006ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efc:	d811      	bhi.n	8006f22 <UART_SetConfig+0x2c2>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <UART_SetConfig+0x2aa>
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f06:	d006      	beq.n	8006f16 <UART_SetConfig+0x2b6>
 8006f08:	e00b      	b.n	8006f22 <UART_SetConfig+0x2c2>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e04a      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006f10:	2302      	movs	r3, #2
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e047      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006f16:	2304      	movs	r3, #4
 8006f18:	77fb      	strb	r3, [r7, #31]
 8006f1a:	e044      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e041      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006f22:	2310      	movs	r3, #16
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e03e      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006f28:	efff69f3 	.word	0xefff69f3
 8006f2c:	40011000 	.word	0x40011000
 8006f30:	40023800 	.word	0x40023800
 8006f34:	40004400 	.word	0x40004400
 8006f38:	40004800 	.word	0x40004800
 8006f3c:	40004c00 	.word	0x40004c00
 8006f40:	40005000 	.word	0x40005000
 8006f44:	40011400 	.word	0x40011400
 8006f48:	40007800 	.word	0x40007800
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a71      	ldr	r2, [pc, #452]	; (8007118 <UART_SetConfig+0x4b8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d125      	bne.n	8006fa2 <UART_SetConfig+0x342>
 8006f56:	4b71      	ldr	r3, [pc, #452]	; (800711c <UART_SetConfig+0x4bc>)
 8006f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f64:	d017      	beq.n	8006f96 <UART_SetConfig+0x336>
 8006f66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f6a:	d817      	bhi.n	8006f9c <UART_SetConfig+0x33c>
 8006f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f70:	d00b      	beq.n	8006f8a <UART_SetConfig+0x32a>
 8006f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f76:	d811      	bhi.n	8006f9c <UART_SetConfig+0x33c>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <UART_SetConfig+0x324>
 8006f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f80:	d006      	beq.n	8006f90 <UART_SetConfig+0x330>
 8006f82:	e00b      	b.n	8006f9c <UART_SetConfig+0x33c>
 8006f84:	2300      	movs	r3, #0
 8006f86:	77fb      	strb	r3, [r7, #31]
 8006f88:	e00d      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	77fb      	strb	r3, [r7, #31]
 8006f8e:	e00a      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006f90:	2304      	movs	r3, #4
 8006f92:	77fb      	strb	r3, [r7, #31]
 8006f94:	e007      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006f96:	2308      	movs	r3, #8
 8006f98:	77fb      	strb	r3, [r7, #31]
 8006f9a:	e004      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e001      	b.n	8006fa6 <UART_SetConfig+0x346>
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fae:	d15a      	bne.n	8007066 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006fb0:	7ffb      	ldrb	r3, [r7, #31]
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d827      	bhi.n	8007006 <UART_SetConfig+0x3a6>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <UART_SetConfig+0x35c>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fe1 	.word	0x08006fe1
 8006fc0:	08006fe9 	.word	0x08006fe9
 8006fc4:	08006ff1 	.word	0x08006ff1
 8006fc8:	08007007 	.word	0x08007007
 8006fcc:	08006ff7 	.word	0x08006ff7
 8006fd0:	08007007 	.word	0x08007007
 8006fd4:	08007007 	.word	0x08007007
 8006fd8:	08007007 	.word	0x08007007
 8006fdc:	08006fff 	.word	0x08006fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe0:	f7fd fd1c 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 8006fe4:	61b8      	str	r0, [r7, #24]
        break;
 8006fe6:	e013      	b.n	8007010 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fe8:	f7fd fd2c 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 8006fec:	61b8      	str	r0, [r7, #24]
        break;
 8006fee:	e00f      	b.n	8007010 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff0:	4b4b      	ldr	r3, [pc, #300]	; (8007120 <UART_SetConfig+0x4c0>)
 8006ff2:	61bb      	str	r3, [r7, #24]
        break;
 8006ff4:	e00c      	b.n	8007010 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ff6:	f7fd fc4f 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 8006ffa:	61b8      	str	r0, [r7, #24]
        break;
 8006ffc:	e008      	b.n	8007010 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007002:	61bb      	str	r3, [r7, #24]
        break;
 8007004:	e004      	b.n	8007010 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	77bb      	strb	r3, [r7, #30]
        break;
 800700e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d074      	beq.n	8007100 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	005a      	lsls	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	085b      	lsrs	r3, r3, #1
 8007020:	441a      	add	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	fbb2 f3f3 	udiv	r3, r2, r3
 800702a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	2b0f      	cmp	r3, #15
 8007030:	d916      	bls.n	8007060 <UART_SetConfig+0x400>
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007038:	d212      	bcs.n	8007060 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f023 030f 	bic.w	r3, r3, #15
 8007042:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	b29b      	uxth	r3, r3
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	b29a      	uxth	r2, r3
 8007050:	89fb      	ldrh	r3, [r7, #14]
 8007052:	4313      	orrs	r3, r2
 8007054:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	89fa      	ldrh	r2, [r7, #14]
 800705c:	60da      	str	r2, [r3, #12]
 800705e:	e04f      	b.n	8007100 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	77bb      	strb	r3, [r7, #30]
 8007064:	e04c      	b.n	8007100 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007066:	7ffb      	ldrb	r3, [r7, #31]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d828      	bhi.n	80070be <UART_SetConfig+0x45e>
 800706c:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <UART_SetConfig+0x414>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	08007099 	.word	0x08007099
 8007078:	080070a1 	.word	0x080070a1
 800707c:	080070a9 	.word	0x080070a9
 8007080:	080070bf 	.word	0x080070bf
 8007084:	080070af 	.word	0x080070af
 8007088:	080070bf 	.word	0x080070bf
 800708c:	080070bf 	.word	0x080070bf
 8007090:	080070bf 	.word	0x080070bf
 8007094:	080070b7 	.word	0x080070b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007098:	f7fd fcc0 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 800709c:	61b8      	str	r0, [r7, #24]
        break;
 800709e:	e013      	b.n	80070c8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a0:	f7fd fcd0 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 80070a4:	61b8      	str	r0, [r7, #24]
        break;
 80070a6:	e00f      	b.n	80070c8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070a8:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <UART_SetConfig+0x4c0>)
 80070aa:	61bb      	str	r3, [r7, #24]
        break;
 80070ac:	e00c      	b.n	80070c8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ae:	f7fd fbf3 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 80070b2:	61b8      	str	r0, [r7, #24]
        break;
 80070b4:	e008      	b.n	80070c8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ba:	61bb      	str	r3, [r7, #24]
        break;
 80070bc:	e004      	b.n	80070c8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	77bb      	strb	r3, [r7, #30]
        break;
 80070c6:	bf00      	nop
    }

    if (pclk != 0U)
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d018      	beq.n	8007100 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	085a      	lsrs	r2, r3, #1
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	441a      	add	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b0f      	cmp	r3, #15
 80070e6:	d909      	bls.n	80070fc <UART_SetConfig+0x49c>
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ee:	d205      	bcs.n	80070fc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	e001      	b.n	8007100 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800710c:	7fbb      	ldrb	r3, [r7, #30]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40007c00 	.word	0x40007c00
 800711c:	40023800 	.word	0x40023800
 8007120:	00f42400 	.word	0x00f42400

08007124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01a      	beq.n	800723a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007222:	d10a      	bne.n	800723a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	605a      	str	r2, [r3, #4]
  }
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007278:	f7fa fc3a 	bl	8001af0 <HAL_GetTick>
 800727c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b08      	cmp	r3, #8
 800728a:	d10e      	bne.n	80072aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f82d 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e023      	b.n	80072f2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d10e      	bne.n	80072d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f817 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e00d      	b.n	80072f2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2220      	movs	r2, #32
 80072e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b09c      	sub	sp, #112	; 0x70
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	603b      	str	r3, [r7, #0]
 8007306:	4613      	mov	r3, r2
 8007308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730a:	e0a5      	b.n	8007458 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800730c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007312:	f000 80a1 	beq.w	8007458 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007316:	f7fa fbeb 	bl	8001af0 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007322:	429a      	cmp	r2, r3
 8007324:	d302      	bcc.n	800732c <UART_WaitOnFlagUntilTimeout+0x32>
 8007326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007328:	2b00      	cmp	r3, #0
 800732a:	d13e      	bne.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800733a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007340:	667b      	str	r3, [r7, #100]	; 0x64
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800734a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800734c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e6      	bne.n	800732c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	f023 0301 	bic.w	r3, r3, #1
 8007374:	663b      	str	r3, [r7, #96]	; 0x60
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3308      	adds	r3, #8
 800737c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800737e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800738c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e5      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e067      	b.n	800747a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d04f      	beq.n	8007458 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c6:	d147      	bne.n	8007458 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
 80073f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e6      	bne.n	80073d2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	613b      	str	r3, [r7, #16]
   return(result);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f023 0301 	bic.w	r3, r3, #1
 800741a:	66bb      	str	r3, [r7, #104]	; 0x68
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007424:	623a      	str	r2, [r7, #32]
 8007426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	69f9      	ldr	r1, [r7, #28]
 800742a:	6a3a      	ldr	r2, [r7, #32]
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	61bb      	str	r3, [r7, #24]
   return(result);
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e5      	bne.n	8007404 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e010      	b.n	800747a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	69da      	ldr	r2, [r3, #28]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	4013      	ands	r3, r2
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	bf0c      	ite	eq
 8007468:	2301      	moveq	r3, #1
 800746a:	2300      	movne	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	461a      	mov	r2, r3
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	429a      	cmp	r2, r3
 8007474:	f43f af4a 	beq.w	800730c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3770      	adds	r7, #112	; 0x70
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	f023 0101 	bic.w	r1, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	d102      	bne.n	80074b4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80074ae:	2340      	movs	r3, #64	; 0x40
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	e001      	b.n	80074b8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80074c4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80074ca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80074d0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80074d6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80074dc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80074e2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80074e8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80074ee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80074f4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800751c:	4b20      	ldr	r3, [pc, #128]	; (80075a0 <FMC_NORSRAM_Init+0x11c>)
 800751e:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007526:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800752e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007536:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	43db      	mvns	r3, r3
 8007546:	ea02 0103 	and.w	r1, r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	4319      	orrs	r1, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007560:	d10c      	bne.n	800757c <FMC_NORSRAM_Init+0xf8>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d008      	beq.n	800757c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	431a      	orrs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d006      	beq.n	8007592 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	0008fb7f 	.word	0x0008fb7f

080075a4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	431a      	orrs	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	041b      	lsls	r3, r3, #16
 80075d8:	431a      	orrs	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	3b01      	subs	r3, #1
 80075e0:	051b      	lsls	r3, r3, #20
 80075e2:	431a      	orrs	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	3b02      	subs	r3, #2
 80075ea:	061b      	lsls	r3, r3, #24
 80075ec:	431a      	orrs	r2, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	3201      	adds	r2, #1
 80075f8:	4319      	orrs	r1, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800760c:	d113      	bne.n	8007636 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007616:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	3b01      	subs	r3, #1
 800761e:	051b      	lsls	r3, r3, #20
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	431a      	orrs	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007658:	d11d      	bne.n	8007696 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007662:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007664:	4013      	ands	r3, r2
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	6811      	ldr	r1, [r2, #0]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	6852      	ldr	r2, [r2, #4]
 800766e:	0112      	lsls	r2, r2, #4
 8007670:	4311      	orrs	r1, r2
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	6892      	ldr	r2, [r2, #8]
 8007676:	0212      	lsls	r2, r2, #8
 8007678:	4311      	orrs	r1, r2
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	6992      	ldr	r2, [r2, #24]
 800767e:	4311      	orrs	r1, r2
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	68d2      	ldr	r2, [r2, #12]
 8007684:	0412      	lsls	r2, r2, #16
 8007686:	430a      	orrs	r2, r1
 8007688:	ea43 0102 	orr.w	r1, r3, r2
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007694:	e005      	b.n	80076a2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800769e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	cff00000 	.word	0xcff00000

080076b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80076c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076c6:	2b84      	cmp	r3, #132	; 0x84
 80076c8:	d005      	beq.n	80076d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80076ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	3303      	adds	r3, #3
 80076d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80076d6:	68fb      	ldr	r3, [r7, #12]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80076e8:	f000 fae8 	bl	8007cbc <vTaskStartScheduler>
  
  return osOK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80076f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076f4:	b089      	sub	sp, #36	; 0x24
 80076f6:	af04      	add	r7, sp, #16
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d020      	beq.n	8007746 <osThreadCreate+0x54>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d01c      	beq.n	8007746 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685c      	ldr	r4, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681d      	ldr	r5, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691e      	ldr	r6, [r3, #16]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff ffc8 	bl	80076b4 <makeFreeRtosPriority>
 8007724:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800772e:	9202      	str	r2, [sp, #8]
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	9100      	str	r1, [sp, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	4632      	mov	r2, r6
 8007738:	4629      	mov	r1, r5
 800773a:	4620      	mov	r0, r4
 800773c:	f000 f8ed 	bl	800791a <xTaskCreateStatic>
 8007740:	4603      	mov	r3, r0
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	e01c      	b.n	8007780 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685c      	ldr	r4, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007752:	b29e      	uxth	r6, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff ffaa 	bl	80076b4 <makeFreeRtosPriority>
 8007760:	4602      	mov	r2, r0
 8007762:	f107 030c 	add.w	r3, r7, #12
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	9200      	str	r2, [sp, #0]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	4632      	mov	r2, r6
 800776e:	4629      	mov	r1, r5
 8007770:	4620      	mov	r0, r4
 8007772:	f000 f935 	bl	80079e0 <xTaskCreate>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d001      	beq.n	8007780 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800777c:	2300      	movs	r3, #0
 800777e:	e000      	b.n	8007782 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007780:	68fb      	ldr	r3, [r7, #12]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800778a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <osDelay+0x16>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e000      	b.n	80077a2 <osDelay+0x18>
 80077a0:	2301      	movs	r3, #1
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fa54 	bl	8007c50 <vTaskDelay>
  
  return osOK;
 80077a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f103 0208 	add.w	r2, r3, #8
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f103 0208 	add.w	r2, r3, #8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f103 0208 	add.w	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]
}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800786a:	d103      	bne.n	8007874 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	e00c      	b.n	800788e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3308      	adds	r3, #8
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e002      	b.n	8007882 <vListInsert+0x2e>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	429a      	cmp	r2, r3
 800788c:	d2f6      	bcs.n	800787c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	601a      	str	r2, [r3, #0]
}
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6892      	ldr	r2, [r2, #8]
 80078dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6852      	ldr	r2, [r2, #4]
 80078e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d103      	bne.n	80078fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	1e5a      	subs	r2, r3, #1
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800791a:	b580      	push	{r7, lr}
 800791c:	b08e      	sub	sp, #56	; 0x38
 800791e:	af04      	add	r7, sp, #16
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
 8007926:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10c      	bne.n	8007948 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	b672      	cpsid	i
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	b662      	cpsie	i
 8007942:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10c      	bne.n	8007968 <xTaskCreateStatic+0x4e>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	b672      	cpsid	i
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	b662      	cpsie	i
 8007962:	61fb      	str	r3, [r7, #28]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007968:	2354      	movs	r3, #84	; 0x54
 800796a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b54      	cmp	r3, #84	; 0x54
 8007970:	d00c      	beq.n	800798c <xTaskCreateStatic+0x72>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	b672      	cpsid	i
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	b662      	cpsie	i
 8007986:	61bb      	str	r3, [r7, #24]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800798c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01e      	beq.n	80079d2 <xTaskCreateStatic+0xb8>
 8007994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01b      	beq.n	80079d2 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079ac:	2300      	movs	r3, #0
 80079ae:	9303      	str	r3, [sp, #12]
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	9302      	str	r3, [sp, #8]
 80079b4:	f107 0314 	add.w	r3, r7, #20
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 f850 	bl	8007a6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079cc:	f000 f8d6 	bl	8007b7c <prvAddNewTaskToReadyList>
 80079d0:	e001      	b.n	80079d6 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079d6:	697b      	ldr	r3, [r7, #20]
	}
 80079d8:	4618      	mov	r0, r3
 80079da:	3728      	adds	r7, #40	; 0x28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08c      	sub	sp, #48	; 0x30
 80079e4:	af04      	add	r7, sp, #16
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079f0:	88fb      	ldrh	r3, [r7, #6]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 feb9 	bl	800876c <pvPortMalloc>
 80079fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a02:	2054      	movs	r0, #84	; 0x54
 8007a04:	f000 feb2 	bl	800876c <pvPortMalloc>
 8007a08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
 8007a16:	e005      	b.n	8007a24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a18:	6978      	ldr	r0, [r7, #20]
 8007a1a:	f000 ff71 	bl	8008900 <vPortFree>
 8007a1e:	e001      	b.n	8007a24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d017      	beq.n	8007a5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a32:	88fa      	ldrh	r2, [r7, #6]
 8007a34:	2300      	movs	r3, #0
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	9302      	str	r3, [sp, #8]
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f80e 	bl	8007a6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a4e:	69f8      	ldr	r0, [r7, #28]
 8007a50:	f000 f894 	bl	8007b7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a54:	2301      	movs	r3, #1
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	e002      	b.n	8007a60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a60:	69bb      	ldr	r3, [r7, #24]
	}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3720      	adds	r7, #32
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b088      	sub	sp, #32
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
 8007a76:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a7c:	6879      	ldr	r1, [r7, #4]
 8007a7e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007a82:	440b      	add	r3, r1
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f023 0307 	bic.w	r3, r3, #7
 8007a90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	b672      	cpsid	i
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	b662      	cpsie	i
 8007ab0:	617b      	str	r3, [r7, #20]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01f      	beq.n	8007afc <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007abc:	2300      	movs	r3, #0
 8007abe:	61fb      	str	r3, [r7, #28]
 8007ac0:	e012      	b.n	8007ae8 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	7819      	ldrb	r1, [r3, #0]
 8007aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	4413      	add	r3, r2
 8007ad0:	3334      	adds	r3, #52	; 0x34
 8007ad2:	460a      	mov	r2, r1
 8007ad4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d006      	beq.n	8007af0 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	61fb      	str	r3, [r7, #28]
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2b0f      	cmp	r3, #15
 8007aec:	d9e9      	bls.n	8007ac2 <prvInitialiseNewTask+0x58>
 8007aee:	e000      	b.n	8007af2 <prvInitialiseNewTask+0x88>
			{
				break;
 8007af0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007afa:	e003      	b.n	8007b04 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	2b06      	cmp	r3, #6
 8007b08:	d901      	bls.n	8007b0e <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b0a:	2306      	movs	r3, #6
 8007b0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b18:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b22:	3304      	adds	r3, #4
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff fe64 	bl	80077f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fe5f 	bl	80077f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	f1c3 0207 	rsb	r2, r3, #7
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	69b8      	ldr	r0, [r7, #24]
 8007b5e:	f000 fc13 	bl	8008388 <pxPortInitialiseStack>
 8007b62:	4602      	mov	r2, r0
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b74:	bf00      	nop
 8007b76:	3720      	adds	r7, #32
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b84:	f000 fd0a 	bl	800859c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b88:	4b2a      	ldr	r3, [pc, #168]	; (8007c34 <prvAddNewTaskToReadyList+0xb8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	4a29      	ldr	r2, [pc, #164]	; (8007c34 <prvAddNewTaskToReadyList+0xb8>)
 8007b90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b92:	4b29      	ldr	r3, [pc, #164]	; (8007c38 <prvAddNewTaskToReadyList+0xbc>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d109      	bne.n	8007bae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b9a:	4a27      	ldr	r2, [pc, #156]	; (8007c38 <prvAddNewTaskToReadyList+0xbc>)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ba0:	4b24      	ldr	r3, [pc, #144]	; (8007c34 <prvAddNewTaskToReadyList+0xb8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d110      	bne.n	8007bca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ba8:	f000 fac8 	bl	800813c <prvInitialiseTaskLists>
 8007bac:	e00d      	b.n	8007bca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bae:	4b23      	ldr	r3, [pc, #140]	; (8007c3c <prvAddNewTaskToReadyList+0xc0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d109      	bne.n	8007bca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bb6:	4b20      	ldr	r3, [pc, #128]	; (8007c38 <prvAddNewTaskToReadyList+0xbc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d802      	bhi.n	8007bca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bc4:	4a1c      	ldr	r2, [pc, #112]	; (8007c38 <prvAddNewTaskToReadyList+0xbc>)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bca:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <prvAddNewTaskToReadyList+0xc4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <prvAddNewTaskToReadyList+0xc4>)
 8007bd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	2201      	movs	r2, #1
 8007bda:	409a      	lsls	r2, r3
 8007bdc:	4b19      	ldr	r3, [pc, #100]	; (8007c44 <prvAddNewTaskToReadyList+0xc8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <prvAddNewTaskToReadyList+0xc8>)
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4a15      	ldr	r2, [pc, #84]	; (8007c48 <prvAddNewTaskToReadyList+0xcc>)
 8007bf4:	441a      	add	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f7ff fe05 	bl	800780c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c02:	f000 fcff 	bl	8008604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c06:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <prvAddNewTaskToReadyList+0xc0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00e      	beq.n	8007c2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	; (8007c38 <prvAddNewTaskToReadyList+0xbc>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d207      	bcs.n	8007c2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c1c:	4b0b      	ldr	r3, [pc, #44]	; (8007c4c <prvAddNewTaskToReadyList+0xd0>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20000390 	.word	0x20000390
 8007c38:	20000290 	.word	0x20000290
 8007c3c:	2000039c 	.word	0x2000039c
 8007c40:	200003ac 	.word	0x200003ac
 8007c44:	20000398 	.word	0x20000398
 8007c48:	20000294 	.word	0x20000294
 8007c4c:	e000ed04 	.word	0xe000ed04

08007c50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d019      	beq.n	8007c96 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <vTaskDelay+0x64>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00c      	beq.n	8007c84 <vTaskDelay+0x34>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	b672      	cpsid	i
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	b662      	cpsie	i
 8007c7e:	60bb      	str	r3, [r7, #8]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007c84:	f000 f87e 	bl	8007d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c88:	2100      	movs	r1, #0
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fb16 	bl	80082bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c90:	f000 f886 	bl	8007da0 <xTaskResumeAll>
 8007c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d107      	bne.n	8007cac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007c9c:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <vTaskDelay+0x68>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200003b8 	.word	0x200003b8
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08a      	sub	sp, #40	; 0x28
 8007cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cca:	463a      	mov	r2, r7
 8007ccc:	1d39      	adds	r1, r7, #4
 8007cce:	f107 0308 	add.w	r3, r7, #8
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7f8 fcc8 	bl	8000668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	9202      	str	r2, [sp, #8]
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	460a      	mov	r2, r1
 8007cea:	4920      	ldr	r1, [pc, #128]	; (8007d6c <vTaskStartScheduler+0xb0>)
 8007cec:	4820      	ldr	r0, [pc, #128]	; (8007d70 <vTaskStartScheduler+0xb4>)
 8007cee:	f7ff fe14 	bl	800791a <xTaskCreateStatic>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4a1f      	ldr	r2, [pc, #124]	; (8007d74 <vTaskStartScheduler+0xb8>)
 8007cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cf8:	4b1e      	ldr	r3, [pc, #120]	; (8007d74 <vTaskStartScheduler+0xb8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d00:	2301      	movs	r3, #1
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	e001      	b.n	8007d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d118      	bne.n	8007d42 <vTaskStartScheduler+0x86>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	b672      	cpsid	i
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	b662      	cpsie	i
 8007d24:	613b      	str	r3, [r7, #16]
}
 8007d26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d28:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <vTaskStartScheduler+0xbc>)
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d30:	4b12      	ldr	r3, [pc, #72]	; (8007d7c <vTaskStartScheduler+0xc0>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d36:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <vTaskStartScheduler+0xc4>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d3c:	f000 fbb0 	bl	80084a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d40:	e010      	b.n	8007d64 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d48:	d10c      	bne.n	8007d64 <vTaskStartScheduler+0xa8>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	b672      	cpsid	i
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	b662      	cpsie	i
 8007d5e:	60fb      	str	r3, [r7, #12]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vTaskStartScheduler+0xa6>
}
 8007d64:	bf00      	nop
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	08008b74 	.word	0x08008b74
 8007d70:	0800810d 	.word	0x0800810d
 8007d74:	200003b4 	.word	0x200003b4
 8007d78:	200003b0 	.word	0x200003b0
 8007d7c:	2000039c 	.word	0x2000039c
 8007d80:	20000394 	.word	0x20000394

08007d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d88:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <vTaskSuspendAll+0x18>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	4a03      	ldr	r2, [pc, #12]	; (8007d9c <vTaskSuspendAll+0x18>)
 8007d90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007d92:	bf00      	nop
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	200003b8 	.word	0x200003b8

08007da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007dae:	4b42      	ldr	r3, [pc, #264]	; (8007eb8 <xTaskResumeAll+0x118>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10c      	bne.n	8007dd0 <xTaskResumeAll+0x30>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	b672      	cpsid	i
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	b662      	cpsie	i
 8007dca:	603b      	str	r3, [r7, #0]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007dd0:	f000 fbe4 	bl	800859c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007dd4:	4b38      	ldr	r3, [pc, #224]	; (8007eb8 <xTaskResumeAll+0x118>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	4a37      	ldr	r2, [pc, #220]	; (8007eb8 <xTaskResumeAll+0x118>)
 8007ddc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dde:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <xTaskResumeAll+0x118>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d161      	bne.n	8007eaa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007de6:	4b35      	ldr	r3, [pc, #212]	; (8007ebc <xTaskResumeAll+0x11c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d05d      	beq.n	8007eaa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dee:	e02e      	b.n	8007e4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df0:	4b33      	ldr	r3, [pc, #204]	; (8007ec0 <xTaskResumeAll+0x120>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3318      	adds	r3, #24
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff fd62 	bl	80078c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3304      	adds	r3, #4
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff fd5d 	bl	80078c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	2201      	movs	r2, #1
 8007e12:	409a      	lsls	r2, r3
 8007e14:	4b2b      	ldr	r3, [pc, #172]	; (8007ec4 <xTaskResumeAll+0x124>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	4a2a      	ldr	r2, [pc, #168]	; (8007ec4 <xTaskResumeAll+0x124>)
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4a27      	ldr	r2, [pc, #156]	; (8007ec8 <xTaskResumeAll+0x128>)
 8007e2c:	441a      	add	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3304      	adds	r3, #4
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7ff fce9 	bl	800780c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3e:	4b23      	ldr	r3, [pc, #140]	; (8007ecc <xTaskResumeAll+0x12c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d302      	bcc.n	8007e4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007e48:	4b21      	ldr	r3, [pc, #132]	; (8007ed0 <xTaskResumeAll+0x130>)
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ec0 <xTaskResumeAll+0x120>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1cc      	bne.n	8007df0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e5c:	f000 fa0e 	bl	800827c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e60:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <xTaskResumeAll+0x134>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d010      	beq.n	8007e8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e6c:	f000 f836 	bl	8007edc <xTaskIncrementTick>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007e76:	4b16      	ldr	r3, [pc, #88]	; (8007ed0 <xTaskResumeAll+0x130>)
 8007e78:	2201      	movs	r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f1      	bne.n	8007e6c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007e88:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <xTaskResumeAll+0x134>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <xTaskResumeAll+0x130>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <xTaskResumeAll+0x138>)
 8007e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eaa:	f000 fbab 	bl	8008604 <vPortExitCritical>

	return xAlreadyYielded;
 8007eae:	68bb      	ldr	r3, [r7, #8]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	200003b8 	.word	0x200003b8
 8007ebc:	20000390 	.word	0x20000390
 8007ec0:	20000350 	.word	0x20000350
 8007ec4:	20000398 	.word	0x20000398
 8007ec8:	20000294 	.word	0x20000294
 8007ecc:	20000290 	.word	0x20000290
 8007ed0:	200003a4 	.word	0x200003a4
 8007ed4:	200003a0 	.word	0x200003a0
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee6:	4b4f      	ldr	r3, [pc, #316]	; (8008024 <xTaskIncrementTick+0x148>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f040 808a 	bne.w	8008004 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ef0:	4b4d      	ldr	r3, [pc, #308]	; (8008028 <xTaskIncrementTick+0x14c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ef8:	4a4b      	ldr	r2, [pc, #300]	; (8008028 <xTaskIncrementTick+0x14c>)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d122      	bne.n	8007f4a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f04:	4b49      	ldr	r3, [pc, #292]	; (800802c <xTaskIncrementTick+0x150>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00c      	beq.n	8007f28 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	b672      	cpsid	i
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	b662      	cpsie	i
 8007f22:	603b      	str	r3, [r7, #0]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <xTaskIncrementTick+0x4a>
 8007f28:	4b40      	ldr	r3, [pc, #256]	; (800802c <xTaskIncrementTick+0x150>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	4b40      	ldr	r3, [pc, #256]	; (8008030 <xTaskIncrementTick+0x154>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a3e      	ldr	r2, [pc, #248]	; (800802c <xTaskIncrementTick+0x150>)
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	4a3e      	ldr	r2, [pc, #248]	; (8008030 <xTaskIncrementTick+0x154>)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	4b3d      	ldr	r3, [pc, #244]	; (8008034 <xTaskIncrementTick+0x158>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	4a3c      	ldr	r2, [pc, #240]	; (8008034 <xTaskIncrementTick+0x158>)
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	f000 f999 	bl	800827c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f4a:	4b3b      	ldr	r3, [pc, #236]	; (8008038 <xTaskIncrementTick+0x15c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d348      	bcc.n	8007fe6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f54:	4b35      	ldr	r3, [pc, #212]	; (800802c <xTaskIncrementTick+0x150>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f5e:	4b36      	ldr	r3, [pc, #216]	; (8008038 <xTaskIncrementTick+0x15c>)
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f64:	601a      	str	r2, [r3, #0]
					break;
 8007f66:	e03e      	b.n	8007fe6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f68:	4b30      	ldr	r3, [pc, #192]	; (800802c <xTaskIncrementTick+0x150>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d203      	bcs.n	8007f88 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f80:	4a2d      	ldr	r2, [pc, #180]	; (8008038 <xTaskIncrementTick+0x15c>)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f86:	e02e      	b.n	8007fe6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff fc9a 	bl	80078c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3318      	adds	r3, #24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff fc91 	bl	80078c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	2201      	movs	r2, #1
 8007faa:	409a      	lsls	r2, r3
 8007fac:	4b23      	ldr	r3, [pc, #140]	; (800803c <xTaskIncrementTick+0x160>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	4a22      	ldr	r2, [pc, #136]	; (800803c <xTaskIncrementTick+0x160>)
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <xTaskIncrementTick+0x164>)
 8007fc4:	441a      	add	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4610      	mov	r0, r2
 8007fce:	f7ff fc1d 	bl	800780c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <xTaskIncrementTick+0x168>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d3b9      	bcc.n	8007f54 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fe4:	e7b6      	b.n	8007f54 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fe6:	4b17      	ldr	r3, [pc, #92]	; (8008044 <xTaskIncrementTick+0x168>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	4914      	ldr	r1, [pc, #80]	; (8008040 <xTaskIncrementTick+0x164>)
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d907      	bls.n	800800e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	617b      	str	r3, [r7, #20]
 8008002:	e004      	b.n	800800e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008004:	4b10      	ldr	r3, [pc, #64]	; (8008048 <xTaskIncrementTick+0x16c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3301      	adds	r3, #1
 800800a:	4a0f      	ldr	r2, [pc, #60]	; (8008048 <xTaskIncrementTick+0x16c>)
 800800c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800800e:	4b0f      	ldr	r3, [pc, #60]	; (800804c <xTaskIncrementTick+0x170>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008016:	2301      	movs	r3, #1
 8008018:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800801a:	697b      	ldr	r3, [r7, #20]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	200003b8 	.word	0x200003b8
 8008028:	20000394 	.word	0x20000394
 800802c:	20000348 	.word	0x20000348
 8008030:	2000034c 	.word	0x2000034c
 8008034:	200003a8 	.word	0x200003a8
 8008038:	200003b0 	.word	0x200003b0
 800803c:	20000398 	.word	0x20000398
 8008040:	20000294 	.word	0x20000294
 8008044:	20000290 	.word	0x20000290
 8008048:	200003a0 	.word	0x200003a0
 800804c:	200003a4 	.word	0x200003a4

08008050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008056:	4b28      	ldr	r3, [pc, #160]	; (80080f8 <vTaskSwitchContext+0xa8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800805e:	4b27      	ldr	r3, [pc, #156]	; (80080fc <vTaskSwitchContext+0xac>)
 8008060:	2201      	movs	r2, #1
 8008062:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008064:	e041      	b.n	80080ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008066:	4b25      	ldr	r3, [pc, #148]	; (80080fc <vTaskSwitchContext+0xac>)
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800806c:	4b24      	ldr	r3, [pc, #144]	; (8008100 <vTaskSwitchContext+0xb0>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	fab3 f383 	clz	r3, r3
 8008078:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	f1c3 031f 	rsb	r3, r3, #31
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	4920      	ldr	r1, [pc, #128]	; (8008104 <vTaskSwitchContext+0xb4>)
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	440b      	add	r3, r1
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10c      	bne.n	80080b0 <vTaskSwitchContext+0x60>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	b672      	cpsid	i
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	b662      	cpsie	i
 80080aa:	607b      	str	r3, [r7, #4]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <vTaskSwitchContext+0x5e>
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4a12      	ldr	r2, [pc, #72]	; (8008104 <vTaskSwitchContext+0xb4>)
 80080bc:	4413      	add	r3, r2
 80080be:	613b      	str	r3, [r7, #16]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	605a      	str	r2, [r3, #4]
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3308      	adds	r3, #8
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d104      	bne.n	80080e0 <vTaskSwitchContext+0x90>
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	605a      	str	r2, [r3, #4]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	4a08      	ldr	r2, [pc, #32]	; (8008108 <vTaskSwitchContext+0xb8>)
 80080e8:	6013      	str	r3, [r2, #0]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	200003b8 	.word	0x200003b8
 80080fc:	200003a4 	.word	0x200003a4
 8008100:	20000398 	.word	0x20000398
 8008104:	20000294 	.word	0x20000294
 8008108:	20000290 	.word	0x20000290

0800810c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008114:	f000 f852 	bl	80081bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008118:	4b06      	ldr	r3, [pc, #24]	; (8008134 <prvIdleTask+0x28>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d9f9      	bls.n	8008114 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <prvIdleTask+0x2c>)
 8008122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008130:	e7f0      	b.n	8008114 <prvIdleTask+0x8>
 8008132:	bf00      	nop
 8008134:	20000294 	.word	0x20000294
 8008138:	e000ed04 	.word	0xe000ed04

0800813c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008142:	2300      	movs	r3, #0
 8008144:	607b      	str	r3, [r7, #4]
 8008146:	e00c      	b.n	8008162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4a12      	ldr	r2, [pc, #72]	; (800819c <prvInitialiseTaskLists+0x60>)
 8008154:	4413      	add	r3, r2
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff fb2b 	bl	80077b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3301      	adds	r3, #1
 8008160:	607b      	str	r3, [r7, #4]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b06      	cmp	r3, #6
 8008166:	d9ef      	bls.n	8008148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008168:	480d      	ldr	r0, [pc, #52]	; (80081a0 <prvInitialiseTaskLists+0x64>)
 800816a:	f7ff fb22 	bl	80077b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800816e:	480d      	ldr	r0, [pc, #52]	; (80081a4 <prvInitialiseTaskLists+0x68>)
 8008170:	f7ff fb1f 	bl	80077b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008174:	480c      	ldr	r0, [pc, #48]	; (80081a8 <prvInitialiseTaskLists+0x6c>)
 8008176:	f7ff fb1c 	bl	80077b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800817a:	480c      	ldr	r0, [pc, #48]	; (80081ac <prvInitialiseTaskLists+0x70>)
 800817c:	f7ff fb19 	bl	80077b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008180:	480b      	ldr	r0, [pc, #44]	; (80081b0 <prvInitialiseTaskLists+0x74>)
 8008182:	f7ff fb16 	bl	80077b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <prvInitialiseTaskLists+0x78>)
 8008188:	4a05      	ldr	r2, [pc, #20]	; (80081a0 <prvInitialiseTaskLists+0x64>)
 800818a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <prvInitialiseTaskLists+0x7c>)
 800818e:	4a05      	ldr	r2, [pc, #20]	; (80081a4 <prvInitialiseTaskLists+0x68>)
 8008190:	601a      	str	r2, [r3, #0]
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000294 	.word	0x20000294
 80081a0:	20000320 	.word	0x20000320
 80081a4:	20000334 	.word	0x20000334
 80081a8:	20000350 	.word	0x20000350
 80081ac:	20000364 	.word	0x20000364
 80081b0:	2000037c 	.word	0x2000037c
 80081b4:	20000348 	.word	0x20000348
 80081b8:	2000034c 	.word	0x2000034c

080081bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081c2:	e019      	b.n	80081f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081c4:	f000 f9ea 	bl	800859c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c8:	4b10      	ldr	r3, [pc, #64]	; (800820c <prvCheckTasksWaitingTermination+0x50>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3304      	adds	r3, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff fb76 	bl	80078c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081da:	4b0d      	ldr	r3, [pc, #52]	; (8008210 <prvCheckTasksWaitingTermination+0x54>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3b01      	subs	r3, #1
 80081e0:	4a0b      	ldr	r2, [pc, #44]	; (8008210 <prvCheckTasksWaitingTermination+0x54>)
 80081e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081e4:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <prvCheckTasksWaitingTermination+0x58>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	4a0a      	ldr	r2, [pc, #40]	; (8008214 <prvCheckTasksWaitingTermination+0x58>)
 80081ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081ee:	f000 fa09 	bl	8008604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f810 	bl	8008218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081f8:	4b06      	ldr	r3, [pc, #24]	; (8008214 <prvCheckTasksWaitingTermination+0x58>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e1      	bne.n	80081c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008200:	bf00      	nop
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000364 	.word	0x20000364
 8008210:	20000390 	.word	0x20000390
 8008214:	20000378 	.word	0x20000378

08008218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008226:	2b00      	cmp	r3, #0
 8008228:	d108      	bne.n	800823c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fb66 	bl	8008900 <vPortFree>
				vPortFree( pxTCB );
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb63 	bl	8008900 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800823a:	e01a      	b.n	8008272 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008242:	2b01      	cmp	r3, #1
 8008244:	d103      	bne.n	800824e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fb5a 	bl	8008900 <vPortFree>
	}
 800824c:	e011      	b.n	8008272 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008254:	2b02      	cmp	r3, #2
 8008256:	d00c      	beq.n	8008272 <prvDeleteTCB+0x5a>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	b672      	cpsid	i
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	b662      	cpsie	i
 800826c:	60fb      	str	r3, [r7, #12]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <prvDeleteTCB+0x58>
	}
 8008272:	bf00      	nop
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008282:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <prvResetNextTaskUnblockTime+0x38>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800828c:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <prvResetNextTaskUnblockTime+0x3c>)
 800828e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008292:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008294:	e008      	b.n	80082a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008296:	4b07      	ldr	r3, [pc, #28]	; (80082b4 <prvResetNextTaskUnblockTime+0x38>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	4a04      	ldr	r2, [pc, #16]	; (80082b8 <prvResetNextTaskUnblockTime+0x3c>)
 80082a6:	6013      	str	r3, [r2, #0]
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	20000348 	.word	0x20000348
 80082b8:	200003b0 	.word	0x200003b0

080082bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082c6:	4b29      	ldr	r3, [pc, #164]	; (800836c <prvAddCurrentTaskToDelayedList+0xb0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082cc:	4b28      	ldr	r3, [pc, #160]	; (8008370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff faf7 	bl	80078c6 <uxListRemove>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10b      	bne.n	80082f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80082de:	4b24      	ldr	r3, [pc, #144]	; (8008370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	2201      	movs	r2, #1
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	43da      	mvns	r2, r3
 80082ec:	4b21      	ldr	r3, [pc, #132]	; (8008374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4013      	ands	r3, r2
 80082f2:	4a20      	ldr	r2, [pc, #128]	; (8008374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80082f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082fc:	d10a      	bne.n	8008314 <prvAddCurrentTaskToDelayedList+0x58>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d007      	beq.n	8008314 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008304:	4b1a      	ldr	r3, [pc, #104]	; (8008370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3304      	adds	r3, #4
 800830a:	4619      	mov	r1, r3
 800830c:	481a      	ldr	r0, [pc, #104]	; (8008378 <prvAddCurrentTaskToDelayedList+0xbc>)
 800830e:	f7ff fa7d 	bl	800780c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008312:	e026      	b.n	8008362 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800831c:	4b14      	ldr	r3, [pc, #80]	; (8008370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	429a      	cmp	r2, r3
 800832a:	d209      	bcs.n	8008340 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800832c:	4b13      	ldr	r3, [pc, #76]	; (800837c <prvAddCurrentTaskToDelayedList+0xc0>)
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3304      	adds	r3, #4
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f7ff fa8b 	bl	8007854 <vListInsert>
}
 800833e:	e010      	b.n	8008362 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008340:	4b0f      	ldr	r3, [pc, #60]	; (8008380 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3304      	adds	r3, #4
 800834a:	4619      	mov	r1, r3
 800834c:	4610      	mov	r0, r2
 800834e:	f7ff fa81 	bl	8007854 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008352:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	429a      	cmp	r2, r3
 800835a:	d202      	bcs.n	8008362 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800835c:	4a09      	ldr	r2, [pc, #36]	; (8008384 <prvAddCurrentTaskToDelayedList+0xc8>)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	6013      	str	r3, [r2, #0]
}
 8008362:	bf00      	nop
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20000394 	.word	0x20000394
 8008370:	20000290 	.word	0x20000290
 8008374:	20000398 	.word	0x20000398
 8008378:	2000037c 	.word	0x2000037c
 800837c:	2000034c 	.word	0x2000034c
 8008380:	20000348 	.word	0x20000348
 8008384:	200003b0 	.word	0x200003b0

08008388 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3b04      	subs	r3, #4
 8008398:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3b04      	subs	r3, #4
 80083a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f023 0201 	bic.w	r2, r3, #1
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3b04      	subs	r3, #4
 80083b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083b8:	4a0c      	ldr	r2, [pc, #48]	; (80083ec <pxPortInitialiseStack+0x64>)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3b14      	subs	r3, #20
 80083c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3b04      	subs	r3, #4
 80083ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f06f 0202 	mvn.w	r2, #2
 80083d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3b20      	subs	r3, #32
 80083dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083de:	68fb      	ldr	r3, [r7, #12]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	080083f1 	.word	0x080083f1

080083f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083fa:	4b14      	ldr	r3, [pc, #80]	; (800844c <prvTaskExitError+0x5c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008402:	d00c      	beq.n	800841e <prvTaskExitError+0x2e>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	b672      	cpsid	i
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	b662      	cpsie	i
 8008418:	60fb      	str	r3, [r7, #12]
}
 800841a:	bf00      	nop
 800841c:	e7fe      	b.n	800841c <prvTaskExitError+0x2c>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	b672      	cpsid	i
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	b662      	cpsie	i
 8008432:	60bb      	str	r3, [r7, #8]
}
 8008434:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008436:	bf00      	nop
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0fc      	beq.n	8008438 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	2000000c 	.word	0x2000000c

08008450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008450:	4b07      	ldr	r3, [pc, #28]	; (8008470 <pxCurrentTCBConst2>)
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	6808      	ldr	r0, [r1, #0]
 8008456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	f380 8809 	msr	PSP, r0
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f380 8811 	msr	BASEPRI, r0
 800846a:	4770      	bx	lr
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst2>:
 8008470:	20000290 	.word	0x20000290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008478:	4808      	ldr	r0, [pc, #32]	; (800849c <prvPortStartFirstTask+0x24>)
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	6800      	ldr	r0, [r0, #0]
 800847e:	f380 8808 	msr	MSP, r0
 8008482:	f04f 0000 	mov.w	r0, #0
 8008486:	f380 8814 	msr	CONTROL, r0
 800848a:	b662      	cpsie	i
 800848c:	b661      	cpsie	f
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	df00      	svc	0
 8008498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800849a:	bf00      	nop
 800849c:	e000ed08 	.word	0xe000ed08

080084a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084a6:	4b37      	ldr	r3, [pc, #220]	; (8008584 <xPortStartScheduler+0xe4>)
 80084a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	4b2f      	ldr	r3, [pc, #188]	; (8008588 <xPortStartScheduler+0xe8>)
 80084cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084ce:	4b2f      	ldr	r3, [pc, #188]	; (800858c <xPortStartScheduler+0xec>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084d4:	e009      	b.n	80084ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80084d6:	4b2d      	ldr	r3, [pc, #180]	; (800858c <xPortStartScheduler+0xec>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3b01      	subs	r3, #1
 80084dc:	4a2b      	ldr	r2, [pc, #172]	; (800858c <xPortStartScheduler+0xec>)
 80084de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084ea:	78fb      	ldrb	r3, [r7, #3]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f2:	2b80      	cmp	r3, #128	; 0x80
 80084f4:	d0ef      	beq.n	80084d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084f6:	4b25      	ldr	r3, [pc, #148]	; (800858c <xPortStartScheduler+0xec>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f1c3 0307 	rsb	r3, r3, #7
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d00c      	beq.n	800851c <xPortStartScheduler+0x7c>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	b672      	cpsid	i
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	b662      	cpsie	i
 8008516:	60bb      	str	r3, [r7, #8]
}
 8008518:	bf00      	nop
 800851a:	e7fe      	b.n	800851a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800851c:	4b1b      	ldr	r3, [pc, #108]	; (800858c <xPortStartScheduler+0xec>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	4a1a      	ldr	r2, [pc, #104]	; (800858c <xPortStartScheduler+0xec>)
 8008524:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008526:	4b19      	ldr	r3, [pc, #100]	; (800858c <xPortStartScheduler+0xec>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800852e:	4a17      	ldr	r2, [pc, #92]	; (800858c <xPortStartScheduler+0xec>)
 8008530:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800853a:	4b15      	ldr	r3, [pc, #84]	; (8008590 <xPortStartScheduler+0xf0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a14      	ldr	r2, [pc, #80]	; (8008590 <xPortStartScheduler+0xf0>)
 8008540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008544:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008546:	4b12      	ldr	r3, [pc, #72]	; (8008590 <xPortStartScheduler+0xf0>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a11      	ldr	r2, [pc, #68]	; (8008590 <xPortStartScheduler+0xf0>)
 800854c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008550:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008552:	f000 f8dd 	bl	8008710 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008556:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <xPortStartScheduler+0xf4>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800855c:	f000 f8fc 	bl	8008758 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008560:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <xPortStartScheduler+0xf8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <xPortStartScheduler+0xf8>)
 8008566:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800856a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800856c:	f7ff ff84 	bl	8008478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008570:	f7ff fd6e 	bl	8008050 <vTaskSwitchContext>
	prvTaskExitError();
 8008574:	f7ff ff3c 	bl	80083f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	e000e400 	.word	0xe000e400
 8008588:	200003bc 	.word	0x200003bc
 800858c:	200003c0 	.word	0x200003c0
 8008590:	e000ed20 	.word	0xe000ed20
 8008594:	2000000c 	.word	0x2000000c
 8008598:	e000ef34 	.word	0xe000ef34

0800859c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	b672      	cpsid	i
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	b662      	cpsie	i
 80085b6:	607b      	str	r3, [r7, #4]
}
 80085b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085ba:	4b10      	ldr	r3, [pc, #64]	; (80085fc <vPortEnterCritical+0x60>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3301      	adds	r3, #1
 80085c0:	4a0e      	ldr	r2, [pc, #56]	; (80085fc <vPortEnterCritical+0x60>)
 80085c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085c4:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <vPortEnterCritical+0x60>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d111      	bne.n	80085f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085cc:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <vPortEnterCritical+0x64>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00c      	beq.n	80085f0 <vPortEnterCritical+0x54>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	b672      	cpsid	i
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	b662      	cpsie	i
 80085ea:	603b      	str	r3, [r7, #0]
}
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <vPortEnterCritical+0x52>
	}
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	2000000c 	.word	0x2000000c
 8008600:	e000ed04 	.word	0xe000ed04

08008604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800860a:	4b13      	ldr	r3, [pc, #76]	; (8008658 <vPortExitCritical+0x54>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10c      	bne.n	800862c <vPortExitCritical+0x28>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	b672      	cpsid	i
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	b662      	cpsie	i
 8008626:	607b      	str	r3, [r7, #4]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <vPortExitCritical+0x54>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3b01      	subs	r3, #1
 8008632:	4a09      	ldr	r2, [pc, #36]	; (8008658 <vPortExitCritical+0x54>)
 8008634:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008636:	4b08      	ldr	r3, [pc, #32]	; (8008658 <vPortExitCritical+0x54>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d105      	bne.n	800864a <vPortExitCritical+0x46>
 800863e:	2300      	movs	r3, #0
 8008640:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008648:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	2000000c 	.word	0x2000000c
 800865c:	00000000 	.word	0x00000000

08008660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008660:	f3ef 8009 	mrs	r0, PSP
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	4b15      	ldr	r3, [pc, #84]	; (80086c0 <pxCurrentTCBConst>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	f01e 0f10 	tst.w	lr, #16
 8008670:	bf08      	it	eq
 8008672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	6010      	str	r0, [r2, #0]
 800867c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008684:	b672      	cpsid	i
 8008686:	f380 8811 	msr	BASEPRI, r0
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	b662      	cpsie	i
 8008694:	f7ff fcdc 	bl	8008050 <vTaskSwitchContext>
 8008698:	f04f 0000 	mov.w	r0, #0
 800869c:	f380 8811 	msr	BASEPRI, r0
 80086a0:	bc09      	pop	{r0, r3}
 80086a2:	6819      	ldr	r1, [r3, #0]
 80086a4:	6808      	ldr	r0, [r1, #0]
 80086a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	f01e 0f10 	tst.w	lr, #16
 80086ae:	bf08      	it	eq
 80086b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086b4:	f380 8809 	msr	PSP, r0
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <pxCurrentTCBConst>:
 80086c0:	20000290 	.word	0x20000290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop

080086c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	b672      	cpsid	i
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	b662      	cpsie	i
 80086e2:	607b      	str	r3, [r7, #4]
}
 80086e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086e6:	f7ff fbf9 	bl	8007edc <xTaskIncrementTick>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <SysTick_Handler+0x44>)
 80086f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	2300      	movs	r3, #0
 80086fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f383 8811 	msr	BASEPRI, r3
}
 8008702:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008710:	b480      	push	{r7}
 8008712:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <vPortSetupTimerInterrupt+0x34>)
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800871a:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <vPortSetupTimerInterrupt+0x38>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <vPortSetupTimerInterrupt+0x3c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a0a      	ldr	r2, [pc, #40]	; (8008750 <vPortSetupTimerInterrupt+0x40>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	099b      	lsrs	r3, r3, #6
 800872c:	4a09      	ldr	r2, [pc, #36]	; (8008754 <vPortSetupTimerInterrupt+0x44>)
 800872e:	3b01      	subs	r3, #1
 8008730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008732:	4b04      	ldr	r3, [pc, #16]	; (8008744 <vPortSetupTimerInterrupt+0x34>)
 8008734:	2207      	movs	r2, #7
 8008736:	601a      	str	r2, [r3, #0]
}
 8008738:	bf00      	nop
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	e000e010 	.word	0xe000e010
 8008748:	e000e018 	.word	0xe000e018
 800874c:	20000000 	.word	0x20000000
 8008750:	10624dd3 	.word	0x10624dd3
 8008754:	e000e014 	.word	0xe000e014

08008758 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008758:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008768 <vPortEnableVFP+0x10>
 800875c:	6801      	ldr	r1, [r0, #0]
 800875e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008762:	6001      	str	r1, [r0, #0]
 8008764:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008766:	bf00      	nop
 8008768:	e000ed88 	.word	0xe000ed88

0800876c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	; 0x28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008774:	2300      	movs	r3, #0
 8008776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008778:	f7ff fb04 	bl	8007d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800877c:	4b5b      	ldr	r3, [pc, #364]	; (80088ec <pvPortMalloc+0x180>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008784:	f000 f91a 	bl	80089bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008788:	4b59      	ldr	r3, [pc, #356]	; (80088f0 <pvPortMalloc+0x184>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4013      	ands	r3, r2
 8008790:	2b00      	cmp	r3, #0
 8008792:	f040 8092 	bne.w	80088ba <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01f      	beq.n	80087dc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800879c:	2208      	movs	r2, #8
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d016      	beq.n	80087dc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f023 0307 	bic.w	r3, r3, #7
 80087b4:	3308      	adds	r3, #8
 80087b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00c      	beq.n	80087dc <pvPortMalloc+0x70>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	b672      	cpsid	i
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	b662      	cpsie	i
 80087d6:	617b      	str	r3, [r7, #20]
}
 80087d8:	bf00      	nop
 80087da:	e7fe      	b.n	80087da <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d06b      	beq.n	80088ba <pvPortMalloc+0x14e>
 80087e2:	4b44      	ldr	r3, [pc, #272]	; (80088f4 <pvPortMalloc+0x188>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d866      	bhi.n	80088ba <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087ec:	4b42      	ldr	r3, [pc, #264]	; (80088f8 <pvPortMalloc+0x18c>)
 80087ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087f0:	4b41      	ldr	r3, [pc, #260]	; (80088f8 <pvPortMalloc+0x18c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087f6:	e004      	b.n	8008802 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d903      	bls.n	8008814 <pvPortMalloc+0xa8>
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1f1      	bne.n	80087f8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008814:	4b35      	ldr	r3, [pc, #212]	; (80088ec <pvPortMalloc+0x180>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881a:	429a      	cmp	r2, r3
 800881c:	d04d      	beq.n	80088ba <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2208      	movs	r2, #8
 8008824:	4413      	add	r3, r2
 8008826:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	1ad2      	subs	r2, r2, r3
 8008838:	2308      	movs	r3, #8
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	429a      	cmp	r2, r3
 800883e:	d921      	bls.n	8008884 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4413      	add	r3, r2
 8008846:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00c      	beq.n	800886c <pvPortMalloc+0x100>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	b672      	cpsid	i
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	b662      	cpsie	i
 8008866:	613b      	str	r3, [r7, #16]
}
 8008868:	bf00      	nop
 800886a:	e7fe      	b.n	800886a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	1ad2      	subs	r2, r2, r3
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800887e:	69b8      	ldr	r0, [r7, #24]
 8008880:	f000 f8fe 	bl	8008a80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008884:	4b1b      	ldr	r3, [pc, #108]	; (80088f4 <pvPortMalloc+0x188>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	4a19      	ldr	r2, [pc, #100]	; (80088f4 <pvPortMalloc+0x188>)
 8008890:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008892:	4b18      	ldr	r3, [pc, #96]	; (80088f4 <pvPortMalloc+0x188>)
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	4b19      	ldr	r3, [pc, #100]	; (80088fc <pvPortMalloc+0x190>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	429a      	cmp	r2, r3
 800889c:	d203      	bcs.n	80088a6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800889e:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <pvPortMalloc+0x188>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a16      	ldr	r2, [pc, #88]	; (80088fc <pvPortMalloc+0x190>)
 80088a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	4b11      	ldr	r3, [pc, #68]	; (80088f0 <pvPortMalloc+0x184>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088ba:	f7ff fa71 	bl	8007da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	f003 0307 	and.w	r3, r3, #7
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00c      	beq.n	80088e2 <pvPortMalloc+0x176>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	b672      	cpsid	i
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	b662      	cpsie	i
 80088dc:	60fb      	str	r3, [r7, #12]
}
 80088de:	bf00      	nop
 80088e0:	e7fe      	b.n	80088e0 <pvPortMalloc+0x174>
	return pvReturn;
 80088e2:	69fb      	ldr	r3, [r7, #28]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3728      	adds	r7, #40	; 0x28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20003fcc 	.word	0x20003fcc
 80088f0:	20003fd8 	.word	0x20003fd8
 80088f4:	20003fd0 	.word	0x20003fd0
 80088f8:	20003fc4 	.word	0x20003fc4
 80088fc:	20003fd4 	.word	0x20003fd4

08008900 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d04c      	beq.n	80089ac <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008912:	2308      	movs	r3, #8
 8008914:	425b      	negs	r3, r3
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4413      	add	r3, r2
 800891a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	4b23      	ldr	r3, [pc, #140]	; (80089b4 <vPortFree+0xb4>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4013      	ands	r3, r2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10c      	bne.n	8008948 <vPortFree+0x48>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	b672      	cpsid	i
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	b662      	cpsie	i
 8008942:	60fb      	str	r3, [r7, #12]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00c      	beq.n	800896a <vPortFree+0x6a>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	b672      	cpsid	i
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	b662      	cpsie	i
 8008964:	60bb      	str	r3, [r7, #8]
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	4b11      	ldr	r3, [pc, #68]	; (80089b4 <vPortFree+0xb4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4013      	ands	r3, r2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d019      	beq.n	80089ac <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d115      	bne.n	80089ac <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	4b0b      	ldr	r3, [pc, #44]	; (80089b4 <vPortFree+0xb4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	43db      	mvns	r3, r3
 800898a:	401a      	ands	r2, r3
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008990:	f7ff f9f8 	bl	8007d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <vPortFree+0xb8>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4413      	add	r3, r2
 800899e:	4a06      	ldr	r2, [pc, #24]	; (80089b8 <vPortFree+0xb8>)
 80089a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089a2:	6938      	ldr	r0, [r7, #16]
 80089a4:	f000 f86c 	bl	8008a80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80089a8:	f7ff f9fa 	bl	8007da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089ac:	bf00      	nop
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20003fd8 	.word	0x20003fd8
 80089b8:	20003fd0 	.word	0x20003fd0

080089bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80089c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089c8:	4b27      	ldr	r3, [pc, #156]	; (8008a68 <prvHeapInit+0xac>)
 80089ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00c      	beq.n	80089f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3307      	adds	r3, #7
 80089da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 0307 	bic.w	r3, r3, #7
 80089e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	4a1f      	ldr	r2, [pc, #124]	; (8008a68 <prvHeapInit+0xac>)
 80089ec:	4413      	add	r3, r2
 80089ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089f4:	4a1d      	ldr	r2, [pc, #116]	; (8008a6c <prvHeapInit+0xb0>)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089fa:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <prvHeapInit+0xb0>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	4413      	add	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a08:	2208      	movs	r2, #8
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 0307 	bic.w	r3, r3, #7
 8008a16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4a15      	ldr	r2, [pc, #84]	; (8008a70 <prvHeapInit+0xb4>)
 8008a1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a1e:	4b14      	ldr	r3, [pc, #80]	; (8008a70 <prvHeapInit+0xb4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a26:	4b12      	ldr	r3, [pc, #72]	; (8008a70 <prvHeapInit+0xb4>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	1ad2      	subs	r2, r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a3c:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <prvHeapInit+0xb4>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <prvHeapInit+0xb8>)
 8008a4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	4a09      	ldr	r2, [pc, #36]	; (8008a78 <prvHeapInit+0xbc>)
 8008a52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a54:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <prvHeapInit+0xc0>)
 8008a56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a5a:	601a      	str	r2, [r3, #0]
}
 8008a5c:	bf00      	nop
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	200003c4 	.word	0x200003c4
 8008a6c:	20003fc4 	.word	0x20003fc4
 8008a70:	20003fcc 	.word	0x20003fcc
 8008a74:	20003fd4 	.word	0x20003fd4
 8008a78:	20003fd0 	.word	0x20003fd0
 8008a7c:	20003fd8 	.word	0x20003fd8

08008a80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a88:	4b28      	ldr	r3, [pc, #160]	; (8008b2c <prvInsertBlockIntoFreeList+0xac>)
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e002      	b.n	8008a94 <prvInsertBlockIntoFreeList+0x14>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d8f7      	bhi.n	8008a8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d108      	bne.n	8008ac2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	441a      	add	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	441a      	add	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d118      	bne.n	8008b08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <prvInsertBlockIntoFreeList+0xb0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d00d      	beq.n	8008afe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	441a      	add	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	e008      	b.n	8008b10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008afe:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <prvInsertBlockIntoFreeList+0xb0>)
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e003      	b.n	8008b10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d002      	beq.n	8008b1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b1e:	bf00      	nop
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	20003fc4 	.word	0x20003fc4
 8008b30:	20003fcc 	.word	0x20003fcc

08008b34 <_init>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	bf00      	nop
 8008b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3a:	bc08      	pop	{r3}
 8008b3c:	469e      	mov	lr, r3
 8008b3e:	4770      	bx	lr

08008b40 <_fini>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	bf00      	nop
 8008b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b46:	bc08      	pop	{r3}
 8008b48:	469e      	mov	lr, r3
 8008b4a:	4770      	bx	lr
