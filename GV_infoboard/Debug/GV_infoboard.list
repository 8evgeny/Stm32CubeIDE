
GV_infoboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08009c68  08009c68  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e60  08009e60  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009e60  08009e60  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e60  08009e60  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002130  200001e4  0800a04c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002314  0800a04c  00022314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000392a0  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000093d6  00000000  00000000  00059554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab0  00000000  00000000  00062930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001878  00000000  00000000  000643e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001966d  00000000  00000000  00065c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178cf  00000000  00000000  0007f2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fce8  00000000  00000000  00096b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000654c  00000000  00000000  0011687c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000041d5  00000000  00000000  0011cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <deregister_tm_clones>:
 8000110:	4803      	ldr	r0, [pc, #12]	; (8000120 <deregister_tm_clones+0x10>)
 8000112:	4b04      	ldr	r3, [pc, #16]	; (8000124 <deregister_tm_clones+0x14>)
 8000114:	4283      	cmp	r3, r0
 8000116:	d002      	beq.n	800011e <deregister_tm_clones+0xe>
 8000118:	4b03      	ldr	r3, [pc, #12]	; (8000128 <deregister_tm_clones+0x18>)
 800011a:	b103      	cbz	r3, 800011e <deregister_tm_clones+0xe>
 800011c:	4718      	bx	r3
 800011e:	4770      	bx	lr
 8000120:	200001e4 	.word	0x200001e4
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000

0800012c <register_tm_clones>:
 800012c:	4805      	ldr	r0, [pc, #20]	; (8000144 <register_tm_clones+0x18>)
 800012e:	4906      	ldr	r1, [pc, #24]	; (8000148 <register_tm_clones+0x1c>)
 8000130:	1a0b      	subs	r3, r1, r0
 8000132:	0fd9      	lsrs	r1, r3, #31
 8000134:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000138:	1049      	asrs	r1, r1, #1
 800013a:	d002      	beq.n	8000142 <register_tm_clones+0x16>
 800013c:	4b03      	ldr	r3, [pc, #12]	; (800014c <register_tm_clones+0x20>)
 800013e:	b103      	cbz	r3, 8000142 <register_tm_clones+0x16>
 8000140:	4718      	bx	r3
 8000142:	4770      	bx	lr
 8000144:	200001e4 	.word	0x200001e4
 8000148:	200001e4 	.word	0x200001e4
 800014c:	00000000 	.word	0x00000000

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c06      	ldr	r4, [pc, #24]	; (800016c <__do_global_dtors_aux+0x1c>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b943      	cbnz	r3, 800016a <__do_global_dtors_aux+0x1a>
 8000158:	f7ff ffda 	bl	8000110 <deregister_tm_clones>
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	b113      	cbz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000160:	4804      	ldr	r0, [pc, #16]	; (8000174 <__do_global_dtors_aux+0x24>)
 8000162:	f3af 8000 	nop.w
 8000166:	2301      	movs	r3, #1
 8000168:	7023      	strb	r3, [r4, #0]
 800016a:	bd10      	pop	{r4, pc}
 800016c:	200001e4 	.word	0x200001e4
 8000170:	00000000 	.word	0x00000000
 8000174:	08009c50 	.word	0x08009c50

08000178 <frame_dummy>:
 8000178:	b508      	push	{r3, lr}
 800017a:	4b04      	ldr	r3, [pc, #16]	; (800018c <frame_dummy+0x14>)
 800017c:	b11b      	cbz	r3, 8000186 <frame_dummy+0xe>
 800017e:	4904      	ldr	r1, [pc, #16]	; (8000190 <frame_dummy+0x18>)
 8000180:	4804      	ldr	r0, [pc, #16]	; (8000194 <frame_dummy+0x1c>)
 8000182:	f3af 8000 	nop.w
 8000186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800018a:	e7cf      	b.n	800012c <register_tm_clones>
 800018c:	00000000 	.word	0x00000000
 8000190:	200001e8 	.word	0x200001e8
 8000194:	08009c50 	.word	0x08009c50

08000198 <__errno>:
 8000198:	4b01      	ldr	r3, [pc, #4]	; (80001a0 <__errno+0x8>)
 800019a:	6818      	ldr	r0, [r3, #0]
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000000 	.word	0x20000000

080001a4 <__libc_init_array>:
 80001a4:	b570      	push	{r4, r5, r6, lr}
 80001a6:	4e0d      	ldr	r6, [pc, #52]	; (80001dc <__libc_init_array+0x38>)
 80001a8:	4d0d      	ldr	r5, [pc, #52]	; (80001e0 <__libc_init_array+0x3c>)
 80001aa:	1b76      	subs	r6, r6, r5
 80001ac:	10b6      	asrs	r6, r6, #2
 80001ae:	d006      	beq.n	80001be <__libc_init_array+0x1a>
 80001b0:	2400      	movs	r4, #0
 80001b2:	3401      	adds	r4, #1
 80001b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80001b8:	4798      	blx	r3
 80001ba:	42a6      	cmp	r6, r4
 80001bc:	d1f9      	bne.n	80001b2 <__libc_init_array+0xe>
 80001be:	4e09      	ldr	r6, [pc, #36]	; (80001e4 <__libc_init_array+0x40>)
 80001c0:	4d09      	ldr	r5, [pc, #36]	; (80001e8 <__libc_init_array+0x44>)
 80001c2:	f009 fd45 	bl	8009c50 <_init>
 80001c6:	1b76      	subs	r6, r6, r5
 80001c8:	10b6      	asrs	r6, r6, #2
 80001ca:	d006      	beq.n	80001da <__libc_init_array+0x36>
 80001cc:	2400      	movs	r4, #0
 80001ce:	3401      	adds	r4, #1
 80001d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80001d4:	4798      	blx	r3
 80001d6:	42a6      	cmp	r6, r4
 80001d8:	d1f9      	bne.n	80001ce <__libc_init_array+0x2a>
 80001da:	bd70      	pop	{r4, r5, r6, pc}
 80001dc:	08009e60 	.word	0x08009e60
 80001e0:	08009e60 	.word	0x08009e60
 80001e4:	08009e64 	.word	0x08009e64
 80001e8:	08009e60 	.word	0x08009e60

080001ec <memcpy>:
 80001ec:	4684      	mov	ip, r0
 80001ee:	ea41 0300 	orr.w	r3, r1, r0
 80001f2:	f013 0303 	ands.w	r3, r3, #3
 80001f6:	d149      	bne.n	800028c <memcpy+0xa0>
 80001f8:	3a40      	subs	r2, #64	; 0x40
 80001fa:	d323      	bcc.n	8000244 <memcpy+0x58>
 80001fc:	680b      	ldr	r3, [r1, #0]
 80001fe:	6003      	str	r3, [r0, #0]
 8000200:	684b      	ldr	r3, [r1, #4]
 8000202:	6043      	str	r3, [r0, #4]
 8000204:	688b      	ldr	r3, [r1, #8]
 8000206:	6083      	str	r3, [r0, #8]
 8000208:	68cb      	ldr	r3, [r1, #12]
 800020a:	60c3      	str	r3, [r0, #12]
 800020c:	690b      	ldr	r3, [r1, #16]
 800020e:	6103      	str	r3, [r0, #16]
 8000210:	694b      	ldr	r3, [r1, #20]
 8000212:	6143      	str	r3, [r0, #20]
 8000214:	698b      	ldr	r3, [r1, #24]
 8000216:	6183      	str	r3, [r0, #24]
 8000218:	69cb      	ldr	r3, [r1, #28]
 800021a:	61c3      	str	r3, [r0, #28]
 800021c:	6a0b      	ldr	r3, [r1, #32]
 800021e:	6203      	str	r3, [r0, #32]
 8000220:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000222:	6243      	str	r3, [r0, #36]	; 0x24
 8000224:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000226:	6283      	str	r3, [r0, #40]	; 0x28
 8000228:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800022a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800022c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800022e:	6303      	str	r3, [r0, #48]	; 0x30
 8000230:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000232:	6343      	str	r3, [r0, #52]	; 0x34
 8000234:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8000236:	6383      	str	r3, [r0, #56]	; 0x38
 8000238:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800023a:	63c3      	str	r3, [r0, #60]	; 0x3c
 800023c:	3040      	adds	r0, #64	; 0x40
 800023e:	3140      	adds	r1, #64	; 0x40
 8000240:	3a40      	subs	r2, #64	; 0x40
 8000242:	d2db      	bcs.n	80001fc <memcpy+0x10>
 8000244:	3230      	adds	r2, #48	; 0x30
 8000246:	d30b      	bcc.n	8000260 <memcpy+0x74>
 8000248:	680b      	ldr	r3, [r1, #0]
 800024a:	6003      	str	r3, [r0, #0]
 800024c:	684b      	ldr	r3, [r1, #4]
 800024e:	6043      	str	r3, [r0, #4]
 8000250:	688b      	ldr	r3, [r1, #8]
 8000252:	6083      	str	r3, [r0, #8]
 8000254:	68cb      	ldr	r3, [r1, #12]
 8000256:	60c3      	str	r3, [r0, #12]
 8000258:	3010      	adds	r0, #16
 800025a:	3110      	adds	r1, #16
 800025c:	3a10      	subs	r2, #16
 800025e:	d2f3      	bcs.n	8000248 <memcpy+0x5c>
 8000260:	320c      	adds	r2, #12
 8000262:	d305      	bcc.n	8000270 <memcpy+0x84>
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a04      	subs	r2, #4
 800026e:	d2f9      	bcs.n	8000264 <memcpy+0x78>
 8000270:	3204      	adds	r2, #4
 8000272:	d008      	beq.n	8000286 <memcpy+0x9a>
 8000274:	07d2      	lsls	r2, r2, #31
 8000276:	bf1c      	itt	ne
 8000278:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800027c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000280:	d301      	bcc.n	8000286 <memcpy+0x9a>
 8000282:	880b      	ldrh	r3, [r1, #0]
 8000284:	8003      	strh	r3, [r0, #0]
 8000286:	4660      	mov	r0, ip
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	2a08      	cmp	r2, #8
 800028e:	d313      	bcc.n	80002b8 <memcpy+0xcc>
 8000290:	078b      	lsls	r3, r1, #30
 8000292:	d0b1      	beq.n	80001f8 <memcpy+0xc>
 8000294:	f010 0303 	ands.w	r3, r0, #3
 8000298:	d0ae      	beq.n	80001f8 <memcpy+0xc>
 800029a:	f1c3 0304 	rsb	r3, r3, #4
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	07db      	lsls	r3, r3, #31
 80002a2:	bf1c      	itt	ne
 80002a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002a8:	f800 3b01 	strbne.w	r3, [r0], #1
 80002ac:	d3a4      	bcc.n	80001f8 <memcpy+0xc>
 80002ae:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002b2:	f820 3b02 	strh.w	r3, [r0], #2
 80002b6:	e79f      	b.n	80001f8 <memcpy+0xc>
 80002b8:	3a04      	subs	r2, #4
 80002ba:	d3d9      	bcc.n	8000270 <memcpy+0x84>
 80002bc:	3a01      	subs	r2, #1
 80002be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c2:	f800 3b01 	strb.w	r3, [r0], #1
 80002c6:	d2f9      	bcs.n	80002bc <memcpy+0xd0>
 80002c8:	780b      	ldrb	r3, [r1, #0]
 80002ca:	7003      	strb	r3, [r0, #0]
 80002cc:	784b      	ldrb	r3, [r1, #1]
 80002ce:	7043      	strb	r3, [r0, #1]
 80002d0:	788b      	ldrb	r3, [r1, #2]
 80002d2:	7083      	strb	r3, [r0, #2]
 80002d4:	4660      	mov	r0, ip
 80002d6:	4770      	bx	lr

080002d8 <memset>:
 80002d8:	b4f0      	push	{r4, r5, r6, r7}
 80002da:	0786      	lsls	r6, r0, #30
 80002dc:	d046      	beq.n	800036c <memset+0x94>
 80002de:	1e54      	subs	r4, r2, #1
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	d03c      	beq.n	800035e <memset+0x86>
 80002e4:	b2ca      	uxtb	r2, r1
 80002e6:	4603      	mov	r3, r0
 80002e8:	e002      	b.n	80002f0 <memset+0x18>
 80002ea:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80002ee:	d336      	bcc.n	800035e <memset+0x86>
 80002f0:	f803 2b01 	strb.w	r2, [r3], #1
 80002f4:	079d      	lsls	r5, r3, #30
 80002f6:	d1f8      	bne.n	80002ea <memset+0x12>
 80002f8:	2c03      	cmp	r4, #3
 80002fa:	d929      	bls.n	8000350 <memset+0x78>
 80002fc:	b2cd      	uxtb	r5, r1
 80002fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000302:	2c0f      	cmp	r4, #15
 8000304:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000308:	d933      	bls.n	8000372 <memset+0x9a>
 800030a:	f1a4 0610 	sub.w	r6, r4, #16
 800030e:	0936      	lsrs	r6, r6, #4
 8000310:	f103 0720 	add.w	r7, r3, #32
 8000314:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000318:	f103 0210 	add.w	r2, r3, #16
 800031c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8000320:	e942 5502 	strd	r5, r5, [r2, #-8]
 8000324:	3210      	adds	r2, #16
 8000326:	42ba      	cmp	r2, r7
 8000328:	d1f8      	bne.n	800031c <memset+0x44>
 800032a:	1c72      	adds	r2, r6, #1
 800032c:	f014 0f0c 	tst.w	r4, #12
 8000330:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000334:	f004 060f 	and.w	r6, r4, #15
 8000338:	d013      	beq.n	8000362 <memset+0x8a>
 800033a:	1f33      	subs	r3, r6, #4
 800033c:	f023 0303 	bic.w	r3, r3, #3
 8000340:	3304      	adds	r3, #4
 8000342:	4413      	add	r3, r2
 8000344:	f842 5b04 	str.w	r5, [r2], #4
 8000348:	4293      	cmp	r3, r2
 800034a:	d1fb      	bne.n	8000344 <memset+0x6c>
 800034c:	f006 0403 	and.w	r4, r6, #3
 8000350:	b12c      	cbz	r4, 800035e <memset+0x86>
 8000352:	b2c9      	uxtb	r1, r1
 8000354:	441c      	add	r4, r3
 8000356:	f803 1b01 	strb.w	r1, [r3], #1
 800035a:	429c      	cmp	r4, r3
 800035c:	d1fb      	bne.n	8000356 <memset+0x7e>
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
 8000360:	4770      	bx	lr
 8000362:	4634      	mov	r4, r6
 8000364:	4613      	mov	r3, r2
 8000366:	2c00      	cmp	r4, #0
 8000368:	d1f3      	bne.n	8000352 <memset+0x7a>
 800036a:	e7f8      	b.n	800035e <memset+0x86>
 800036c:	4614      	mov	r4, r2
 800036e:	4603      	mov	r3, r0
 8000370:	e7c2      	b.n	80002f8 <memset+0x20>
 8000372:	461a      	mov	r2, r3
 8000374:	4626      	mov	r6, r4
 8000376:	e7e0      	b.n	800033a <memset+0x62>

08000378 <_iprintf_r>:
 8000378:	b40e      	push	{r1, r2, r3}
 800037a:	b530      	push	{r4, r5, lr}
 800037c:	4604      	mov	r4, r0
 800037e:	b082      	sub	sp, #8
 8000380:	b108      	cbz	r0, 8000386 <_iprintf_r+0xe>
 8000382:	6983      	ldr	r3, [r0, #24]
 8000384:	b163      	cbz	r3, 80003a0 <_iprintf_r+0x28>
 8000386:	ad06      	add	r5, sp, #24
 8000388:	462b      	mov	r3, r5
 800038a:	9a05      	ldr	r2, [sp, #20]
 800038c:	68a1      	ldr	r1, [r4, #8]
 800038e:	4620      	mov	r0, r4
 8000390:	9501      	str	r5, [sp, #4]
 8000392:	f000 fa4b 	bl	800082c <_vfiprintf_r>
 8000396:	b002      	add	sp, #8
 8000398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800039c:	b003      	add	sp, #12
 800039e:	4770      	bx	lr
 80003a0:	f000 f932 	bl	8000608 <__sinit>
 80003a4:	e7ef      	b.n	8000386 <_iprintf_r+0xe>
 80003a6:	bf00      	nop

080003a8 <iprintf>:
 80003a8:	b40f      	push	{r0, r1, r2, r3}
 80003aa:	b530      	push	{r4, r5, lr}
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <iprintf+0x34>)
 80003ae:	b083      	sub	sp, #12
 80003b0:	681c      	ldr	r4, [r3, #0]
 80003b2:	b10c      	cbz	r4, 80003b8 <iprintf+0x10>
 80003b4:	69a3      	ldr	r3, [r4, #24]
 80003b6:	b163      	cbz	r3, 80003d2 <iprintf+0x2a>
 80003b8:	ad07      	add	r5, sp, #28
 80003ba:	462b      	mov	r3, r5
 80003bc:	9a06      	ldr	r2, [sp, #24]
 80003be:	68a1      	ldr	r1, [r4, #8]
 80003c0:	4620      	mov	r0, r4
 80003c2:	9501      	str	r5, [sp, #4]
 80003c4:	f000 fa32 	bl	800082c <_vfiprintf_r>
 80003c8:	b003      	add	sp, #12
 80003ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80003ce:	b004      	add	sp, #16
 80003d0:	4770      	bx	lr
 80003d2:	4620      	mov	r0, r4
 80003d4:	f000 f918 	bl	8000608 <__sinit>
 80003d8:	e7ee      	b.n	80003b8 <iprintf+0x10>
 80003da:	bf00      	nop
 80003dc:	20000000 	.word	0x20000000

080003e0 <_putchar_r>:
 80003e0:	b510      	push	{r4, lr}
 80003e2:	4604      	mov	r4, r0
 80003e4:	b082      	sub	sp, #8
 80003e6:	b108      	cbz	r0, 80003ec <_putchar_r+0xc>
 80003e8:	6983      	ldr	r3, [r0, #24]
 80003ea:	b133      	cbz	r3, 80003fa <_putchar_r+0x1a>
 80003ec:	4620      	mov	r0, r4
 80003ee:	68a2      	ldr	r2, [r4, #8]
 80003f0:	b002      	add	sp, #8
 80003f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003f6:	f000 bd67 	b.w	8000ec8 <_putc_r>
 80003fa:	9101      	str	r1, [sp, #4]
 80003fc:	f000 f904 	bl	8000608 <__sinit>
 8000400:	9901      	ldr	r1, [sp, #4]
 8000402:	e7f3      	b.n	80003ec <_putchar_r+0xc>

08000404 <putchar>:
 8000404:	b538      	push	{r3, r4, r5, lr}
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <putchar+0x30>)
 8000408:	4605      	mov	r5, r0
 800040a:	681c      	ldr	r4, [r3, #0]
 800040c:	b10c      	cbz	r4, 8000412 <putchar+0xe>
 800040e:	69a3      	ldr	r3, [r4, #24]
 8000410:	b133      	cbz	r3, 8000420 <putchar+0x1c>
 8000412:	4629      	mov	r1, r5
 8000414:	68a2      	ldr	r2, [r4, #8]
 8000416:	4620      	mov	r0, r4
 8000418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800041c:	f000 bd54 	b.w	8000ec8 <_putc_r>
 8000420:	4620      	mov	r0, r4
 8000422:	f000 f8f1 	bl	8000608 <__sinit>
 8000426:	4629      	mov	r1, r5
 8000428:	68a2      	ldr	r2, [r4, #8]
 800042a:	4620      	mov	r0, r4
 800042c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000430:	f000 bd4a 	b.w	8000ec8 <_putc_r>
 8000434:	20000000 	.word	0x20000000

08000438 <__fp_lock>:
 8000438:	2000      	movs	r0, #0
 800043a:	4770      	bx	lr

0800043c <_cleanup_r>:
 800043c:	4901      	ldr	r1, [pc, #4]	; (8000444 <_cleanup_r+0x8>)
 800043e:	f000 b927 	b.w	8000690 <_fwalk_reent>
 8000442:	bf00      	nop
 8000444:	080013c5 	.word	0x080013c5

08000448 <__fp_unlock>:
 8000448:	2000      	movs	r0, #0
 800044a:	4770      	bx	lr

0800044c <__sfmoreglue>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	2568      	movs	r5, #104	; 0x68
 8000450:	1e4a      	subs	r2, r1, #1
 8000452:	fb05 f502 	mul.w	r5, r5, r2
 8000456:	460e      	mov	r6, r1
 8000458:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800045c:	f000 f940 	bl	80006e0 <_malloc_r>
 8000460:	4604      	mov	r4, r0
 8000462:	b140      	cbz	r0, 8000476 <__sfmoreglue+0x2a>
 8000464:	2100      	movs	r1, #0
 8000466:	300c      	adds	r0, #12
 8000468:	6066      	str	r6, [r4, #4]
 800046a:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800046e:	6021      	str	r1, [r4, #0]
 8000470:	60a0      	str	r0, [r4, #8]
 8000472:	f7ff ff31 	bl	80002d8 <memset>
 8000476:	4620      	mov	r0, r4
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	bf00      	nop

0800047c <__sfp>:
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <__sfp+0x7c>)
 800047e:	b570      	push	{r4, r5, r6, lr}
 8000480:	681d      	ldr	r5, [r3, #0]
 8000482:	4606      	mov	r6, r0
 8000484:	69ab      	ldr	r3, [r5, #24]
 8000486:	b343      	cbz	r3, 80004da <__sfp+0x5e>
 8000488:	3548      	adds	r5, #72	; 0x48
 800048a:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 800048e:	3b01      	subs	r3, #1
 8000490:	d505      	bpl.n	800049e <__sfp+0x22>
 8000492:	e01e      	b.n	80004d2 <__sfp+0x56>
 8000494:	3b01      	subs	r3, #1
 8000496:	1c5a      	adds	r2, r3, #1
 8000498:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800049c:	d019      	beq.n	80004d2 <__sfp+0x56>
 800049e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80004a2:	2a00      	cmp	r2, #0
 80004a4:	d1f6      	bne.n	8000494 <__sfp+0x18>
 80004a6:	2500      	movs	r5, #0
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <__sfp+0x80>)
 80004aa:	6665      	str	r5, [r4, #100]	; 0x64
 80004ac:	e9c4 5500 	strd	r5, r5, [r4]
 80004b0:	60a5      	str	r5, [r4, #8]
 80004b2:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80004b6:	61a5      	str	r5, [r4, #24]
 80004b8:	4629      	mov	r1, r5
 80004ba:	60e3      	str	r3, [r4, #12]
 80004bc:	2208      	movs	r2, #8
 80004be:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80004c2:	f7ff ff09 	bl	80002d8 <memset>
 80004c6:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80004ca:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80004ce:	4620      	mov	r0, r4
 80004d0:	bd70      	pop	{r4, r5, r6, pc}
 80004d2:	682c      	ldr	r4, [r5, #0]
 80004d4:	b12c      	cbz	r4, 80004e2 <__sfp+0x66>
 80004d6:	4625      	mov	r5, r4
 80004d8:	e7d7      	b.n	800048a <__sfp+0xe>
 80004da:	4628      	mov	r0, r5
 80004dc:	f000 f810 	bl	8000500 <__sinit.part.0>
 80004e0:	e7d2      	b.n	8000488 <__sfp+0xc>
 80004e2:	2104      	movs	r1, #4
 80004e4:	4630      	mov	r0, r6
 80004e6:	f7ff ffb1 	bl	800044c <__sfmoreglue>
 80004ea:	4604      	mov	r4, r0
 80004ec:	6028      	str	r0, [r5, #0]
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d1f1      	bne.n	80004d6 <__sfp+0x5a>
 80004f2:	230c      	movs	r3, #12
 80004f4:	6033      	str	r3, [r6, #0]
 80004f6:	e7ea      	b.n	80004ce <__sfp+0x52>
 80004f8:	08009da8 	.word	0x08009da8
 80004fc:	ffff0001 	.word	0xffff0001

08000500 <__sinit.part.0>:
 8000500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000504:	2300      	movs	r3, #0
 8000506:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <__sinit.part.0+0xd4>)
 8000508:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	6503      	str	r3, [r0, #80]	; 0x50
 8000510:	4290      	cmp	r0, r2
 8000512:	bf08      	it	eq
 8000514:	2301      	moveq	r3, #1
 8000516:	4930      	ldr	r1, [pc, #192]	; (80005d8 <__sinit.part.0+0xd8>)
 8000518:	bf08      	it	eq
 800051a:	6183      	streq	r3, [r0, #24]
 800051c:	6281      	str	r1, [r0, #40]	; 0x28
 800051e:	4605      	mov	r5, r0
 8000520:	f7ff ffac 	bl	800047c <__sfp>
 8000524:	6068      	str	r0, [r5, #4]
 8000526:	4628      	mov	r0, r5
 8000528:	f7ff ffa8 	bl	800047c <__sfp>
 800052c:	60a8      	str	r0, [r5, #8]
 800052e:	4628      	mov	r0, r5
 8000530:	2400      	movs	r4, #0
 8000532:	f7ff ffa3 	bl	800047c <__sfp>
 8000536:	2304      	movs	r3, #4
 8000538:	686e      	ldr	r6, [r5, #4]
 800053a:	60e8      	str	r0, [r5, #12]
 800053c:	4621      	mov	r1, r4
 800053e:	60f3      	str	r3, [r6, #12]
 8000540:	6674      	str	r4, [r6, #100]	; 0x64
 8000542:	e9c6 4400 	strd	r4, r4, [r6]
 8000546:	60b4      	str	r4, [r6, #8]
 8000548:	e9c6 4404 	strd	r4, r4, [r6, #16]
 800054c:	61b4      	str	r4, [r6, #24]
 800054e:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8000552:	2208      	movs	r2, #8
 8000554:	f7ff fec0 	bl	80002d8 <memset>
 8000558:	f8df b088 	ldr.w	fp, [pc, #136]	; 80005e4 <__sinit.part.0+0xe4>
 800055c:	68af      	ldr	r7, [r5, #8]
 800055e:	f8df a088 	ldr.w	sl, [pc, #136]	; 80005e8 <__sinit.part.0+0xe8>
 8000562:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80005ec <__sinit.part.0+0xec>
 8000566:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80005f0 <__sinit.part.0+0xf0>
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <__sinit.part.0+0xdc>)
 800056c:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8000570:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 8000574:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 8000578:	4621      	mov	r1, r4
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	2208      	movs	r2, #8
 800057e:	667c      	str	r4, [r7, #100]	; 0x64
 8000580:	e9c7 4400 	strd	r4, r4, [r7]
 8000584:	60bc      	str	r4, [r7, #8]
 8000586:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800058a:	61bc      	str	r4, [r7, #24]
 800058c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8000590:	f7ff fea2 	bl	80002d8 <memset>
 8000594:	68ee      	ldr	r6, [r5, #12]
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <__sinit.part.0+0xe0>)
 8000598:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 800059c:	e9c7 a90a 	strd	sl, r9, [r7, #40]	; 0x28
 80005a0:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 80005a4:	4621      	mov	r1, r4
 80005a6:	60f3      	str	r3, [r6, #12]
 80005a8:	6674      	str	r4, [r6, #100]	; 0x64
 80005aa:	e9c6 4400 	strd	r4, r4, [r6]
 80005ae:	60b4      	str	r4, [r6, #8]
 80005b0:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80005b4:	61b4      	str	r4, [r6, #24]
 80005b6:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80005ba:	2208      	movs	r2, #8
 80005bc:	f7ff fe8c 	bl	80002d8 <memset>
 80005c0:	2301      	movs	r3, #1
 80005c2:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80005c6:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80005ca:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80005ce:	61ab      	str	r3, [r5, #24]
 80005d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005d4:	08009da8 	.word	0x08009da8
 80005d8:	0800043d 	.word	0x0800043d
 80005dc:	00010009 	.word	0x00010009
 80005e0:	00020012 	.word	0x00020012
 80005e4:	08000ff9 	.word	0x08000ff9
 80005e8:	08001021 	.word	0x08001021
 80005ec:	08001061 	.word	0x08001061
 80005f0:	08001081 	.word	0x08001081

080005f4 <_cleanup>:
 80005f4:	4b02      	ldr	r3, [pc, #8]	; (8000600 <_cleanup+0xc>)
 80005f6:	4903      	ldr	r1, [pc, #12]	; (8000604 <_cleanup+0x10>)
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	f000 b849 	b.w	8000690 <_fwalk_reent>
 80005fe:	bf00      	nop
 8000600:	08009da8 	.word	0x08009da8
 8000604:	080013c5 	.word	0x080013c5

08000608 <__sinit>:
 8000608:	6983      	ldr	r3, [r0, #24]
 800060a:	b903      	cbnz	r3, 800060e <__sinit+0x6>
 800060c:	e778      	b.n	8000500 <__sinit.part.0>
 800060e:	4770      	bx	lr

08000610 <__sfp_lock_acquire>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <__sfp_lock_release>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <__sinit_lock_acquire>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__sinit_lock_release>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__fp_lock_all>:
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <__fp_lock_all+0xc>)
 8000622:	4903      	ldr	r1, [pc, #12]	; (8000630 <__fp_lock_all+0x10>)
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	f000 b80f 	b.w	8000648 <_fwalk>
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000
 8000630:	08000439 	.word	0x08000439

08000634 <__fp_unlock_all>:
 8000634:	4b02      	ldr	r3, [pc, #8]	; (8000640 <__fp_unlock_all+0xc>)
 8000636:	4903      	ldr	r1, [pc, #12]	; (8000644 <__fp_unlock_all+0x10>)
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	f000 b805 	b.w	8000648 <_fwalk>
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	08000449 	.word	0x08000449

08000648 <_fwalk>:
 8000648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800064c:	f110 0748 	adds.w	r7, r0, #72	; 0x48
 8000650:	d01a      	beq.n	8000688 <_fwalk+0x40>
 8000652:	4688      	mov	r8, r1
 8000654:	2600      	movs	r6, #0
 8000656:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800065a:	3d01      	subs	r5, #1
 800065c:	d40e      	bmi.n	800067c <_fwalk+0x34>
 800065e:	89a3      	ldrh	r3, [r4, #12]
 8000660:	3d01      	subs	r5, #1
 8000662:	2b01      	cmp	r3, #1
 8000664:	d906      	bls.n	8000674 <_fwalk+0x2c>
 8000666:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800066a:	3301      	adds	r3, #1
 800066c:	d002      	beq.n	8000674 <_fwalk+0x2c>
 800066e:	4620      	mov	r0, r4
 8000670:	47c0      	blx	r8
 8000672:	4306      	orrs	r6, r0
 8000674:	1c6b      	adds	r3, r5, #1
 8000676:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800067a:	d1f0      	bne.n	800065e <_fwalk+0x16>
 800067c:	683f      	ldr	r7, [r7, #0]
 800067e:	2f00      	cmp	r7, #0
 8000680:	d1e9      	bne.n	8000656 <_fwalk+0xe>
 8000682:	4630      	mov	r0, r6
 8000684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000688:	463e      	mov	r6, r7
 800068a:	4630      	mov	r0, r6
 800068c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000690 <_fwalk_reent>:
 8000690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000694:	f110 0648 	adds.w	r6, r0, #72	; 0x48
 8000698:	d01e      	beq.n	80006d8 <_fwalk_reent+0x48>
 800069a:	4688      	mov	r8, r1
 800069c:	4607      	mov	r7, r0
 800069e:	f04f 0900 	mov.w	r9, #0
 80006a2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 80006a6:	3d01      	subs	r5, #1
 80006a8:	d410      	bmi.n	80006cc <_fwalk_reent+0x3c>
 80006aa:	89a3      	ldrh	r3, [r4, #12]
 80006ac:	3d01      	subs	r5, #1
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d908      	bls.n	80006c4 <_fwalk_reent+0x34>
 80006b2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	d004      	beq.n	80006c4 <_fwalk_reent+0x34>
 80006ba:	4621      	mov	r1, r4
 80006bc:	4638      	mov	r0, r7
 80006be:	47c0      	blx	r8
 80006c0:	ea49 0900 	orr.w	r9, r9, r0
 80006c4:	1c6b      	adds	r3, r5, #1
 80006c6:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80006ca:	d1ee      	bne.n	80006aa <_fwalk_reent+0x1a>
 80006cc:	6836      	ldr	r6, [r6, #0]
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d1e7      	bne.n	80006a2 <_fwalk_reent+0x12>
 80006d2:	4648      	mov	r0, r9
 80006d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006d8:	46b1      	mov	r9, r6
 80006da:	4648      	mov	r0, r9
 80006dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080006e0 <_malloc_r>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	1ccd      	adds	r5, r1, #3
 80006e4:	f025 0503 	bic.w	r5, r5, #3
 80006e8:	3508      	adds	r5, #8
 80006ea:	2d0c      	cmp	r5, #12
 80006ec:	bf38      	it	cc
 80006ee:	250c      	movcc	r5, #12
 80006f0:	2d00      	cmp	r5, #0
 80006f2:	4606      	mov	r6, r0
 80006f4:	db33      	blt.n	800075e <_malloc_r+0x7e>
 80006f6:	42a9      	cmp	r1, r5
 80006f8:	d831      	bhi.n	800075e <_malloc_r+0x7e>
 80006fa:	4f2a      	ldr	r7, [pc, #168]	; (80007a4 <_malloc_r+0xc4>)
 80006fc:	f001 f95e 	bl	80019bc <__malloc_lock>
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	b152      	cbz	r2, 800071a <_malloc_r+0x3a>
 8000704:	6813      	ldr	r3, [r2, #0]
 8000706:	1b5b      	subs	r3, r3, r5
 8000708:	d404      	bmi.n	8000714 <_malloc_r+0x34>
 800070a:	e03f      	b.n	800078c <_malloc_r+0xac>
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	1b5b      	subs	r3, r3, r5
 8000710:	d529      	bpl.n	8000766 <_malloc_r+0x86>
 8000712:	4622      	mov	r2, r4
 8000714:	6854      	ldr	r4, [r2, #4]
 8000716:	2c00      	cmp	r4, #0
 8000718:	d1f8      	bne.n	800070c <_malloc_r+0x2c>
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	2900      	cmp	r1, #0
 800071e:	d03b      	beq.n	8000798 <_malloc_r+0xb8>
 8000720:	4629      	mov	r1, r5
 8000722:	4630      	mov	r0, r6
 8000724:	f000 fc56 	bl	8000fd4 <_sbrk_r>
 8000728:	1c43      	adds	r3, r0, #1
 800072a:	d028      	beq.n	800077e <_malloc_r+0x9e>
 800072c:	1cc4      	adds	r4, r0, #3
 800072e:	f024 0403 	bic.w	r4, r4, #3
 8000732:	42a0      	cmp	r0, r4
 8000734:	d005      	beq.n	8000742 <_malloc_r+0x62>
 8000736:	1a21      	subs	r1, r4, r0
 8000738:	4630      	mov	r0, r6
 800073a:	f000 fc4b 	bl	8000fd4 <_sbrk_r>
 800073e:	3001      	adds	r0, #1
 8000740:	d01d      	beq.n	800077e <_malloc_r+0x9e>
 8000742:	6025      	str	r5, [r4, #0]
 8000744:	4630      	mov	r0, r6
 8000746:	f001 f93b 	bl	80019c0 <__malloc_unlock>
 800074a:	f104 000b 	add.w	r0, r4, #11
 800074e:	f020 0007 	bic.w	r0, r0, #7
 8000752:	1d23      	adds	r3, r4, #4
 8000754:	1ac2      	subs	r2, r0, r3
 8000756:	d001      	beq.n	800075c <_malloc_r+0x7c>
 8000758:	1a1b      	subs	r3, r3, r0
 800075a:	50a3      	str	r3, [r4, r2]
 800075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800075e:	220c      	movs	r2, #12
 8000760:	2000      	movs	r0, #0
 8000762:	6032      	str	r2, [r6, #0]
 8000764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000766:	2b0b      	cmp	r3, #11
 8000768:	d805      	bhi.n	8000776 <_malloc_r+0x96>
 800076a:	42a2      	cmp	r2, r4
 800076c:	6863      	ldr	r3, [r4, #4]
 800076e:	d011      	beq.n	8000794 <_malloc_r+0xb4>
 8000770:	6053      	str	r3, [r2, #4]
 8000772:	e7e7      	b.n	8000744 <_malloc_r+0x64>
 8000774:	4614      	mov	r4, r2
 8000776:	6023      	str	r3, [r4, #0]
 8000778:	441c      	add	r4, r3
 800077a:	6025      	str	r5, [r4, #0]
 800077c:	e7e2      	b.n	8000744 <_malloc_r+0x64>
 800077e:	230c      	movs	r3, #12
 8000780:	4630      	mov	r0, r6
 8000782:	6033      	str	r3, [r6, #0]
 8000784:	f001 f91c 	bl	80019c0 <__malloc_unlock>
 8000788:	2000      	movs	r0, #0
 800078a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800078c:	2b0b      	cmp	r3, #11
 800078e:	d8f1      	bhi.n	8000774 <_malloc_r+0x94>
 8000790:	4614      	mov	r4, r2
 8000792:	6853      	ldr	r3, [r2, #4]
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	e7d5      	b.n	8000744 <_malloc_r+0x64>
 8000798:	4630      	mov	r0, r6
 800079a:	f000 fc1b 	bl	8000fd4 <_sbrk_r>
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	e7be      	b.n	8000720 <_malloc_r+0x40>
 80007a2:	bf00      	nop
 80007a4:	20000200 	.word	0x20000200

080007a8 <__sfputc_r>:
 80007a8:	6893      	ldr	r3, [r2, #8]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	6093      	str	r3, [r2, #8]
 80007b0:	da0f      	bge.n	80007d2 <__sfputc_r+0x2a>
 80007b2:	b410      	push	{r4}
 80007b4:	6994      	ldr	r4, [r2, #24]
 80007b6:	42a3      	cmp	r3, r4
 80007b8:	db08      	blt.n	80007cc <__sfputc_r+0x24>
 80007ba:	290a      	cmp	r1, #10
 80007bc:	d006      	beq.n	80007cc <__sfputc_r+0x24>
 80007be:	6813      	ldr	r3, [r2, #0]
 80007c0:	1c58      	adds	r0, r3, #1
 80007c2:	6010      	str	r0, [r2, #0]
 80007c4:	7019      	strb	r1, [r3, #0]
 80007c6:	4608      	mov	r0, r1
 80007c8:	bc10      	pop	{r4}
 80007ca:	4770      	bx	lr
 80007cc:	bc10      	pop	{r4}
 80007ce:	f000 bc5b 	b.w	8001088 <__swbuf_r>
 80007d2:	6813      	ldr	r3, [r2, #0]
 80007d4:	1c58      	adds	r0, r3, #1
 80007d6:	6010      	str	r0, [r2, #0]
 80007d8:	7019      	strb	r1, [r3, #0]
 80007da:	4608      	mov	r0, r1
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <__sfputs_r>:
 80007e0:	b19b      	cbz	r3, 800080a <__sfputs_r+0x2a>
 80007e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e4:	4413      	add	r3, r2
 80007e6:	460f      	mov	r7, r1
 80007e8:	4606      	mov	r6, r0
 80007ea:	1e5d      	subs	r5, r3, #1
 80007ec:	1e54      	subs	r4, r2, #1
 80007ee:	e001      	b.n	80007f4 <__sfputs_r+0x14>
 80007f0:	42ac      	cmp	r4, r5
 80007f2:	d008      	beq.n	8000806 <__sfputs_r+0x26>
 80007f4:	463a      	mov	r2, r7
 80007f6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80007fa:	4630      	mov	r0, r6
 80007fc:	f7ff ffd4 	bl	80007a8 <__sfputc_r>
 8000800:	1c43      	adds	r3, r0, #1
 8000802:	d1f5      	bne.n	80007f0 <__sfputs_r+0x10>
 8000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000806:	2000      	movs	r0, #0
 8000808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800080a:	2000      	movs	r0, #0
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop

08000810 <__sprint_r>:
 8000810:	6893      	ldr	r3, [r2, #8]
 8000812:	b510      	push	{r4, lr}
 8000814:	4614      	mov	r4, r2
 8000816:	b913      	cbnz	r3, 800081e <__sprint_r+0xe>
 8000818:	6053      	str	r3, [r2, #4]
 800081a:	4618      	mov	r0, r3
 800081c:	bd10      	pop	{r4, pc}
 800081e:	f000 fe13 	bl	8001448 <__sfvwrite_r>
 8000822:	2300      	movs	r3, #0
 8000824:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8000828:	bd10      	pop	{r4, pc}
 800082a:	bf00      	nop

0800082c <_vfiprintf_r>:
 800082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000830:	b09f      	sub	sp, #124	; 0x7c
 8000832:	468b      	mov	fp, r1
 8000834:	4690      	mov	r8, r2
 8000836:	461c      	mov	r4, r3
 8000838:	9003      	str	r0, [sp, #12]
 800083a:	b118      	cbz	r0, 8000844 <_vfiprintf_r+0x18>
 800083c:	6983      	ldr	r3, [r0, #24]
 800083e:	2b00      	cmp	r3, #0
 8000840:	f000 80b9 	beq.w	80009b6 <_vfiprintf_r+0x18a>
 8000844:	4ba3      	ldr	r3, [pc, #652]	; (8000ad4 <_vfiprintf_r+0x2a8>)
 8000846:	459b      	cmp	fp, r3
 8000848:	f000 80bb 	beq.w	80009c2 <_vfiprintf_r+0x196>
 800084c:	4ba2      	ldr	r3, [pc, #648]	; (8000ad8 <_vfiprintf_r+0x2ac>)
 800084e:	459b      	cmp	fp, r3
 8000850:	f000 80c9 	beq.w	80009e6 <_vfiprintf_r+0x1ba>
 8000854:	4ba1      	ldr	r3, [pc, #644]	; (8000adc <_vfiprintf_r+0x2b0>)
 8000856:	459b      	cmp	fp, r3
 8000858:	bf04      	itt	eq
 800085a:	9b03      	ldreq	r3, [sp, #12]
 800085c:	f8d3 b00c 	ldreq.w	fp, [r3, #12]
 8000860:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8000864:	0718      	lsls	r0, r3, #28
 8000866:	f140 80b4 	bpl.w	80009d2 <_vfiprintf_r+0x1a6>
 800086a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800086e:	2b00      	cmp	r3, #0
 8000870:	f000 80af 	beq.w	80009d2 <_vfiprintf_r+0x1a6>
 8000874:	2330      	movs	r3, #48	; 0x30
 8000876:	2100      	movs	r1, #0
 8000878:	2220      	movs	r2, #32
 800087a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 800087e:	f898 3000 	ldrb.w	r3, [r8]
 8000882:	9405      	str	r4, [sp, #20]
 8000884:	910b      	str	r1, [sp, #44]	; 0x2c
 8000886:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800088a:	4e95      	ldr	r6, [pc, #596]	; (8000ae0 <_vfiprintf_r+0x2b4>)
 800088c:	2701      	movs	r7, #1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 8089 	beq.w	80009a6 <_vfiprintf_r+0x17a>
 8000894:	2b25      	cmp	r3, #37	; 0x25
 8000896:	f000 8117 	beq.w	8000ac8 <_vfiprintf_r+0x29c>
 800089a:	4645      	mov	r5, r8
 800089c:	e003      	b.n	80008a6 <_vfiprintf_r+0x7a>
 800089e:	2b25      	cmp	r3, #37	; 0x25
 80008a0:	f000 80a5 	beq.w	80009ee <_vfiprintf_r+0x1c2>
 80008a4:	4625      	mov	r5, r4
 80008a6:	786b      	ldrb	r3, [r5, #1]
 80008a8:	1c6c      	adds	r4, r5, #1
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f7      	bne.n	800089e <_vfiprintf_r+0x72>
 80008ae:	ebb4 0a08 	subs.w	sl, r4, r8
 80008b2:	d078      	beq.n	80009a6 <_vfiprintf_r+0x17a>
 80008b4:	4642      	mov	r2, r8
 80008b6:	4653      	mov	r3, sl
 80008b8:	4659      	mov	r1, fp
 80008ba:	9803      	ldr	r0, [sp, #12]
 80008bc:	f7ff ff90 	bl	80007e0 <__sfputs_r>
 80008c0:	3001      	adds	r0, #1
 80008c2:	d070      	beq.n	80009a6 <_vfiprintf_r+0x17a>
 80008c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80008c6:	786a      	ldrb	r2, [r5, #1]
 80008c8:	4453      	add	r3, sl
 80008ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	d06a      	beq.n	80009a6 <_vfiprintf_r+0x17a>
 80008d0:	2300      	movs	r3, #0
 80008d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008d6:	3401      	adds	r4, #1
 80008d8:	9306      	str	r3, [sp, #24]
 80008da:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80008de:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80008e2:	931c      	str	r3, [sp, #112]	; 0x70
 80008e4:	9207      	str	r2, [sp, #28]
 80008e6:	e006      	b.n	80008f6 <_vfiprintf_r+0xca>
 80008e8:	462c      	mov	r4, r5
 80008ea:	9b06      	ldr	r3, [sp, #24]
 80008ec:	1b80      	subs	r0, r0, r6
 80008ee:	fa07 f000 	lsl.w	r0, r7, r0
 80008f2:	4318      	orrs	r0, r3
 80008f4:	9006      	str	r0, [sp, #24]
 80008f6:	4625      	mov	r5, r4
 80008f8:	2205      	movs	r2, #5
 80008fa:	f815 1b01 	ldrb.w	r1, [r5], #1
 80008fe:	4630      	mov	r0, r6
 8000900:	f000 ffb0 	bl	8001864 <memchr>
 8000904:	46aa      	mov	sl, r5
 8000906:	2800      	cmp	r0, #0
 8000908:	d1ee      	bne.n	80008e8 <_vfiprintf_r+0xbc>
 800090a:	9b06      	ldr	r3, [sp, #24]
 800090c:	06d9      	lsls	r1, r3, #27
 800090e:	bf44      	itt	mi
 8000910:	2220      	movmi	r2, #32
 8000912:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000916:	071a      	lsls	r2, r3, #28
 8000918:	bf48      	it	mi
 800091a:	222b      	movmi	r2, #43	; 0x2b
 800091c:	7821      	ldrb	r1, [r4, #0]
 800091e:	bf48      	it	mi
 8000920:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000924:	292a      	cmp	r1, #42	; 0x2a
 8000926:	d167      	bne.n	80009f8 <_vfiprintf_r+0x1cc>
 8000928:	9a05      	ldr	r2, [sp, #20]
 800092a:	6811      	ldr	r1, [r2, #0]
 800092c:	3204      	adds	r2, #4
 800092e:	2900      	cmp	r1, #0
 8000930:	9205      	str	r2, [sp, #20]
 8000932:	f2c0 809e 	blt.w	8000a72 <_vfiprintf_r+0x246>
 8000936:	9109      	str	r1, [sp, #36]	; 0x24
 8000938:	7861      	ldrb	r1, [r4, #1]
 800093a:	1ca5      	adds	r5, r4, #2
 800093c:	292e      	cmp	r1, #46	; 0x2e
 800093e:	d074      	beq.n	8000a2a <_vfiprintf_r+0x1fe>
 8000940:	4c68      	ldr	r4, [pc, #416]	; (8000ae4 <_vfiprintf_r+0x2b8>)
 8000942:	2203      	movs	r2, #3
 8000944:	4620      	mov	r0, r4
 8000946:	f000 ff8d 	bl	8001864 <memchr>
 800094a:	2800      	cmp	r0, #0
 800094c:	f000 8087 	beq.w	8000a5e <_vfiprintf_r+0x232>
 8000950:	2240      	movs	r2, #64	; 0x40
 8000952:	9b06      	ldr	r3, [sp, #24]
 8000954:	1b00      	subs	r0, r0, r4
 8000956:	fa02 f000 	lsl.w	r0, r2, r0
 800095a:	4303      	orrs	r3, r0
 800095c:	9306      	str	r3, [sp, #24]
 800095e:	f105 0801 	add.w	r8, r5, #1
 8000962:	782b      	ldrb	r3, [r5, #0]
 8000964:	2206      	movs	r2, #6
 8000966:	4619      	mov	r1, r3
 8000968:	485f      	ldr	r0, [pc, #380]	; (8000ae8 <_vfiprintf_r+0x2bc>)
 800096a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800096e:	f000 ff79 	bl	8001864 <memchr>
 8000972:	2800      	cmp	r0, #0
 8000974:	f000 8083 	beq.w	8000a7e <_vfiprintf_r+0x252>
 8000978:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <_vfiprintf_r+0x2c0>)
 800097a:	2b00      	cmp	r3, #0
 800097c:	d072      	beq.n	8000a64 <_vfiprintf_r+0x238>
 800097e:	ab05      	add	r3, sp, #20
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	465a      	mov	r2, fp
 8000984:	4b5a      	ldr	r3, [pc, #360]	; (8000af0 <_vfiprintf_r+0x2c4>)
 8000986:	a906      	add	r1, sp, #24
 8000988:	9803      	ldr	r0, [sp, #12]
 800098a:	f3af 8000 	nop.w
 800098e:	4681      	mov	r9, r0
 8000990:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8000994:	d007      	beq.n	80009a6 <_vfiprintf_r+0x17a>
 8000996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000998:	444b      	add	r3, r9
 800099a:	930b      	str	r3, [sp, #44]	; 0x2c
 800099c:	f898 3000 	ldrb.w	r3, [r8]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f47f af77 	bne.w	8000894 <_vfiprintf_r+0x68>
 80009a6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80009aa:	065b      	lsls	r3, r3, #25
 80009ac:	d418      	bmi.n	80009e0 <_vfiprintf_r+0x1b4>
 80009ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80009b0:	b01f      	add	sp, #124	; 0x7c
 80009b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009b6:	f7ff fe27 	bl	8000608 <__sinit>
 80009ba:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <_vfiprintf_r+0x2a8>)
 80009bc:	459b      	cmp	fp, r3
 80009be:	f47f af45 	bne.w	800084c <_vfiprintf_r+0x20>
 80009c2:	9b03      	ldr	r3, [sp, #12]
 80009c4:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80009c8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80009cc:	0718      	lsls	r0, r3, #28
 80009ce:	f53f af4c 	bmi.w	800086a <_vfiprintf_r+0x3e>
 80009d2:	4659      	mov	r1, fp
 80009d4:	9803      	ldr	r0, [sp, #12]
 80009d6:	f000 fbcd 	bl	8001174 <__swsetup_r>
 80009da:	2800      	cmp	r0, #0
 80009dc:	f43f af4a 	beq.w	8000874 <_vfiprintf_r+0x48>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e4:	e7e4      	b.n	80009b0 <_vfiprintf_r+0x184>
 80009e6:	9b03      	ldr	r3, [sp, #12]
 80009e8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80009ec:	e738      	b.n	8000860 <_vfiprintf_r+0x34>
 80009ee:	ebb4 0a08 	subs.w	sl, r4, r8
 80009f2:	f43f af6d 	beq.w	80008d0 <_vfiprintf_r+0xa4>
 80009f6:	e75d      	b.n	80008b4 <_vfiprintf_r+0x88>
 80009f8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80009fc:	2a09      	cmp	r2, #9
 80009fe:	bf88      	it	hi
 8000a00:	46a2      	movhi	sl, r4
 8000a02:	d89b      	bhi.n	800093c <_vfiprintf_r+0x110>
 8000a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a06:	e001      	b.n	8000a0c <_vfiprintf_r+0x1e0>
 8000a08:	462c      	mov	r4, r5
 8000a0a:	3501      	adds	r5, #1
 8000a0c:	7829      	ldrb	r1, [r5, #0]
 8000a0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a12:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000a16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000a1a:	2a09      	cmp	r2, #9
 8000a1c:	46aa      	mov	sl, r5
 8000a1e:	d9f3      	bls.n	8000a08 <_vfiprintf_r+0x1dc>
 8000a20:	292e      	cmp	r1, #46	; 0x2e
 8000a22:	f104 0502 	add.w	r5, r4, #2
 8000a26:	9309      	str	r3, [sp, #36]	; 0x24
 8000a28:	d18a      	bne.n	8000940 <_vfiprintf_r+0x114>
 8000a2a:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8000a2e:	292a      	cmp	r1, #42	; 0x2a
 8000a30:	d12f      	bne.n	8000a92 <_vfiprintf_r+0x266>
 8000a32:	9b05      	ldr	r3, [sp, #20]
 8000a34:	f10a 0002 	add.w	r0, sl, #2
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	9207      	str	r2, [sp, #28]
 8000a40:	9305      	str	r3, [sp, #20]
 8000a42:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8000a46:	f10a 0503 	add.w	r5, sl, #3
 8000a4a:	db38      	blt.n	8000abe <_vfiprintf_r+0x292>
 8000a4c:	4c25      	ldr	r4, [pc, #148]	; (8000ae4 <_vfiprintf_r+0x2b8>)
 8000a4e:	4682      	mov	sl, r0
 8000a50:	2203      	movs	r2, #3
 8000a52:	4620      	mov	r0, r4
 8000a54:	f000 ff06 	bl	8001864 <memchr>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	f47f af79 	bne.w	8000950 <_vfiprintf_r+0x124>
 8000a5e:	46a8      	mov	r8, r5
 8000a60:	4655      	mov	r5, sl
 8000a62:	e77e      	b.n	8000962 <_vfiprintf_r+0x136>
 8000a64:	9b05      	ldr	r3, [sp, #20]
 8000a66:	3307      	adds	r3, #7
 8000a68:	f023 0307 	bic.w	r3, r3, #7
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	9305      	str	r3, [sp, #20]
 8000a70:	e791      	b.n	8000996 <_vfiprintf_r+0x16a>
 8000a72:	4249      	negs	r1, r1
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	9109      	str	r1, [sp, #36]	; 0x24
 8000a7a:	9306      	str	r3, [sp, #24]
 8000a7c:	e75c      	b.n	8000938 <_vfiprintf_r+0x10c>
 8000a7e:	ab05      	add	r3, sp, #20
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	465a      	mov	r2, fp
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <_vfiprintf_r+0x2c4>)
 8000a86:	a906      	add	r1, sp, #24
 8000a88:	9803      	ldr	r0, [sp, #12]
 8000a8a:	f000 f8d3 	bl	8000c34 <_printf_i>
 8000a8e:	4681      	mov	r9, r0
 8000a90:	e77e      	b.n	8000990 <_vfiprintf_r+0x164>
 8000a92:	2300      	movs	r3, #0
 8000a94:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000a98:	2a09      	cmp	r2, #9
 8000a9a:	9307      	str	r3, [sp, #28]
 8000a9c:	d901      	bls.n	8000aa2 <_vfiprintf_r+0x276>
 8000a9e:	e015      	b.n	8000acc <_vfiprintf_r+0x2a0>
 8000aa0:	4655      	mov	r5, sl
 8000aa2:	7869      	ldrb	r1, [r5, #1]
 8000aa4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aa8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000aac:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000ab0:	2a09      	cmp	r2, #9
 8000ab2:	f105 0a01 	add.w	sl, r5, #1
 8000ab6:	d9f3      	bls.n	8000aa0 <_vfiprintf_r+0x274>
 8000ab8:	3502      	adds	r5, #2
 8000aba:	9307      	str	r3, [sp, #28]
 8000abc:	e740      	b.n	8000940 <_vfiprintf_r+0x114>
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac2:	4682      	mov	sl, r0
 8000ac4:	9307      	str	r3, [sp, #28]
 8000ac6:	e73b      	b.n	8000940 <_vfiprintf_r+0x114>
 8000ac8:	4644      	mov	r4, r8
 8000aca:	e701      	b.n	80008d0 <_vfiprintf_r+0xa4>
 8000acc:	46aa      	mov	sl, r5
 8000ace:	3501      	adds	r5, #1
 8000ad0:	e736      	b.n	8000940 <_vfiprintf_r+0x114>
 8000ad2:	bf00      	nop
 8000ad4:	08009dec 	.word	0x08009dec
 8000ad8:	08009dcc 	.word	0x08009dcc
 8000adc:	08009dac 	.word	0x08009dac
 8000ae0:	08009e24 	.word	0x08009e24
 8000ae4:	08009e2c 	.word	0x08009e2c
 8000ae8:	08009e30 	.word	0x08009e30
 8000aec:	00000000 	.word	0x00000000
 8000af0:	080007e1 	.word	0x080007e1

08000af4 <vfiprintf>:
 8000af4:	b410      	push	{r4}
 8000af6:	4c04      	ldr	r4, [pc, #16]	; (8000b08 <vfiprintf+0x14>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	460a      	mov	r2, r1
 8000afc:	4601      	mov	r1, r0
 8000afe:	6820      	ldr	r0, [r4, #0]
 8000b00:	bc10      	pop	{r4}
 8000b02:	f7ff be93 	b.w	800082c <_vfiprintf_r>
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <_printf_common>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	460c      	mov	r4, r1
 8000b12:	6909      	ldr	r1, [r1, #16]
 8000b14:	68a5      	ldr	r5, [r4, #8]
 8000b16:	4691      	mov	r9, r2
 8000b18:	428d      	cmp	r5, r1
 8000b1a:	bfb8      	it	lt
 8000b1c:	460d      	movlt	r5, r1
 8000b1e:	6015      	str	r5, [r2, #0]
 8000b20:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8000b24:	4606      	mov	r6, r0
 8000b26:	461f      	mov	r7, r3
 8000b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b2c:	b111      	cbz	r1, 8000b34 <_printf_common+0x28>
 8000b2e:	1c6a      	adds	r2, r5, #1
 8000b30:	f8c9 2000 	str.w	r2, [r9]
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	0699      	lsls	r1, r3, #26
 8000b38:	d55c      	bpl.n	8000bf4 <_printf_common+0xe8>
 8000b3a:	f8d9 2000 	ldr.w	r2, [r9]
 8000b3e:	3202      	adds	r2, #2
 8000b40:	f8c9 2000 	str.w	r2, [r9]
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	f013 0f06 	tst.w	r3, #6
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	d11d      	bne.n	8000b8a <_printf_common+0x7e>
 8000b4e:	68e1      	ldr	r1, [r4, #12]
 8000b50:	1a8a      	subs	r2, r1, r2
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	bfd8      	it	le
 8000b56:	4619      	movle	r1, r3
 8000b58:	dd17      	ble.n	8000b8a <_printf_common+0x7e>
 8000b5a:	2500      	movs	r5, #0
 8000b5c:	f104 0a19 	add.w	sl, r4, #25
 8000b60:	e005      	b.n	8000b6e <_printf_common+0x62>
 8000b62:	68e3      	ldr	r3, [r4, #12]
 8000b64:	f8d9 2000 	ldr.w	r2, [r9]
 8000b68:	1a9b      	subs	r3, r3, r2
 8000b6a:	42ab      	cmp	r3, r5
 8000b6c:	dd0c      	ble.n	8000b88 <_printf_common+0x7c>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	4652      	mov	r2, sl
 8000b72:	4639      	mov	r1, r7
 8000b74:	4630      	mov	r0, r6
 8000b76:	47c0      	blx	r8
 8000b78:	3001      	adds	r0, #1
 8000b7a:	f105 0501 	add.w	r5, r5, #1
 8000b7e:	d1f0      	bne.n	8000b62 <_printf_common+0x56>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b88:	6821      	ldr	r1, [r4, #0]
 8000b8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000b8e:	3300      	adds	r3, #0
 8000b90:	bf18      	it	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	068a      	lsls	r2, r1, #26
 8000b96:	d50a      	bpl.n	8000bae <_printf_common+0xa2>
 8000b98:	2130      	movs	r1, #48	; 0x30
 8000b9a:	18e2      	adds	r2, r4, r3
 8000b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	4422      	add	r2, r4
 8000ba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000bac:	3302      	adds	r3, #2
 8000bae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000bb2:	4639      	mov	r1, r7
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	47c0      	blx	r8
 8000bb8:	3001      	adds	r0, #1
 8000bba:	d0e1      	beq.n	8000b80 <_printf_common+0x74>
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	68a2      	ldr	r2, [r4, #8]
 8000bc0:	f003 0306 	and.w	r3, r3, #6
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	6921      	ldr	r1, [r4, #16]
 8000bc8:	d01d      	beq.n	8000c06 <_printf_common+0xfa>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	dd26      	ble.n	8000c1c <_printf_common+0x110>
 8000bce:	f04f 0900 	mov.w	r9, #0
 8000bd2:	1a52      	subs	r2, r2, r1
 8000bd4:	4491      	add	r9, r2
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	341a      	adds	r4, #26
 8000bda:	e001      	b.n	8000be0 <_printf_common+0xd4>
 8000bdc:	454d      	cmp	r5, r9
 8000bde:	da1d      	bge.n	8000c1c <_printf_common+0x110>
 8000be0:	2301      	movs	r3, #1
 8000be2:	4622      	mov	r2, r4
 8000be4:	4639      	mov	r1, r7
 8000be6:	4630      	mov	r0, r6
 8000be8:	47c0      	blx	r8
 8000bea:	3001      	adds	r0, #1
 8000bec:	f105 0501 	add.w	r5, r5, #1
 8000bf0:	d1f4      	bne.n	8000bdc <_printf_common+0xd0>
 8000bf2:	e7c5      	b.n	8000b80 <_printf_common+0x74>
 8000bf4:	f013 0f06 	tst.w	r3, #6
 8000bf8:	d013      	beq.n	8000c22 <_printf_common+0x116>
 8000bfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000bfe:	3300      	adds	r3, #0
 8000c00:	bf18      	it	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	e7d3      	b.n	8000bae <_printf_common+0xa2>
 8000c06:	f8d9 0000 	ldr.w	r0, [r9]
 8000c0a:	68e3      	ldr	r3, [r4, #12]
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	eba3 0300 	sub.w	r3, r3, r0
 8000c12:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
 8000c16:	dcdc      	bgt.n	8000bd2 <_printf_common+0xc6>
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dcdc      	bgt.n	8000bd6 <_printf_common+0xca>
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	68e1      	ldr	r1, [r4, #12]
 8000c24:	f8d9 2000 	ldr.w	r2, [r9]
 8000c28:	1a8a      	subs	r2, r1, r2
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	bfd8      	it	le
 8000c2e:	4619      	movle	r1, r3
 8000c30:	dc93      	bgt.n	8000b5a <_printf_common+0x4e>
 8000c32:	e7aa      	b.n	8000b8a <_printf_common+0x7e>

08000c34 <_printf_i>:
 8000c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c38:	460c      	mov	r4, r1
 8000c3a:	7e09      	ldrb	r1, [r1, #24]
 8000c3c:	b085      	sub	sp, #20
 8000c3e:	296e      	cmp	r1, #110	; 0x6e
 8000c40:	4606      	mov	r6, r0
 8000c42:	4617      	mov	r7, r2
 8000c44:	4698      	mov	r8, r3
 8000c46:	f104 0c43 	add.w	ip, r4, #67	; 0x43
 8000c4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000c4c:	d06d      	beq.n	8000d2a <_printf_i+0xf6>
 8000c4e:	d939      	bls.n	8000cc4 <_printf_i+0x90>
 8000c50:	2973      	cmp	r1, #115	; 0x73
 8000c52:	f000 80f4 	beq.w	8000e3e <_printf_i+0x20a>
 8000c56:	d944      	bls.n	8000ce2 <_printf_i+0xae>
 8000c58:	2975      	cmp	r1, #117	; 0x75
 8000c5a:	f000 8102 	beq.w	8000e62 <_printf_i+0x22e>
 8000c5e:	2978      	cmp	r1, #120	; 0x78
 8000c60:	f040 810f 	bne.w	8000e82 <_printf_i+0x24e>
 8000c64:	2378      	movs	r3, #120	; 0x78
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	f8df e254 	ldr.w	lr, [pc, #596]	; 8000ec0 <_printf_i+0x28c>
 8000c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c70:	6801      	ldr	r1, [r0, #0]
 8000c72:	0615      	lsls	r5, r2, #24
 8000c74:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c78:	6001      	str	r1, [r0, #0]
 8000c7a:	f140 80a1 	bpl.w	8000dc0 <_printf_i+0x18c>
 8000c7e:	07d1      	lsls	r1, r2, #31
 8000c80:	bf44      	itt	mi
 8000c82:	f042 0220 	orrmi.w	r2, r2, #32
 8000c86:	6022      	strmi	r2, [r4, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 8093 	beq.w	8000db4 <_printf_i+0x180>
 8000c8e:	2210      	movs	r2, #16
 8000c90:	2100      	movs	r1, #0
 8000c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000c96:	6860      	ldr	r0, [r4, #4]
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	60a0      	str	r0, [r4, #8]
 8000c9c:	f2c0 80c6 	blt.w	8000e2c <_printf_i+0x1f8>
 8000ca0:	6821      	ldr	r1, [r4, #0]
 8000ca2:	f021 0104 	bic.w	r1, r1, #4
 8000ca6:	6021      	str	r1, [r4, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f040 80a2 	bne.w	8000df2 <_printf_i+0x1be>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	f040 80be 	bne.w	8000e30 <_printf_i+0x1fc>
 8000cb4:	4665      	mov	r5, ip
 8000cb6:	2a08      	cmp	r2, #8
 8000cb8:	f000 80ab 	beq.w	8000e12 <_printf_i+0x1de>
 8000cbc:	ebac 0305 	sub.w	r3, ip, r5
 8000cc0:	6123      	str	r3, [r4, #16]
 8000cc2:	e041      	b.n	8000d48 <_printf_i+0x114>
 8000cc4:	2963      	cmp	r1, #99	; 0x63
 8000cc6:	f000 80e3 	beq.w	8000e90 <_printf_i+0x25c>
 8000cca:	d81a      	bhi.n	8000d02 <_printf_i+0xce>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d038      	beq.n	8000d42 <_printf_i+0x10e>
 8000cd0:	2958      	cmp	r1, #88	; 0x58
 8000cd2:	f040 80d6 	bne.w	8000e82 <_printf_i+0x24e>
 8000cd6:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8000cda:	6822      	ldr	r2, [r4, #0]
 8000cdc:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8000ec4 <_printf_i+0x290>
 8000ce0:	e7c6      	b.n	8000c70 <_printf_i+0x3c>
 8000ce2:	296f      	cmp	r1, #111	; 0x6f
 8000ce4:	f000 80bd 	beq.w	8000e62 <_printf_i+0x22e>
 8000ce8:	2970      	cmp	r1, #112	; 0x70
 8000cea:	f040 80ca 	bne.w	8000e82 <_printf_i+0x24e>
 8000cee:	2378      	movs	r3, #120	; 0x78
 8000cf0:	6822      	ldr	r2, [r4, #0]
 8000cf2:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8000ec0 <_printf_i+0x28c>
 8000cf6:	f042 0220 	orr.w	r2, r2, #32
 8000cfa:	6022      	str	r2, [r4, #0]
 8000cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000d00:	e7b6      	b.n	8000c70 <_printf_i+0x3c>
 8000d02:	2964      	cmp	r1, #100	; 0x64
 8000d04:	d002      	beq.n	8000d0c <_printf_i+0xd8>
 8000d06:	2969      	cmp	r1, #105	; 0x69
 8000d08:	f040 80bb 	bne.w	8000e82 <_printf_i+0x24e>
 8000d0c:	6822      	ldr	r2, [r4, #0]
 8000d0e:	6803      	ldr	r3, [r0, #0]
 8000d10:	0611      	lsls	r1, r2, #24
 8000d12:	f103 0504 	add.w	r5, r3, #4
 8000d16:	d557      	bpl.n	8000dc8 <_printf_i+0x194>
 8000d18:	6819      	ldr	r1, [r3, #0]
 8000d1a:	6005      	str	r5, [r0, #0]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	2900      	cmp	r1, #0
 8000d20:	db59      	blt.n	8000dd6 <_printf_i+0x1a2>
 8000d22:	220a      	movs	r2, #10
 8000d24:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8000ec4 <_printf_i+0x290>
 8000d28:	e7b5      	b.n	8000c96 <_printf_i+0x62>
 8000d2a:	6803      	ldr	r3, [r0, #0]
 8000d2c:	6822      	ldr	r2, [r4, #0]
 8000d2e:	1d1d      	adds	r5, r3, #4
 8000d30:	6961      	ldr	r1, [r4, #20]
 8000d32:	6005      	str	r5, [r0, #0]
 8000d34:	0615      	lsls	r5, r2, #24
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	d402      	bmi.n	8000d40 <_printf_i+0x10c>
 8000d3a:	0650      	lsls	r0, r2, #25
 8000d3c:	f100 80bb 	bmi.w	8000eb6 <_printf_i+0x282>
 8000d40:	6019      	str	r1, [r3, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	4665      	mov	r5, ip
 8000d46:	6123      	str	r3, [r4, #16]
 8000d48:	f8cd 8000 	str.w	r8, [sp]
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	aa03      	add	r2, sp, #12
 8000d50:	4621      	mov	r1, r4
 8000d52:	4630      	mov	r0, r6
 8000d54:	f7ff feda 	bl	8000b0c <_printf_common>
 8000d58:	3001      	adds	r0, #1
 8000d5a:	d020      	beq.n	8000d9e <_printf_i+0x16a>
 8000d5c:	462a      	mov	r2, r5
 8000d5e:	6923      	ldr	r3, [r4, #16]
 8000d60:	4639      	mov	r1, r7
 8000d62:	4630      	mov	r0, r6
 8000d64:	47c0      	blx	r8
 8000d66:	3001      	adds	r0, #1
 8000d68:	d019      	beq.n	8000d9e <_printf_i+0x16a>
 8000d6a:	6822      	ldr	r2, [r4, #0]
 8000d6c:	9803      	ldr	r0, [sp, #12]
 8000d6e:	0792      	lsls	r2, r2, #30
 8000d70:	68e3      	ldr	r3, [r4, #12]
 8000d72:	d519      	bpl.n	8000da8 <_printf_i+0x174>
 8000d74:	1a1a      	subs	r2, r3, r0
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	dd16      	ble.n	8000da8 <_printf_i+0x174>
 8000d7a:	2500      	movs	r5, #0
 8000d7c:	f104 0919 	add.w	r9, r4, #25
 8000d80:	e004      	b.n	8000d8c <_printf_i+0x158>
 8000d82:	68e3      	ldr	r3, [r4, #12]
 8000d84:	9803      	ldr	r0, [sp, #12]
 8000d86:	1a1a      	subs	r2, r3, r0
 8000d88:	42aa      	cmp	r2, r5
 8000d8a:	dd0d      	ble.n	8000da8 <_printf_i+0x174>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	464a      	mov	r2, r9
 8000d90:	4639      	mov	r1, r7
 8000d92:	4630      	mov	r0, r6
 8000d94:	47c0      	blx	r8
 8000d96:	3001      	adds	r0, #1
 8000d98:	f105 0501 	add.w	r5, r5, #1
 8000d9c:	d1f1      	bne.n	8000d82 <_printf_i+0x14e>
 8000d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da2:	b005      	add	sp, #20
 8000da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000da8:	4298      	cmp	r0, r3
 8000daa:	bfb8      	it	lt
 8000dac:	4618      	movlt	r0, r3
 8000dae:	b005      	add	sp, #20
 8000db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000db4:	6821      	ldr	r1, [r4, #0]
 8000db6:	2210      	movs	r2, #16
 8000db8:	f021 0120 	bic.w	r1, r1, #32
 8000dbc:	6021      	str	r1, [r4, #0]
 8000dbe:	e767      	b.n	8000c90 <_printf_i+0x5c>
 8000dc0:	0650      	lsls	r0, r2, #25
 8000dc2:	bf48      	it	mi
 8000dc4:	b29b      	uxthmi	r3, r3
 8000dc6:	e75a      	b.n	8000c7e <_printf_i+0x4a>
 8000dc8:	0651      	lsls	r1, r2, #25
 8000dca:	d5a5      	bpl.n	8000d18 <_printf_i+0xe4>
 8000dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd0:	6005      	str	r5, [r0, #0]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	e7a3      	b.n	8000d1e <_printf_i+0xea>
 8000dd6:	202d      	movs	r0, #45	; 0x2d
 8000dd8:	6861      	ldr	r1, [r4, #4]
 8000dda:	425b      	negs	r3, r3
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8000de2:	60a1      	str	r1, [r4, #8]
 8000de4:	db02      	blt.n	8000dec <_printf_i+0x1b8>
 8000de6:	f022 0204 	bic.w	r2, r2, #4
 8000dea:	6022      	str	r2, [r4, #0]
 8000dec:	220a      	movs	r2, #10
 8000dee:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 8000ec4 <_printf_i+0x290>
 8000df2:	4665      	mov	r5, ip
 8000df4:	e000      	b.n	8000df8 <_printf_i+0x1c4>
 8000df6:	460b      	mov	r3, r1
 8000df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000dfc:	fb02 3011 	mls	r0, r2, r1, r3
 8000e00:	f81e 0000 	ldrb.w	r0, [lr, r0]
 8000e04:	4293      	cmp	r3, r2
 8000e06:	f805 0d01 	strb.w	r0, [r5, #-1]!
 8000e0a:	d2f4      	bcs.n	8000df6 <_printf_i+0x1c2>
 8000e0c:	2a08      	cmp	r2, #8
 8000e0e:	f47f af55 	bne.w	8000cbc <_printf_i+0x88>
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	07db      	lsls	r3, r3, #31
 8000e16:	f57f af51 	bpl.w	8000cbc <_printf_i+0x88>
 8000e1a:	6862      	ldr	r2, [r4, #4]
 8000e1c:	6923      	ldr	r3, [r4, #16]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	f73f af4c 	bgt.w	8000cbc <_printf_i+0x88>
 8000e24:	2330      	movs	r3, #48	; 0x30
 8000e26:	3d01      	subs	r5, #1
 8000e28:	702b      	strb	r3, [r5, #0]
 8000e2a:	e747      	b.n	8000cbc <_printf_i+0x88>
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e0      	bne.n	8000df2 <_printf_i+0x1be>
 8000e30:	f89e 3000 	ldrb.w	r3, [lr]
 8000e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e3c:	e73b      	b.n	8000cb6 <_printf_i+0x82>
 8000e3e:	6803      	ldr	r3, [r0, #0]
 8000e40:	6862      	ldr	r2, [r4, #4]
 8000e42:	1d19      	adds	r1, r3, #4
 8000e44:	6001      	str	r1, [r0, #0]
 8000e46:	681d      	ldr	r5, [r3, #0]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	f000 fd0a 	bl	8001864 <memchr>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d032      	beq.n	8000eba <_printf_i+0x286>
 8000e54:	1b40      	subs	r0, r0, r5
 8000e56:	6060      	str	r0, [r4, #4]
 8000e58:	6120      	str	r0, [r4, #16]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e60:	e772      	b.n	8000d48 <_printf_i+0x114>
 8000e62:	6822      	ldr	r2, [r4, #0]
 8000e64:	6803      	ldr	r3, [r0, #0]
 8000e66:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000e6a:	f103 0504 	add.w	r5, r3, #4
 8000e6e:	d01a      	beq.n	8000ea6 <_printf_i+0x272>
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6005      	str	r5, [r0, #0]
 8000e74:	296f      	cmp	r1, #111	; 0x6f
 8000e76:	bf0c      	ite	eq
 8000e78:	2208      	moveq	r2, #8
 8000e7a:	220a      	movne	r2, #10
 8000e7c:	f8df e044 	ldr.w	lr, [pc, #68]	; 8000ec4 <_printf_i+0x290>
 8000e80:	e706      	b.n	8000c90 <_printf_i+0x5c>
 8000e82:	2301      	movs	r3, #1
 8000e84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000e88:	6123      	str	r3, [r4, #16]
 8000e8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e8e:	e7e4      	b.n	8000e5a <_printf_i+0x226>
 8000e90:	2201      	movs	r2, #1
 8000e92:	6803      	ldr	r3, [r0, #0]
 8000e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e98:	1d19      	adds	r1, r3, #4
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6001      	str	r1, [r0, #0]
 8000e9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ea2:	6122      	str	r2, [r4, #16]
 8000ea4:	e7d9      	b.n	8000e5a <_printf_i+0x226>
 8000ea6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000eaa:	bf0d      	iteet	eq
 8000eac:	681b      	ldreq	r3, [r3, #0]
 8000eae:	6005      	strne	r5, [r0, #0]
 8000eb0:	881b      	ldrhne	r3, [r3, #0]
 8000eb2:	6005      	streq	r5, [r0, #0]
 8000eb4:	e7de      	b.n	8000e74 <_printf_i+0x240>
 8000eb6:	8019      	strh	r1, [r3, #0]
 8000eb8:	e743      	b.n	8000d42 <_printf_i+0x10e>
 8000eba:	6860      	ldr	r0, [r4, #4]
 8000ebc:	e7cc      	b.n	8000e58 <_printf_i+0x224>
 8000ebe:	bf00      	nop
 8000ec0:	08009e4c 	.word	0x08009e4c
 8000ec4:	08009e38 	.word	0x08009e38

08000ec8 <_putc_r>:
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
 8000ecc:	b082      	sub	sp, #8
 8000ece:	b108      	cbz	r0, 8000ed4 <_putc_r+0xc>
 8000ed0:	6983      	ldr	r3, [r0, #24]
 8000ed2:	b1d3      	cbz	r3, 8000f0a <_putc_r+0x42>
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <_putc_r+0x74>)
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d020      	beq.n	8000f1c <_putc_r+0x54>
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <_putc_r+0x78>)
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d025      	beq.n	8000f2c <_putc_r+0x64>
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <_putc_r+0x7c>)
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	bf08      	it	eq
 8000ee6:	68e2      	ldreq	r2, [r4, #12]
 8000ee8:	6893      	ldr	r3, [r2, #8]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	6093      	str	r3, [r2, #8]
 8000ef0:	da1a      	bge.n	8000f28 <_putc_r+0x60>
 8000ef2:	6990      	ldr	r0, [r2, #24]
 8000ef4:	4283      	cmp	r3, r0
 8000ef6:	db1b      	blt.n	8000f30 <_putc_r+0x68>
 8000ef8:	b2c8      	uxtb	r0, r1
 8000efa:	280a      	cmp	r0, #10
 8000efc:	d018      	beq.n	8000f30 <_putc_r+0x68>
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	1c5c      	adds	r4, r3, #1
 8000f02:	6014      	str	r4, [r2, #0]
 8000f04:	7019      	strb	r1, [r3, #0]
 8000f06:	b002      	add	sp, #8
 8000f08:	bd10      	pop	{r4, pc}
 8000f0a:	e9cd 1200 	strd	r1, r2, [sp]
 8000f0e:	f7ff fb7b 	bl	8000608 <__sinit>
 8000f12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <_putc_r+0x74>)
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d1de      	bne.n	8000eda <_putc_r+0x12>
 8000f1c:	6862      	ldr	r2, [r4, #4]
 8000f1e:	6893      	ldr	r3, [r2, #8]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	6093      	str	r3, [r2, #8]
 8000f26:	dbe4      	blt.n	8000ef2 <_putc_r+0x2a>
 8000f28:	b2c8      	uxtb	r0, r1
 8000f2a:	e7e8      	b.n	8000efe <_putc_r+0x36>
 8000f2c:	68a2      	ldr	r2, [r4, #8]
 8000f2e:	e7db      	b.n	8000ee8 <_putc_r+0x20>
 8000f30:	4620      	mov	r0, r4
 8000f32:	b002      	add	sp, #8
 8000f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f38:	f000 b8a6 	b.w	8001088 <__swbuf_r>
 8000f3c:	08009dec 	.word	0x08009dec
 8000f40:	08009dcc 	.word	0x08009dcc
 8000f44:	08009dac 	.word	0x08009dac

08000f48 <putc>:
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <putc+0x7c>)
 8000f4a:	b570      	push	{r4, r5, r6, lr}
 8000f4c:	681d      	ldr	r5, [r3, #0]
 8000f4e:	4606      	mov	r6, r0
 8000f50:	460c      	mov	r4, r1
 8000f52:	b10d      	cbz	r5, 8000f58 <putc+0x10>
 8000f54:	69ab      	ldr	r3, [r5, #24]
 8000f56:	b1cb      	cbz	r3, 8000f8c <putc+0x44>
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <putc+0x80>)
 8000f5a:	429c      	cmp	r4, r3
 8000f5c:	d01c      	beq.n	8000f98 <putc+0x50>
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <putc+0x84>)
 8000f60:	429c      	cmp	r4, r3
 8000f62:	d025      	beq.n	8000fb0 <putc+0x68>
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <putc+0x88>)
 8000f66:	429c      	cmp	r4, r3
 8000f68:	bf08      	it	eq
 8000f6a:	68ec      	ldreq	r4, [r5, #12]
 8000f6c:	68a3      	ldr	r3, [r4, #8]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	60a3      	str	r3, [r4, #8]
 8000f74:	da16      	bge.n	8000fa4 <putc+0x5c>
 8000f76:	69a2      	ldr	r2, [r4, #24]
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	db1b      	blt.n	8000fb4 <putc+0x6c>
 8000f7c:	b2f0      	uxtb	r0, r6
 8000f7e:	280a      	cmp	r0, #10
 8000f80:	d018      	beq.n	8000fb4 <putc+0x6c>
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	6022      	str	r2, [r4, #0]
 8000f88:	701e      	strb	r6, [r3, #0]
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	f7ff fb3b 	bl	8000608 <__sinit>
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <putc+0x80>)
 8000f94:	429c      	cmp	r4, r3
 8000f96:	d1e2      	bne.n	8000f5e <putc+0x16>
 8000f98:	686c      	ldr	r4, [r5, #4]
 8000f9a:	68a3      	ldr	r3, [r4, #8]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	60a3      	str	r3, [r4, #8]
 8000fa2:	dbe8      	blt.n	8000f76 <putc+0x2e>
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	b2f0      	uxtb	r0, r6
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	6022      	str	r2, [r4, #0]
 8000fac:	701e      	strb	r6, [r3, #0]
 8000fae:	bd70      	pop	{r4, r5, r6, pc}
 8000fb0:	68ac      	ldr	r4, [r5, #8]
 8000fb2:	e7db      	b.n	8000f6c <putc+0x24>
 8000fb4:	4622      	mov	r2, r4
 8000fb6:	4631      	mov	r1, r6
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000fbe:	f000 b863 	b.w	8001088 <__swbuf_r>
 8000fc2:	bf00      	nop
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	08009dec 	.word	0x08009dec
 8000fcc:	08009dcc 	.word	0x08009dcc
 8000fd0:	08009dac 	.word	0x08009dac

08000fd4 <_sbrk_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	4c06      	ldr	r4, [pc, #24]	; (8000ff4 <_sbrk_r+0x20>)
 8000fda:	4605      	mov	r5, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	6023      	str	r3, [r4, #0]
 8000fe0:	f001 f8de 	bl	80021a0 <_sbrk>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d000      	beq.n	8000fea <_sbrk_r+0x16>
 8000fe8:	bd38      	pop	{r3, r4, r5, pc}
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0fb      	beq.n	8000fe8 <_sbrk_r+0x14>
 8000ff0:	602b      	str	r3, [r5, #0]
 8000ff2:	bd38      	pop	{r3, r4, r5, pc}
 8000ff4:	20002310 	.word	0x20002310

08000ff8 <__sread>:
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001000:	f000 fd5a 	bl	8001ab8 <_read_r>
 8001004:	2800      	cmp	r0, #0
 8001006:	db03      	blt.n	8001010 <__sread+0x18>
 8001008:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800100a:	4403      	add	r3, r0
 800100c:	6563      	str	r3, [r4, #84]	; 0x54
 800100e:	bd10      	pop	{r4, pc}
 8001010:	89a3      	ldrh	r3, [r4, #12]
 8001012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001016:	81a3      	strh	r3, [r4, #12]
 8001018:	bd10      	pop	{r4, pc}
 800101a:	bf00      	nop

0800101c <__seofread>:
 800101c:	2000      	movs	r0, #0
 800101e:	4770      	bx	lr

08001020 <__swrite>:
 8001020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001024:	f9b1 400c 	ldrsh.w	r4, [r1, #12]
 8001028:	4698      	mov	r8, r3
 800102a:	05e3      	lsls	r3, r4, #23
 800102c:	460d      	mov	r5, r1
 800102e:	4617      	mov	r7, r2
 8001030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001034:	4606      	mov	r6, r0
 8001036:	d409      	bmi.n	800104c <__swrite+0x2c>
 8001038:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800103c:	81ac      	strh	r4, [r5, #12]
 800103e:	4643      	mov	r3, r8
 8001040:	463a      	mov	r2, r7
 8001042:	4630      	mov	r0, r6
 8001044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001048:	f000 b87e 	b.w	8001148 <_write_r>
 800104c:	2302      	movs	r3, #2
 800104e:	2200      	movs	r2, #0
 8001050:	f000 fb7a 	bl	8001748 <_lseek_r>
 8001054:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8001058:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
 800105c:	e7ec      	b.n	8001038 <__swrite+0x18>
 800105e:	bf00      	nop

08001060 <__sseek>:
 8001060:	b510      	push	{r4, lr}
 8001062:	460c      	mov	r4, r1
 8001064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001068:	f000 fb6e 	bl	8001748 <_lseek_r>
 800106c:	89a3      	ldrh	r3, [r4, #12]
 800106e:	1c42      	adds	r2, r0, #1
 8001070:	bf0e      	itee	eq
 8001072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800107a:	6560      	strne	r0, [r4, #84]	; 0x54
 800107c:	81a3      	strh	r3, [r4, #12]
 800107e:	bd10      	pop	{r4, pc}

08001080 <__sclose>:
 8001080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001084:	f000 b8f6 	b.w	8001274 <_close_r>

08001088 <__swbuf_r>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	460d      	mov	r5, r1
 800108c:	4614      	mov	r4, r2
 800108e:	4606      	mov	r6, r0
 8001090:	b108      	cbz	r0, 8001096 <__swbuf_r+0xe>
 8001092:	6983      	ldr	r3, [r0, #24]
 8001094:	b343      	cbz	r3, 80010e8 <__swbuf_r+0x60>
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <__swbuf_r+0xa4>)
 8001098:	429c      	cmp	r4, r3
 800109a:	d02a      	beq.n	80010f2 <__swbuf_r+0x6a>
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <__swbuf_r+0xa8>)
 800109e:	429c      	cmp	r4, r3
 80010a0:	d029      	beq.n	80010f6 <__swbuf_r+0x6e>
 80010a2:	4b24      	ldr	r3, [pc, #144]	; (8001134 <__swbuf_r+0xac>)
 80010a4:	429c      	cmp	r4, r3
 80010a6:	bf08      	it	eq
 80010a8:	68f4      	ldreq	r4, [r6, #12]
 80010aa:	69a2      	ldr	r2, [r4, #24]
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	60a2      	str	r2, [r4, #8]
 80010b0:	071a      	lsls	r2, r3, #28
 80010b2:	d522      	bpl.n	80010fa <__swbuf_r+0x72>
 80010b4:	6923      	ldr	r3, [r4, #16]
 80010b6:	b303      	cbz	r3, 80010fa <__swbuf_r+0x72>
 80010b8:	6822      	ldr	r2, [r4, #0]
 80010ba:	6961      	ldr	r1, [r4, #20]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	b2ed      	uxtb	r5, r5
 80010c0:	4299      	cmp	r1, r3
 80010c2:	462f      	mov	r7, r5
 80010c4:	dd29      	ble.n	800111a <__swbuf_r+0x92>
 80010c6:	3301      	adds	r3, #1
 80010c8:	68a1      	ldr	r1, [r4, #8]
 80010ca:	1c50      	adds	r0, r2, #1
 80010cc:	3901      	subs	r1, #1
 80010ce:	60a1      	str	r1, [r4, #8]
 80010d0:	6020      	str	r0, [r4, #0]
 80010d2:	7015      	strb	r5, [r2, #0]
 80010d4:	6962      	ldr	r2, [r4, #20]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d016      	beq.n	8001108 <__swbuf_r+0x80>
 80010da:	89a3      	ldrh	r3, [r4, #12]
 80010dc:	07db      	lsls	r3, r3, #31
 80010de:	d501      	bpl.n	80010e4 <__swbuf_r+0x5c>
 80010e0:	2d0a      	cmp	r5, #10
 80010e2:	d011      	beq.n	8001108 <__swbuf_r+0x80>
 80010e4:	4638      	mov	r0, r7
 80010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010e8:	f7ff fa8e 	bl	8000608 <__sinit>
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <__swbuf_r+0xa4>)
 80010ee:	429c      	cmp	r4, r3
 80010f0:	d1d4      	bne.n	800109c <__swbuf_r+0x14>
 80010f2:	6874      	ldr	r4, [r6, #4]
 80010f4:	e7d9      	b.n	80010aa <__swbuf_r+0x22>
 80010f6:	68b4      	ldr	r4, [r6, #8]
 80010f8:	e7d7      	b.n	80010aa <__swbuf_r+0x22>
 80010fa:	4621      	mov	r1, r4
 80010fc:	4630      	mov	r0, r6
 80010fe:	f000 f839 	bl	8001174 <__swsetup_r>
 8001102:	b938      	cbnz	r0, 8001114 <__swbuf_r+0x8c>
 8001104:	6923      	ldr	r3, [r4, #16]
 8001106:	e7d7      	b.n	80010b8 <__swbuf_r+0x30>
 8001108:	4621      	mov	r1, r4
 800110a:	4630      	mov	r0, r6
 800110c:	f000 f95a 	bl	80013c4 <_fflush_r>
 8001110:	2800      	cmp	r0, #0
 8001112:	d0e7      	beq.n	80010e4 <__swbuf_r+0x5c>
 8001114:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001118:	e7e4      	b.n	80010e4 <__swbuf_r+0x5c>
 800111a:	4621      	mov	r1, r4
 800111c:	4630      	mov	r0, r6
 800111e:	f000 f951 	bl	80013c4 <_fflush_r>
 8001122:	2800      	cmp	r0, #0
 8001124:	d1f6      	bne.n	8001114 <__swbuf_r+0x8c>
 8001126:	2301      	movs	r3, #1
 8001128:	6822      	ldr	r2, [r4, #0]
 800112a:	e7cd      	b.n	80010c8 <__swbuf_r+0x40>
 800112c:	08009dec 	.word	0x08009dec
 8001130:	08009dcc 	.word	0x08009dcc
 8001134:	08009dac 	.word	0x08009dac

08001138 <__swbuf>:
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <__swbuf+0xc>)
 800113a:	460a      	mov	r2, r1
 800113c:	4601      	mov	r1, r0
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	f7ff bfa2 	b.w	8001088 <__swbuf_r>
 8001144:	20000000 	.word	0x20000000

08001148 <_write_r>:
 8001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114a:	460e      	mov	r6, r1
 800114c:	2500      	movs	r5, #0
 800114e:	4c08      	ldr	r4, [pc, #32]	; (8001170 <_write_r+0x28>)
 8001150:	4611      	mov	r1, r2
 8001152:	4607      	mov	r7, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4630      	mov	r0, r6
 8001158:	6025      	str	r5, [r4, #0]
 800115a:	f000 ffd4 	bl	8002106 <_write>
 800115e:	1c43      	adds	r3, r0, #1
 8001160:	d000      	beq.n	8001164 <_write_r+0x1c>
 8001162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0fb      	beq.n	8001162 <_write_r+0x1a>
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800116e:	bf00      	nop
 8001170:	20002310 	.word	0x20002310

08001174 <__swsetup_r>:
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <__swsetup_r+0xf0>)
 8001176:	b570      	push	{r4, r5, r6, lr}
 8001178:	681d      	ldr	r5, [r3, #0]
 800117a:	4606      	mov	r6, r0
 800117c:	460c      	mov	r4, r1
 800117e:	b10d      	cbz	r5, 8001184 <__swsetup_r+0x10>
 8001180:	69ab      	ldr	r3, [r5, #24]
 8001182:	b1db      	cbz	r3, 80011bc <__swsetup_r+0x48>
 8001184:	4b38      	ldr	r3, [pc, #224]	; (8001268 <__swsetup_r+0xf4>)
 8001186:	429c      	cmp	r4, r3
 8001188:	d01e      	beq.n	80011c8 <__swsetup_r+0x54>
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <__swsetup_r+0xf8>)
 800118c:	429c      	cmp	r4, r3
 800118e:	d04a      	beq.n	8001226 <__swsetup_r+0xb2>
 8001190:	4b37      	ldr	r3, [pc, #220]	; (8001270 <__swsetup_r+0xfc>)
 8001192:	429c      	cmp	r4, r3
 8001194:	bf08      	it	eq
 8001196:	68ec      	ldreq	r4, [r5, #12]
 8001198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800119c:	b293      	uxth	r3, r2
 800119e:	0719      	lsls	r1, r3, #28
 80011a0:	d518      	bpl.n	80011d4 <__swsetup_r+0x60>
 80011a2:	6920      	ldr	r0, [r4, #16]
 80011a4:	b308      	cbz	r0, 80011ea <__swsetup_r+0x76>
 80011a6:	f013 0201 	ands.w	r2, r3, #1
 80011aa:	d02c      	beq.n	8001206 <__swsetup_r+0x92>
 80011ac:	2200      	movs	r2, #0
 80011ae:	6963      	ldr	r3, [r4, #20]
 80011b0:	60a2      	str	r2, [r4, #8]
 80011b2:	425b      	negs	r3, r3
 80011b4:	61a3      	str	r3, [r4, #24]
 80011b6:	b360      	cbz	r0, 8001212 <__swsetup_r+0x9e>
 80011b8:	2000      	movs	r0, #0
 80011ba:	bd70      	pop	{r4, r5, r6, pc}
 80011bc:	4628      	mov	r0, r5
 80011be:	f7ff fa23 	bl	8000608 <__sinit>
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <__swsetup_r+0xf4>)
 80011c4:	429c      	cmp	r4, r3
 80011c6:	d1e0      	bne.n	800118a <__swsetup_r+0x16>
 80011c8:	686c      	ldr	r4, [r5, #4]
 80011ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011ce:	b293      	uxth	r3, r2
 80011d0:	0719      	lsls	r1, r3, #28
 80011d2:	d4e6      	bmi.n	80011a2 <__swsetup_r+0x2e>
 80011d4:	06dd      	lsls	r5, r3, #27
 80011d6:	d53c      	bpl.n	8001252 <__swsetup_r+0xde>
 80011d8:	0758      	lsls	r0, r3, #29
 80011da:	d426      	bmi.n	800122a <__swsetup_r+0xb6>
 80011dc:	6920      	ldr	r0, [r4, #16]
 80011de:	f042 0308 	orr.w	r3, r2, #8
 80011e2:	81a3      	strh	r3, [r4, #12]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d1dd      	bne.n	80011a6 <__swsetup_r+0x32>
 80011ea:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80011ee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80011f2:	d0d8      	beq.n	80011a6 <__swsetup_r+0x32>
 80011f4:	4630      	mov	r0, r6
 80011f6:	4621      	mov	r1, r4
 80011f8:	f000 faea 	bl	80017d0 <__smakebuf_r>
 80011fc:	89a3      	ldrh	r3, [r4, #12]
 80011fe:	6920      	ldr	r0, [r4, #16]
 8001200:	f013 0201 	ands.w	r2, r3, #1
 8001204:	d1d2      	bne.n	80011ac <__swsetup_r+0x38>
 8001206:	0799      	lsls	r1, r3, #30
 8001208:	bf58      	it	pl
 800120a:	6962      	ldrpl	r2, [r4, #20]
 800120c:	60a2      	str	r2, [r4, #8]
 800120e:	2800      	cmp	r0, #0
 8001210:	d1d2      	bne.n	80011b8 <__swsetup_r+0x44>
 8001212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001216:	061a      	lsls	r2, r3, #24
 8001218:	d5cf      	bpl.n	80011ba <__swsetup_r+0x46>
 800121a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121e:	81a3      	strh	r3, [r4, #12]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001224:	bd70      	pop	{r4, r5, r6, pc}
 8001226:	68ac      	ldr	r4, [r5, #8]
 8001228:	e7b6      	b.n	8001198 <__swsetup_r+0x24>
 800122a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800122c:	b151      	cbz	r1, 8001244 <__swsetup_r+0xd0>
 800122e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001232:	4299      	cmp	r1, r3
 8001234:	d004      	beq.n	8001240 <__swsetup_r+0xcc>
 8001236:	4630      	mov	r0, r6
 8001238:	f000 fbc4 	bl	80019c4 <_free_r>
 800123c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001240:	2300      	movs	r3, #0
 8001242:	6363      	str	r3, [r4, #52]	; 0x34
 8001244:	2300      	movs	r3, #0
 8001246:	6920      	ldr	r0, [r4, #16]
 8001248:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800124c:	e9c4 0300 	strd	r0, r3, [r4]
 8001250:	e7c5      	b.n	80011de <__swsetup_r+0x6a>
 8001252:	2309      	movs	r3, #9
 8001254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001258:	6033      	str	r3, [r6, #0]
 800125a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800125e:	81a2      	strh	r2, [r4, #12]
 8001260:	bd70      	pop	{r4, r5, r6, pc}
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000
 8001268:	08009dec 	.word	0x08009dec
 800126c:	08009dcc 	.word	0x08009dcc
 8001270:	08009dac 	.word	0x08009dac

08001274 <_close_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	2300      	movs	r3, #0
 8001278:	4c06      	ldr	r4, [pc, #24]	; (8001294 <_close_r+0x20>)
 800127a:	4605      	mov	r5, r0
 800127c:	4608      	mov	r0, r1
 800127e:	6023      	str	r3, [r4, #0]
 8001280:	f000 ff5d 	bl	800213e <_close>
 8001284:	1c43      	adds	r3, r0, #1
 8001286:	d000      	beq.n	800128a <_close_r+0x16>
 8001288:	bd38      	pop	{r3, r4, r5, pc}
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0fb      	beq.n	8001288 <_close_r+0x14>
 8001290:	602b      	str	r3, [r5, #0]
 8001292:	bd38      	pop	{r3, r4, r5, pc}
 8001294:	20002310 	.word	0x20002310

08001298 <__sflush_r>:
 8001298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800129c:	898f      	ldrh	r7, [r1, #12]
 800129e:	460c      	mov	r4, r1
 80012a0:	073a      	lsls	r2, r7, #28
 80012a2:	4680      	mov	r8, r0
 80012a4:	d441      	bmi.n	800132a <__sflush_r+0x92>
 80012a6:	684b      	ldr	r3, [r1, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	dd59      	ble.n	8001360 <__sflush_r+0xc8>
 80012ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ae:	2e00      	cmp	r6, #0
 80012b0:	d053      	beq.n	800135a <__sflush_r+0xc2>
 80012b2:	2300      	movs	r3, #0
 80012b4:	f417 5280 	ands.w	r2, r7, #4096	; 0x1000
 80012b8:	f8d8 5000 	ldr.w	r5, [r8]
 80012bc:	6a21      	ldr	r1, [r4, #32]
 80012be:	f8c8 3000 	str.w	r3, [r8]
 80012c2:	d151      	bne.n	8001368 <__sflush_r+0xd0>
 80012c4:	2301      	movs	r3, #1
 80012c6:	4640      	mov	r0, r8
 80012c8:	47b0      	blx	r6
 80012ca:	1c43      	adds	r3, r0, #1
 80012cc:	d05f      	beq.n	800138e <__sflush_r+0xf6>
 80012ce:	89a7      	ldrh	r7, [r4, #12]
 80012d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012d2:	6a21      	ldr	r1, [r4, #32]
 80012d4:	077f      	lsls	r7, r7, #29
 80012d6:	d505      	bpl.n	80012e4 <__sflush_r+0x4c>
 80012d8:	6862      	ldr	r2, [r4, #4]
 80012da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012dc:	1a80      	subs	r0, r0, r2
 80012de:	b10b      	cbz	r3, 80012e4 <__sflush_r+0x4c>
 80012e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012e2:	1ac0      	subs	r0, r0, r3
 80012e4:	4602      	mov	r2, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	4640      	mov	r0, r8
 80012ea:	47b0      	blx	r6
 80012ec:	1c46      	adds	r6, r0, #1
 80012ee:	d145      	bne.n	800137c <__sflush_r+0xe4>
 80012f0:	f8d8 3000 	ldr.w	r3, [r8]
 80012f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d055      	beq.n	80013a8 <__sflush_r+0x110>
 80012fc:	2b1d      	cmp	r3, #29
 80012fe:	d001      	beq.n	8001304 <__sflush_r+0x6c>
 8001300:	2b16      	cmp	r3, #22
 8001302:	d15a      	bne.n	80013ba <__sflush_r+0x122>
 8001304:	2200      	movs	r2, #0
 8001306:	6923      	ldr	r3, [r4, #16]
 8001308:	e9c4 3200 	strd	r3, r2, [r4]
 800130c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800130e:	f8c8 5000 	str.w	r5, [r8]
 8001312:	b311      	cbz	r1, 800135a <__sflush_r+0xc2>
 8001314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001318:	4299      	cmp	r1, r3
 800131a:	d002      	beq.n	8001322 <__sflush_r+0x8a>
 800131c:	4640      	mov	r0, r8
 800131e:	f000 fb51 	bl	80019c4 <_free_r>
 8001322:	2000      	movs	r0, #0
 8001324:	6360      	str	r0, [r4, #52]	; 0x34
 8001326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800132a:	690e      	ldr	r6, [r1, #16]
 800132c:	b1ae      	cbz	r6, 800135a <__sflush_r+0xc2>
 800132e:	680d      	ldr	r5, [r1, #0]
 8001330:	600e      	str	r6, [r1, #0]
 8001332:	07b9      	lsls	r1, r7, #30
 8001334:	bf14      	ite	ne
 8001336:	2300      	movne	r3, #0
 8001338:	6963      	ldreq	r3, [r4, #20]
 800133a:	1bad      	subs	r5, r5, r6
 800133c:	60a3      	str	r3, [r4, #8]
 800133e:	e00a      	b.n	8001356 <__sflush_r+0xbe>
 8001340:	462b      	mov	r3, r5
 8001342:	4632      	mov	r2, r6
 8001344:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001346:	6a21      	ldr	r1, [r4, #32]
 8001348:	4640      	mov	r0, r8
 800134a:	47b8      	blx	r7
 800134c:	2800      	cmp	r0, #0
 800134e:	eba5 0500 	sub.w	r5, r5, r0
 8001352:	4406      	add	r6, r0
 8001354:	dd0a      	ble.n	800136c <__sflush_r+0xd4>
 8001356:	2d00      	cmp	r5, #0
 8001358:	dcf2      	bgt.n	8001340 <__sflush_r+0xa8>
 800135a:	2000      	movs	r0, #0
 800135c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	dca2      	bgt.n	80012ac <__sflush_r+0x14>
 8001366:	e7f8      	b.n	800135a <__sflush_r+0xc2>
 8001368:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800136a:	e7b3      	b.n	80012d4 <__sflush_r+0x3c>
 800136c:	89a3      	ldrh	r3, [r4, #12]
 800136e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001376:	81a3      	strh	r3, [r4, #12]
 8001378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800137c:	2300      	movs	r3, #0
 800137e:	6922      	ldr	r2, [r4, #16]
 8001380:	6063      	str	r3, [r4, #4]
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	6022      	str	r2, [r4, #0]
 8001386:	04da      	lsls	r2, r3, #19
 8001388:	d5c0      	bpl.n	800130c <__sflush_r+0x74>
 800138a:	6560      	str	r0, [r4, #84]	; 0x54
 800138c:	e7be      	b.n	800130c <__sflush_r+0x74>
 800138e:	f8d8 3000 	ldr.w	r3, [r8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d09b      	beq.n	80012ce <__sflush_r+0x36>
 8001396:	2b1d      	cmp	r3, #29
 8001398:	d00c      	beq.n	80013b4 <__sflush_r+0x11c>
 800139a:	2b16      	cmp	r3, #22
 800139c:	d00a      	beq.n	80013b4 <__sflush_r+0x11c>
 800139e:	89a3      	ldrh	r3, [r4, #12]
 80013a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a4:	81a3      	strh	r3, [r4, #12]
 80013a6:	e7d9      	b.n	800135c <__sflush_r+0xc4>
 80013a8:	6921      	ldr	r1, [r4, #16]
 80013aa:	e9c4 1300 	strd	r1, r3, [r4]
 80013ae:	04d3      	lsls	r3, r2, #19
 80013b0:	d5ac      	bpl.n	800130c <__sflush_r+0x74>
 80013b2:	e7ea      	b.n	800138a <__sflush_r+0xf2>
 80013b4:	f8c8 5000 	str.w	r5, [r8]
 80013b8:	e7cf      	b.n	800135a <__sflush_r+0xc2>
 80013ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013be:	81a2      	strh	r2, [r4, #12]
 80013c0:	e7cc      	b.n	800135c <__sflush_r+0xc4>
 80013c2:	bf00      	nop

080013c4 <_fflush_r>:
 80013c4:	690b      	ldr	r3, [r1, #16]
 80013c6:	b323      	cbz	r3, 8001412 <_fflush_r+0x4e>
 80013c8:	b510      	push	{r4, lr}
 80013ca:	4604      	mov	r4, r0
 80013cc:	b082      	sub	sp, #8
 80013ce:	b108      	cbz	r0, 80013d4 <_fflush_r+0x10>
 80013d0:	6983      	ldr	r3, [r0, #24]
 80013d2:	b1bb      	cbz	r3, 8001404 <_fflush_r+0x40>
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_fflush_r+0x54>)
 80013d6:	4299      	cmp	r1, r3
 80013d8:	d012      	beq.n	8001400 <_fflush_r+0x3c>
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <_fflush_r+0x58>)
 80013dc:	4299      	cmp	r1, r3
 80013de:	d016      	beq.n	800140e <_fflush_r+0x4a>
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <_fflush_r+0x5c>)
 80013e2:	4299      	cmp	r1, r3
 80013e4:	bf08      	it	eq
 80013e6:	68e1      	ldreq	r1, [r4, #12]
 80013e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80013ec:	b12b      	cbz	r3, 80013fa <_fflush_r+0x36>
 80013ee:	4620      	mov	r0, r4
 80013f0:	b002      	add	sp, #8
 80013f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013f6:	f7ff bf4f 	b.w	8001298 <__sflush_r>
 80013fa:	2000      	movs	r0, #0
 80013fc:	b002      	add	sp, #8
 80013fe:	bd10      	pop	{r4, pc}
 8001400:	6861      	ldr	r1, [r4, #4]
 8001402:	e7f1      	b.n	80013e8 <_fflush_r+0x24>
 8001404:	9101      	str	r1, [sp, #4]
 8001406:	f7ff f8ff 	bl	8000608 <__sinit>
 800140a:	9901      	ldr	r1, [sp, #4]
 800140c:	e7e2      	b.n	80013d4 <_fflush_r+0x10>
 800140e:	68a1      	ldr	r1, [r4, #8]
 8001410:	e7ea      	b.n	80013e8 <_fflush_r+0x24>
 8001412:	2000      	movs	r0, #0
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	08009dec 	.word	0x08009dec
 800141c:	08009dcc 	.word	0x08009dcc
 8001420:	08009dac 	.word	0x08009dac

08001424 <fflush>:
 8001424:	b120      	cbz	r0, 8001430 <fflush+0xc>
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <fflush+0x18>)
 8001428:	4601      	mov	r1, r0
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	f7ff bfca 	b.w	80013c4 <_fflush_r>
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <fflush+0x1c>)
 8001432:	4904      	ldr	r1, [pc, #16]	; (8001444 <fflush+0x20>)
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	f7ff b92b 	b.w	8000690 <_fwalk_reent>
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000
 8001440:	08009da8 	.word	0x08009da8
 8001444:	080013c5 	.word	0x080013c5

08001448 <__sfvwrite_r>:
 8001448:	6893      	ldr	r3, [r2, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80fc 	beq.w	8001648 <__sfvwrite_r+0x200>
 8001450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001454:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8001458:	460c      	mov	r4, r1
 800145a:	b29b      	uxth	r3, r3
 800145c:	0719      	lsls	r1, r3, #28
 800145e:	b083      	sub	sp, #12
 8001460:	4682      	mov	sl, r0
 8001462:	4690      	mov	r8, r2
 8001464:	d52b      	bpl.n	80014be <__sfvwrite_r+0x76>
 8001466:	6922      	ldr	r2, [r4, #16]
 8001468:	b34a      	cbz	r2, 80014be <__sfvwrite_r+0x76>
 800146a:	f013 0202 	ands.w	r2, r3, #2
 800146e:	f8d8 6000 	ldr.w	r6, [r8]
 8001472:	d033      	beq.n	80014dc <__sfvwrite_r+0x94>
 8001474:	2700      	movs	r7, #0
 8001476:	463d      	mov	r5, r7
 8001478:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 800147c:	6a21      	ldr	r1, [r4, #32]
 800147e:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8001744 <__sfvwrite_r+0x2fc>
 8001482:	b1c5      	cbz	r5, 80014b6 <__sfvwrite_r+0x6e>
 8001484:	454d      	cmp	r5, r9
 8001486:	462b      	mov	r3, r5
 8001488:	463a      	mov	r2, r7
 800148a:	bf28      	it	cs
 800148c:	464b      	movcs	r3, r9
 800148e:	4650      	mov	r0, sl
 8001490:	47d8      	blx	fp
 8001492:	2800      	cmp	r0, #0
 8001494:	f340 80ce 	ble.w	8001634 <__sfvwrite_r+0x1ec>
 8001498:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800149c:	4407      	add	r7, r0
 800149e:	1a1b      	subs	r3, r3, r0
 80014a0:	1a2d      	subs	r5, r5, r0
 80014a2:	f8c8 3008 	str.w	r3, [r8, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80b3 	beq.w	8001612 <__sfvwrite_r+0x1ca>
 80014ac:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 80014b0:	6a21      	ldr	r1, [r4, #32]
 80014b2:	2d00      	cmp	r5, #0
 80014b4:	d1e6      	bne.n	8001484 <__sfvwrite_r+0x3c>
 80014b6:	e9d6 7500 	ldrd	r7, r5, [r6]
 80014ba:	3608      	adds	r6, #8
 80014bc:	e7e1      	b.n	8001482 <__sfvwrite_r+0x3a>
 80014be:	4621      	mov	r1, r4
 80014c0:	4650      	mov	r0, sl
 80014c2:	f7ff fe57 	bl	8001174 <__swsetup_r>
 80014c6:	2800      	cmp	r0, #0
 80014c8:	f040 8137 	bne.w	800173a <__sfvwrite_r+0x2f2>
 80014cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014d0:	f8d8 6000 	ldr.w	r6, [r8]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	f013 0202 	ands.w	r2, r3, #2
 80014da:	d1cb      	bne.n	8001474 <__sfvwrite_r+0x2c>
 80014dc:	f013 0901 	ands.w	r9, r3, #1
 80014e0:	f040 80b4 	bne.w	800164c <__sfvwrite_r+0x204>
 80014e4:	464d      	mov	r5, r9
 80014e6:	68a7      	ldr	r7, [r4, #8]
 80014e8:	6820      	ldr	r0, [r4, #0]
 80014ea:	2d00      	cmp	r5, #0
 80014ec:	d055      	beq.n	800159a <__sfvwrite_r+0x152>
 80014ee:	059a      	lsls	r2, r3, #22
 80014f0:	f140 80c0 	bpl.w	8001674 <__sfvwrite_r+0x22c>
 80014f4:	42af      	cmp	r7, r5
 80014f6:	46bb      	mov	fp, r7
 80014f8:	f200 80ee 	bhi.w	80016d8 <__sfvwrite_r+0x290>
 80014fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8001500:	d02f      	beq.n	8001562 <__sfvwrite_r+0x11a>
 8001502:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 8001506:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800150a:	eba0 0b01 	sub.w	fp, r0, r1
 800150e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8001512:	1c68      	adds	r0, r5, #1
 8001514:	107f      	asrs	r7, r7, #1
 8001516:	4458      	add	r0, fp
 8001518:	42b8      	cmp	r0, r7
 800151a:	463a      	mov	r2, r7
 800151c:	bf84      	itt	hi
 800151e:	4607      	movhi	r7, r0
 8001520:	463a      	movhi	r2, r7
 8001522:	055b      	lsls	r3, r3, #21
 8001524:	f140 80f0 	bpl.w	8001708 <__sfvwrite_r+0x2c0>
 8001528:	4611      	mov	r1, r2
 800152a:	4650      	mov	r0, sl
 800152c:	f7ff f8d8 	bl	80006e0 <_malloc_r>
 8001530:	2800      	cmp	r0, #0
 8001532:	f000 80fc 	beq.w	800172e <__sfvwrite_r+0x2e6>
 8001536:	465a      	mov	r2, fp
 8001538:	6921      	ldr	r1, [r4, #16]
 800153a:	9001      	str	r0, [sp, #4]
 800153c:	f7fe fe56 	bl	80001ec <memcpy>
 8001540:	89a2      	ldrh	r2, [r4, #12]
 8001542:	9b01      	ldr	r3, [sp, #4]
 8001544:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8001548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800154c:	81a2      	strh	r2, [r4, #12]
 800154e:	eba7 020b 	sub.w	r2, r7, fp
 8001552:	eb03 000b 	add.w	r0, r3, fp
 8001556:	6167      	str	r7, [r4, #20]
 8001558:	46ab      	mov	fp, r5
 800155a:	462f      	mov	r7, r5
 800155c:	6123      	str	r3, [r4, #16]
 800155e:	6020      	str	r0, [r4, #0]
 8001560:	60a2      	str	r2, [r4, #8]
 8001562:	465a      	mov	r2, fp
 8001564:	4649      	mov	r1, r9
 8001566:	f000 f9c3 	bl	80018f0 <memmove>
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	68a2      	ldr	r2, [r4, #8]
 800156e:	445b      	add	r3, fp
 8001570:	46ab      	mov	fp, r5
 8001572:	2500      	movs	r5, #0
 8001574:	1bd7      	subs	r7, r2, r7
 8001576:	60a7      	str	r7, [r4, #8]
 8001578:	6023      	str	r3, [r4, #0]
 800157a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800157e:	44d9      	add	r9, fp
 8001580:	eba7 070b 	sub.w	r7, r7, fp
 8001584:	f8c8 7008 	str.w	r7, [r8, #8]
 8001588:	2f00      	cmp	r7, #0
 800158a:	d042      	beq.n	8001612 <__sfvwrite_r+0x1ca>
 800158c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001590:	68a7      	ldr	r7, [r4, #8]
 8001592:	b29b      	uxth	r3, r3
 8001594:	6820      	ldr	r0, [r4, #0]
 8001596:	2d00      	cmp	r5, #0
 8001598:	d1a9      	bne.n	80014ee <__sfvwrite_r+0xa6>
 800159a:	e9d6 9500 	ldrd	r9, r5, [r6]
 800159e:	3608      	adds	r6, #8
 80015a0:	e7a3      	b.n	80014ea <__sfvwrite_r+0xa2>
 80015a2:	f10b 0308 	add.w	r3, fp, #8
 80015a6:	f853 7c04 	ldr.w	r7, [r3, #-4]
 80015aa:	469b      	mov	fp, r3
 80015ac:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80015b0:	3308      	adds	r3, #8
 80015b2:	2f00      	cmp	r7, #0
 80015b4:	d0f7      	beq.n	80015a6 <__sfvwrite_r+0x15e>
 80015b6:	463a      	mov	r2, r7
 80015b8:	210a      	movs	r1, #10
 80015ba:	4630      	mov	r0, r6
 80015bc:	f000 f952 	bl	8001864 <memchr>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d054      	beq.n	800166e <__sfvwrite_r+0x226>
 80015c4:	3001      	adds	r0, #1
 80015c6:	eba0 0906 	sub.w	r9, r0, r6
 80015ca:	464b      	mov	r3, r9
 80015cc:	6820      	ldr	r0, [r4, #0]
 80015ce:	6921      	ldr	r1, [r4, #16]
 80015d0:	42bb      	cmp	r3, r7
 80015d2:	bf28      	it	cs
 80015d4:	463b      	movcs	r3, r7
 80015d6:	4288      	cmp	r0, r1
 80015d8:	6962      	ldr	r2, [r4, #20]
 80015da:	d903      	bls.n	80015e4 <__sfvwrite_r+0x19c>
 80015dc:	68a5      	ldr	r5, [r4, #8]
 80015de:	4415      	add	r5, r2
 80015e0:	42ab      	cmp	r3, r5
 80015e2:	dc1a      	bgt.n	800161a <__sfvwrite_r+0x1d2>
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f300 8081 	bgt.w	80016ec <__sfvwrite_r+0x2a4>
 80015ea:	4613      	mov	r3, r2
 80015ec:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80015ee:	4632      	mov	r2, r6
 80015f0:	6a21      	ldr	r1, [r4, #32]
 80015f2:	4650      	mov	r0, sl
 80015f4:	47a8      	blx	r5
 80015f6:	1e05      	subs	r5, r0, #0
 80015f8:	dd1c      	ble.n	8001634 <__sfvwrite_r+0x1ec>
 80015fa:	ebb9 0905 	subs.w	r9, r9, r5
 80015fe:	d06e      	beq.n	80016de <__sfvwrite_r+0x296>
 8001600:	2001      	movs	r0, #1
 8001602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001606:	442e      	add	r6, r5
 8001608:	1b5b      	subs	r3, r3, r5
 800160a:	1b7f      	subs	r7, r7, r5
 800160c:	f8c8 3008 	str.w	r3, [r8, #8]
 8001610:	bb13      	cbnz	r3, 8001658 <__sfvwrite_r+0x210>
 8001612:	2000      	movs	r0, #0
 8001614:	b003      	add	sp, #12
 8001616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800161a:	4631      	mov	r1, r6
 800161c:	462a      	mov	r2, r5
 800161e:	f000 f967 	bl	80018f0 <memmove>
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	4621      	mov	r1, r4
 8001626:	442b      	add	r3, r5
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	4650      	mov	r0, sl
 800162c:	f7ff feca 	bl	80013c4 <_fflush_r>
 8001630:	2800      	cmp	r0, #0
 8001632:	d0e2      	beq.n	80015fa <__sfvwrite_r+0x1b2>
 8001634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800163c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001640:	81a3      	strh	r3, [r4, #12]
 8001642:	b003      	add	sp, #12
 8001644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001648:	2000      	movs	r0, #0
 800164a:	4770      	bx	lr
 800164c:	4633      	mov	r3, r6
 800164e:	4691      	mov	r9, r2
 8001650:	4610      	mov	r0, r2
 8001652:	4617      	mov	r7, r2
 8001654:	464e      	mov	r6, r9
 8001656:	469b      	mov	fp, r3
 8001658:	2f00      	cmp	r7, #0
 800165a:	d0a2      	beq.n	80015a2 <__sfvwrite_r+0x15a>
 800165c:	2800      	cmp	r0, #0
 800165e:	d1b4      	bne.n	80015ca <__sfvwrite_r+0x182>
 8001660:	463a      	mov	r2, r7
 8001662:	210a      	movs	r1, #10
 8001664:	4630      	mov	r0, r6
 8001666:	f000 f8fd 	bl	8001864 <memchr>
 800166a:	2800      	cmp	r0, #0
 800166c:	d1aa      	bne.n	80015c4 <__sfvwrite_r+0x17c>
 800166e:	1c7b      	adds	r3, r7, #1
 8001670:	4699      	mov	r9, r3
 8001672:	e7ab      	b.n	80015cc <__sfvwrite_r+0x184>
 8001674:	6923      	ldr	r3, [r4, #16]
 8001676:	4283      	cmp	r3, r0
 8001678:	d317      	bcc.n	80016aa <__sfvwrite_r+0x262>
 800167a:	6962      	ldr	r2, [r4, #20]
 800167c:	42aa      	cmp	r2, r5
 800167e:	d814      	bhi.n	80016aa <__sfvwrite_r+0x262>
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <__sfvwrite_r+0x2f8>)
 8001682:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001684:	429d      	cmp	r5, r3
 8001686:	bf94      	ite	ls
 8001688:	462b      	movls	r3, r5
 800168a:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800168e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001692:	6a21      	ldr	r1, [r4, #32]
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	4650      	mov	r0, sl
 800169a:	464a      	mov	r2, r9
 800169c:	47b8      	blx	r7
 800169e:	f1b0 0b00 	subs.w	fp, r0, #0
 80016a2:	ddc7      	ble.n	8001634 <__sfvwrite_r+0x1ec>
 80016a4:	eba5 050b 	sub.w	r5, r5, fp
 80016a8:	e767      	b.n	800157a <__sfvwrite_r+0x132>
 80016aa:	42af      	cmp	r7, r5
 80016ac:	bf28      	it	cs
 80016ae:	462f      	movcs	r7, r5
 80016b0:	4649      	mov	r1, r9
 80016b2:	463a      	mov	r2, r7
 80016b4:	f000 f91c 	bl	80018f0 <memmove>
 80016b8:	68a3      	ldr	r3, [r4, #8]
 80016ba:	6822      	ldr	r2, [r4, #0]
 80016bc:	1bdb      	subs	r3, r3, r7
 80016be:	443a      	add	r2, r7
 80016c0:	46bb      	mov	fp, r7
 80016c2:	60a3      	str	r3, [r4, #8]
 80016c4:	6022      	str	r2, [r4, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ec      	bne.n	80016a4 <__sfvwrite_r+0x25c>
 80016ca:	4621      	mov	r1, r4
 80016cc:	4650      	mov	r0, sl
 80016ce:	f7ff fe79 	bl	80013c4 <_fflush_r>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d0e6      	beq.n	80016a4 <__sfvwrite_r+0x25c>
 80016d6:	e7ad      	b.n	8001634 <__sfvwrite_r+0x1ec>
 80016d8:	462f      	mov	r7, r5
 80016da:	46ab      	mov	fp, r5
 80016dc:	e741      	b.n	8001562 <__sfvwrite_r+0x11a>
 80016de:	4621      	mov	r1, r4
 80016e0:	4650      	mov	r0, sl
 80016e2:	f7ff fe6f 	bl	80013c4 <_fflush_r>
 80016e6:	2800      	cmp	r0, #0
 80016e8:	d08b      	beq.n	8001602 <__sfvwrite_r+0x1ba>
 80016ea:	e7a3      	b.n	8001634 <__sfvwrite_r+0x1ec>
 80016ec:	461a      	mov	r2, r3
 80016ee:	4631      	mov	r1, r6
 80016f0:	461d      	mov	r5, r3
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	f000 f8fc 	bl	80018f0 <memmove>
 80016f8:	68a1      	ldr	r1, [r4, #8]
 80016fa:	6822      	ldr	r2, [r4, #0]
 80016fc:	9b01      	ldr	r3, [sp, #4]
 80016fe:	1ac9      	subs	r1, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	60a1      	str	r1, [r4, #8]
 8001704:	6023      	str	r3, [r4, #0]
 8001706:	e778      	b.n	80015fa <__sfvwrite_r+0x1b2>
 8001708:	4650      	mov	r0, sl
 800170a:	f000 f9af 	bl	8001a6c <_realloc_r>
 800170e:	4603      	mov	r3, r0
 8001710:	2800      	cmp	r0, #0
 8001712:	f47f af1c 	bne.w	800154e <__sfvwrite_r+0x106>
 8001716:	6921      	ldr	r1, [r4, #16]
 8001718:	4650      	mov	r0, sl
 800171a:	f000 f953 	bl	80019c4 <_free_r>
 800171e:	220c      	movs	r2, #12
 8001720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001724:	f8ca 2000 	str.w	r2, [sl]
 8001728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800172c:	e784      	b.n	8001638 <__sfvwrite_r+0x1f0>
 800172e:	220c      	movs	r2, #12
 8001730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001734:	f8ca 2000 	str.w	r2, [sl]
 8001738:	e77e      	b.n	8001638 <__sfvwrite_r+0x1f0>
 800173a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173e:	e769      	b.n	8001614 <__sfvwrite_r+0x1cc>
 8001740:	7ffffffe 	.word	0x7ffffffe
 8001744:	7ffffc00 	.word	0x7ffffc00

08001748 <_lseek_r>:
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174a:	460e      	mov	r6, r1
 800174c:	2500      	movs	r5, #0
 800174e:	4c08      	ldr	r4, [pc, #32]	; (8001770 <_lseek_r+0x28>)
 8001750:	4611      	mov	r1, r2
 8001752:	4607      	mov	r7, r0
 8001754:	461a      	mov	r2, r3
 8001756:	4630      	mov	r0, r6
 8001758:	6025      	str	r5, [r4, #0]
 800175a:	f000 fd14 	bl	8002186 <_lseek>
 800175e:	1c43      	adds	r3, r0, #1
 8001760:	d000      	beq.n	8001764 <_lseek_r+0x1c>
 8001762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0fb      	beq.n	8001762 <_lseek_r+0x1a>
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800176e:	bf00      	nop
 8001770:	20002310 	.word	0x20002310

08001774 <__swhatbuf_r>:
 8001774:	b570      	push	{r4, r5, r6, lr}
 8001776:	460c      	mov	r4, r1
 8001778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800177c:	b096      	sub	sp, #88	; 0x58
 800177e:	2900      	cmp	r1, #0
 8001780:	4616      	mov	r6, r2
 8001782:	461d      	mov	r5, r3
 8001784:	db13      	blt.n	80017ae <__swhatbuf_r+0x3a>
 8001786:	466a      	mov	r2, sp
 8001788:	f000 f9ac 	bl	8001ae4 <_fstat_r>
 800178c:	2800      	cmp	r0, #0
 800178e:	db0e      	blt.n	80017ae <__swhatbuf_r+0x3a>
 8001790:	9a01      	ldr	r2, [sp, #4]
 8001792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001796:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800179a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	2000      	movs	r0, #0
 80017a4:	0952      	lsrs	r2, r2, #5
 80017a6:	602a      	str	r2, [r5, #0]
 80017a8:	6033      	str	r3, [r6, #0]
 80017aa:	b016      	add	sp, #88	; 0x58
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
 80017ae:	2200      	movs	r2, #0
 80017b0:	89a3      	ldrh	r3, [r4, #12]
 80017b2:	602a      	str	r2, [r5, #0]
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	d504      	bpl.n	80017c2 <__swhatbuf_r+0x4e>
 80017b8:	2340      	movs	r3, #64	; 0x40
 80017ba:	2000      	movs	r0, #0
 80017bc:	6033      	str	r3, [r6, #0]
 80017be:	b016      	add	sp, #88	; 0x58
 80017c0:	bd70      	pop	{r4, r5, r6, pc}
 80017c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c6:	2000      	movs	r0, #0
 80017c8:	6033      	str	r3, [r6, #0]
 80017ca:	b016      	add	sp, #88	; 0x58
 80017cc:	bd70      	pop	{r4, r5, r6, pc}
 80017ce:	bf00      	nop

080017d0 <__smakebuf_r>:
 80017d0:	898a      	ldrh	r2, [r1, #12]
 80017d2:	460b      	mov	r3, r1
 80017d4:	0792      	lsls	r2, r2, #30
 80017d6:	d506      	bpl.n	80017e6 <__smakebuf_r+0x16>
 80017d8:	2101      	movs	r1, #1
 80017da:	f103 0247 	add.w	r2, r3, #71	; 0x47
 80017de:	6159      	str	r1, [r3, #20]
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	4770      	bx	lr
 80017e6:	b570      	push	{r4, r5, r6, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	ab01      	add	r3, sp, #4
 80017ec:	466a      	mov	r2, sp
 80017ee:	460c      	mov	r4, r1
 80017f0:	4606      	mov	r6, r0
 80017f2:	f7ff ffbf 	bl	8001774 <__swhatbuf_r>
 80017f6:	9900      	ldr	r1, [sp, #0]
 80017f8:	4605      	mov	r5, r0
 80017fa:	4630      	mov	r0, r6
 80017fc:	f7fe ff70 	bl	80006e0 <_malloc_r>
 8001800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001804:	b170      	cbz	r0, 8001824 <__smakebuf_r+0x54>
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <__smakebuf_r+0x90>)
 8001808:	9900      	ldr	r1, [sp, #0]
 800180a:	62b2      	str	r2, [r6, #40]	; 0x28
 800180c:	9a01      	ldr	r2, [sp, #4]
 800180e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001812:	81a3      	strh	r3, [r4, #12]
 8001814:	6020      	str	r0, [r4, #0]
 8001816:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800181a:	b98a      	cbnz	r2, 8001840 <__smakebuf_r+0x70>
 800181c:	432b      	orrs	r3, r5
 800181e:	81a3      	strh	r3, [r4, #12]
 8001820:	b002      	add	sp, #8
 8001822:	bd70      	pop	{r4, r5, r6, pc}
 8001824:	059a      	lsls	r2, r3, #22
 8001826:	d4fb      	bmi.n	8001820 <__smakebuf_r+0x50>
 8001828:	2101      	movs	r1, #1
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	81a3      	strh	r3, [r4, #12]
 8001838:	6161      	str	r1, [r4, #20]
 800183a:	6022      	str	r2, [r4, #0]
 800183c:	6122      	str	r2, [r4, #16]
 800183e:	e7ef      	b.n	8001820 <__smakebuf_r+0x50>
 8001840:	4630      	mov	r0, r6
 8001842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001846:	f000 f961 	bl	8001b0c <_isatty_r>
 800184a:	b910      	cbnz	r0, 8001852 <__smakebuf_r+0x82>
 800184c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001850:	e7e4      	b.n	800181c <__smakebuf_r+0x4c>
 8001852:	89a3      	ldrh	r3, [r4, #12]
 8001854:	f023 0303 	bic.w	r3, r3, #3
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	b21b      	sxth	r3, r3
 800185e:	e7dd      	b.n	800181c <__smakebuf_r+0x4c>
 8001860:	0800043d 	.word	0x0800043d

08001864 <memchr>:
 8001864:	0783      	lsls	r3, r0, #30
 8001866:	b470      	push	{r4, r5, r6}
 8001868:	b2cd      	uxtb	r5, r1
 800186a:	d03d      	beq.n	80018e8 <memchr+0x84>
 800186c:	1e54      	subs	r4, r2, #1
 800186e:	b30a      	cbz	r2, 80018b4 <memchr+0x50>
 8001870:	7803      	ldrb	r3, [r0, #0]
 8001872:	42ab      	cmp	r3, r5
 8001874:	d01f      	beq.n	80018b6 <memchr+0x52>
 8001876:	1c43      	adds	r3, r0, #1
 8001878:	e005      	b.n	8001886 <memchr+0x22>
 800187a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800187e:	d319      	bcc.n	80018b4 <memchr+0x50>
 8001880:	7802      	ldrb	r2, [r0, #0]
 8001882:	42aa      	cmp	r2, r5
 8001884:	d017      	beq.n	80018b6 <memchr+0x52>
 8001886:	f013 0f03 	tst.w	r3, #3
 800188a:	4618      	mov	r0, r3
 800188c:	f103 0301 	add.w	r3, r3, #1
 8001890:	d1f3      	bne.n	800187a <memchr+0x16>
 8001892:	2c03      	cmp	r4, #3
 8001894:	d811      	bhi.n	80018ba <memchr+0x56>
 8001896:	b34c      	cbz	r4, 80018ec <memchr+0x88>
 8001898:	7803      	ldrb	r3, [r0, #0]
 800189a:	42ab      	cmp	r3, r5
 800189c:	d00b      	beq.n	80018b6 <memchr+0x52>
 800189e:	4404      	add	r4, r0
 80018a0:	1c43      	adds	r3, r0, #1
 80018a2:	e002      	b.n	80018aa <memchr+0x46>
 80018a4:	7802      	ldrb	r2, [r0, #0]
 80018a6:	42aa      	cmp	r2, r5
 80018a8:	d005      	beq.n	80018b6 <memchr+0x52>
 80018aa:	429c      	cmp	r4, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f103 0301 	add.w	r3, r3, #1
 80018b2:	d1f7      	bne.n	80018a4 <memchr+0x40>
 80018b4:	2000      	movs	r0, #0
 80018b6:	bc70      	pop	{r4, r5, r6}
 80018b8:	4770      	bx	lr
 80018ba:	4602      	mov	r2, r0
 80018bc:	020e      	lsls	r6, r1, #8
 80018be:	b2b6      	uxth	r6, r6
 80018c0:	432e      	orrs	r6, r5
 80018c2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	4610      	mov	r0, r2
 80018ca:	4073      	eors	r3, r6
 80018cc:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
 80018d0:	ea21 0303 	bic.w	r3, r1, r3
 80018d4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80018d8:	f102 0204 	add.w	r2, r2, #4
 80018dc:	d1dc      	bne.n	8001898 <memchr+0x34>
 80018de:	3c04      	subs	r4, #4
 80018e0:	2c03      	cmp	r4, #3
 80018e2:	4610      	mov	r0, r2
 80018e4:	d8ef      	bhi.n	80018c6 <memchr+0x62>
 80018e6:	e7d6      	b.n	8001896 <memchr+0x32>
 80018e8:	4614      	mov	r4, r2
 80018ea:	e7d2      	b.n	8001892 <memchr+0x2e>
 80018ec:	4620      	mov	r0, r4
 80018ee:	e7e2      	b.n	80018b6 <memchr+0x52>

080018f0 <memmove>:
 80018f0:	4288      	cmp	r0, r1
 80018f2:	b4f0      	push	{r4, r5, r6, r7}
 80018f4:	d90d      	bls.n	8001912 <memmove+0x22>
 80018f6:	188b      	adds	r3, r1, r2
 80018f8:	4283      	cmp	r3, r0
 80018fa:	d90a      	bls.n	8001912 <memmove+0x22>
 80018fc:	1884      	adds	r4, r0, r2
 80018fe:	b132      	cbz	r2, 800190e <memmove+0x1e>
 8001900:	4622      	mov	r2, r4
 8001902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001906:	4299      	cmp	r1, r3
 8001908:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800190c:	d1f9      	bne.n	8001902 <memmove+0x12>
 800190e:	bcf0      	pop	{r4, r5, r6, r7}
 8001910:	4770      	bx	lr
 8001912:	2a0f      	cmp	r2, #15
 8001914:	d80e      	bhi.n	8001934 <memmove+0x44>
 8001916:	4603      	mov	r3, r0
 8001918:	1e54      	subs	r4, r2, #1
 800191a:	2a00      	cmp	r2, #0
 800191c:	d0f7      	beq.n	800190e <memmove+0x1e>
 800191e:	3401      	adds	r4, #1
 8001920:	440c      	add	r4, r1
 8001922:	3b01      	subs	r3, #1
 8001924:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001928:	42a1      	cmp	r1, r4
 800192a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800192e:	d1f9      	bne.n	8001924 <memmove+0x34>
 8001930:	bcf0      	pop	{r4, r5, r6, r7}
 8001932:	4770      	bx	lr
 8001934:	ea40 0301 	orr.w	r3, r0, r1
 8001938:	079b      	lsls	r3, r3, #30
 800193a:	d13a      	bne.n	80019b2 <memmove+0xc2>
 800193c:	f1a2 0710 	sub.w	r7, r2, #16
 8001940:	093f      	lsrs	r7, r7, #4
 8001942:	f101 0620 	add.w	r6, r1, #32
 8001946:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800194a:	f101 0310 	add.w	r3, r1, #16
 800194e:	f100 0410 	add.w	r4, r0, #16
 8001952:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8001956:	3310      	adds	r3, #16
 8001958:	f844 5c10 	str.w	r5, [r4, #-16]
 800195c:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 8001960:	3410      	adds	r4, #16
 8001962:	f844 5c1c 	str.w	r5, [r4, #-28]
 8001966:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800196a:	f844 5c18 	str.w	r5, [r4, #-24]
 800196e:	f853 5c14 	ldr.w	r5, [r3, #-20]
 8001972:	42b3      	cmp	r3, r6
 8001974:	f844 5c14 	str.w	r5, [r4, #-20]
 8001978:	d1eb      	bne.n	8001952 <memmove+0x62>
 800197a:	1c7b      	adds	r3, r7, #1
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	f012 0f0c 	tst.w	r2, #12
 8001982:	4419      	add	r1, r3
 8001984:	f002 050f 	and.w	r5, r2, #15
 8001988:	4403      	add	r3, r0
 800198a:	d015      	beq.n	80019b8 <memmove+0xc8>
 800198c:	460e      	mov	r6, r1
 800198e:	3d04      	subs	r5, #4
 8001990:	08ad      	lsrs	r5, r5, #2
 8001992:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 8001996:	1f1c      	subs	r4, r3, #4
 8001998:	f856 7b04 	ldr.w	r7, [r6], #4
 800199c:	f844 7f04 	str.w	r7, [r4, #4]!
 80019a0:	4564      	cmp	r4, ip
 80019a2:	d1f9      	bne.n	8001998 <memmove+0xa8>
 80019a4:	3501      	adds	r5, #1
 80019a6:	00ad      	lsls	r5, r5, #2
 80019a8:	442b      	add	r3, r5
 80019aa:	4429      	add	r1, r5
 80019ac:	f002 0203 	and.w	r2, r2, #3
 80019b0:	e7b2      	b.n	8001918 <memmove+0x28>
 80019b2:	1e54      	subs	r4, r2, #1
 80019b4:	4603      	mov	r3, r0
 80019b6:	e7b2      	b.n	800191e <memmove+0x2e>
 80019b8:	462a      	mov	r2, r5
 80019ba:	e7ad      	b.n	8001918 <memmove+0x28>

080019bc <__malloc_lock>:
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__malloc_unlock>:
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop

080019c4 <_free_r>:
 80019c4:	2900      	cmp	r1, #0
 80019c6:	d03a      	beq.n	8001a3e <_free_r+0x7a>
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019ce:	1f0c      	subs	r4, r1, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bfb8      	it	lt
 80019d4:	18e4      	addlt	r4, r4, r3
 80019d6:	4605      	mov	r5, r0
 80019d8:	f7ff fff0 	bl	80019bc <__malloc_lock>
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <_free_r+0xa4>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	b12a      	cbz	r2, 80019ee <_free_r+0x2a>
 80019e2:	42a2      	cmp	r2, r4
 80019e4:	d90d      	bls.n	8001a02 <_free_r+0x3e>
 80019e6:	6821      	ldr	r1, [r4, #0]
 80019e8:	1860      	adds	r0, r4, r1
 80019ea:	4282      	cmp	r2, r0
 80019ec:	d021      	beq.n	8001a32 <_free_r+0x6e>
 80019ee:	6062      	str	r2, [r4, #4]
 80019f0:	4628      	mov	r0, r5
 80019f2:	601c      	str	r4, [r3, #0]
 80019f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019f8:	f7ff bfe2 	b.w	80019c0 <__malloc_unlock>
 80019fc:	42a3      	cmp	r3, r4
 80019fe:	d803      	bhi.n	8001a08 <_free_r+0x44>
 8001a00:	461a      	mov	r2, r3
 8001a02:	6853      	ldr	r3, [r2, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f9      	bne.n	80019fc <_free_r+0x38>
 8001a08:	6811      	ldr	r1, [r2, #0]
 8001a0a:	1850      	adds	r0, r2, r1
 8001a0c:	42a0      	cmp	r0, r4
 8001a0e:	d017      	beq.n	8001a40 <_free_r+0x7c>
 8001a10:	d822      	bhi.n	8001a58 <_free_r+0x94>
 8001a12:	6821      	ldr	r1, [r4, #0]
 8001a14:	1860      	adds	r0, r4, r1
 8001a16:	4283      	cmp	r3, r0
 8001a18:	bf03      	ittte	eq
 8001a1a:	e9d3 0300 	ldrdeq	r0, r3, [r3]
 8001a1e:	1809      	addeq	r1, r1, r0
 8001a20:	e9c4 1300 	strdeq	r1, r3, [r4]
 8001a24:	6063      	strne	r3, [r4, #4]
 8001a26:	6054      	str	r4, [r2, #4]
 8001a28:	4628      	mov	r0, r5
 8001a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a2e:	f7ff bfc7 	b.w	80019c0 <__malloc_unlock>
 8001a32:	e9d2 0200 	ldrd	r0, r2, [r2]
 8001a36:	4401      	add	r1, r0
 8001a38:	e9c4 1200 	strd	r1, r2, [r4]
 8001a3c:	e7d8      	b.n	80019f0 <_free_r+0x2c>
 8001a3e:	4770      	bx	lr
 8001a40:	6820      	ldr	r0, [r4, #0]
 8001a42:	4401      	add	r1, r0
 8001a44:	1850      	adds	r0, r2, r1
 8001a46:	4283      	cmp	r3, r0
 8001a48:	6011      	str	r1, [r2, #0]
 8001a4a:	d1ed      	bne.n	8001a28 <_free_r+0x64>
 8001a4c:	e9d3 0300 	ldrd	r0, r3, [r3]
 8001a50:	4401      	add	r1, r0
 8001a52:	e9c2 1300 	strd	r1, r3, [r2]
 8001a56:	e7e7      	b.n	8001a28 <_free_r+0x64>
 8001a58:	230c      	movs	r3, #12
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	602b      	str	r3, [r5, #0]
 8001a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a62:	f7ff bfad 	b.w	80019c0 <__malloc_unlock>
 8001a66:	bf00      	nop
 8001a68:	20000200 	.word	0x20000200

08001a6c <_realloc_r>:
 8001a6c:	b309      	cbz	r1, 8001ab2 <_realloc_r+0x46>
 8001a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a70:	4614      	mov	r4, r2
 8001a72:	b1ca      	cbz	r2, 8001aa8 <_realloc_r+0x3c>
 8001a74:	4606      	mov	r6, r0
 8001a76:	460d      	mov	r5, r1
 8001a78:	f000 f85a 	bl	8001b30 <_malloc_usable_size_r>
 8001a7c:	42a0      	cmp	r0, r4
 8001a7e:	d302      	bcc.n	8001a86 <_realloc_r+0x1a>
 8001a80:	462f      	mov	r7, r5
 8001a82:	4638      	mov	r0, r7
 8001a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a86:	4621      	mov	r1, r4
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f7fe fe29 	bl	80006e0 <_malloc_r>
 8001a8e:	4607      	mov	r7, r0
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d0f6      	beq.n	8001a82 <_realloc_r+0x16>
 8001a94:	4622      	mov	r2, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fba8 	bl	80001ec <memcpy>
 8001a9c:	4630      	mov	r0, r6
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f7ff ff90 	bl	80019c4 <_free_r>
 8001aa4:	4638      	mov	r0, r7
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa8:	4627      	mov	r7, r4
 8001aaa:	f7ff ff8b 	bl	80019c4 <_free_r>
 8001aae:	4638      	mov	r0, r7
 8001ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	f7fe be14 	b.w	80006e0 <_malloc_r>

08001ab8 <_read_r>:
 8001ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aba:	460e      	mov	r6, r1
 8001abc:	2500      	movs	r5, #0
 8001abe:	4c08      	ldr	r4, [pc, #32]	; (8001ae0 <_read_r+0x28>)
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4607      	mov	r7, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	6025      	str	r5, [r4, #0]
 8001aca:	f000 faff 	bl	80020cc <_read>
 8001ace:	1c43      	adds	r3, r0, #1
 8001ad0:	d000      	beq.n	8001ad4 <_read_r+0x1c>
 8001ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0fb      	beq.n	8001ad2 <_read_r+0x1a>
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20002310 	.word	0x20002310

08001ae4 <_fstat_r>:
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	460d      	mov	r5, r1
 8001ae8:	2300      	movs	r3, #0
 8001aea:	4c07      	ldr	r4, [pc, #28]	; (8001b08 <_fstat_r+0x24>)
 8001aec:	4606      	mov	r6, r0
 8001aee:	4611      	mov	r1, r2
 8001af0:	4628      	mov	r0, r5
 8001af2:	6023      	str	r3, [r4, #0]
 8001af4:	f000 fb2e 	bl	8002154 <_fstat>
 8001af8:	1c43      	adds	r3, r0, #1
 8001afa:	d000      	beq.n	8001afe <_fstat_r+0x1a>
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0fb      	beq.n	8001afc <_fstat_r+0x18>
 8001b04:	6033      	str	r3, [r6, #0]
 8001b06:	bd70      	pop	{r4, r5, r6, pc}
 8001b08:	20002310 	.word	0x20002310

08001b0c <_isatty_r>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	2300      	movs	r3, #0
 8001b10:	4c06      	ldr	r4, [pc, #24]	; (8001b2c <_isatty_r+0x20>)
 8001b12:	4605      	mov	r5, r0
 8001b14:	4608      	mov	r0, r1
 8001b16:	6023      	str	r3, [r4, #0]
 8001b18:	f000 fb2b 	bl	8002172 <_isatty>
 8001b1c:	1c43      	adds	r3, r0, #1
 8001b1e:	d000      	beq.n	8001b22 <_isatty_r+0x16>
 8001b20:	bd38      	pop	{r3, r4, r5, pc}
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0fb      	beq.n	8001b20 <_isatty_r+0x14>
 8001b28:	602b      	str	r3, [r5, #0]
 8001b2a:	bd38      	pop	{r3, r4, r5, pc}
 8001b2c:	20002310 	.word	0x20002310

08001b30 <_malloc_usable_size_r>:
 8001b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b34:	1f18      	subs	r0, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bfbc      	itt	lt
 8001b3a:	580b      	ldrlt	r3, [r1, r0]
 8001b3c:	18c0      	addlt	r0, r0, r3
 8001b3e:	4770      	bx	lr

08001b40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <vApplicationGetIdleTaskMemory+0x28>)
 8001b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8001b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000208 	.word	0x20000208
 8001b6c:	2000025c 	.word	0x2000025c

08001b70 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <vApplicationGetTimerTaskMemory+0x2c>)
 8001b80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <vApplicationGetTimerTaskMemory+0x30>)
 8001b86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000045c 	.word	0x2000045c
 8001ba0:	200004b0 	.word	0x200004b0

08001ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	b09e      	sub	sp, #120	; 0x78
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001baa:	f000 fb89 	bl	80022c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bae:	f000 f871 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb2:	f000 f919 	bl	8001de8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001bb6:	f000 f8c7 	bl	8001d48 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of usbRxMutex */
  osMutexStaticDef(usbRxMutex, &usbRxMutexControlBlock);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	673b      	str	r3, [r7, #112]	; 0x70
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <main+0xc8>)
 8001bc0:	677b      	str	r3, [r7, #116]	; 0x74
  usbRxMutexHandle = osMutexCreate(osMutex(usbRxMutex));
 8001bc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f005 fa8a 	bl	80070e0 <osMutexCreate>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <main+0xcc>)
 8001bd0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <main+0xd0>)
 8001bd4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001bd8:	461d      	mov	r5, r3
 8001bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001be6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f005 fa3e 	bl	800706e <osThreadCreate>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <main+0xd4>)
 8001bf6:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledBlinkerTask */
  osThreadStaticDef(ledBlinkerTask, ledBlinker, osPriorityLow, 0, 128, myTask02Buffer, &myTask02ControlBlock);
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <main+0xd8>)
 8001bfa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001bfe:	461d      	mov	r5, r3
 8001c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledBlinkerTaskHandle = osThreadCreate(osThread(ledBlinkerTask), NULL);
 8001c0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f005 fa2b 	bl	800706e <osThreadCreate>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <main+0xdc>)
 8001c1c:	6013      	str	r3, [r2, #0]

  /* definition and creation of errorBlinkTask */
  osThreadStaticDef(errorBlinkTask, errorBlink, osPriorityIdle, 0, 128, myTask03Buffer, &myTask03ControlBlock);
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <main+0xe0>)
 8001c20:	f107 041c 	add.w	r4, r7, #28
 8001c24:	461d      	mov	r5, r3
 8001c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  errorBlinkTaskHandle = osThreadCreate(osThread(errorBlinkTask), NULL);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f005 fa18 	bl	800706e <osThreadCreate>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <main+0xe4>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* definition and creation of usbProcTask */
  osThreadStaticDef(usbProcTask, usbProceed, osPriorityNormal, 0, 128, myTask04Buffer, &myTask04ControlBlock);
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <main+0xe8>)
 8001c46:	463c      	mov	r4, r7
 8001c48:	461d      	mov	r5, r3
 8001c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usbProcTaskHandle = osThreadCreate(osThread(usbProcTask), NULL);
 8001c56:	463b      	mov	r3, r7
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f005 fa07 	bl	800706e <osThreadCreate>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <main+0xec>)
 8001c64:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c66:	f005 f9fb 	bl	8007060 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <main+0xc6>
 8001c6c:	20000d0c 	.word	0x20000d0c
 8001c70:	2000129c 	.word	0x2000129c
 8001c74:	08009ca0 	.word	0x08009ca0
 8001c78:	20000da8 	.word	0x20000da8
 8001c7c:	08009cbc 	.word	0x08009cbc
 8001c80:	20000d08 	.word	0x20000d08
 8001c84:	08009cd8 	.word	0x08009cd8
 8001c88:	20000e00 	.word	0x20000e00
 8001c8c:	08009cf4 	.word	0x08009cf4
 8001c90:	20000e04 	.word	0x20000e04

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b094      	sub	sp, #80	; 0x50
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9e:	2228      	movs	r2, #40	; 0x28
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fb18 	bl	80002d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ce0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fc78 	bl	80035e0 <HAL_RCC_OscConfig>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cf6:	f000 f909 	bl	8001f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cfa:	230f      	movs	r3, #15
 8001cfc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2102      	movs	r1, #2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fee2 	bl	8003ae0 <HAL_RCC_ClockConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d22:	f000 f8f3 	bl	8001f0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d26:	2310      	movs	r3, #16
 8001d28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 f88b 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001d3c:	f000 f8e6 	bl	8001f0c <Error_Handler>
  }
}
 8001d40:	bf00      	nop
 8001d42:	3750      	adds	r7, #80	; 0x50
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <MX_TIM1_Init+0x9c>)
 8001d68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d6c:	2248      	movs	r2, #72	; 0x48
 8001d6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d90:	4813      	ldr	r0, [pc, #76]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001d92:	f002 f911 	bl	8003fb8 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d9c:	f000 f8b6 	bl	8001f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4619      	mov	r1, r3
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001dae:	f002 fa59 	bl	8004264 <HAL_TIM_ConfigClockSource>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001db8:	f000 f8a8 	bl	8001f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_TIM1_Init+0x98>)
 8001dca:	f002 fc2b 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001dd4:	f000 f89a 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20001008 	.word	0x20001008
 8001de4:	40012c00 	.word	0x40012c00

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <MX_GPIO_Init+0xb0>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <MX_GPIO_Init+0xb0>)
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <MX_GPIO_Init+0xb0>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <MX_GPIO_Init+0xb0>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <MX_GPIO_Init+0xb0>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <MX_GPIO_Init+0xb0>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <MX_GPIO_Init+0xb0>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <MX_GPIO_Init+0xb0>)
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MX_GPIO_Init+0xb0>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8001e44:	2200      	movs	r2, #0
 8001e46:	21fe      	movs	r1, #254	; 0xfe
 8001e48:	4814      	ldr	r0, [pc, #80]	; (8001e9c <MX_GPIO_Init+0xb4>)
 8001e4a:	f000 fccf 	bl	80027ec <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2143      	movs	r1, #67	; 0x43
 8001e52:	4813      	ldr	r0, [pc, #76]	; (8001ea0 <MX_GPIO_Init+0xb8>)
 8001e54:	f000 fcca 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin D4_Pin
                           D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8001e58:	23fe      	movs	r3, #254	; 0xfe
 8001e5a:	613b      	str	r3, [r7, #16]
                          |D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480b      	ldr	r0, [pc, #44]	; (8001e9c <MX_GPIO_Init+0xb4>)
 8001e70:	f000 fb38 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin BUZZ_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|BUZZ_Pin;
 8001e74:	2343      	movs	r3, #67	; 0x43
 8001e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_GPIO_Init+0xb8>)
 8001e8c:	f000 fb2a 	bl	80024e4 <HAL_GPIO_Init>

}
 8001e90:	bf00      	nop
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40010c00 	.word	0x40010c00

08001ea4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001eac:	f007 fa66 	bl	800937c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f005 f901 	bl	80070b8 <osDelay>
 8001eb6:	e7fb      	b.n	8001eb0 <StartDefaultTask+0xc>

08001eb8 <ledBlinker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledBlinker */
void ledBlinker(void const * argument)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledBlinker */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f005 f8f9 	bl	80070b8 <osDelay>
 8001ec6:	e7fb      	b.n	8001ec0 <ledBlinker+0x8>

08001ec8 <errorBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_errorBlink */
void errorBlink(void const * argument)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN errorBlink */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f005 f8f1 	bl	80070b8 <osDelay>
 8001ed6:	e7fb      	b.n	8001ed0 <errorBlink+0x8>

08001ed8 <usbProceed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbProceed */
void usbProceed(void const * argument)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usbProceed */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f005 f8e9 	bl	80070b8 <osDelay>
 8001ee6:	e7fb      	b.n	8001ee0 <usbProceed+0x8>

08001ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001efa:	f000 f9f7 	bl	80022ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40000800 	.word	0x40000800

08001f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_MspInit+0x68>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_MspInit+0x68>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6193      	str	r3, [r2, #24]
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_MspInit+0x68>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_MspInit+0x68>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <HAL_MspInit+0x68>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_MspInit+0x68>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	210f      	movs	r1, #15
 8001f52:	f06f 0001 	mvn.w	r0, #1
 8001f56:	f000 fa9a 	bl	800248e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_MspInit+0x6c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_MspInit+0x6c>)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010000 	.word	0x40010000

08001f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_TIM_Base_MspInit+0x34>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10b      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_TIM_Base_MspInit+0x38>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_TIM_Base_MspInit+0x38>)
 8001fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fa4:	6193      	str	r3, [r2, #24]
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_TIM_Base_MspInit+0x38>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40012c00 	.word	0x40012c00
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	201e      	movs	r0, #30
 8001fda:	f000 fa58 	bl	800248e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fde:	201e      	movs	r0, #30
 8001fe0:	f000 fa71 	bl	80024c6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_InitTick+0xa0>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <HAL_InitTick+0xa0>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	61d3      	str	r3, [r2, #28]
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_InitTick+0xa0>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ffc:	f107 0210 	add.w	r2, r7, #16
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f001 fed2 	bl	8003db0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800200c:	f001 febc 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8002010:	4603      	mov	r3, r0
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	4a13      	ldr	r2, [pc, #76]	; (8002068 <HAL_InitTick+0xa4>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0c9b      	lsrs	r3, r3, #18
 8002020:	3b01      	subs	r3, #1
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_InitTick+0xa8>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_InitTick+0xac>)
 8002028:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_InitTick+0xa8>)
 800202c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002030:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_InitTick+0xa8>)
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_InitTick+0xa8>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_InitTick+0xa8>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_InitTick+0xa8>)
 8002046:	f001 ffb7 	bl	8003fb8 <HAL_TIM_Base_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d104      	bne.n	800205a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002050:	4806      	ldr	r0, [pc, #24]	; (800206c <HAL_InitTick+0xa8>)
 8002052:	f001 ffdc 	bl	800400e <HAL_TIM_Base_Start_IT>
 8002056:	4603      	mov	r3, r0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3730      	adds	r7, #48	; 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	431bde83 	.word	0x431bde83
 800206c:	200016f4 	.word	0x200016f4
 8002070:	40000800 	.word	0x40000800

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <HardFault_Handler+0x4>

08002086 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <MemManage_Handler+0x4>

0800208c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <BusFault_Handler+0x4>

08002092 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <UsageFault_Handler+0x4>

08002098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80020aa:	f000 fcbe 	bl	8002a2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200020a4 	.word	0x200020a4

080020b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM4_IRQHandler+0x10>)
 80020be:	f001 ffc9 	bl	8004054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200016f4 	.word	0x200016f4

080020cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e00a      	b.n	80020f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020de:	f3af 8000 	nop.w
 80020e2:	4601      	mov	r1, r0
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf0      	blt.n	80020de <_read+0x12>
	}

return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e009      	b.n	800212c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	60ba      	str	r2, [r7, #8]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	dbf1      	blt.n	8002118 <_write+0x12>
	}
	return len;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <_close>:

int _close(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	return -1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002164:	605a      	str	r2, [r3, #4]
	return 0;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <_isatty>:

int _isatty(int file)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
	return 1;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
	return 0;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
	...

080021a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <_sbrk+0x5c>)
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <_sbrk+0x60>)
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <_sbrk+0x64>)
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <_sbrk+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d207      	bcs.n	80021e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d0:	f7fd ffe2 	bl	8000198 <__errno>
 80021d4:	4603      	mov	r3, r0
 80021d6:	220c      	movs	r2, #12
 80021d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021de:	e009      	b.n	80021f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <_sbrk+0x64>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20005000 	.word	0x20005000
 8002200:	00000400 	.word	0x00000400
 8002204:	200008b0 	.word	0x200008b0
 8002208:	20002318 	.word	0x20002318

0800220c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <SystemInit+0x5c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <SystemInit+0x5c>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <SystemInit+0x5c>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4911      	ldr	r1, [pc, #68]	; (8002268 <SystemInit+0x5c>)
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <SystemInit+0x60>)
 8002224:	4013      	ands	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <SystemInit+0x5c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <SystemInit+0x5c>)
 800222e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <SystemInit+0x5c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <SystemInit+0x5c>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <SystemInit+0x5c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <SystemInit+0x5c>)
 800224a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800224e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <SystemInit+0x5c>)
 8002252:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002256:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SystemInit+0x64>)
 800225a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800225e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40021000 	.word	0x40021000
 800226c:	f8ff0000 	.word	0xf8ff0000
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002274:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002276:	e003      	b.n	8002280 <LoopCopyDataInit>

08002278 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800227a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800227c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800227e:	3104      	adds	r1, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002280:	480a      	ldr	r0, [pc, #40]	; (80022ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002284:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002286:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002288:	d3f6      	bcc.n	8002278 <CopyDataInit>
  ldr r2, =_sbss
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800228c:	e002      	b.n	8002294 <LoopFillZerobss>

0800228e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002290:	f842 3b04 	str.w	r3, [r2], #4

08002294 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002296:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002298:	d3f9      	bcc.n	800228e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800229a:	f7ff ffb7 	bl	800220c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229e:	f7fd ff81 	bl	80001a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a2:	f7ff fc7f 	bl	8001ba4 <main>
  bx lr
 80022a6:	4770      	bx	lr
  ldr r3, =_sidata
 80022a8:	08009e68 	.word	0x08009e68
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80022b0:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80022b4:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80022b8:	20002314 	.word	0x20002314

080022bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC1_2_IRQHandler>
	...

080022c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_Init+0x28>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_Init+0x28>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 f8d1 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7ff fe74 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff fe1c 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_IncTick+0x1c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_IncTick+0x20>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <HAL_IncTick+0x20>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	2000006c 	.word	0x2000006c
 800230c:	20001734 	.word	0x20001734

08002310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b02      	ldr	r3, [pc, #8]	; (8002320 <HAL_GetTick+0x10>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	20001734 	.word	0x20001734

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db0b      	blt.n	80023b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4906      	ldr	r1, [pc, #24]	; (80023bc <__NVIC_EnableIRQ+0x34>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2001      	movs	r0, #1
 80023aa:	fa00 f202 	lsl.w	r2, r0, r2
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
         );
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff4f 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff64 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ffb2 	bl	8002414 <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff81 	bl	80023c0 <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff57 	bl	8002388 <__NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b08b      	sub	sp, #44	; 0x2c
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f6:	e169      	b.n	80027cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024f8:	2201      	movs	r2, #1
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8158 	bne.w	80027c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4a9a      	ldr	r2, [pc, #616]	; (8002784 <HAL_GPIO_Init+0x2a0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d05e      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002520:	4a98      	ldr	r2, [pc, #608]	; (8002784 <HAL_GPIO_Init+0x2a0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d875      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 8002526:	4a98      	ldr	r2, [pc, #608]	; (8002788 <HAL_GPIO_Init+0x2a4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d058      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 800252c:	4a96      	ldr	r2, [pc, #600]	; (8002788 <HAL_GPIO_Init+0x2a4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d86f      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 8002532:	4a96      	ldr	r2, [pc, #600]	; (800278c <HAL_GPIO_Init+0x2a8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d052      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002538:	4a94      	ldr	r2, [pc, #592]	; (800278c <HAL_GPIO_Init+0x2a8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d869      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 800253e:	4a94      	ldr	r2, [pc, #592]	; (8002790 <HAL_GPIO_Init+0x2ac>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d04c      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002544:	4a92      	ldr	r2, [pc, #584]	; (8002790 <HAL_GPIO_Init+0x2ac>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d863      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 800254a:	4a92      	ldr	r2, [pc, #584]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d046      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002550:	4a90      	ldr	r2, [pc, #576]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d85d      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 8002556:	2b12      	cmp	r3, #18
 8002558:	d82a      	bhi.n	80025b0 <HAL_GPIO_Init+0xcc>
 800255a:	2b12      	cmp	r3, #18
 800255c:	d859      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <HAL_GPIO_Init+0x80>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	080025df 	.word	0x080025df
 8002568:	080025b9 	.word	0x080025b9
 800256c:	080025cb 	.word	0x080025cb
 8002570:	0800260d 	.word	0x0800260d
 8002574:	08002613 	.word	0x08002613
 8002578:	08002613 	.word	0x08002613
 800257c:	08002613 	.word	0x08002613
 8002580:	08002613 	.word	0x08002613
 8002584:	08002613 	.word	0x08002613
 8002588:	08002613 	.word	0x08002613
 800258c:	08002613 	.word	0x08002613
 8002590:	08002613 	.word	0x08002613
 8002594:	08002613 	.word	0x08002613
 8002598:	08002613 	.word	0x08002613
 800259c:	08002613 	.word	0x08002613
 80025a0:	08002613 	.word	0x08002613
 80025a4:	08002613 	.word	0x08002613
 80025a8:	080025c1 	.word	0x080025c1
 80025ac:	080025d5 	.word	0x080025d5
 80025b0:	4a79      	ldr	r2, [pc, #484]	; (8002798 <HAL_GPIO_Init+0x2b4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025b6:	e02c      	b.n	8002612 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	623b      	str	r3, [r7, #32]
          break;
 80025be:	e029      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	3304      	adds	r3, #4
 80025c6:	623b      	str	r3, [r7, #32]
          break;
 80025c8:	e024      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	3308      	adds	r3, #8
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e01f      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	330c      	adds	r3, #12
 80025da:	623b      	str	r3, [r7, #32]
          break;
 80025dc:	e01a      	b.n	8002614 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025e6:	2304      	movs	r3, #4
 80025e8:	623b      	str	r3, [r7, #32]
          break;
 80025ea:	e013      	b.n	8002614 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f4:	2308      	movs	r3, #8
 80025f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	611a      	str	r2, [r3, #16]
          break;
 80025fe:	e009      	b.n	8002614 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002600:	2308      	movs	r3, #8
 8002602:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	615a      	str	r2, [r3, #20]
          break;
 800260a:	e003      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
          break;
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x130>
          break;
 8002612:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2bff      	cmp	r3, #255	; 0xff
 8002618:	d801      	bhi.n	800261e <HAL_GPIO_Init+0x13a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	e001      	b.n	8002622 <HAL_GPIO_Init+0x13e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2bff      	cmp	r3, #255	; 0xff
 8002628:	d802      	bhi.n	8002630 <HAL_GPIO_Init+0x14c>
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	e002      	b.n	8002636 <HAL_GPIO_Init+0x152>
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	3b08      	subs	r3, #8
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	210f      	movs	r1, #15
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	401a      	ands	r2, r3
 8002648:	6a39      	ldr	r1, [r7, #32]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80b1 	beq.w	80027c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002664:	4b4d      	ldr	r3, [pc, #308]	; (800279c <HAL_GPIO_Init+0x2b8>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a4c      	ldr	r2, [pc, #304]	; (800279c <HAL_GPIO_Init+0x2b8>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_GPIO_Init+0x2b8>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800267c:	4a48      	ldr	r2, [pc, #288]	; (80027a0 <HAL_GPIO_Init+0x2bc>)
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a40      	ldr	r2, [pc, #256]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d013      	beq.n	80026d0 <HAL_GPIO_Init+0x1ec>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3f      	ldr	r2, [pc, #252]	; (80027a8 <HAL_GPIO_Init+0x2c4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00d      	beq.n	80026cc <HAL_GPIO_Init+0x1e8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a3e      	ldr	r2, [pc, #248]	; (80027ac <HAL_GPIO_Init+0x2c8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <HAL_GPIO_Init+0x1e4>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a3d      	ldr	r2, [pc, #244]	; (80027b0 <HAL_GPIO_Init+0x2cc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_GPIO_Init+0x1e0>
 80026c0:	2303      	movs	r3, #3
 80026c2:	e006      	b.n	80026d2 <HAL_GPIO_Init+0x1ee>
 80026c4:	2304      	movs	r3, #4
 80026c6:	e004      	b.n	80026d2 <HAL_GPIO_Init+0x1ee>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e002      	b.n	80026d2 <HAL_GPIO_Init+0x1ee>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_GPIO_Init+0x1ee>
 80026d0:	2300      	movs	r3, #0
 80026d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d4:	f002 0203 	and.w	r2, r2, #3
 80026d8:	0092      	lsls	r2, r2, #2
 80026da:	4093      	lsls	r3, r2
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026e2:	492f      	ldr	r1, [pc, #188]	; (80027a0 <HAL_GPIO_Init+0x2bc>)
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026fc:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e006      	b.n	8002718 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	43db      	mvns	r3, r3
 8002712:	4928      	ldr	r1, [pc, #160]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 8002714:	4013      	ands	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d006      	beq.n	8002732 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4922      	ldr	r1, [pc, #136]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	43db      	mvns	r3, r3
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 800273c:	4013      	ands	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d006      	beq.n	800275a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	4918      	ldr	r1, [pc, #96]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	43db      	mvns	r3, r3
 8002762:	4914      	ldr	r1, [pc, #80]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 8002764:	4013      	ands	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d021      	beq.n	80027b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	60cb      	str	r3, [r1, #12]
 8002780:	e021      	b.n	80027c6 <HAL_GPIO_Init+0x2e2>
 8002782:	bf00      	nop
 8002784:	10320000 	.word	0x10320000
 8002788:	10310000 	.word	0x10310000
 800278c:	10220000 	.word	0x10220000
 8002790:	10210000 	.word	0x10210000
 8002794:	10120000 	.word	0x10120000
 8002798:	10110000 	.word	0x10110000
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40010800 	.word	0x40010800
 80027a8:	40010c00 	.word	0x40010c00
 80027ac:	40011000 	.word	0x40011000
 80027b0:	40011400 	.word	0x40011400
 80027b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_GPIO_Init+0x304>)
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	43db      	mvns	r3, r3
 80027c0:	4909      	ldr	r1, [pc, #36]	; (80027e8 <HAL_GPIO_Init+0x304>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	3301      	adds	r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f47f ae8e 	bne.w	80024f8 <HAL_GPIO_Init+0x14>
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	372c      	adds	r7, #44	; 0x2c
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	40010400 	.word	0x40010400

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002808:	e003      	b.n	8002812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281e:	b08b      	sub	sp, #44	; 0x2c
 8002820:	af06      	add	r7, sp, #24
 8002822:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0d3      	b.n	80029d6 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f006 ff66 	bl	8009714 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2203      	movs	r2, #3
 800284c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f001 ff62 	bl	800471e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	687e      	ldr	r6, [r7, #4]
 8002862:	466d      	mov	r5, sp
 8002864:	f106 0410 	add.w	r4, r6, #16
 8002868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	602b      	str	r3, [r5, #0]
 8002870:	1d33      	adds	r3, r6, #4
 8002872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002874:	6838      	ldr	r0, [r7, #0]
 8002876:	f001 ff2b 	bl	80046d0 <USB_CoreInit>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0a4      	b.n	80029d6 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f001 ff5f 	bl	8004756 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e035      	b.n	800290a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	015b      	lsls	r3, r3, #5
 80028a4:	4413      	add	r3, r2
 80028a6:	3329      	adds	r3, #41	; 0x29
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	015b      	lsls	r3, r3, #5
 80028b2:	4413      	add	r3, r2
 80028b4:	3328      	adds	r3, #40	; 0x28
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	b291      	uxth	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	015b      	lsls	r3, r3, #5
 80028c4:	4413      	add	r3, r2
 80028c6:	3336      	adds	r3, #54	; 0x36
 80028c8:	460a      	mov	r2, r1
 80028ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	015b      	lsls	r3, r3, #5
 80028d2:	4413      	add	r3, r2
 80028d4:	332b      	adds	r3, #43	; 0x2b
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	4413      	add	r3, r2
 80028e2:	3338      	adds	r3, #56	; 0x38
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	015b      	lsls	r3, r3, #5
 80028ee:	4413      	add	r3, r2
 80028f0:	333c      	adds	r3, #60	; 0x3c
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	3302      	adds	r3, #2
 80028fc:	015b      	lsls	r3, r3, #5
 80028fe:	4413      	add	r3, r2
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	3301      	adds	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	d3c4      	bcc.n	800289e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e031      	b.n	800297e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	015b      	lsls	r3, r3, #5
 8002920:	4413      	add	r3, r2
 8002922:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	015b      	lsls	r3, r3, #5
 8002930:	4413      	add	r3, r2
 8002932:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	015b      	lsls	r3, r3, #5
 8002940:	4413      	add	r3, r2
 8002942:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	015b      	lsls	r3, r3, #5
 8002950:	4413      	add	r3, r2
 8002952:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	015b      	lsls	r3, r3, #5
 8002960:	4413      	add	r3, r2
 8002962:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	330a      	adds	r3, #10
 8002970:	015b      	lsls	r3, r3, #5
 8002972:	4413      	add	r3, r2
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	3301      	adds	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	d3c8      	bcc.n	800291a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	687e      	ldr	r6, [r7, #4]
 8002990:	466d      	mov	r5, sp
 8002992:	f106 0410 	add.w	r4, r6, #16
 8002996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	602b      	str	r3, [r5, #0]
 800299e:	1d33      	adds	r3, r6, #4
 80029a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	f001 fee3 	bl	800476e <USB_DevInit>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00d      	b.n	80029d6 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 ff21 	bl	8005816 <USB_DevDisconnect>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_PCD_Start+0x16>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e016      	b.n	8002a22 <HAL_PCD_Start+0x44>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80029fc:	2101      	movs	r1, #1
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f007 f8ef 	bl	8009be2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fefa 	bl	8005802 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 fe6c 	bl	80046f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f002 fef7 	bl	800582a <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a46:	d102      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 faf3 	bl	8003034 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 fee9 	bl	800582a <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d112      	bne.n	8002a8a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a76:	b292      	uxth	r2, r2
 8002a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f006 febe 	bl	80097fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a82:	2100      	movs	r1, #0
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8de 	bl	8002c46 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fecb 	bl	800582a <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 feb4 	bl	800582a <USB_ReadInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002acc:	d10b      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae0:	b292      	uxth	r2, r2
 8002ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fe9d 	bl	800582a <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d126      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0204 	bic.w	r2, r2, #4
 8002b0e:	b292      	uxth	r2, r2
 8002b10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0208 	bic.w	r2, r2, #8
 8002b26:	b292      	uxth	r2, r2
 8002b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f006 fe9f 	bl	8009870 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b44:	b292      	uxth	r2, r2
 8002b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 fe6b 	bl	800582a <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5e:	d13d      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0208 	orr.w	r2, r2, #8
 8002b72:	b292      	uxth	r2, r2
 8002b74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0204 	orr.w	r2, r2, #4
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f002 fe3c 	bl	800582a <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bd0:	b292      	uxth	r2, r2
 8002bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f006 fe30 	bl	800983c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f002 fe22 	bl	800582a <USB_ReadInterrupts>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf0:	d10e      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c04:	b292      	uxth	r2, r2
 8002c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f006 fde9 	bl	80097e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fe08 	bl	800582a <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c24:	d10b      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_PCD_SetAddress+0x1a>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e013      	b.n	8002c88 <HAL_PCD_SetAddress+0x42>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 fdaf 	bl	80057dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	70fb      	strb	r3, [r7, #3]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	803b      	strh	r3, [r7, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da0b      	bge.n	8002cce <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	015b      	lsls	r3, r3, #5
 8002cbe:	3328      	adds	r3, #40	; 0x28
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	705a      	strb	r2, [r3, #1]
 8002ccc:	e00b      	b.n	8002ce6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	015b      	lsls	r3, r3, #5
 8002cd6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cf2:	883a      	ldrh	r2, [r7, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	78ba      	ldrb	r2, [r7, #2]
 8002cfc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d10:	78bb      	ldrb	r3, [r7, #2]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d102      	bne.n	8002d1c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_PCD_EP_Open+0x9a>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e00e      	b.n	8002d48 <HAL_PCD_EP_Open+0xb8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68f9      	ldr	r1, [r7, #12]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 fd3d 	bl	80047b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002d46:	7afb      	ldrb	r3, [r7, #11]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	da0b      	bge.n	8002d7c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	015b      	lsls	r3, r3, #5
 8002d6c:	3328      	adds	r3, #40	; 0x28
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	705a      	strb	r2, [r3, #1]
 8002d7a:	e00b      	b.n	8002d94 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	015b      	lsls	r3, r3, #5
 8002d84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_PCD_EP_Close+0x5e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e00e      	b.n	8002dcc <HAL_PCD_EP_Close+0x7c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68f9      	ldr	r1, [r7, #12]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 ffe9 	bl	8004d94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	460b      	mov	r3, r1
 8002de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de4:	7afb      	ldrb	r3, [r7, #11]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	015b      	lsls	r3, r3, #5
 8002dec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6979      	ldr	r1, [r7, #20]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f002 f948 	bl	80050c0 <USB_EPStartXfer>
 8002e30:	e005      	b.n	8002e3e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6979      	ldr	r1, [r7, #20]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 f941 	bl	80050c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	330a      	adds	r3, #10
 8002e5e:	015b      	lsls	r3, r3, #5
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	681b      	ldr	r3, [r3, #0]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	7afb      	ldrb	r3, [r7, #11]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	015b      	lsls	r3, r3, #5
 8002e88:	3328      	adds	r3, #40	; 0x28
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea8:	7afb      	ldrb	r3, [r7, #11]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6979      	ldr	r1, [r7, #20]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 f8fb 	bl	80050c0 <USB_EPStartXfer>
 8002eca:	e005      	b.n	8002ed8 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6979      	ldr	r1, [r7, #20]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f002 f8f4 	bl	80050c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 0207 	and.w	r2, r3, #7
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d901      	bls.n	8002f00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e046      	b.n	8002f8e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da0b      	bge.n	8002f20 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	015b      	lsls	r3, r3, #5
 8002f10:	3328      	adds	r3, #40	; 0x28
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	705a      	strb	r2, [r3, #1]
 8002f1e:	e009      	b.n	8002f34 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	015b      	lsls	r3, r3, #5
 8002f24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_PCD_EP_SetStall+0x72>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e01c      	b.n	8002f8e <HAL_PCD_EP_SetStall+0xac>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f002 fb64 	bl	8005630 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f002 fc62 	bl	8005848 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d901      	bls.n	8002fb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e03a      	b.n	800302a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da0b      	bge.n	8002fd4 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	015b      	lsls	r3, r3, #5
 8002fc4:	3328      	adds	r3, #40	; 0x28
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	705a      	strb	r2, [r3, #1]
 8002fd2:	e00b      	b.n	8002fec <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	015b      	lsls	r3, r3, #5
 8002fdc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_PCD_EP_ClrStall+0x76>
 8003008:	2302      	movs	r3, #2
 800300a:	e00e      	b.n	800302a <HAL_PCD_EP_ClrStall+0x94>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	4618      	mov	r0, r3
 800301c:	f002 fb4a 	bl	80056b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b089      	sub	sp, #36	; 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800303c:	e282      	b.n	8003544 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003046:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003048:	8afb      	ldrh	r3, [r7, #22]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003052:	7d7b      	ldrb	r3, [r7, #21]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 8142 	bne.w	80032de <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800305a:	8afb      	ldrh	r3, [r7, #22]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d151      	bne.n	8003108 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	b29c      	uxth	r4, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800307e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003082:	b29b      	uxth	r3, r3
 8003084:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3328      	adds	r3, #40	; 0x28
 800308a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003094:	b29b      	uxth	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	3302      	adds	r3, #2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	441a      	add	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030c6:	2100      	movs	r1, #0
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f006 fb73 	bl	80097b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8234 	beq.w	8003544 <PCD_EP_ISR_Handler+0x510>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 822f 	bne.w	8003544 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	b292      	uxth	r2, r2
 80030fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003106:	e21d      	b.n	8003544 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800310e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003118:	8a7b      	ldrh	r3, [r7, #18]
 800311a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311e:	2b00      	cmp	r3, #0
 8003120:	d033      	beq.n	800318a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	3306      	adds	r3, #6
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003160:	b29b      	uxth	r3, r3
 8003162:	f002 fbc1 	bl	80058e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29a      	uxth	r2, r3
 800316e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003172:	4013      	ands	r3, r2
 8003174:	b29c      	uxth	r4, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800317e:	b292      	uxth	r2, r2
 8003180:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f006 faec 	bl	8009760 <HAL_PCD_SetupStageCallback>
 8003188:	e1dc      	b.n	8003544 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800318a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f280 81d8 	bge.w	8003544 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29a      	uxth	r2, r3
 800319c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29c      	uxth	r4, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80031ac:	b292      	uxth	r2, r2
 80031ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	3306      	adds	r3, #6
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d019      	beq.n	8003218 <PCD_EP_ISR_Handler+0x1e4>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6959      	ldr	r1, [r3, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f002 fb73 	bl	80058e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003210:	2100      	movs	r1, #0
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f006 fab6 	bl	8009784 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461c      	mov	r4, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003226:	b29b      	uxth	r3, r3
 8003228:	441c      	add	r4, r3
 800322a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800322e:	461c      	mov	r4, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10e      	bne.n	8003256 <PCD_EP_ISR_Handler+0x222>
 8003238:	8823      	ldrh	r3, [r4, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003240:	b29b      	uxth	r3, r3
 8003242:	8023      	strh	r3, [r4, #0]
 8003244:	8823      	ldrh	r3, [r4, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003250:	b29b      	uxth	r3, r3
 8003252:	8023      	strh	r3, [r4, #0]
 8003254:	e02d      	b.n	80032b2 <PCD_EP_ISR_Handler+0x27e>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b3e      	cmp	r3, #62	; 0x3e
 800325c:	d812      	bhi.n	8003284 <PCD_EP_ISR_Handler+0x250>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <PCD_EP_ISR_Handler+0x244>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	3301      	adds	r3, #1
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	b29b      	uxth	r3, r3
 800327c:	029b      	lsls	r3, r3, #10
 800327e:	b29b      	uxth	r3, r3
 8003280:	8023      	strh	r3, [r4, #0]
 8003282:	e016      	b.n	80032b2 <PCD_EP_ISR_Handler+0x27e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <PCD_EP_ISR_Handler+0x26a>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	3b01      	subs	r3, #1
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	029b      	lsls	r3, r3, #10
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	b29c      	uxth	r4, r3
 80032c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032c8:	b29c      	uxth	r4, r3
 80032ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032ce:	b29c      	uxth	r4, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4ba2      	ldr	r3, [pc, #648]	; (8003560 <PCD_EP_ISR_Handler+0x52c>)
 80032d6:	4323      	orrs	r3, r4
 80032d8:	b29b      	uxth	r3, r3
 80032da:	8013      	strh	r3, [r2, #0]
 80032dc:	e132      	b.n	8003544 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	7d7b      	ldrb	r3, [r7, #21]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f280 80d1 	bge.w	800349a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	7d7b      	ldrb	r3, [r7, #21]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29a      	uxth	r2, r3
 8003308:	f640 738f 	movw	r3, #3983	; 0xf8f
 800330c:	4013      	ands	r3, r2
 800330e:	b29c      	uxth	r4, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	7d7b      	ldrb	r3, [r7, #21]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003320:	b292      	uxth	r2, r2
 8003322:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003324:	7d7b      	ldrb	r3, [r7, #21]
 8003326:	015b      	lsls	r3, r3, #5
 8003328:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	7b1b      	ldrb	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d121      	bne.n	800337e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	3306      	adds	r3, #6
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003362:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003364:	8bfb      	ldrh	r3, [r7, #30]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d072      	beq.n	8003450 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6959      	ldr	r1, [r3, #20]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88da      	ldrh	r2, [r3, #6]
 8003376:	8bfb      	ldrh	r3, [r7, #30]
 8003378:	f002 fab6 	bl	80058e8 <USB_ReadPMA>
 800337c:	e068      	b.n	8003450 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d021      	beq.n	80033dc <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	3302      	adds	r3, #2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80033c2:	8bfb      	ldrh	r3, [r7, #30]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02a      	beq.n	800341e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6959      	ldr	r1, [r3, #20]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	891a      	ldrh	r2, [r3, #8]
 80033d4:	8bfb      	ldrh	r3, [r7, #30]
 80033d6:	f002 fa87 	bl	80058e8 <USB_ReadPMA>
 80033da:	e020      	b.n	800341e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	3306      	adds	r3, #6
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003404:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003406:	8bfb      	ldrh	r3, [r7, #30]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6959      	ldr	r1, [r3, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	895a      	ldrh	r2, [r3, #10]
 8003418:	8bfb      	ldrh	r3, [r7, #30]
 800341a:	f002 fa65 	bl	80058e8 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003438:	b29c      	uxth	r4, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	441a      	add	r2, r3
 8003448:	4b46      	ldr	r3, [pc, #280]	; (8003564 <PCD_EP_ISR_Handler+0x530>)
 800344a:	4323      	orrs	r3, r4
 800344c:	b29b      	uxth	r3, r3
 800344e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	8bfb      	ldrh	r3, [r7, #30]
 8003456:	441a      	add	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	8bfb      	ldrh	r3, [r7, #30]
 8003462:	441a      	add	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <PCD_EP_ISR_Handler+0x446>
 8003470:	8bfa      	ldrh	r2, [r7, #30]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	429a      	cmp	r2, r3
 8003478:	d206      	bcs.n	8003488 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f006 f97f 	bl	8009784 <HAL_PCD_DataOutStageCallback>
 8003486:	e008      	b.n	800349a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	7819      	ldrb	r1, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fc9d 	bl	8002dd4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800349a:	8a7b      	ldrh	r3, [r7, #18]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d04f      	beq.n	8003544 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80034a4:	7d7b      	ldrb	r3, [r7, #21]
 80034a6:	015b      	lsls	r3, r3, #5
 80034a8:	3328      	adds	r3, #40	; 0x28
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	7d7b      	ldrb	r3, [r7, #21]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c8:	b29c      	uxth	r4, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	7d7b      	ldrb	r3, [r7, #21]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80034da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034de:	b29b      	uxth	r3, r3
 80034e0:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	3302      	adds	r3, #2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	441a      	add	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d106      	bne.n	8003532 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f006 f942 	bl	80097b4 <HAL_PCD_DataInStageCallback>
 8003530:	e008      	b.n	8003544 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	7819      	ldrb	r1, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fc96 	bl	8002e70 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800354c:	b29b      	uxth	r3, r3
 800354e:	b21b      	sxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	f6ff ad74 	blt.w	800303e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3724      	adds	r7, #36	; 0x24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd90      	pop	{r4, r7, pc}
 8003560:	ffff8080 	.word	0xffff8080
 8003564:	ffff80c0 	.word	0xffff80c0

08003568 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	817b      	strh	r3, [r7, #10]
 8003576:	4613      	mov	r3, r2
 8003578:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003586:	897b      	ldrh	r3, [r7, #10]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	015b      	lsls	r3, r3, #5
 800358e:	3328      	adds	r3, #40	; 0x28
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e006      	b.n	80035a6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003598:	897b      	ldrh	r3, [r7, #10]
 800359a:	015b      	lsls	r3, r3, #5
 800359c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035a6:	893b      	ldrh	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2200      	movs	r2, #0
 80035b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	80da      	strh	r2, [r3, #6]
 80035ba:	e00b      	b.n	80035d4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2201      	movs	r2, #1
 80035c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e26c      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8087 	beq.w	800370e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003600:	4b92      	ldr	r3, [pc, #584]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b04      	cmp	r3, #4
 800360a:	d00c      	beq.n	8003626 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800360c:	4b8f      	ldr	r3, [pc, #572]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d112      	bne.n	800363e <HAL_RCC_OscConfig+0x5e>
 8003618:	4b8c      	ldr	r3, [pc, #560]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d10b      	bne.n	800363e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003626:	4b89      	ldr	r3, [pc, #548]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d06c      	beq.n	800370c <HAL_RCC_OscConfig+0x12c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d168      	bne.n	800370c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e246      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x76>
 8003648:	4b80      	ldr	r3, [pc, #512]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a7f      	ldr	r2, [pc, #508]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 800364e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	e02e      	b.n	80036b4 <HAL_RCC_OscConfig+0xd4>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x98>
 800365e:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7a      	ldr	r2, [pc, #488]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b78      	ldr	r3, [pc, #480]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a77      	ldr	r2, [pc, #476]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e01d      	b.n	80036b4 <HAL_RCC_OscConfig+0xd4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0xbc>
 8003682:	4b72      	ldr	r3, [pc, #456]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a71      	ldr	r2, [pc, #452]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b6f      	ldr	r3, [pc, #444]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6e      	ldr	r2, [pc, #440]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0xd4>
 800369c:	4b6b      	ldr	r3, [pc, #428]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a6a      	ldr	r2, [pc, #424]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b68      	ldr	r3, [pc, #416]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a67      	ldr	r2, [pc, #412]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 80036ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fe fe28 	bl	8002310 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe fe24 	bl	8002310 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e1fa      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b5d      	ldr	r3, [pc, #372]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0xe4>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe fe14 	bl	8002310 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe fe10 	bl	8002310 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e1e6      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x10c>
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d063      	beq.n	80037e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800371a:	4b4c      	ldr	r3, [pc, #304]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003726:	4b49      	ldr	r3, [pc, #292]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b08      	cmp	r3, #8
 8003730:	d11c      	bne.n	800376c <HAL_RCC_OscConfig+0x18c>
 8003732:	4b46      	ldr	r3, [pc, #280]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d116      	bne.n	800376c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	4b43      	ldr	r3, [pc, #268]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_RCC_OscConfig+0x176>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e1ba      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003756:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4939      	ldr	r1, [pc, #228]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	e03a      	b.n	80037e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d020      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003774:	4b36      	ldr	r3, [pc, #216]	; (8003850 <HAL_RCC_OscConfig+0x270>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fe fdc9 	bl	8002310 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003782:	f7fe fdc5 	bl	8002310 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e19b      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003794:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a0:	4b2a      	ldr	r3, [pc, #168]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4927      	ldr	r1, [pc, #156]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
 80037b4:	e015      	b.n	80037e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b6:	4b26      	ldr	r3, [pc, #152]	; (8003850 <HAL_RCC_OscConfig+0x270>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fda8 	bl	8002310 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c4:	f7fe fda4 	bl	8002310 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e17a      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d03a      	beq.n	8003864 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d019      	beq.n	800382a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_RCC_OscConfig+0x274>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fc:	f7fe fd88 	bl	8002310 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003804:	f7fe fd84 	bl	8002310 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e15a      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <HAL_RCC_OscConfig+0x26c>)
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003822:	2001      	movs	r0, #1
 8003824:	f000 faf4 	bl	8003e10 <RCC_Delay>
 8003828:	e01c      	b.n	8003864 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <HAL_RCC_OscConfig+0x274>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003830:	f7fe fd6e 	bl	8002310 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003836:	e00f      	b.n	8003858 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fe fd6a 	bl	8002310 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d908      	bls.n	8003858 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e140      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	42420000 	.word	0x42420000
 8003854:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003858:	4b9e      	ldr	r3, [pc, #632]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e9      	bne.n	8003838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80a6 	beq.w	80039be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003876:	4b97      	ldr	r3, [pc, #604]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	4b94      	ldr	r3, [pc, #592]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4a93      	ldr	r2, [pc, #588]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388c:	61d3      	str	r3, [r2, #28]
 800388e:	4b91      	ldr	r3, [pc, #580]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b8e      	ldr	r3, [pc, #568]	; (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d118      	bne.n	80038dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038aa:	4b8b      	ldr	r3, [pc, #556]	; (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a8a      	ldr	r2, [pc, #552]	; (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b6:	f7fe fd2b 	bl	8002310 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038be:	f7fe fd27 	bl	8002310 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b64      	cmp	r3, #100	; 0x64
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e0fd      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	4b81      	ldr	r3, [pc, #516]	; (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d106      	bne.n	80038f2 <HAL_RCC_OscConfig+0x312>
 80038e4:	4b7b      	ldr	r3, [pc, #492]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4a7a      	ldr	r2, [pc, #488]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6213      	str	r3, [r2, #32]
 80038f0:	e02d      	b.n	800394e <HAL_RCC_OscConfig+0x36e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10c      	bne.n	8003914 <HAL_RCC_OscConfig+0x334>
 80038fa:	4b76      	ldr	r3, [pc, #472]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4a75      	ldr	r2, [pc, #468]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6213      	str	r3, [r2, #32]
 8003906:	4b73      	ldr	r3, [pc, #460]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4a72      	ldr	r2, [pc, #456]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 800390c:	f023 0304 	bic.w	r3, r3, #4
 8003910:	6213      	str	r3, [r2, #32]
 8003912:	e01c      	b.n	800394e <HAL_RCC_OscConfig+0x36e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b05      	cmp	r3, #5
 800391a:	d10c      	bne.n	8003936 <HAL_RCC_OscConfig+0x356>
 800391c:	4b6d      	ldr	r3, [pc, #436]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4a6c      	ldr	r2, [pc, #432]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003922:	f043 0304 	orr.w	r3, r3, #4
 8003926:	6213      	str	r3, [r2, #32]
 8003928:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4a69      	ldr	r2, [pc, #420]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6213      	str	r3, [r2, #32]
 8003934:	e00b      	b.n	800394e <HAL_RCC_OscConfig+0x36e>
 8003936:	4b67      	ldr	r3, [pc, #412]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4a66      	ldr	r2, [pc, #408]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	6213      	str	r3, [r2, #32]
 8003942:	4b64      	ldr	r3, [pc, #400]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4a63      	ldr	r2, [pc, #396]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003948:	f023 0304 	bic.w	r3, r3, #4
 800394c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d015      	beq.n	8003982 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003956:	f7fe fcdb 	bl	8002310 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	e00a      	b.n	8003974 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fe fcd7 	bl	8002310 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e0ab      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003974:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ee      	beq.n	800395e <HAL_RCC_OscConfig+0x37e>
 8003980:	e014      	b.n	80039ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003982:	f7fe fcc5 	bl	8002310 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7fe fcc1 	bl	8002310 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f241 3288 	movw	r2, #5000	; 0x1388
 8003998:	4293      	cmp	r3, r2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e095      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a0:	4b4c      	ldr	r3, [pc, #304]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ee      	bne.n	800398a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d105      	bne.n	80039be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b2:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4a47      	ldr	r2, [pc, #284]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 80039b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8081 	beq.w	8003aca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c8:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d061      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d146      	bne.n	8003a6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039dc:	4b3f      	ldr	r3, [pc, #252]	; (8003adc <HAL_RCC_OscConfig+0x4fc>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fe fc95 	bl	8002310 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe fc91 	bl	8002310 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e067      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a10:	d108      	bne.n	8003a24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a12:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	492d      	ldr	r1, [pc, #180]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a24:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a19      	ldr	r1, [r3, #32]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	430b      	orrs	r3, r1
 8003a36:	4927      	ldr	r1, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a3c:	4b27      	ldr	r3, [pc, #156]	; (8003adc <HAL_RCC_OscConfig+0x4fc>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a42:	f7fe fc65 	bl	8002310 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7fe fc61 	bl	8002310 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e037      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x46a>
 8003a68:	e02f      	b.n	8003aca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <HAL_RCC_OscConfig+0x4fc>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fe fc4e 	bl	8002310 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fe fc4a 	bl	8002310 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e020      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x498>
 8003a96:	e018      	b.n	8003aca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e013      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	42420060 	.word	0x42420060

08003ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0d0      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003af4:	4b6a      	ldr	r3, [pc, #424]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d910      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b67      	ldr	r3, [pc, #412]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 0207 	bic.w	r2, r3, #7
 8003b0a:	4965      	ldr	r1, [pc, #404]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0b8      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a58      	ldr	r2, [pc, #352]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b54:	4b53      	ldr	r3, [pc, #332]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a52      	ldr	r2, [pc, #328]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b50      	ldr	r3, [pc, #320]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	494d      	ldr	r1, [pc, #308]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d040      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d115      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e07f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e073      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bae:	4b3d      	ldr	r3, [pc, #244]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e06b      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bbe:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4936      	ldr	r1, [pc, #216]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd0:	f7fe fb9e 	bl	8002310 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd8:	f7fe fb9a 	bl	8002310 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e053      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 020c 	and.w	r2, r3, #12
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d1eb      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d210      	bcs.n	8003c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 0207 	bic.w	r2, r3, #7
 8003c16:	4922      	ldr	r1, [pc, #136]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e032      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4916      	ldr	r1, [pc, #88]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c6e:	f000 f821 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c80:	5ccb      	ldrb	r3, [r1, r3]
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	4a09      	ldr	r2, [pc, #36]	; (8003cac <HAL_RCC_ClockConfig+0x1cc>)
 8003c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe f998 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08009e0c 	.word	0x08009e0c
 8003cac:	20000064 	.word	0x20000064
 8003cb0:	20000068 	.word	0x20000068

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	b490      	push	{r4, r7}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cba:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cbc:	1d3c      	adds	r4, r7, #4
 8003cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cc4:	f240 2301 	movw	r3, #513	; 0x201
 8003cc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d002      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_GetSysClockFreq+0x46>
 8003cf2:	e02d      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf6:	623b      	str	r3, [r7, #32]
      break;
 8003cf8:	e02d      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	0c9b      	lsrs	r3, r3, #18
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d06:	4413      	add	r3, r2
 8003d08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	0c5b      	lsrs	r3, r3, #17
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d26:	4413      	add	r3, r2
 8003d28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d32:	fb02 f203 	mul.w	r2, r2, r3
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	e004      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	623b      	str	r3, [r7, #32]
      break;
 8003d4e:	e002      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d52:	623b      	str	r3, [r7, #32]
      break;
 8003d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d56:	6a3b      	ldr	r3, [r7, #32]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc90      	pop	{r4, r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	08009d10 	.word	0x08009d10
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	007a1200 	.word	0x007a1200
 8003d70:	003d0900 	.word	0x003d0900

08003d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b02      	ldr	r3, [pc, #8]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	20000064 	.word	0x20000064

08003d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d8c:	f7ff fff2 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4903      	ldr	r1, [pc, #12]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	08009e1c 	.word	0x08009e1c

08003db0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_RCC_GetClockConfig+0x58>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <HAL_RCC_GetClockConfig+0x58>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_GetClockConfig+0x58>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <HAL_RCC_GetClockConfig+0x58>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	08db      	lsrs	r3, r3, #3
 8003dea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_GetClockConfig+0x5c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0207 	and.w	r2, r3, #7
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40022000 	.word	0x40022000

08003e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <RCC_Delay+0x34>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <RCC_Delay+0x38>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0a5b      	lsrs	r3, r3, #9
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e2c:	bf00      	nop
  }
  while (Delay --);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1e5a      	subs	r2, r3, #1
 8003e32:	60fa      	str	r2, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f9      	bne.n	8003e2c <RCC_Delay+0x1c>
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	20000064 	.word	0x20000064
 8003e48:	10624dd3 	.word	0x10624dd3

08003e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d07d      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6c:	4b4f      	ldr	r3, [pc, #316]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10d      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e78:	4b4c      	ldr	r3, [pc, #304]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	4a4b      	ldr	r2, [pc, #300]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e82:	61d3      	str	r3, [r2, #28]
 8003e84:	4b49      	ldr	r3, [pc, #292]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	4b46      	ldr	r3, [pc, #280]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d118      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ea0:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a42      	ldr	r2, [pc, #264]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eac:	f7fe fa30 	bl	8002310 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb4:	f7fe fa2c 	bl	8002310 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e06d      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ed2:	4b36      	ldr	r3, [pc, #216]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d02e      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d027      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ef0:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003efa:	4b2e      	ldr	r3, [pc, #184]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f00:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f06:	4a29      	ldr	r2, [pc, #164]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d014      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fe f9fb 	bl	8002310 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fe f9f7 	bl	8002310 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e036      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f40:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4917      	ldr	r1, [pc, #92]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f70:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	490b      	ldr	r1, [pc, #44]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8e:	4b07      	ldr	r3, [pc, #28]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4904      	ldr	r1, [pc, #16]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	42420440 	.word	0x42420440

08003fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e01d      	b.n	8004006 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd ffd2 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f000 fa1c 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b06      	cmp	r3, #6
 8004036:	d007      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b02      	cmp	r3, #2
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0202 	mvn.w	r2, #2
 8004080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9b1 	bl	80043fe <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9a4 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f9b3 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0204 	mvn.w	r2, #4
 80040d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f987 	bl	80043fe <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f97a 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f989 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b08      	cmp	r3, #8
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0208 	mvn.w	r2, #8
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f95d 	bl	80043fe <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f950 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f95f 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b10      	cmp	r3, #16
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0210 	mvn.w	r2, #16
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2208      	movs	r2, #8
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f933 	bl	80043fe <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f926 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f935 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0201 	mvn.w	r2, #1
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd fe88 	bl	8001ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa5d 	bl	80046be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b40      	cmp	r3, #64	; 0x40
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8f9 	bl	8004422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b20      	cmp	r3, #32
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b20      	cmp	r3, #32
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0220 	mvn.w	r2, #32
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa28 	bl	80046ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800425c:	bf00      	nop
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIM_ConfigClockSource+0x18>
 8004278:	2302      	movs	r3, #2
 800427a:	e0b3      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x180>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800429a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b4:	d03e      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0xd0>
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ba:	f200 8087 	bhi.w	80043cc <HAL_TIM_ConfigClockSource+0x168>
 80042be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c2:	f000 8085 	beq.w	80043d0 <HAL_TIM_ConfigClockSource+0x16c>
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ca:	d87f      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x168>
 80042cc:	2b70      	cmp	r3, #112	; 0x70
 80042ce:	d01a      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xa2>
 80042d0:	2b70      	cmp	r3, #112	; 0x70
 80042d2:	d87b      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x168>
 80042d4:	2b60      	cmp	r3, #96	; 0x60
 80042d6:	d050      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x116>
 80042d8:	2b60      	cmp	r3, #96	; 0x60
 80042da:	d877      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x168>
 80042dc:	2b50      	cmp	r3, #80	; 0x50
 80042de:	d03c      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xf6>
 80042e0:	2b50      	cmp	r3, #80	; 0x50
 80042e2:	d873      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x168>
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d058      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x136>
 80042e8:	2b40      	cmp	r3, #64	; 0x40
 80042ea:	d86f      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x168>
 80042ec:	2b30      	cmp	r3, #48	; 0x30
 80042ee:	d064      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x156>
 80042f0:	2b30      	cmp	r3, #48	; 0x30
 80042f2:	d86b      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x168>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d060      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x156>
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d867      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x168>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05c      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x156>
 8004300:	2b10      	cmp	r3, #16
 8004302:	d05a      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004304:	e062      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6899      	ldr	r1, [r3, #8]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f000 f966 	bl	80045e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004328:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	609a      	str	r2, [r3, #8]
      break;
 8004332:	e04e      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f000 f94f 	bl	80045e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004356:	609a      	str	r2, [r3, #8]
      break;
 8004358:	e03b      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	461a      	mov	r2, r3
 8004368:	f000 f8c6 	bl	80044f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2150      	movs	r1, #80	; 0x50
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f91d 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 8004378:	e02b      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	461a      	mov	r2, r3
 8004388:	f000 f8e4 	bl	8004554 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2160      	movs	r1, #96	; 0x60
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f90d 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 8004398:	e01b      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f000 f8a6 	bl	80044f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2140      	movs	r1, #64	; 0x40
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f8fd 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 80043b8:	e00b      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f000 f8f4 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 80043ca:	e002      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043cc:	bf00      	nop
 80043ce:	e000      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a29      	ldr	r2, [pc, #164]	; (80044ec <TIM_Base_SetConfig+0xb8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0x30>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0x30>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0x30>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a25      	ldr	r2, [pc, #148]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <TIM_Base_SetConfig+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00b      	beq.n	8004496 <TIM_Base_SetConfig+0x62>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d007      	beq.n	8004496 <TIM_Base_SetConfig+0x62>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <TIM_Base_SetConfig+0x62>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d108      	bne.n	80044a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a07      	ldr	r2, [pc, #28]	; (80044ec <TIM_Base_SetConfig+0xb8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	615a      	str	r2, [r3, #20]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800

080044f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0201 	bic.w	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 030a 	bic.w	r3, r3, #10
 8004534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f023 0210 	bic.w	r2, r3, #16
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800457e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	031b      	lsls	r3, r3, #12
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004590:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	621a      	str	r2, [r3, #32]
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f043 0307 	orr.w	r3, r3, #7
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004600:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	021a      	lsls	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	431a      	orrs	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4313      	orrs	r3, r2
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e032      	b.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004674:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046d0:	b084      	sub	sp, #16
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	f107 0014 	add.w	r0, r7, #20
 80046de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	b004      	add	sp, #16
 80046ee:	4770      	bx	lr

080046f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80046fc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004704:	b29a      	uxth	r2, r3
 8004706:	89fb      	ldrh	r3, [r7, #14]
 8004708:	4313      	orrs	r3, r2
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr

0800471e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004726:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800472a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004732:	b29b      	uxth	r3, r3
 8004734:	b21a      	sxth	r2, r3
 8004736:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800473a:	43db      	mvns	r3, r3
 800473c:	b21b      	sxth	r3, r3
 800473e:	4013      	ands	r3, r2
 8004740:	b21b      	sxth	r3, r3
 8004742:	b29a      	uxth	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800476e:	b084      	sub	sp, #16
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	f107 0014 	add.w	r0, r7, #20
 800477c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ffa5 	bl	80046f0 <USB_EnableGlobalInt>

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047b2:	b004      	add	sp, #16
 80047b4:	4770      	bx	lr
	...

080047b8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047b8:	b490      	push	{r4, r7}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	78db      	ldrb	r3, [r3, #3]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d819      	bhi.n	800481a <USB_ActivateEndpoint+0x62>
 80047e6:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <USB_ActivateEndpoint+0x34>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	080047fd 	.word	0x080047fd
 80047f0:	08004811 	.word	0x08004811
 80047f4:	08004821 	.word	0x08004821
 80047f8:	08004807 	.word	0x08004807
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047fc:	89bb      	ldrh	r3, [r7, #12]
 80047fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004802:	81bb      	strh	r3, [r7, #12]
      break;
 8004804:	e00d      	b.n	8004822 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004806:	89bb      	ldrh	r3, [r7, #12]
 8004808:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800480c:	81bb      	strh	r3, [r7, #12]
      break;
 800480e:	e008      	b.n	8004822 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004810:	89bb      	ldrh	r3, [r7, #12]
 8004812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004816:	81bb      	strh	r3, [r7, #12]
      break;
 8004818:	e003      	b.n	8004822 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
      break;
 800481e:	e000      	b.n	8004822 <USB_ActivateEndpoint+0x6a>
      break;
 8004820:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	89bb      	ldrh	r3, [r7, #12]
 800482e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483e:	b29b      	uxth	r3, r3
 8004840:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004858:	b29a      	uxth	r2, r3
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	4313      	orrs	r3, r2
 8004862:	b29c      	uxth	r4, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	441a      	add	r2, r3
 800486e:	4b8a      	ldr	r3, [pc, #552]	; (8004a98 <USB_ActivateEndpoint+0x2e0>)
 8004870:	4323      	orrs	r3, r4
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	7b1b      	ldrb	r3, [r3, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 8112 	bne.w	8004aa4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d067      	beq.n	8004958 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004888:	687c      	ldr	r4, [r7, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004890:	b29b      	uxth	r3, r3
 8004892:	441c      	add	r4, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	4423      	add	r3, r4
 800489c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a0:	461c      	mov	r4, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	88db      	ldrh	r3, [r3, #6]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29c      	uxth	r4, r3
 80048be:	4623      	mov	r3, r4
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d014      	beq.n	80048f2 <USB_ActivateEndpoint+0x13a>
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	b29c      	uxth	r4, r3
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	4b6c      	ldr	r3, [pc, #432]	; (8004a9c <USB_ActivateEndpoint+0x2e4>)
 80048ec:	4323      	orrs	r3, r4
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	78db      	ldrb	r3, [r3, #3]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d018      	beq.n	800492c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004910:	b29c      	uxth	r4, r3
 8004912:	f084 0320 	eor.w	r3, r4, #32
 8004916:	b29c      	uxth	r4, r3
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	4b5d      	ldr	r3, [pc, #372]	; (8004a98 <USB_ActivateEndpoint+0x2e0>)
 8004924:	4323      	orrs	r3, r4
 8004926:	b29b      	uxth	r3, r3
 8004928:	8013      	strh	r3, [r2, #0]
 800492a:	e22b      	b.n	8004d84 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004942:	b29c      	uxth	r4, r3
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	441a      	add	r2, r3
 800494e:	4b52      	ldr	r3, [pc, #328]	; (8004a98 <USB_ActivateEndpoint+0x2e0>)
 8004950:	4323      	orrs	r3, r4
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]
 8004956:	e215      	b.n	8004d84 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004958:	687c      	ldr	r4, [r7, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004960:	b29b      	uxth	r3, r3
 8004962:	441c      	add	r4, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	4423      	add	r3, r4
 800496c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004970:	461c      	mov	r4, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	88db      	ldrh	r3, [r3, #6]
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	b29b      	uxth	r3, r3
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004980:	687c      	ldr	r4, [r7, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004988:	b29b      	uxth	r3, r3
 800498a:	441c      	add	r4, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	4423      	add	r3, r4
 8004994:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004998:	461c      	mov	r4, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10e      	bne.n	80049c0 <USB_ActivateEndpoint+0x208>
 80049a2:	8823      	ldrh	r3, [r4, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8023      	strh	r3, [r4, #0]
 80049ae:	8823      	ldrh	r3, [r4, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8023      	strh	r3, [r4, #0]
 80049be:	e02d      	b.n	8004a1c <USB_ActivateEndpoint+0x264>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b3e      	cmp	r3, #62	; 0x3e
 80049c6:	d812      	bhi.n	80049ee <USB_ActivateEndpoint+0x236>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	085b      	lsrs	r3, r3, #1
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <USB_ActivateEndpoint+0x22a>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	3301      	adds	r3, #1
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	029b      	lsls	r3, r3, #10
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8023      	strh	r3, [r4, #0]
 80049ec:	e016      	b.n	8004a1c <USB_ActivateEndpoint+0x264>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <USB_ActivateEndpoint+0x250>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	029b      	lsls	r3, r3, #10
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29c      	uxth	r4, r3
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d014      	beq.n	8004a5e <USB_ActivateEndpoint+0x2a6>
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	b29c      	uxth	r4, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <USB_ActivateEndpoint+0x2e8>)
 8004a58:	4323      	orrs	r3, r4
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a74:	b29c      	uxth	r4, r3
 8004a76:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004a7a:	b29c      	uxth	r4, r3
 8004a7c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004a80:	b29c      	uxth	r4, r3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	4b02      	ldr	r3, [pc, #8]	; (8004a98 <USB_ActivateEndpoint+0x2e0>)
 8004a8e:	4323      	orrs	r3, r4
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	8013      	strh	r3, [r2, #0]
 8004a94:	e176      	b.n	8004d84 <USB_ActivateEndpoint+0x5cc>
 8004a96:	bf00      	nop
 8004a98:	ffff8080 	.word	0xffff8080
 8004a9c:	ffff80c0 	.word	0xffff80c0
 8004aa0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	b29c      	uxth	r4, r3
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	4b96      	ldr	r3, [pc, #600]	; (8004d20 <USB_ActivateEndpoint+0x568>)
 8004ac8:	4323      	orrs	r3, r4
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ace:	687c      	ldr	r4, [r7, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	441c      	add	r4, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	4423      	add	r3, r4
 8004ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ae6:	461c      	mov	r4, r3
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	891b      	ldrh	r3, [r3, #8]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8023      	strh	r3, [r4, #0]
 8004af6:	687c      	ldr	r4, [r7, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	441c      	add	r4, r3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	4423      	add	r3, r4
 8004b0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b0e:	461c      	mov	r4, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	895b      	ldrh	r3, [r3, #10]
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 8088 	bne.w	8004c38 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29c      	uxth	r4, r3
 8004b36:	4623      	mov	r3, r4
 8004b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d014      	beq.n	8004b6a <USB_ActivateEndpoint+0x3b2>
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b56:	b29c      	uxth	r4, r3
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	4b70      	ldr	r3, [pc, #448]	; (8004d24 <USB_ActivateEndpoint+0x56c>)
 8004b64:	4323      	orrs	r3, r4
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29c      	uxth	r4, r3
 8004b78:	4623      	mov	r3, r4
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d014      	beq.n	8004bac <USB_ActivateEndpoint+0x3f4>
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	b29c      	uxth	r4, r3
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	4b60      	ldr	r3, [pc, #384]	; (8004d28 <USB_ActivateEndpoint+0x570>)
 8004ba6:	4323      	orrs	r3, r4
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	b29c      	uxth	r4, r3
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	4b56      	ldr	r3, [pc, #344]	; (8004d28 <USB_ActivateEndpoint+0x570>)
 8004bd0:	4323      	orrs	r3, r4
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	b29c      	uxth	r4, r3
 8004bee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004bf2:	b29c      	uxth	r4, r3
 8004bf4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004bf8:	b29c      	uxth	r4, r3
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	441a      	add	r2, r3
 8004c04:	4b49      	ldr	r3, [pc, #292]	; (8004d2c <USB_ActivateEndpoint+0x574>)
 8004c06:	4323      	orrs	r3, r4
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c22:	b29c      	uxth	r4, r3
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <USB_ActivateEndpoint+0x574>)
 8004c30:	4323      	orrs	r3, r4
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]
 8004c36:	e0a5      	b.n	8004d84 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29c      	uxth	r4, r3
 8004c46:	4623      	mov	r3, r4
 8004c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d014      	beq.n	8004c7a <USB_ActivateEndpoint+0x4c2>
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	b29c      	uxth	r4, r3
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	4b2c      	ldr	r3, [pc, #176]	; (8004d24 <USB_ActivateEndpoint+0x56c>)
 8004c74:	4323      	orrs	r3, r4
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29c      	uxth	r4, r3
 8004c88:	4623      	mov	r3, r4
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d014      	beq.n	8004cbc <USB_ActivateEndpoint+0x504>
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	b29c      	uxth	r4, r3
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	4b1c      	ldr	r3, [pc, #112]	; (8004d28 <USB_ActivateEndpoint+0x570>)
 8004cb6:	4323      	orrs	r3, r4
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	b29c      	uxth	r4, r3
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <USB_ActivateEndpoint+0x56c>)
 8004ce0:	4323      	orrs	r3, r4
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	78db      	ldrb	r3, [r3, #3]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d020      	beq.n	8004d30 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d04:	b29c      	uxth	r4, r3
 8004d06:	f084 0320 	eor.w	r3, r4, #32
 8004d0a:	b29c      	uxth	r4, r3
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <USB_ActivateEndpoint+0x574>)
 8004d18:	4323      	orrs	r3, r4
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	8013      	strh	r3, [r2, #0]
 8004d1e:	e01c      	b.n	8004d5a <USB_ActivateEndpoint+0x5a2>
 8004d20:	ffff8180 	.word	0xffff8180
 8004d24:	ffffc080 	.word	0xffffc080
 8004d28:	ffff80c0 	.word	0xffff80c0
 8004d2c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d46:	b29c      	uxth	r4, r3
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <USB_ActivateEndpoint+0x5d8>)
 8004d54:	4323      	orrs	r3, r4
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d70:	b29c      	uxth	r4, r3
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	441a      	add	r2, r3
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <USB_ActivateEndpoint+0x5d8>)
 8004d7e:	4323      	orrs	r3, r4
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc90      	pop	{r4, r7}
 8004d8e:	4770      	bx	lr
 8004d90:	ffff8080 	.word	0xffff8080

08004d94 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d94:	b490      	push	{r4, r7}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	7b1b      	ldrb	r3, [r3, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d171      	bne.n	8004e8a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d036      	beq.n	8004e1c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29c      	uxth	r4, r3
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d014      	beq.n	8004df0 <USB_DeactivateEndpoint+0x5c>
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ddc:	b29c      	uxth	r4, r3
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	4b6b      	ldr	r3, [pc, #428]	; (8004f98 <USB_DeactivateEndpoint+0x204>)
 8004dea:	4323      	orrs	r3, r4
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e06:	b29c      	uxth	r4, r3
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	441a      	add	r2, r3
 8004e12:	4b62      	ldr	r3, [pc, #392]	; (8004f9c <USB_DeactivateEndpoint+0x208>)
 8004e14:	4323      	orrs	r3, r4
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
 8004e1a:	e144      	b.n	80050a6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29c      	uxth	r4, r3
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d014      	beq.n	8004e5e <USB_DeactivateEndpoint+0xca>
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	b29c      	uxth	r4, r3
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	4b52      	ldr	r3, [pc, #328]	; (8004fa0 <USB_DeactivateEndpoint+0x20c>)
 8004e58:	4323      	orrs	r3, r4
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e74:	b29c      	uxth	r4, r3
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	4b46      	ldr	r3, [pc, #280]	; (8004f9c <USB_DeactivateEndpoint+0x208>)
 8004e82:	4323      	orrs	r3, r4
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	8013      	strh	r3, [r2, #0]
 8004e88:	e10d      	b.n	80050a6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 8088 	bne.w	8004fa4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29c      	uxth	r4, r3
 8004ea2:	4623      	mov	r3, r4
 8004ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d014      	beq.n	8004ed6 <USB_DeactivateEndpoint+0x142>
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	b29c      	uxth	r4, r3
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	441a      	add	r2, r3
 8004ece:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <USB_DeactivateEndpoint+0x20c>)
 8004ed0:	4323      	orrs	r3, r4
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29c      	uxth	r4, r3
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d014      	beq.n	8004f18 <USB_DeactivateEndpoint+0x184>
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f04:	b29c      	uxth	r4, r3
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <USB_DeactivateEndpoint+0x204>)
 8004f12:	4323      	orrs	r3, r4
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	b29c      	uxth	r4, r3
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	4b17      	ldr	r3, [pc, #92]	; (8004f98 <USB_DeactivateEndpoint+0x204>)
 8004f3c:	4323      	orrs	r3, r4
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	b29c      	uxth	r4, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <USB_DeactivateEndpoint+0x208>)
 8004f66:	4323      	orrs	r3, r4
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f82:	b29c      	uxth	r4, r3
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <USB_DeactivateEndpoint+0x208>)
 8004f90:	4323      	orrs	r3, r4
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]
 8004f96:	e086      	b.n	80050a6 <USB_DeactivateEndpoint+0x312>
 8004f98:	ffff80c0 	.word	0xffff80c0
 8004f9c:	ffff8080 	.word	0xffff8080
 8004fa0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29c      	uxth	r4, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d014      	beq.n	8004fe6 <USB_DeactivateEndpoint+0x252>
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	b29c      	uxth	r4, r3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <USB_DeactivateEndpoint+0x320>)
 8004fe0:	4323      	orrs	r3, r4
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29c      	uxth	r4, r3
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d014      	beq.n	8005028 <USB_DeactivateEndpoint+0x294>
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005014:	b29c      	uxth	r4, r3
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	441a      	add	r2, r3
 8005020:	4b25      	ldr	r3, [pc, #148]	; (80050b8 <USB_DeactivateEndpoint+0x324>)
 8005022:	4323      	orrs	r3, r4
 8005024:	b29b      	uxth	r3, r3
 8005026:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	b29c      	uxth	r4, r3
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	441a      	add	r2, r3
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <USB_DeactivateEndpoint+0x320>)
 800504c:	4323      	orrs	r3, r4
 800504e:	b29b      	uxth	r3, r3
 8005050:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005068:	b29c      	uxth	r4, r3
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <USB_DeactivateEndpoint+0x328>)
 8005076:	4323      	orrs	r3, r4
 8005078:	b29b      	uxth	r3, r3
 800507a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	b29c      	uxth	r4, r3
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	441a      	add	r2, r3
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <USB_DeactivateEndpoint+0x328>)
 80050a0:	4323      	orrs	r3, r4
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc90      	pop	{r4, r7}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	ffffc080 	.word	0xffffc080
 80050b8:	ffff80c0 	.word	0xffff80c0
 80050bc:	ffff8080 	.word	0xffff8080

080050c0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b08d      	sub	sp, #52	; 0x34
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	f040 8160 	bne.w	8005394 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d909      	bls.n	80050f4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	1ad2      	subs	r2, r2, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	619a      	str	r2, [r3, #24]
 80050f2:	e005      	b.n	8005100 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2200      	movs	r2, #0
 80050fe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	7b1b      	ldrb	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d119      	bne.n	800513c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6959      	ldr	r1, [r3, #20]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	88da      	ldrh	r2, [r3, #6]
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	b29b      	uxth	r3, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fba2 	bl	800585e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800511a:	687c      	ldr	r4, [r7, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005122:	b29b      	uxth	r3, r3
 8005124:	441c      	add	r4, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	4423      	add	r3, r4
 800512e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005132:	461c      	mov	r4, r3
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	b29b      	uxth	r3, r3
 8005138:	8023      	strh	r3, [r4, #0]
 800513a:	e10f      	b.n	800535c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d065      	beq.n	800521e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005152:	687c      	ldr	r4, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d148      	bne.n	80051ee <USB_EPStartXfer+0x12e>
 800515c:	687c      	ldr	r4, [r7, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005164:	b29b      	uxth	r3, r3
 8005166:	441c      	add	r4, r3
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	4423      	add	r3, r4
 8005170:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005174:	461c      	mov	r4, r3
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10e      	bne.n	800519a <USB_EPStartXfer+0xda>
 800517c:	8823      	ldrh	r3, [r4, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005184:	b29b      	uxth	r3, r3
 8005186:	8023      	strh	r3, [r4, #0]
 8005188:	8823      	ldrh	r3, [r4, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005194:	b29b      	uxth	r3, r3
 8005196:	8023      	strh	r3, [r4, #0]
 8005198:	e03d      	b.n	8005216 <USB_EPStartXfer+0x156>
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	2b3e      	cmp	r3, #62	; 0x3e
 800519e:	d810      	bhi.n	80051c2 <USB_EPStartXfer+0x102>
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <USB_EPStartXfer+0xf6>
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	3301      	adds	r3, #1
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	029b      	lsls	r3, r3, #10
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8023      	strh	r3, [r4, #0]
 80051c0:	e029      	b.n	8005216 <USB_EPStartXfer+0x156>
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <USB_EPStartXfer+0x118>
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	3b01      	subs	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	b29b      	uxth	r3, r3
 80051dc:	029b      	lsls	r3, r3, #10
 80051de:	b29b      	uxth	r3, r3
 80051e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	8023      	strh	r3, [r4, #0]
 80051ec:	e013      	b.n	8005216 <USB_EPStartXfer+0x156>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10f      	bne.n	8005216 <USB_EPStartXfer+0x156>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	441c      	add	r4, r3
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	4423      	add	r3, r4
 8005208:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	895b      	ldrh	r3, [r3, #10]
 800521a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800521c:	e063      	b.n	80052e6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d148      	bne.n	80052b8 <USB_EPStartXfer+0x1f8>
 8005226:	687c      	ldr	r4, [r7, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	441c      	add	r4, r3
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	4423      	add	r3, r4
 800523a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800523e:	461c      	mov	r4, r3
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10e      	bne.n	8005264 <USB_EPStartXfer+0x1a4>
 8005246:	8823      	ldrh	r3, [r4, #0]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800524e:	b29b      	uxth	r3, r3
 8005250:	8023      	strh	r3, [r4, #0]
 8005252:	8823      	ldrh	r3, [r4, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525e:	b29b      	uxth	r3, r3
 8005260:	8023      	strh	r3, [r4, #0]
 8005262:	e03d      	b.n	80052e0 <USB_EPStartXfer+0x220>
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	2b3e      	cmp	r3, #62	; 0x3e
 8005268:	d810      	bhi.n	800528c <USB_EPStartXfer+0x1cc>
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	623b      	str	r3, [r7, #32]
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <USB_EPStartXfer+0x1c0>
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	3301      	adds	r3, #1
 800527e:	623b      	str	r3, [r7, #32]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	b29b      	uxth	r3, r3
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	b29b      	uxth	r3, r3
 8005288:	8023      	strh	r3, [r4, #0]
 800528a:	e029      	b.n	80052e0 <USB_EPStartXfer+0x220>
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	f003 031f 	and.w	r3, r3, #31
 8005298:	2b00      	cmp	r3, #0
 800529a:	d102      	bne.n	80052a2 <USB_EPStartXfer+0x1e2>
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	3b01      	subs	r3, #1
 80052a0:	623b      	str	r3, [r7, #32]
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	029b      	lsls	r3, r3, #10
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8023      	strh	r3, [r4, #0]
 80052b6:	e013      	b.n	80052e0 <USB_EPStartXfer+0x220>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d10f      	bne.n	80052e0 <USB_EPStartXfer+0x220>
 80052c0:	687c      	ldr	r4, [r7, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	441c      	add	r4, r3
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	4423      	add	r3, r4
 80052d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d8:	461c      	mov	r4, r3
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	b29b      	uxth	r3, r3
 80052de:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	891b      	ldrh	r3, [r3, #8]
 80052e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6959      	ldr	r1, [r3, #20]
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fab4 	bl	800585e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d115      	bne.n	800532a <USB_EPStartXfer+0x26a>
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	b29c      	uxth	r4, r3
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	4b9a      	ldr	r3, [pc, #616]	; (800558c <USB_EPStartXfer+0x4cc>)
 8005322:	4323      	orrs	r3, r4
 8005324:	b29b      	uxth	r3, r3
 8005326:	8013      	strh	r3, [r2, #0]
 8005328:	e018      	b.n	800535c <USB_EPStartXfer+0x29c>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d114      	bne.n	800535c <USB_EPStartXfer+0x29c>
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005348:	b29c      	uxth	r4, r3
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	4b8e      	ldr	r3, [pc, #568]	; (8005590 <USB_EPStartXfer+0x4d0>)
 8005356:	4323      	orrs	r3, r4
 8005358:	b29b      	uxth	r3, r3
 800535a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005372:	b29c      	uxth	r4, r3
 8005374:	f084 0310 	eor.w	r3, r4, #16
 8005378:	b29c      	uxth	r4, r3
 800537a:	f084 0320 	eor.w	r3, r4, #32
 800537e:	b29c      	uxth	r4, r3
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	4b82      	ldr	r3, [pc, #520]	; (8005594 <USB_EPStartXfer+0x4d4>)
 800538c:	4323      	orrs	r3, r4
 800538e:	b29b      	uxth	r3, r3
 8005390:	8013      	strh	r3, [r2, #0]
 8005392:	e146      	b.n	8005622 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	429a      	cmp	r2, r3
 800539e:	d909      	bls.n	80053b4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	1ad2      	subs	r2, r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	619a      	str	r2, [r3, #24]
 80053b2:	e005      	b.n	80053c0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2200      	movs	r2, #0
 80053be:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	7b1b      	ldrb	r3, [r3, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d148      	bne.n	800545a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80053c8:	687c      	ldr	r4, [r7, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	441c      	add	r4, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	4423      	add	r3, r4
 80053dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053e0:	461c      	mov	r4, r3
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10e      	bne.n	8005406 <USB_EPStartXfer+0x346>
 80053e8:	8823      	ldrh	r3, [r4, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	8023      	strh	r3, [r4, #0]
 80053f4:	8823      	ldrh	r3, [r4, #0]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005400:	b29b      	uxth	r3, r3
 8005402:	8023      	strh	r3, [r4, #0]
 8005404:	e0f2      	b.n	80055ec <USB_EPStartXfer+0x52c>
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	2b3e      	cmp	r3, #62	; 0x3e
 800540a:	d810      	bhi.n	800542e <USB_EPStartXfer+0x36e>
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <USB_EPStartXfer+0x362>
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3301      	adds	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	b29b      	uxth	r3, r3
 8005426:	029b      	lsls	r3, r3, #10
 8005428:	b29b      	uxth	r3, r3
 800542a:	8023      	strh	r3, [r4, #0]
 800542c:	e0de      	b.n	80055ec <USB_EPStartXfer+0x52c>
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <USB_EPStartXfer+0x384>
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	3b01      	subs	r3, #1
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	b29b      	uxth	r3, r3
 8005448:	029b      	lsls	r3, r3, #10
 800544a:	b29b      	uxth	r3, r3
 800544c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005454:	b29b      	uxth	r3, r3
 8005456:	8023      	strh	r3, [r4, #0]
 8005458:	e0c8      	b.n	80055ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d148      	bne.n	80054f4 <USB_EPStartXfer+0x434>
 8005462:	687c      	ldr	r4, [r7, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	441c      	add	r4, r3
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	4423      	add	r3, r4
 8005476:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800547a:	461c      	mov	r4, r3
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10e      	bne.n	80054a0 <USB_EPStartXfer+0x3e0>
 8005482:	8823      	ldrh	r3, [r4, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800548a:	b29b      	uxth	r3, r3
 800548c:	8023      	strh	r3, [r4, #0]
 800548e:	8823      	ldrh	r3, [r4, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549a:	b29b      	uxth	r3, r3
 800549c:	8023      	strh	r3, [r4, #0]
 800549e:	e03d      	b.n	800551c <USB_EPStartXfer+0x45c>
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	2b3e      	cmp	r3, #62	; 0x3e
 80054a4:	d810      	bhi.n	80054c8 <USB_EPStartXfer+0x408>
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <USB_EPStartXfer+0x3fc>
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	3301      	adds	r3, #1
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8023      	strh	r3, [r4, #0]
 80054c6:	e029      	b.n	800551c <USB_EPStartXfer+0x45c>
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <USB_EPStartXfer+0x41e>
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	3b01      	subs	r3, #1
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	029b      	lsls	r3, r3, #10
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	8023      	strh	r3, [r4, #0]
 80054f2:	e013      	b.n	800551c <USB_EPStartXfer+0x45c>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d10f      	bne.n	800551c <USB_EPStartXfer+0x45c>
 80054fc:	687c      	ldr	r4, [r7, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005504:	b29b      	uxth	r3, r3
 8005506:	441c      	add	r4, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4423      	add	r3, r4
 8005510:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005514:	461c      	mov	r4, r3
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	b29b      	uxth	r3, r3
 800551a:	8023      	strh	r3, [r4, #0]
 800551c:	687c      	ldr	r4, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d14e      	bne.n	80055c4 <USB_EPStartXfer+0x504>
 8005526:	687c      	ldr	r4, [r7, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552e:	b29b      	uxth	r3, r3
 8005530:	441c      	add	r4, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	4423      	add	r3, r4
 800553a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800553e:	461c      	mov	r4, r3
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10e      	bne.n	8005564 <USB_EPStartXfer+0x4a4>
 8005546:	8823      	ldrh	r3, [r4, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800554e:	b29b      	uxth	r3, r3
 8005550:	8023      	strh	r3, [r4, #0]
 8005552:	8823      	ldrh	r3, [r4, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800555a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555e:	b29b      	uxth	r3, r3
 8005560:	8023      	strh	r3, [r4, #0]
 8005562:	e043      	b.n	80055ec <USB_EPStartXfer+0x52c>
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	2b3e      	cmp	r3, #62	; 0x3e
 8005568:	d816      	bhi.n	8005598 <USB_EPStartXfer+0x4d8>
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	085b      	lsrs	r3, r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <USB_EPStartXfer+0x4c0>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	3301      	adds	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	b29b      	uxth	r3, r3
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	b29b      	uxth	r3, r3
 8005588:	8023      	strh	r3, [r4, #0]
 800558a:	e02f      	b.n	80055ec <USB_EPStartXfer+0x52c>
 800558c:	ffff80c0 	.word	0xffff80c0
 8005590:	ffffc080 	.word	0xffffc080
 8005594:	ffff8080 	.word	0xffff8080
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <USB_EPStartXfer+0x4ee>
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	029b      	lsls	r3, r3, #10
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8023      	strh	r3, [r4, #0]
 80055c2:	e013      	b.n	80055ec <USB_EPStartXfer+0x52c>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d10f      	bne.n	80055ec <USB_EPStartXfer+0x52c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	441c      	add	r4, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	4423      	add	r3, r4
 80055de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	b29c      	uxth	r4, r3
 8005604:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005608:	b29c      	uxth	r4, r3
 800560a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800560e:	b29c      	uxth	r4, r3
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	4b04      	ldr	r3, [pc, #16]	; (800562c <USB_EPStartXfer+0x56c>)
 800561c:	4323      	orrs	r3, r4
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3734      	adds	r7, #52	; 0x34
 8005628:	46bd      	mov	sp, r7
 800562a:	bd90      	pop	{r4, r7, pc}
 800562c:	ffff8080 	.word	0xffff8080

08005630 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005630:	b490      	push	{r4, r7}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d018      	beq.n	8005674 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005658:	b29c      	uxth	r4, r3
 800565a:	f084 0310 	eor.w	r3, r4, #16
 800565e:	b29c      	uxth	r4, r3
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	441a      	add	r2, r3
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <USB_EPSetStall+0x80>)
 800566c:	4323      	orrs	r3, r4
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]
 8005672:	e017      	b.n	80056a4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	b29c      	uxth	r4, r3
 800568c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005690:	b29c      	uxth	r4, r3
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	441a      	add	r2, r3
 800569c:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <USB_EPSetStall+0x80>)
 800569e:	4323      	orrs	r3, r4
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc90      	pop	{r4, r7}
 80056ae:	4770      	bx	lr
 80056b0:	ffff8080 	.word	0xffff8080

080056b4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056b4:	b490      	push	{r4, r7}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	7b1b      	ldrb	r3, [r3, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d17d      	bne.n	80057c2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d03d      	beq.n	800574a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29c      	uxth	r4, r3
 80056dc:	4623      	mov	r3, r4
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d014      	beq.n	8005710 <USB_EPClearStall+0x5c>
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fc:	b29c      	uxth	r4, r3
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	441a      	add	r2, r3
 8005708:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <USB_EPClearStall+0x11c>)
 800570a:	4323      	orrs	r3, r4
 800570c:	b29b      	uxth	r3, r3
 800570e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	78db      	ldrb	r3, [r3, #3]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d054      	beq.n	80057c2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572e:	b29c      	uxth	r4, r3
 8005730:	f084 0320 	eor.w	r3, r4, #32
 8005734:	b29c      	uxth	r4, r3
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	441a      	add	r2, r3
 8005740:	4b24      	ldr	r3, [pc, #144]	; (80057d4 <USB_EPClearStall+0x120>)
 8005742:	4323      	orrs	r3, r4
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
 8005748:	e03b      	b.n	80057c2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29c      	uxth	r4, r3
 8005758:	4623      	mov	r3, r4
 800575a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d014      	beq.n	800578c <USB_EPClearStall+0xd8>
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005778:	b29c      	uxth	r4, r3
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	441a      	add	r2, r3
 8005784:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <USB_EPClearStall+0x124>)
 8005786:	4323      	orrs	r3, r4
 8005788:	b29b      	uxth	r3, r3
 800578a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	b29c      	uxth	r4, r3
 80057a4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80057a8:	b29c      	uxth	r4, r3
 80057aa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80057ae:	b29c      	uxth	r4, r3
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <USB_EPClearStall+0x120>)
 80057bc:	4323      	orrs	r3, r4
 80057be:	b29b      	uxth	r3, r3
 80057c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc90      	pop	{r4, r7}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	ffff80c0 	.word	0xffff80c0
 80057d4:	ffff8080 	.word	0xffff8080
 80057d8:	ffffc080 	.word	0xffffc080

080057dc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005838:	b29b      	uxth	r3, r3
 800583a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800583c:	68fb      	ldr	r3, [r7, #12]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr

0800585e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800585e:	b480      	push	{r7}
 8005860:	b08d      	sub	sp, #52	; 0x34
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	4611      	mov	r1, r2
 800586a:	461a      	mov	r2, r3
 800586c:	460b      	mov	r3, r1
 800586e:	80fb      	strh	r3, [r7, #6]
 8005870:	4613      	mov	r3, r2
 8005872:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005874:	88bb      	ldrh	r3, [r7, #4]
 8005876:	3301      	adds	r3, #1
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	005a      	lsls	r2, r3, #1
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005896:	e01e      	b.n	80058d6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	3301      	adds	r3, #1
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	3302      	adds	r3, #2
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	3302      	adds	r3, #2
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	3301      	adds	r3, #1
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	3b01      	subs	r3, #1
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1dd      	bne.n	8005898 <USB_WritePMA+0x3a>
  }
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	3734      	adds	r7, #52	; 0x34
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b08b      	sub	sp, #44	; 0x2c
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4611      	mov	r1, r2
 80058f4:	461a      	mov	r2, r3
 80058f6:	460b      	mov	r3, r1
 80058f8:	80fb      	strh	r3, [r7, #6]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80058fe:	88bb      	ldrh	r3, [r7, #4]
 8005900:	085b      	lsrs	r3, r3, #1
 8005902:	b29b      	uxth	r3, r3
 8005904:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	005a      	lsls	r2, r3, #1
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800591a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
 8005920:	e01b      	b.n	800595a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	3302      	adds	r3, #2
 800592e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	b2da      	uxtb	r2, r3
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3301      	adds	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	b2da      	uxtb	r2, r3
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	3302      	adds	r3, #2
 8005952:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	3b01      	subs	r3, #1
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e0      	bne.n	8005922 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005960:	88bb      	ldrh	r3, [r7, #4]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	b2da      	uxtb	r2, r3
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	701a      	strb	r2, [r3, #0]
  }
}
 800597c:	bf00      	nop
 800597e:	372c      	adds	r7, #44	; 0x2c
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	7c1b      	ldrb	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d115      	bne.n	80059ca <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800599e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059a2:	2202      	movs	r2, #2
 80059a4:	2181      	movs	r1, #129	; 0x81
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f003 ffe5 	bl	8009976 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b6:	2202      	movs	r2, #2
 80059b8:	2101      	movs	r1, #1
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f003 ffdb 	bl	8009976 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80059c8:	e012      	b.n	80059f0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059ca:	2340      	movs	r3, #64	; 0x40
 80059cc:	2202      	movs	r2, #2
 80059ce:	2181      	movs	r1, #129	; 0x81
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f003 ffd0 	bl	8009976 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059dc:	2340      	movs	r3, #64	; 0x40
 80059de:	2202      	movs	r2, #2
 80059e0:	2101      	movs	r1, #1
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f003 ffc7 	bl	8009976 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059f0:	2308      	movs	r3, #8
 80059f2:	2203      	movs	r2, #3
 80059f4:	2182      	movs	r1, #130	; 0x82
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f003 ffbd 	bl	8009976 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a02:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a06:	f004 f8d7 	bl	8009bb8 <USBD_static_malloc>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	e026      	b.n	8005a70 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a28:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	7c1b      	ldrb	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a56:	2101      	movs	r1, #1
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f004 f876 	bl	8009b4a <USBD_LL_PrepareReceive>
 8005a5e:	e007      	b.n	8005a70 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a66:	2340      	movs	r3, #64	; 0x40
 8005a68:	2101      	movs	r1, #1
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f004 f86d 	bl	8009b4a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	460b      	mov	r3, r1
 8005a84:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a8a:	2181      	movs	r1, #129	; 0x81
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f003 ff98 	bl	80099c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a98:	2101      	movs	r1, #1
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f003 ff91 	bl	80099c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005aa8:	2182      	movs	r1, #130	; 0x82
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f003 ff89 	bl	80099c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00e      	beq.n	8005ade <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f004 f87d 	bl	8009bd0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d039      	beq.n	8005b86 <USBD_CDC_Setup+0x9e>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d17f      	bne.n	8005c16 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	88db      	ldrh	r3, [r3, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d029      	beq.n	8005b72 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da11      	bge.n	8005b4c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005b34:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	88d2      	ldrh	r2, [r2, #6]
 8005b3a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b3c:	6939      	ldr	r1, [r7, #16]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	88db      	ldrh	r3, [r3, #6]
 8005b42:	461a      	mov	r2, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 f9f0 	bl	8006f2a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b4a:	e06b      	b.n	8005c24 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	785a      	ldrb	r2, [r3, #1]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	88db      	ldrh	r3, [r3, #6]
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b62:	6939      	ldr	r1, [r7, #16]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	88db      	ldrh	r3, [r3, #6]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f001 fa0b 	bl	8006f86 <USBD_CtlPrepareRx>
      break;
 8005b70:	e058      	b.n	8005c24 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	7850      	ldrb	r0, [r2, #1]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	4798      	blx	r3
      break;
 8005b84:	e04e      	b.n	8005c24 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	2b0b      	cmp	r3, #11
 8005b8c:	d02e      	beq.n	8005bec <USBD_CDC_Setup+0x104>
 8005b8e:	2b0b      	cmp	r3, #11
 8005b90:	dc38      	bgt.n	8005c04 <USBD_CDC_Setup+0x11c>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <USBD_CDC_Setup+0xb4>
 8005b96:	2b0a      	cmp	r3, #10
 8005b98:	d014      	beq.n	8005bc4 <USBD_CDC_Setup+0xdc>
 8005b9a:	e033      	b.n	8005c04 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d107      	bne.n	8005bb6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005ba6:	f107 030c 	add.w	r3, r7, #12
 8005baa:	2202      	movs	r2, #2
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 f9bb 	bl	8006f2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bb4:	e02e      	b.n	8005c14 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 f94c 	bl	8006e56 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	75fb      	strb	r3, [r7, #23]
          break;
 8005bc2:	e027      	b.n	8005c14 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d107      	bne.n	8005bde <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bce:	f107 030f 	add.w	r3, r7, #15
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 f9a7 	bl	8006f2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bdc:	e01a      	b.n	8005c14 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 f938 	bl	8006e56 <USBD_CtlError>
            ret = USBD_FAIL;
 8005be6:	2302      	movs	r3, #2
 8005be8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bea:	e013      	b.n	8005c14 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d00d      	beq.n	8005c12 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 f92c 	bl	8006e56 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c02:	e006      	b.n	8005c12 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 f925 	bl	8006e56 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	75fb      	strb	r3, [r7, #23]
          break;
 8005c10:	e000      	b.n	8005c14 <USBD_CDC_Setup+0x12c>
          break;
 8005c12:	bf00      	nop
      }
      break;
 8005c14:	e006      	b.n	8005c24 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f91c 	bl	8006e56 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c1e:	2302      	movs	r3, #2
 8005c20:	75fb      	strb	r3, [r7, #23]
      break;
 8005c22:	bf00      	nop
  }

  return ret;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c40:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c48:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d037      	beq.n	8005cc4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	331c      	adds	r3, #28
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d026      	beq.n	8005cb8 <USBD_CDC_DataIn+0x8a>
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	331c      	adds	r3, #28
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	0152      	lsls	r2, r2, #5
 8005c82:	440a      	add	r2, r1
 8005c84:	3238      	adds	r2, #56	; 0x38
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c8c:	fb02 f201 	mul.w	r2, r2, r1
 8005c90:	1a9b      	subs	r3, r3, r2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d110      	bne.n	8005cb8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	331c      	adds	r3, #28
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005caa:	78f9      	ldrb	r1, [r7, #3]
 8005cac:	2300      	movs	r3, #0
 8005cae:	2200      	movs	r2, #0
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f003 ff27 	bl	8009b04 <USBD_LL_Transmit>
 8005cb6:	e003      	b.n	8005cc0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f003 ff52 	bl	8009b90 <USBD_LL_GetRxDataSize>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d12:	4611      	mov	r1, r2
 8005d14:	4798      	blx	r3

    return USBD_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e000      	b.n	8005d1c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d1a:	2302      	movs	r3, #2
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d015      	beq.n	8005d6a <USBD_CDC_EP0_RxReady+0x46>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d44:	2bff      	cmp	r3, #255	; 0xff
 8005d46:	d010      	beq.n	8005d6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d5e:	b292      	uxth	r2, r2
 8005d60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	22ff      	movs	r2, #255	; 0xff
 8005d66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2243      	movs	r2, #67	; 0x43
 8005d80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005d82:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	200000f8 	.word	0x200000f8

08005d94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2243      	movs	r2, #67	; 0x43
 8005da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005da2:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	200000b4 	.word	0x200000b4

08005db4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2243      	movs	r2, #67	; 0x43
 8005dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005dc2:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	2000013c 	.word	0x2000013c

08005dd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	220a      	movs	r2, #10
 8005de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005de2:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000070 	.word	0x20000070

08005df4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005dfe:	2302      	movs	r3, #2
 8005e00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr

08005e52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	7c1b      	ldrb	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f003 fe4f 	bl	8009b4a <USBD_LL_PrepareReceive>
 8005eac:	e007      	b.n	8005ebe <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f003 fe46 	bl	8009b4a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e000      	b.n	8005ec4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005ec2:	2302      	movs	r3, #2
  }
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8005ee0:	4814      	ldr	r0, [pc, #80]	; (8005f34 <USBD_Init+0x68>)
 8005ee2:	f7fa fa61 	bl	80003a8 <iprintf>
 8005ee6:	4814      	ldr	r0, [pc, #80]	; (8005f38 <USBD_Init+0x6c>)
 8005ee8:	f7fa fa5e 	bl	80003a8 <iprintf>
 8005eec:	200a      	movs	r0, #10
 8005eee:	f7fa fa89 	bl	8000404 <putchar>
#endif
    return USBD_FAIL;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e01a      	b.n	8005f2c <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	79fa      	ldrb	r2, [r7, #7]
 8005f22:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f003 fcb1 	bl	800988c <USBD_LL_Init>

  return USBD_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	08009d20 	.word	0x08009d20
 8005f38:	08009d28 	.word	0x08009d28

08005f3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d006      	beq.n	8005f5e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]
 8005f5c:	e00a      	b.n	8005f74 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8005f5e:	4808      	ldr	r0, [pc, #32]	; (8005f80 <USBD_RegisterClass+0x44>)
 8005f60:	f7fa fa22 	bl	80003a8 <iprintf>
 8005f64:	4807      	ldr	r0, [pc, #28]	; (8005f84 <USBD_RegisterClass+0x48>)
 8005f66:	f7fa fa1f 	bl	80003a8 <iprintf>
 8005f6a:	200a      	movs	r0, #10
 8005f6c:	f7fa fa4a 	bl	8000404 <putchar>
#endif
    status = USBD_FAIL;
 8005f70:	2302      	movs	r3, #2
 8005f72:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	08009d20 	.word	0x08009d20
 8005f84:	08009d40 	.word	0x08009d40

08005f88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f003 fcd5 	bl	8009940 <USBD_LL_Start>

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	4611      	mov	r1, r2
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3

  return USBD_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fed7 	bl	8006dde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	2b02      	cmp	r3, #2
 8006052:	d016      	beq.n	8006082 <USBD_LL_SetupStage+0x6a>
 8006054:	2b02      	cmp	r3, #2
 8006056:	d81c      	bhi.n	8006092 <USBD_LL_SetupStage+0x7a>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <USBD_LL_SetupStage+0x4a>
 800605c:	2b01      	cmp	r3, #1
 800605e:	d008      	beq.n	8006072 <USBD_LL_SetupStage+0x5a>
 8006060:	e017      	b.n	8006092 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f9ca 	bl	8006404 <USBD_StdDevReq>
      break;
 8006070:	e01a      	b.n	80060a8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa2c 	bl	80064d8 <USBD_StdItfReq>
      break;
 8006080:	e012      	b.n	80060a8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa6c 	bl	8006568 <USBD_StdEPReq>
      break;
 8006090:	e00a      	b.n	80060a8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006098:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800609c:	b2db      	uxtb	r3, r3
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f003 fcad 	bl	8009a00 <USBD_LL_StallEP>
      break;
 80060a6:	bf00      	nop
  }

  return USBD_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	460b      	mov	r3, r1
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d14b      	bne.n	800615e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060cc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d134      	bne.n	8006142 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d919      	bls.n	8006118 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	1ad2      	subs	r2, r2, r3
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d203      	bcs.n	8006106 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006102:	b29b      	uxth	r3, r3
 8006104:	e002      	b.n	800610c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800610a:	b29b      	uxth	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 ff56 	bl	8006fc2 <USBD_CtlContinueRx>
 8006116:	e038      	b.n	800618a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800612a:	2b03      	cmp	r3, #3
 800612c:	d105      	bne.n	800613a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 ff53 	bl	8006fe6 <USBD_CtlSendStatus>
 8006140:	e023      	b.n	800618a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006148:	2b05      	cmp	r3, #5
 800614a:	d11e      	bne.n	800618a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006154:	2100      	movs	r1, #0
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f003 fc52 	bl	8009a00 <USBD_LL_StallEP>
 800615c:	e015      	b.n	800618a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00d      	beq.n	8006186 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006170:	2b03      	cmp	r3, #3
 8006172:	d108      	bne.n	8006186 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	7afa      	ldrb	r2, [r7, #11]
 800617e:	4611      	mov	r1, r2
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	4798      	blx	r3
 8006184:	e001      	b.n	800618a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006186:	2302      	movs	r3, #2
 8006188:	e000      	b.n	800618c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	460b      	mov	r3, r1
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061a2:	7afb      	ldrb	r3, [r7, #11]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d17f      	bne.n	80062a8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3314      	adds	r3, #20
 80061ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d15c      	bne.n	8006272 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d915      	bls.n	80061f0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	1ad2      	subs	r2, r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fec0 	bl	8006f62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061e2:	2300      	movs	r3, #0
 80061e4:	2200      	movs	r2, #0
 80061e6:	2100      	movs	r1, #0
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f003 fcae 	bl	8009b4a <USBD_LL_PrepareReceive>
 80061ee:	e04e      	b.n	800628e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	6912      	ldr	r2, [r2, #16]
 80061f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061fc:	fb02 f201 	mul.w	r2, r2, r1
 8006200:	1a9b      	subs	r3, r3, r2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11c      	bne.n	8006240 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800620e:	429a      	cmp	r2, r3
 8006210:	d316      	bcc.n	8006240 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800621c:	429a      	cmp	r2, r3
 800621e:	d20f      	bcs.n	8006240 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006220:	2200      	movs	r2, #0
 8006222:	2100      	movs	r1, #0
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fe9c 	bl	8006f62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006232:	2300      	movs	r3, #0
 8006234:	2200      	movs	r2, #0
 8006236:	2100      	movs	r1, #0
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f003 fc86 	bl	8009b4a <USBD_LL_PrepareReceive>
 800623e:	e026      	b.n	800628e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006252:	2b03      	cmp	r3, #3
 8006254:	d105      	bne.n	8006262 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006262:	2180      	movs	r1, #128	; 0x80
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f003 fbcb 	bl	8009a00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fece 	bl	800700c <USBD_CtlReceiveStatus>
 8006270:	e00d      	b.n	800628e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006278:	2b04      	cmp	r3, #4
 800627a:	d004      	beq.n	8006286 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006282:	2b00      	cmp	r3, #0
 8006284:	d103      	bne.n	800628e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006286:	2180      	movs	r1, #128	; 0x80
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f003 fbb9 	bl	8009a00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006294:	2b01      	cmp	r3, #1
 8006296:	d11d      	bne.n	80062d4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f7ff fe81 	bl	8005fa0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062a6:	e015      	b.n	80062d4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00d      	beq.n	80062d0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d108      	bne.n	80062d0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	7afa      	ldrb	r2, [r7, #11]
 80062c8:	4611      	mov	r1, r2
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	4798      	blx	r3
 80062ce:	e001      	b.n	80062d4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062d0:	2302      	movs	r3, #2
 80062d2:	e000      	b.n	80062d6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	2200      	movs	r2, #0
 80062ea:	2100      	movs	r1, #0
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f003 fb42 	bl	8009976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006302:	2340      	movs	r3, #64	; 0x40
 8006304:	2200      	movs	r2, #0
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f003 fb34 	bl	8009976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2240      	movs	r2, #64	; 0x40
 8006318:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d009      	beq.n	8006356 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6852      	ldr	r2, [r2, #4]
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	4611      	mov	r1, r2
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
  }

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr

0800637e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2204      	movs	r2, #4
 8006396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d105      	bne.n	80063c4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr

080063d0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d10b      	bne.n	80063fa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d005      	beq.n	800642a <USBD_StdDevReq+0x26>
 800641e:	2b40      	cmp	r3, #64	; 0x40
 8006420:	d84f      	bhi.n	80064c2 <USBD_StdDevReq+0xbe>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <USBD_StdDevReq+0x36>
 8006426:	2b20      	cmp	r3, #32
 8006428:	d14b      	bne.n	80064c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
      break;
 8006438:	e048      	b.n	80064cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b09      	cmp	r3, #9
 8006440:	d839      	bhi.n	80064b6 <USBD_StdDevReq+0xb2>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <USBD_StdDevReq+0x44>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006499 	.word	0x08006499
 800644c:	080064ad 	.word	0x080064ad
 8006450:	080064b7 	.word	0x080064b7
 8006454:	080064a3 	.word	0x080064a3
 8006458:	080064b7 	.word	0x080064b7
 800645c:	0800647b 	.word	0x0800647b
 8006460:	08006471 	.word	0x08006471
 8006464:	080064b7 	.word	0x080064b7
 8006468:	0800648f 	.word	0x0800648f
 800646c:	08006485 	.word	0x08006485
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9dc 	bl	8006830 <USBD_GetDescriptor>
          break;
 8006478:	e022      	b.n	80064c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fb3f 	bl	8006b00 <USBD_SetAddress>
          break;
 8006482:	e01d      	b.n	80064c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fb7e 	bl	8006b88 <USBD_SetConfig>
          break;
 800648c:	e018      	b.n	80064c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fc07 	bl	8006ca4 <USBD_GetConfig>
          break;
 8006496:	e013      	b.n	80064c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fc37 	bl	8006d0e <USBD_GetStatus>
          break;
 80064a0:	e00e      	b.n	80064c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fc65 	bl	8006d74 <USBD_SetFeature>
          break;
 80064aa:	e009      	b.n	80064c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fc74 	bl	8006d9c <USBD_ClrFeature>
          break;
 80064b4:	e004      	b.n	80064c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fccc 	bl	8006e56 <USBD_CtlError>
          break;
 80064be:	bf00      	nop
      }
      break;
 80064c0:	e004      	b.n	80064cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fcc6 	bl	8006e56 <USBD_CtlError>
      break;
 80064ca:	bf00      	nop
  }

  return ret;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop

080064d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d005      	beq.n	80064fe <USBD_StdItfReq+0x26>
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d82e      	bhi.n	8006554 <USBD_StdItfReq+0x7c>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <USBD_StdItfReq+0x26>
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d12a      	bne.n	8006554 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006504:	3b01      	subs	r3, #1
 8006506:	2b02      	cmp	r3, #2
 8006508:	d81d      	bhi.n	8006546 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	889b      	ldrh	r3, [r3, #4]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d813      	bhi.n	800653c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	88db      	ldrh	r3, [r3, #6]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d110      	bne.n	8006550 <USBD_StdItfReq+0x78>
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10d      	bne.n	8006550 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd56 	bl	8006fe6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800653a:	e009      	b.n	8006550 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fc89 	bl	8006e56 <USBD_CtlError>
          break;
 8006544:	e004      	b.n	8006550 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc84 	bl	8006e56 <USBD_CtlError>
          break;
 800654e:	e000      	b.n	8006552 <USBD_StdItfReq+0x7a>
          break;
 8006550:	bf00      	nop
      }
      break;
 8006552:	e004      	b.n	800655e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fc7d 	bl	8006e56 <USBD_CtlError>
      break;
 800655c:	bf00      	nop
  }

  return USBD_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	889b      	ldrh	r3, [r3, #4]
 800657a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d007      	beq.n	8006598 <USBD_StdEPReq+0x30>
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	f200 8146 	bhi.w	800681a <USBD_StdEPReq+0x2b2>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <USBD_StdEPReq+0x40>
 8006592:	2b20      	cmp	r3, #32
 8006594:	f040 8141 	bne.w	800681a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
      break;
 80065a6:	e13d      	b.n	8006824 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d10a      	bne.n	80065ca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	e12d      	b.n	8006826 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d007      	beq.n	80065e2 <USBD_StdEPReq+0x7a>
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	f300 811b 	bgt.w	800680e <USBD_StdEPReq+0x2a6>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d072      	beq.n	80066c2 <USBD_StdEPReq+0x15a>
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d03a      	beq.n	8006656 <USBD_StdEPReq+0xee>
 80065e0:	e115      	b.n	800680e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d002      	beq.n	80065f2 <USBD_StdEPReq+0x8a>
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d015      	beq.n	800661c <USBD_StdEPReq+0xb4>
 80065f0:	e02b      	b.n	800664a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00c      	beq.n	8006612 <USBD_StdEPReq+0xaa>
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	2b80      	cmp	r3, #128	; 0x80
 80065fc:	d009      	beq.n	8006612 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f003 f9fc 	bl	8009a00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006608:	2180      	movs	r1, #128	; 0x80
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f003 f9f8 	bl	8009a00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006610:	e020      	b.n	8006654 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fc1e 	bl	8006e56 <USBD_CtlError>
              break;
 800661a:	e01b      	b.n	8006654 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	885b      	ldrh	r3, [r3, #2]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10e      	bne.n	8006642 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <USBD_StdEPReq+0xda>
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b80      	cmp	r3, #128	; 0x80
 800662e:	d008      	beq.n	8006642 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	88db      	ldrh	r3, [r3, #6]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f003 f9df 	bl	8009a00 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fccf 	bl	8006fe6 <USBD_CtlSendStatus>

              break;
 8006648:	e004      	b.n	8006654 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fc02 	bl	8006e56 <USBD_CtlError>
              break;
 8006652:	bf00      	nop
          }
          break;
 8006654:	e0e0      	b.n	8006818 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665c:	2b02      	cmp	r3, #2
 800665e:	d002      	beq.n	8006666 <USBD_StdEPReq+0xfe>
 8006660:	2b03      	cmp	r3, #3
 8006662:	d015      	beq.n	8006690 <USBD_StdEPReq+0x128>
 8006664:	e026      	b.n	80066b4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00c      	beq.n	8006686 <USBD_StdEPReq+0x11e>
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b80      	cmp	r3, #128	; 0x80
 8006670:	d009      	beq.n	8006686 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f003 f9c2 	bl	8009a00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800667c:	2180      	movs	r1, #128	; 0x80
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f003 f9be 	bl	8009a00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006684:	e01c      	b.n	80066c0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fbe4 	bl	8006e56 <USBD_CtlError>
              break;
 800668e:	e017      	b.n	80066c0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	885b      	ldrh	r3, [r3, #2]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d112      	bne.n	80066be <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006698:	7bbb      	ldrb	r3, [r7, #14]
 800669a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f003 f9c9 	bl	8009a3e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fc9a 	bl	8006fe6 <USBD_CtlSendStatus>
              }
              break;
 80066b2:	e004      	b.n	80066be <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fbcd 	bl	8006e56 <USBD_CtlError>
              break;
 80066bc:	e000      	b.n	80066c0 <USBD_StdEPReq+0x158>
              break;
 80066be:	bf00      	nop
          }
          break;
 80066c0:	e0aa      	b.n	8006818 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d002      	beq.n	80066d2 <USBD_StdEPReq+0x16a>
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d032      	beq.n	8006736 <USBD_StdEPReq+0x1ce>
 80066d0:	e097      	b.n	8006802 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d007      	beq.n	80066e8 <USBD_StdEPReq+0x180>
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	d004      	beq.n	80066e8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fbb8 	bl	8006e56 <USBD_CtlError>
                break;
 80066e6:	e091      	b.n	800680c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da0b      	bge.n	8006708 <USBD_StdEPReq+0x1a0>
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	3310      	adds	r3, #16
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	3304      	adds	r3, #4
 8006706:	e00b      	b.n	8006720 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	3304      	adds	r3, #4
 8006720:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2202      	movs	r2, #2
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fbfb 	bl	8006f2a <USBD_CtlSendData>
              break;
 8006734:	e06a      	b.n	800680c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800673a:	2b00      	cmp	r3, #0
 800673c:	da11      	bge.n	8006762 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	f003 020f 	and.w	r2, r3, #15
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	3318      	adds	r3, #24
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d117      	bne.n	8006788 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fb7b 	bl	8006e56 <USBD_CtlError>
                  break;
 8006760:	e054      	b.n	800680c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	f003 020f 	and.w	r2, r3, #15
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	440b      	add	r3, r1
 8006774:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fb68 	bl	8006e56 <USBD_CtlError>
                  break;
 8006786:	e041      	b.n	800680c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800678c:	2b00      	cmp	r3, #0
 800678e:	da0b      	bge.n	80067a8 <USBD_StdEPReq+0x240>
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	3310      	adds	r3, #16
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	3304      	adds	r3, #4
 80067a6:	e00b      	b.n	80067c0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	4413      	add	r3, r2
 80067be:	3304      	adds	r3, #4
 80067c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <USBD_StdEPReq+0x266>
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d103      	bne.n	80067d6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e00e      	b.n	80067f4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f003 f94e 	bl	8009a7c <USBD_LL_IsStallEP>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e002      	b.n	80067f4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2202      	movs	r2, #2
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fb95 	bl	8006f2a <USBD_CtlSendData>
              break;
 8006800:	e004      	b.n	800680c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb26 	bl	8006e56 <USBD_CtlError>
              break;
 800680a:	bf00      	nop
          }
          break;
 800680c:	e004      	b.n	8006818 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb20 	bl	8006e56 <USBD_CtlError>
          break;
 8006816:	bf00      	nop
      }
      break;
 8006818:	e004      	b.n	8006824 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fb1a 	bl	8006e56 <USBD_CtlError>
      break;
 8006822:	bf00      	nop
  }

  return ret;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	885b      	ldrh	r3, [r3, #2]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	2b06      	cmp	r3, #6
 8006852:	f200 8128 	bhi.w	8006aa6 <USBD_GetDescriptor+0x276>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <USBD_GetDescriptor+0x2c>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006879 	.word	0x08006879
 8006860:	08006891 	.word	0x08006891
 8006864:	080068d1 	.word	0x080068d1
 8006868:	08006aa7 	.word	0x08006aa7
 800686c:	08006aa7 	.word	0x08006aa7
 8006870:	08006a47 	.word	0x08006a47
 8006874:	08006a73 	.word	0x08006a73
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	7c12      	ldrb	r2, [r2, #16]
 8006884:	f107 0108 	add.w	r1, r7, #8
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	60f8      	str	r0, [r7, #12]
      break;
 800688e:	e112      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7c1b      	ldrb	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10d      	bne.n	80068b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	f107 0208 	add.w	r2, r7, #8
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
 80068a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	2202      	movs	r2, #2
 80068b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068b2:	e100      	b.n	8006ab6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	f107 0208 	add.w	r2, r7, #8
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
 80068c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3301      	adds	r3, #1
 80068ca:	2202      	movs	r2, #2
 80068cc:	701a      	strb	r2, [r3, #0]
      break;
 80068ce:	e0f2      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	885b      	ldrh	r3, [r3, #2]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	f200 80ac 	bhi.w	8006a34 <USBD_GetDescriptor+0x204>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <USBD_GetDescriptor+0xb4>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	080068fd 	.word	0x080068fd
 80068e8:	08006931 	.word	0x08006931
 80068ec:	08006965 	.word	0x08006965
 80068f0:	08006999 	.word	0x08006999
 80068f4:	080069cd 	.word	0x080069cd
 80068f8:	08006a01 	.word	0x08006a01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	7c12      	ldrb	r2, [r2, #16]
 8006914:	f107 0108 	add.w	r1, r7, #8
 8006918:	4610      	mov	r0, r2
 800691a:	4798      	blx	r3
 800691c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800691e:	e091      	b.n	8006a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa97 	bl	8006e56 <USBD_CtlError>
            err++;
 8006928:	7afb      	ldrb	r3, [r7, #11]
 800692a:	3301      	adds	r3, #1
 800692c:	72fb      	strb	r3, [r7, #11]
          break;
 800692e:	e089      	b.n	8006a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	7c12      	ldrb	r2, [r2, #16]
 8006948:	f107 0108 	add.w	r1, r7, #8
 800694c:	4610      	mov	r0, r2
 800694e:	4798      	blx	r3
 8006950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006952:	e077      	b.n	8006a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa7d 	bl	8006e56 <USBD_CtlError>
            err++;
 800695c:	7afb      	ldrb	r3, [r7, #11]
 800695e:	3301      	adds	r3, #1
 8006960:	72fb      	strb	r3, [r7, #11]
          break;
 8006962:	e06f      	b.n	8006a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00b      	beq.n	8006988 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	7c12      	ldrb	r2, [r2, #16]
 800697c:	f107 0108 	add.w	r1, r7, #8
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
 8006984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006986:	e05d      	b.n	8006a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa63 	bl	8006e56 <USBD_CtlError>
            err++;
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	3301      	adds	r3, #1
 8006994:	72fb      	strb	r3, [r7, #11]
          break;
 8006996:	e055      	b.n	8006a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	7c12      	ldrb	r2, [r2, #16]
 80069b0:	f107 0108 	add.w	r1, r7, #8
 80069b4:	4610      	mov	r0, r2
 80069b6:	4798      	blx	r3
 80069b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ba:	e043      	b.n	8006a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa49 	bl	8006e56 <USBD_CtlError>
            err++;
 80069c4:	7afb      	ldrb	r3, [r7, #11]
 80069c6:	3301      	adds	r3, #1
 80069c8:	72fb      	strb	r3, [r7, #11]
          break;
 80069ca:	e03b      	b.n	8006a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	7c12      	ldrb	r2, [r2, #16]
 80069e4:	f107 0108 	add.w	r1, r7, #8
 80069e8:	4610      	mov	r0, r2
 80069ea:	4798      	blx	r3
 80069ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ee:	e029      	b.n	8006a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa2f 	bl	8006e56 <USBD_CtlError>
            err++;
 80069f8:	7afb      	ldrb	r3, [r7, #11]
 80069fa:	3301      	adds	r3, #1
 80069fc:	72fb      	strb	r3, [r7, #11]
          break;
 80069fe:	e021      	b.n	8006a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	7c12      	ldrb	r2, [r2, #16]
 8006a18:	f107 0108 	add.w	r1, r7, #8
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
 8006a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a22:	e00f      	b.n	8006a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa15 	bl	8006e56 <USBD_CtlError>
            err++;
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	72fb      	strb	r3, [r7, #11]
          break;
 8006a32:	e007      	b.n	8006a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa0d 	bl	8006e56 <USBD_CtlError>
          err++;
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a42:	e038      	b.n	8006ab6 <USBD_GetDescriptor+0x286>
 8006a44:	e037      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	7c1b      	ldrb	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	f107 0208 	add.w	r2, r7, #8
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	4798      	blx	r3
 8006a5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a60:	e029      	b.n	8006ab6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f9f6 	bl	8006e56 <USBD_CtlError>
        err++;
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a70:	e021      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7c1b      	ldrb	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10d      	bne.n	8006a96 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	f107 0208 	add.w	r2, r7, #8
 8006a86:	4610      	mov	r0, r2
 8006a88:	4798      	blx	r3
 8006a8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	2207      	movs	r2, #7
 8006a92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a94:	e00f      	b.n	8006ab6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f9dc 	bl	8006e56 <USBD_CtlError>
        err++;
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	72fb      	strb	r3, [r7, #11]
      break;
 8006aa4:	e007      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f9d4 	bl	8006e56 <USBD_CtlError>
      err++;
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ab4:	bf00      	nop
  }

  if (err != 0U)
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11c      	bne.n	8006af6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006abc:	893b      	ldrh	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d011      	beq.n	8006ae6 <USBD_GetDescriptor+0x2b6>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	88db      	ldrh	r3, [r3, #6]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00d      	beq.n	8006ae6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	88da      	ldrh	r2, [r3, #6]
 8006ace:	893b      	ldrh	r3, [r7, #8]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	bf28      	it	cs
 8006ad4:	4613      	movcs	r3, r2
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ada:	893b      	ldrh	r3, [r7, #8]
 8006adc:	461a      	mov	r2, r3
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fa22 	bl	8006f2a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	88db      	ldrh	r3, [r3, #6]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa79 	bl	8006fe6 <USBD_CtlSendStatus>
 8006af4:	e000      	b.n	8006af8 <USBD_GetDescriptor+0x2c8>
    return;
 8006af6:	bf00      	nop
    }
  }
}
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop

08006b00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	889b      	ldrh	r3, [r3, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d130      	bne.n	8006b74 <USBD_SetAddress+0x74>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	88db      	ldrh	r3, [r3, #6]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d12c      	bne.n	8006b74 <USBD_SetAddress+0x74>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	885b      	ldrh	r3, [r3, #2]
 8006b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b20:	d828      	bhi.n	8006b74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	885b      	ldrh	r3, [r3, #2]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d104      	bne.n	8006b42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f98b 	bl	8006e56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b40:	e01d      	b.n	8006b7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	7bfa      	ldrb	r2, [r7, #15]
 8006b46:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f002 ffb9 	bl	8009ac6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa46 	bl	8006fe6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b68:	e009      	b.n	8006b7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b72:	e004      	b.n	8006b7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f96d 	bl	8006e56 <USBD_CtlError>
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	885b      	ldrh	r3, [r3, #2]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	4b41      	ldr	r3, [pc, #260]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006b9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b9c:	4b40      	ldr	r3, [pc, #256]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d904      	bls.n	8006bae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f955 	bl	8006e56 <USBD_CtlError>
 8006bac:	e075      	b.n	8006c9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d002      	beq.n	8006bbe <USBD_SetConfig+0x36>
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d023      	beq.n	8006c04 <USBD_SetConfig+0x7c>
 8006bbc:	e062      	b.n	8006c84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006bbe:	4b38      	ldr	r3, [pc, #224]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01a      	beq.n	8006bfc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006bc6:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bd8:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff f9e8 	bl	8005fb4 <USBD_SetClassConfig>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d104      	bne.n	8006bf4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f932 	bl	8006e56 <USBD_CtlError>
            return;
 8006bf2:	e052      	b.n	8006c9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f9f6 	bl	8006fe6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006bfa:	e04e      	b.n	8006c9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f9f2 	bl	8006fe6 <USBD_CtlSendStatus>
        break;
 8006c02:	e04a      	b.n	8006c9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c04:	4b26      	ldr	r3, [pc, #152]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d112      	bne.n	8006c32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c14:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c1e:	4b20      	ldr	r3, [pc, #128]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff f9e4 	bl	8005ff2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f9db 	bl	8006fe6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c30:	e033      	b.n	8006c9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d01d      	beq.n	8006c7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff f9d2 	bl	8005ff2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff f9a8 	bl	8005fb4 <USBD_SetClassConfig>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d104      	bne.n	8006c74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f8f2 	bl	8006e56 <USBD_CtlError>
            return;
 8006c72:	e012      	b.n	8006c9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f9b6 	bl	8006fe6 <USBD_CtlSendStatus>
        break;
 8006c7a:	e00e      	b.n	8006c9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f9b2 	bl	8006fe6 <USBD_CtlSendStatus>
        break;
 8006c82:	e00a      	b.n	8006c9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8e5 	bl	8006e56 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006c8c:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff f9ad 	bl	8005ff2 <USBD_ClrClassConfig>
        break;
 8006c98:	bf00      	nop
    }
  }
}
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	200008b4 	.word	0x200008b4

08006ca4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	88db      	ldrh	r3, [r3, #6]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d004      	beq.n	8006cc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8cc 	bl	8006e56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cbe:	e022      	b.n	8006d06 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	dc02      	bgt.n	8006cd0 <USBD_GetConfig+0x2c>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dc03      	bgt.n	8006cd6 <USBD_GetConfig+0x32>
 8006cce:	e015      	b.n	8006cfc <USBD_GetConfig+0x58>
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d00b      	beq.n	8006cec <USBD_GetConfig+0x48>
 8006cd4:	e012      	b.n	8006cfc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f920 	bl	8006f2a <USBD_CtlSendData>
        break;
 8006cea:	e00c      	b.n	8006d06 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f918 	bl	8006f2a <USBD_CtlSendData>
        break;
 8006cfa:	e004      	b.n	8006d06 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f8a9 	bl	8006e56 <USBD_CtlError>
        break;
 8006d04:	bf00      	nop
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d81e      	bhi.n	8006d62 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	88db      	ldrh	r3, [r3, #6]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d004      	beq.n	8006d36 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f891 	bl	8006e56 <USBD_CtlError>
        break;
 8006d34:	e01a      	b.n	8006d6c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f043 0202 	orr.w	r2, r3, #2
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	330c      	adds	r3, #12
 8006d56:	2202      	movs	r2, #2
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8e5 	bl	8006f2a <USBD_CtlSendData>
      break;
 8006d60:	e004      	b.n	8006d6c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f876 	bl	8006e56 <USBD_CtlError>
      break;
 8006d6a:	bf00      	nop
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	885b      	ldrh	r3, [r3, #2]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d106      	bne.n	8006d94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f929 	bl	8006fe6 <USBD_CtlSendStatus>
  }
}
 8006d94:	bf00      	nop
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	3b01      	subs	r3, #1
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d80b      	bhi.n	8006dca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	885b      	ldrh	r3, [r3, #2]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d10c      	bne.n	8006dd4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f90f 	bl	8006fe6 <USBD_CtlSendStatus>
      }
      break;
 8006dc8:	e004      	b.n	8006dd4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f842 	bl	8006e56 <USBD_CtlError>
      break;
 8006dd2:	e000      	b.n	8006dd6 <USBD_ClrFeature+0x3a>
      break;
 8006dd4:	bf00      	nop
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781a      	ldrb	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	785a      	ldrb	r2, [r3, #1]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	3302      	adds	r3, #2
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	3303      	adds	r3, #3
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	3304      	adds	r3, #4
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	3305      	adds	r3, #5
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	4413      	add	r3, r2
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	3306      	adds	r3, #6
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	3307      	adds	r3, #7
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	4413      	add	r3, r2
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	80da      	strh	r2, [r3, #6]

}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e60:	2180      	movs	r1, #128	; 0x80
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f002 fdcc 	bl	8009a00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006e68:	2100      	movs	r1, #0
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f002 fdc8 	bl	8009a00 <USBD_LL_StallEP>
}
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d032      	beq.n	8006ef4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f834 	bl	8006efc <USBD_GetLen>
 8006e94:	4603      	mov	r3, r0
 8006e96:	3301      	adds	r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	75fa      	strb	r2, [r7, #23]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4413      	add	r3, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	75fa      	strb	r2, [r7, #23]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	2203      	movs	r2, #3
 8006ec2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006ec4:	e012      	b.n	8006eec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	60fa      	str	r2, [r7, #12]
 8006ecc:	7dfa      	ldrb	r2, [r7, #23]
 8006ece:	1c51      	adds	r1, r2, #1
 8006ed0:	75f9      	strb	r1, [r7, #23]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	75fa      	strb	r2, [r7, #23]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	2200      	movs	r2, #0
 8006eea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e8      	bne.n	8006ec6 <USBD_GetString+0x4e>
    }
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f08:	e005      	b.n	8006f16 <USBD_GetLen+0x1a>
  {
    len++;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3301      	adds	r3, #1
 8006f14:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f5      	bne.n	8006f0a <USBD_GetLen+0xe>
  }

  return len;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr

08006f2a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	4613      	mov	r3, r2
 8006f36:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f40:	88fa      	ldrh	r2, [r7, #6]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	2100      	movs	r1, #0
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f002 fdd6 	bl	8009b04 <USBD_LL_Transmit>

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	2100      	movs	r1, #0
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f002 fdc4 	bl	8009b04 <USBD_LL_Transmit>

  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	4613      	mov	r3, r2
 8006f92:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2203      	movs	r2, #3
 8006f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006fa4:	88fa      	ldrh	r2, [r7, #6]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f002 fdc9 	bl	8009b4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f002 fdb7 	bl	8009b4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f002 fd81 	bl	8009b04 <USBD_LL_Transmit>

  return USBD_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2205      	movs	r2, #5
 8007018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800701c:	2300      	movs	r3, #0
 800701e:	2200      	movs	r2, #0
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f002 fd91 	bl	8009b4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	4603      	mov	r3, r0
 800703a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007044:	2b84      	cmp	r3, #132	; 0x84
 8007046:	d005      	beq.n	8007054 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007048:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	3303      	adds	r3, #3
 8007052:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007054:	68fb      	ldr	r3, [r7, #12]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr

08007060 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007064:	f000 ff82 	bl	8007f6c <vTaskStartScheduler>
  
  return osOK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	bd80      	pop	{r7, pc}

0800706e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800706e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007070:	b089      	sub	sp, #36	; 0x24
 8007072:	af04      	add	r7, sp, #16
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685c      	ldr	r4, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681d      	ldr	r5, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691e      	ldr	r6, [r3, #16]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff ffd1 	bl	8007032 <makeFreeRtosPriority>
 8007090:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800709a:	9202      	str	r2, [sp, #8]
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	9100      	str	r1, [sp, #0]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	4632      	mov	r2, r6
 80070a4:	4629      	mov	r1, r5
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fdea 	bl	8007c80 <xTaskCreateStatic>
 80070ac:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80070ae:	68fb      	ldr	r3, [r7, #12]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <osDelay+0x16>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	e000      	b.n	80070d0 <osDelay+0x18>
 80070ce:	2301      	movs	r3, #1
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 ff17 	bl	8007f04 <vTaskDelay>
  
  return osOK;
 80070d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
     }
  else {
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4619      	mov	r1, r3
 80070ee:	2001      	movs	r0, #1
 80070f0:	f000 f9c8 	bl	8007484 <xQueueCreateMutexStatic>
 80070f4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f103 0208 	add.w	r2, r3, #8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007116:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f103 0208 	add.w	r2, r3, #8
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f103 0208 	add.w	r2, r3, #8
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr

0800713c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	601a      	str	r2, [r3, #0]
}
 8007190:	bf00      	nop
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr

0800719a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071b0:	d103      	bne.n	80071ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e00c      	b.n	80071d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3308      	adds	r3, #8
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e002      	b.n	80071c8 <vListInsert+0x2e>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d2f6      	bcs.n	80071c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	601a      	str	r2, [r3, #0]
}
 8007200:	bf00      	nop
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr

0800720a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6892      	ldr	r2, [r2, #8]
 8007220:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6852      	ldr	r2, [r2, #4]
 800722a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d103      	bne.n	800723e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	1e5a      	subs	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr

0800725c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007286:	f001 ff79 	bl	800917c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	441a      	add	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	3b01      	subs	r3, #1
 80072b8:	68f9      	ldr	r1, [r7, #12]
 80072ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072bc:	fb01 f303 	mul.w	r3, r1, r3
 80072c0:	441a      	add	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	22ff      	movs	r2, #255	; 0xff
 80072ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	22ff      	movs	r2, #255	; 0xff
 80072d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d114      	bne.n	8007306 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01a      	beq.n	800731a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3310      	adds	r3, #16
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 f8c5 	bl	8008478 <xTaskRemoveFromEventList>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d012      	beq.n	800731a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072f4:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <xQueueGenericReset+0xcc>)
 80072f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	e009      	b.n	800731a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3310      	adds	r3, #16
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff fef7 	bl	80070fe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3324      	adds	r3, #36	; 0x24
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff fef2 	bl	80070fe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800731a:	f001 ff5f 	bl	80091dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800731e:	2301      	movs	r3, #1
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08e      	sub	sp, #56	; 0x38
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <xQueueGenericCreateStatic+0x52>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <xQueueGenericCreateStatic+0x56>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <xQueueGenericCreateStatic+0x58>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	623b      	str	r3, [r7, #32]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <xQueueGenericCreateStatic+0x7e>
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <xQueueGenericCreateStatic+0x82>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <xQueueGenericCreateStatic+0x84>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	61fb      	str	r3, [r7, #28]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073ca:	2348      	movs	r3, #72	; 0x48
 80073cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b48      	cmp	r3, #72	; 0x48
 80073d2:	d00a      	beq.n	80073ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	61bb      	str	r3, [r7, #24]
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <xQueueGenericCreateStatic+0xdc>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f805 	bl	8007412 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800740a:	4618      	mov	r0, r3
 800740c:	3730      	adds	r7, #48	; 0x30
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	e002      	b.n	8007434 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007440:	2101      	movs	r1, #1
 8007442:	69b8      	ldr	r0, [r7, #24]
 8007444:	f7ff ff0a 	bl	800725c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00e      	beq.n	800747c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007470:	2300      	movs	r3, #0
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f820 	bl	80074bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af02      	add	r7, sp, #8
 800748a:	4603      	mov	r3, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007490:	2301      	movs	r3, #1
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	2300      	movs	r3, #0
 8007496:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2200      	movs	r2, #0
 80074a0:	6939      	ldr	r1, [r7, #16]
 80074a2:	6978      	ldr	r0, [r7, #20]
 80074a4:	f7ff ff42 	bl	800732c <xQueueGenericCreateStatic>
 80074a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff ffd0 	bl	8007450 <prvInitialiseMutex>

		return pxNewQueue;
 80074b0:	68fb      	ldr	r3, [r7, #12]
	}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	; 0x38
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074ca:	2300      	movs	r3, #0
 80074cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <xQueueGenericSend+0x32>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d103      	bne.n	80074fc <xQueueGenericSend+0x40>
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <xQueueGenericSend+0x44>
 80074fc:	2301      	movs	r3, #1
 80074fe:	e000      	b.n	8007502 <xQueueGenericSend+0x46>
 8007500:	2300      	movs	r3, #0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <xQueueGenericSend+0x60>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b02      	cmp	r3, #2
 8007520:	d103      	bne.n	800752a <xQueueGenericSend+0x6e>
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <xQueueGenericSend+0x72>
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <xQueueGenericSend+0x74>
 800752e:	2300      	movs	r3, #0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xQueueGenericSend+0x8e>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	623b      	str	r3, [r7, #32]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800754a:	f001 f92f 	bl	80087ac <xTaskGetSchedulerState>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d102      	bne.n	800755a <xQueueGenericSend+0x9e>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <xQueueGenericSend+0xa2>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <xQueueGenericSend+0xa4>
 800755e:	2300      	movs	r3, #0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <xQueueGenericSend+0xbe>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	61fb      	str	r3, [r7, #28]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800757a:	f001 fdff 	bl	800917c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007586:	429a      	cmp	r2, r3
 8007588:	d302      	bcc.n	8007590 <xQueueGenericSend+0xd4>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d129      	bne.n	80075e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007596:	f000 fa07 	bl	80079a8 <prvCopyDataToQueue>
 800759a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d010      	beq.n	80075c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	3324      	adds	r3, #36	; 0x24
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 ff65 	bl	8008478 <xTaskRemoveFromEventList>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d013      	beq.n	80075dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075b4:	4b3f      	ldr	r3, [pc, #252]	; (80076b4 <xQueueGenericSend+0x1f8>)
 80075b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	e00a      	b.n	80075dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d007      	beq.n	80075dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075cc:	4b39      	ldr	r3, [pc, #228]	; (80076b4 <xQueueGenericSend+0x1f8>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075dc:	f001 fdfe 	bl	80091dc <vPortExitCritical>
				return pdPASS;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e063      	b.n	80076ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d103      	bne.n	80075f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075ea:	f001 fdf7 	bl	80091dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e05c      	b.n	80076ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075f8:	f107 0314 	add.w	r3, r7, #20
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 ff9d 	bl	800853c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007602:	2301      	movs	r3, #1
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007606:	f001 fde9 	bl	80091dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800760a:	f000 fd15 	bl	8008038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800760e:	f001 fdb5 	bl	800917c <vPortEnterCritical>
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007618:	b25b      	sxtb	r3, r3
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761e:	d103      	bne.n	8007628 <xQueueGenericSend+0x16c>
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800762e:	b25b      	sxtb	r3, r3
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007634:	d103      	bne.n	800763e <xQueueGenericSend+0x182>
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800763e:	f001 fdcd 	bl	80091dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007642:	1d3a      	adds	r2, r7, #4
 8007644:	f107 0314 	add.w	r3, r7, #20
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f000 ff8c 	bl	8008568 <xTaskCheckForTimeOut>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d124      	bne.n	80076a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007658:	f000 fa9e 	bl	8007b98 <prvIsQueueFull>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d018      	beq.n	8007694 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	3310      	adds	r3, #16
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f000 feb4 	bl	80083d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007672:	f000 fa29 	bl	8007ac8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007676:	f000 fced 	bl	8008054 <xTaskResumeAll>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	f47f af7c 	bne.w	800757a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007682:	4b0c      	ldr	r3, [pc, #48]	; (80076b4 <xQueueGenericSend+0x1f8>)
 8007684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	e772      	b.n	800757a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007696:	f000 fa17 	bl	8007ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800769a:	f000 fcdb 	bl	8008054 <xTaskResumeAll>
 800769e:	e76c      	b.n	800757a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076a2:	f000 fa11 	bl	8007ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076a6:	f000 fcd5 	bl	8008054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076aa:	2300      	movs	r3, #0
		}
	}
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3738      	adds	r7, #56	; 0x38
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08e      	sub	sp, #56	; 0x38
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d103      	bne.n	80076f4 <xQueueGenericSendFromISR+0x3c>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <xQueueGenericSendFromISR+0x40>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e000      	b.n	80076fa <xQueueGenericSendFromISR+0x42>
 80076f8:	2300      	movs	r3, #0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	623b      	str	r3, [r7, #32]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d103      	bne.n	8007722 <xQueueGenericSendFromISR+0x6a>
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <xQueueGenericSendFromISR+0x6e>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <xQueueGenericSendFromISR+0x70>
 8007726:	2300      	movs	r3, #0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	61fb      	str	r3, [r7, #28]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007742:	f001 fddd 	bl	8009300 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007746:	f3ef 8211 	mrs	r2, BASEPRI
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	61ba      	str	r2, [r7, #24]
 800775c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800775e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007760:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776a:	429a      	cmp	r2, r3
 800776c:	d302      	bcc.n	8007774 <xQueueGenericSendFromISR+0xbc>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d12c      	bne.n	80077ce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007784:	f000 f910 	bl	80079a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007788:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007790:	d112      	bne.n	80077b8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d016      	beq.n	80077c8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	3324      	adds	r3, #36	; 0x24
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fe6a 	bl	8008478 <xTaskRemoveFromEventList>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00e      	beq.n	80077c8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	e007      	b.n	80077c8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077bc:	3301      	adds	r3, #1
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	b25a      	sxtb	r2, r3
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077c8:	2301      	movs	r3, #1
 80077ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80077cc:	e001      	b.n	80077d2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	637b      	str	r3, [r7, #52]	; 0x34
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3738      	adds	r7, #56	; 0x38
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08c      	sub	sp, #48	; 0x30
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10a      	bne.n	8007818 <xQueueReceive+0x30>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	623b      	str	r3, [r7, #32]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d103      	bne.n	8007826 <xQueueReceive+0x3e>
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <xQueueReceive+0x42>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <xQueueReceive+0x44>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xQueueReceive+0x5e>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	61fb      	str	r3, [r7, #28]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007846:	f000 ffb1 	bl	80087ac <xTaskGetSchedulerState>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <xQueueReceive+0x6e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <xQueueReceive+0x72>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <xQueueReceive+0x74>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <xQueueReceive+0x8e>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	61bb      	str	r3, [r7, #24]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007876:	f001 fc81 	bl	800917c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	d01f      	beq.n	80078c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800788a:	f000 f8f7 	bl	8007a7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	1e5a      	subs	r2, r3, #1
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00f      	beq.n	80078be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	3310      	adds	r3, #16
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fde8 	bl	8008478 <xTaskRemoveFromEventList>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078ae:	4b3d      	ldr	r3, [pc, #244]	; (80079a4 <xQueueReceive+0x1bc>)
 80078b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078be:	f001 fc8d 	bl	80091dc <vPortExitCritical>
				return pdPASS;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e069      	b.n	800799a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078cc:	f001 fc86 	bl	80091dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e062      	b.n	800799a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fe2c 	bl	800853c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078e8:	f001 fc78 	bl	80091dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078ec:	f000 fba4 	bl	8008038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078f0:	f001 fc44 	bl	800917c <vPortEnterCritical>
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078fa:	b25b      	sxtb	r3, r3
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007900:	d103      	bne.n	800790a <xQueueReceive+0x122>
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007910:	b25b      	sxtb	r3, r3
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007916:	d103      	bne.n	8007920 <xQueueReceive+0x138>
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007920:	f001 fc5c 	bl	80091dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007924:	1d3a      	adds	r2, r7, #4
 8007926:	f107 0310 	add.w	r3, r7, #16
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fe1b 	bl	8008568 <xTaskCheckForTimeOut>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d123      	bne.n	8007980 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793a:	f000 f917 	bl	8007b6c <prvIsQueueEmpty>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	3324      	adds	r3, #36	; 0x24
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	4611      	mov	r1, r2
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fd43 	bl	80083d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007954:	f000 f8b8 	bl	8007ac8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007958:	f000 fb7c 	bl	8008054 <xTaskResumeAll>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d189      	bne.n	8007876 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007962:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <xQueueReceive+0x1bc>)
 8007964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	e780      	b.n	8007876 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007976:	f000 f8a7 	bl	8007ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800797a:	f000 fb6b 	bl	8008054 <xTaskResumeAll>
 800797e:	e77a      	b.n	8007876 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007982:	f000 f8a1 	bl	8007ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007986:	f000 fb65 	bl	8008054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800798a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800798c:	f000 f8ee 	bl	8007b6c <prvIsQueueEmpty>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	f43f af6f 	beq.w	8007876 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800799a:	4618      	mov	r0, r3
 800799c:	3730      	adds	r7, #48	; 0x30
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	e000ed04 	.word	0xe000ed04

080079a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10d      	bne.n	80079e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d14d      	bne.n	8007a6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 ff08 	bl	80087e8 <xTaskPriorityDisinherit>
 80079d8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	605a      	str	r2, [r3, #4]
 80079e0:	e043      	b.n	8007a6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d119      	bne.n	8007a1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6898      	ldr	r0, [r3, #8]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	461a      	mov	r2, r3
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	f7f8 fbfa 	bl	80001ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	441a      	add	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d32b      	bcc.n	8007a6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	609a      	str	r2, [r3, #8]
 8007a1a:	e026      	b.n	8007a6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	68d8      	ldr	r0, [r3, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	461a      	mov	r2, r3
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	f7f8 fbe0 	bl	80001ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	425b      	negs	r3, r3
 8007a36:	441a      	add	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d207      	bcs.n	8007a58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a50:	425b      	negs	r3, r3
 8007a52:	441a      	add	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d105      	bne.n	8007a6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a72:	697b      	ldr	r3, [r7, #20]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d018      	beq.n	8007ac0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	441a      	add	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d303      	bcc.n	8007ab0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68d9      	ldr	r1, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6838      	ldr	r0, [r7, #0]
 8007abc:	f7f8 fb96 	bl	80001ec <memcpy>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ad0:	f001 fb54 	bl	800917c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ada:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007adc:	e011      	b.n	8007b02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d012      	beq.n	8007b0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3324      	adds	r3, #36	; 0x24
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fcc4 	bl	8008478 <xTaskRemoveFromEventList>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007af6:	f000 fd99 	bl	800862c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dce9      	bgt.n	8007ade <prvUnlockQueue+0x16>
 8007b0a:	e000      	b.n	8007b0e <prvUnlockQueue+0x46>
					break;
 8007b0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	22ff      	movs	r2, #255	; 0xff
 8007b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b16:	f001 fb61 	bl	80091dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b1a:	f001 fb2f 	bl	800917c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b26:	e011      	b.n	8007b4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d012      	beq.n	8007b56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3310      	adds	r3, #16
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fc9f 	bl	8008478 <xTaskRemoveFromEventList>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b40:	f000 fd74 	bl	800862c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dce9      	bgt.n	8007b28 <prvUnlockQueue+0x60>
 8007b54:	e000      	b.n	8007b58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	22ff      	movs	r2, #255	; 0xff
 8007b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b60:	f001 fb3c 	bl	80091dc <vPortExitCritical>
}
 8007b64:	bf00      	nop
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b74:	f001 fb02 	bl	800917c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b80:	2301      	movs	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	e001      	b.n	8007b8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b8a:	f001 fb27 	bl	80091dc <vPortExitCritical>

	return xReturn;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ba0:	f001 faec 	bl	800917c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d102      	bne.n	8007bb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e001      	b.n	8007bba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bba:	f001 fb0f 	bl	80091dc <vPortExitCritical>

	return xReturn;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e014      	b.n	8007c02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007bd8:	4a0e      	ldr	r2, [pc, #56]	; (8007c14 <vQueueAddToRegistry+0x4c>)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10b      	bne.n	8007bfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007be4:	490b      	ldr	r1, [pc, #44]	; (8007c14 <vQueueAddToRegistry+0x4c>)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007bee:	4a09      	ldr	r2, [pc, #36]	; (8007c14 <vQueueAddToRegistry+0x4c>)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bfa:	e006      	b.n	8007c0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b07      	cmp	r3, #7
 8007c06:	d9e7      	bls.n	8007bd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bc80      	pop	{r7}
 8007c12:	4770      	bx	lr
 8007c14:	20001738 	.word	0x20001738

08007c18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c28:	f001 faa8 	bl	800917c <vPortEnterCritical>
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c32:	b25b      	sxtb	r3, r3
 8007c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c38:	d103      	bne.n	8007c42 <vQueueWaitForMessageRestricted+0x2a>
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c48:	b25b      	sxtb	r3, r3
 8007c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c4e:	d103      	bne.n	8007c58 <vQueueWaitForMessageRestricted+0x40>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c58:	f001 fac0 	bl	80091dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d106      	bne.n	8007c72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	3324      	adds	r3, #36	; 0x24
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fbd7 	bl	8008420 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c72:	6978      	ldr	r0, [r7, #20]
 8007c74:	f7ff ff28 	bl	8007ac8 <prvUnlockQueue>
	}
 8007c78:	bf00      	nop
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08e      	sub	sp, #56	; 0x38
 8007c84:	af04      	add	r7, sp, #16
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	623b      	str	r3, [r7, #32]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	61fb      	str	r3, [r7, #28]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cc6:	2354      	movs	r3, #84	; 0x54
 8007cc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b54      	cmp	r3, #84	; 0x54
 8007cce:	d00a      	beq.n	8007ce6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	61bb      	str	r3, [r7, #24]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01a      	beq.n	8007d22 <xTaskCreateStatic+0xa2>
 8007cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d017      	beq.n	8007d22 <xTaskCreateStatic+0xa2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cfa:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	9303      	str	r3, [sp, #12]
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	9302      	str	r3, [sp, #8]
 8007d04:	f107 0314 	add.w	r3, r7, #20
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f80b 	bl	8007d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d1c:	f000 f888 	bl	8007e30 <prvAddNewTaskToReadyList>
 8007d20:	e001      	b.n	8007d26 <xTaskCreateStatic+0xa6>
		}
		else
		{
			xReturn = NULL;
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d26:	697b      	ldr	r3, [r7, #20]
	}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3728      	adds	r7, #40	; 0x28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f023 0307 	bic.w	r3, r3, #7
 8007d56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	617b      	str	r3, [r7, #20]
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61fb      	str	r3, [r7, #28]
 8007d7c:	e012      	b.n	8007da4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	4413      	add	r3, r2
 8007d84:	7819      	ldrb	r1, [r3, #0]
 8007d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	3334      	adds	r3, #52	; 0x34
 8007d8e:	460a      	mov	r2, r1
 8007d90:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	4413      	add	r3, r2
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d006      	beq.n	8007dac <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	3301      	adds	r3, #1
 8007da2:	61fb      	str	r3, [r7, #28]
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	2b0f      	cmp	r3, #15
 8007da8:	d9e9      	bls.n	8007d7e <prvInitialiseNewTask+0x4e>
 8007daa:	e000      	b.n	8007dae <prvInitialiseNewTask+0x7e>
		{
			break;
 8007dac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	2b06      	cmp	r3, #6
 8007dba:	d901      	bls.n	8007dc0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007dbc:	2306      	movs	r3, #6
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	2200      	movs	r2, #0
 8007dd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff f9b0 	bl	800713c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	3318      	adds	r3, #24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff f9ab 	bl	800713c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	f1c3 0207 	rsb	r2, r3, #7
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	2200      	movs	r2, #0
 8007e00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	68f9      	ldr	r1, [r7, #12]
 8007e0e:	69b8      	ldr	r0, [r7, #24]
 8007e10:	f001 f8c4 	bl	8008f9c <pxPortInitialiseStack>
 8007e14:	4602      	mov	r2, r0
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e26:	bf00      	nop
 8007e28:	3720      	adds	r7, #32
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
	...

08007e30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e38:	f001 f9a0 	bl	800917c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ee8 <prvAddNewTaskToReadyList+0xb8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3301      	adds	r3, #1
 8007e42:	4a29      	ldr	r2, [pc, #164]	; (8007ee8 <prvAddNewTaskToReadyList+0xb8>)
 8007e44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e46:	4b29      	ldr	r3, [pc, #164]	; (8007eec <prvAddNewTaskToReadyList+0xbc>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e4e:	4a27      	ldr	r2, [pc, #156]	; (8007eec <prvAddNewTaskToReadyList+0xbc>)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e54:	4b24      	ldr	r3, [pc, #144]	; (8007ee8 <prvAddNewTaskToReadyList+0xb8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d110      	bne.n	8007e7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e5c:	f000 fc0a 	bl	8008674 <prvInitialiseTaskLists>
 8007e60:	e00d      	b.n	8007e7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e62:	4b23      	ldr	r3, [pc, #140]	; (8007ef0 <prvAddNewTaskToReadyList+0xc0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d109      	bne.n	8007e7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e6a:	4b20      	ldr	r3, [pc, #128]	; (8007eec <prvAddNewTaskToReadyList+0xbc>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d802      	bhi.n	8007e7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e78:	4a1c      	ldr	r2, [pc, #112]	; (8007eec <prvAddNewTaskToReadyList+0xbc>)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e7e:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <prvAddNewTaskToReadyList+0xc4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3301      	adds	r3, #1
 8007e84:	4a1b      	ldr	r2, [pc, #108]	; (8007ef4 <prvAddNewTaskToReadyList+0xc4>)
 8007e86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	409a      	lsls	r2, r3
 8007e90:	4b19      	ldr	r3, [pc, #100]	; (8007ef8 <prvAddNewTaskToReadyList+0xc8>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	4a18      	ldr	r2, [pc, #96]	; (8007ef8 <prvAddNewTaskToReadyList+0xc8>)
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4a15      	ldr	r2, [pc, #84]	; (8007efc <prvAddNewTaskToReadyList+0xcc>)
 8007ea8:	441a      	add	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3304      	adds	r3, #4
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7ff f94f 	bl	8007154 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007eb6:	f001 f991 	bl	80091dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007eba:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <prvAddNewTaskToReadyList+0xc0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00e      	beq.n	8007ee0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <prvAddNewTaskToReadyList+0xbc>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d207      	bcs.n	8007ee0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <prvAddNewTaskToReadyList+0xd0>)
 8007ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	200009b8 	.word	0x200009b8
 8007eec:	200008b8 	.word	0x200008b8
 8007ef0:	200009c4 	.word	0x200009c4
 8007ef4:	200009d4 	.word	0x200009d4
 8007ef8:	200009c0 	.word	0x200009c0
 8007efc:	200008bc 	.word	0x200008bc
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d017      	beq.n	8007f46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f16:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <vTaskDelay+0x60>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <vTaskDelay+0x30>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	60bb      	str	r3, [r7, #8]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f34:	f000 f880 	bl	8008038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fcda 	bl	80088f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f40:	f000 f888 	bl	8008054 <xTaskResumeAll>
 8007f44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d107      	bne.n	8007f5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f4c:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <vTaskDelay+0x64>)
 8007f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f5c:	bf00      	nop
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	200009e0 	.word	0x200009e0
 8007f68:	e000ed04 	.word	0xe000ed04

08007f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08a      	sub	sp, #40	; 0x28
 8007f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f7a:	463a      	mov	r2, r7
 8007f7c:	1d39      	adds	r1, r7, #4
 8007f7e:	f107 0308 	add.w	r3, r7, #8
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7f9 fddc 	bl	8001b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	9202      	str	r2, [sp, #8]
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	2300      	movs	r3, #0
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	2300      	movs	r3, #0
 8007f98:	460a      	mov	r2, r1
 8007f9a:	4921      	ldr	r1, [pc, #132]	; (8008020 <vTaskStartScheduler+0xb4>)
 8007f9c:	4821      	ldr	r0, [pc, #132]	; (8008024 <vTaskStartScheduler+0xb8>)
 8007f9e:	f7ff fe6f 	bl	8007c80 <xTaskCreateStatic>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	4a20      	ldr	r2, [pc, #128]	; (8008028 <vTaskStartScheduler+0xbc>)
 8007fa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fa8:	4b1f      	ldr	r3, [pc, #124]	; (8008028 <vTaskStartScheduler+0xbc>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	e001      	b.n	8007fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d102      	bne.n	8007fc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fc0:	f000 fcfe 	bl	80089c0 <xTimerCreateTimerTask>
 8007fc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d116      	bne.n	8007ffa <vTaskStartScheduler+0x8e>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	613b      	str	r3, [r7, #16]
}
 8007fde:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fe0:	4b12      	ldr	r3, [pc, #72]	; (800802c <vTaskStartScheduler+0xc0>)
 8007fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fe6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fe8:	4b11      	ldr	r3, [pc, #68]	; (8008030 <vTaskStartScheduler+0xc4>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007fee:	4b11      	ldr	r3, [pc, #68]	; (8008034 <vTaskStartScheduler+0xc8>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ff4:	f001 f850 	bl	8009098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ff8:	e00e      	b.n	8008018 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008000:	d10a      	bne.n	8008018 <vTaskStartScheduler+0xac>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	60fb      	str	r3, [r7, #12]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <vTaskStartScheduler+0xaa>
}
 8008018:	bf00      	nop
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	08009d58 	.word	0x08009d58
 8008024:	08008645 	.word	0x08008645
 8008028:	200009dc 	.word	0x200009dc
 800802c:	200009d8 	.word	0x200009d8
 8008030:	200009c4 	.word	0x200009c4
 8008034:	200009bc 	.word	0x200009bc

08008038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800803c:	4b04      	ldr	r3, [pc, #16]	; (8008050 <vTaskSuspendAll+0x18>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	4a03      	ldr	r2, [pc, #12]	; (8008050 <vTaskSuspendAll+0x18>)
 8008044:	6013      	str	r3, [r2, #0]
}
 8008046:	bf00      	nop
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	200009e0 	.word	0x200009e0

08008054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800805e:	2300      	movs	r3, #0
 8008060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008062:	4b41      	ldr	r3, [pc, #260]	; (8008168 <xTaskResumeAll+0x114>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <xTaskResumeAll+0x2c>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	603b      	str	r3, [r7, #0]
}
 800807c:	bf00      	nop
 800807e:	e7fe      	b.n	800807e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008080:	f001 f87c 	bl	800917c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008084:	4b38      	ldr	r3, [pc, #224]	; (8008168 <xTaskResumeAll+0x114>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3b01      	subs	r3, #1
 800808a:	4a37      	ldr	r2, [pc, #220]	; (8008168 <xTaskResumeAll+0x114>)
 800808c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800808e:	4b36      	ldr	r3, [pc, #216]	; (8008168 <xTaskResumeAll+0x114>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d161      	bne.n	800815a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008096:	4b35      	ldr	r3, [pc, #212]	; (800816c <xTaskResumeAll+0x118>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d05d      	beq.n	800815a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800809e:	e02e      	b.n	80080fe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80080a0:	4b33      	ldr	r3, [pc, #204]	; (8008170 <xTaskResumeAll+0x11c>)
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3318      	adds	r3, #24
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff f8ac 	bl	800720a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff f8a7 	bl	800720a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	2201      	movs	r2, #1
 80080c2:	409a      	lsls	r2, r3
 80080c4:	4b2b      	ldr	r3, [pc, #172]	; (8008174 <xTaskResumeAll+0x120>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	4a2a      	ldr	r2, [pc, #168]	; (8008174 <xTaskResumeAll+0x120>)
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d2:	4613      	mov	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4a27      	ldr	r2, [pc, #156]	; (8008178 <xTaskResumeAll+0x124>)
 80080dc:	441a      	add	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3304      	adds	r3, #4
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f7ff f835 	bl	8007154 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ee:	4b23      	ldr	r3, [pc, #140]	; (800817c <xTaskResumeAll+0x128>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d302      	bcc.n	80080fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80080f8:	4b21      	ldr	r3, [pc, #132]	; (8008180 <xTaskResumeAll+0x12c>)
 80080fa:	2201      	movs	r2, #1
 80080fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080fe:	4b1c      	ldr	r3, [pc, #112]	; (8008170 <xTaskResumeAll+0x11c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1cc      	bne.n	80080a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800810c:	f000 fb2a 	bl	8008764 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008110:	4b1c      	ldr	r3, [pc, #112]	; (8008184 <xTaskResumeAll+0x130>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d010      	beq.n	800813e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800811c:	f000 f844 	bl	80081a8 <xTaskIncrementTick>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008126:	4b16      	ldr	r3, [pc, #88]	; (8008180 <xTaskResumeAll+0x12c>)
 8008128:	2201      	movs	r2, #1
 800812a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3b01      	subs	r3, #1
 8008130:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1f1      	bne.n	800811c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008138:	4b12      	ldr	r3, [pc, #72]	; (8008184 <xTaskResumeAll+0x130>)
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800813e:	4b10      	ldr	r3, [pc, #64]	; (8008180 <xTaskResumeAll+0x12c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008146:	2301      	movs	r3, #1
 8008148:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800814a:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <xTaskResumeAll+0x134>)
 800814c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800815a:	f001 f83f 	bl	80091dc <vPortExitCritical>

	return xAlreadyYielded;
 800815e:	68bb      	ldr	r3, [r7, #8]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200009e0 	.word	0x200009e0
 800816c:	200009b8 	.word	0x200009b8
 8008170:	20000978 	.word	0x20000978
 8008174:	200009c0 	.word	0x200009c0
 8008178:	200008bc 	.word	0x200008bc
 800817c:	200008b8 	.word	0x200008b8
 8008180:	200009cc 	.word	0x200009cc
 8008184:	200009c8 	.word	0x200009c8
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008192:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <xTaskGetTickCount+0x18>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008198:	687b      	ldr	r3, [r7, #4]
}
 800819a:	4618      	mov	r0, r3
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	bc80      	pop	{r7}
 80081a2:	4770      	bx	lr
 80081a4:	200009bc 	.word	0x200009bc

080081a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b2:	4b51      	ldr	r3, [pc, #324]	; (80082f8 <xTaskIncrementTick+0x150>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f040 808d 	bne.w	80082d6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081bc:	4b4f      	ldr	r3, [pc, #316]	; (80082fc <xTaskIncrementTick+0x154>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3301      	adds	r3, #1
 80081c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081c4:	4a4d      	ldr	r2, [pc, #308]	; (80082fc <xTaskIncrementTick+0x154>)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d120      	bne.n	8008212 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80081d0:	4b4b      	ldr	r3, [pc, #300]	; (8008300 <xTaskIncrementTick+0x158>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	603b      	str	r3, [r7, #0]
}
 80081ec:	bf00      	nop
 80081ee:	e7fe      	b.n	80081ee <xTaskIncrementTick+0x46>
 80081f0:	4b43      	ldr	r3, [pc, #268]	; (8008300 <xTaskIncrementTick+0x158>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	4b43      	ldr	r3, [pc, #268]	; (8008304 <xTaskIncrementTick+0x15c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a41      	ldr	r2, [pc, #260]	; (8008300 <xTaskIncrementTick+0x158>)
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	4a41      	ldr	r2, [pc, #260]	; (8008304 <xTaskIncrementTick+0x15c>)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	4b40      	ldr	r3, [pc, #256]	; (8008308 <xTaskIncrementTick+0x160>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3301      	adds	r3, #1
 800820a:	4a3f      	ldr	r2, [pc, #252]	; (8008308 <xTaskIncrementTick+0x160>)
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	f000 faa9 	bl	8008764 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008212:	4b3e      	ldr	r3, [pc, #248]	; (800830c <xTaskIncrementTick+0x164>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	429a      	cmp	r2, r3
 800821a:	d34d      	bcc.n	80082b8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800821c:	4b38      	ldr	r3, [pc, #224]	; (8008300 <xTaskIncrementTick+0x158>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <xTaskIncrementTick+0x82>
 8008226:	2301      	movs	r3, #1
 8008228:	e000      	b.n	800822c <xTaskIncrementTick+0x84>
 800822a:	2300      	movs	r3, #0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008230:	4b36      	ldr	r3, [pc, #216]	; (800830c <xTaskIncrementTick+0x164>)
 8008232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008236:	601a      	str	r2, [r3, #0]
					break;
 8008238:	e03e      	b.n	80082b8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800823a:	4b31      	ldr	r3, [pc, #196]	; (8008300 <xTaskIncrementTick+0x158>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	429a      	cmp	r2, r3
 8008250:	d203      	bcs.n	800825a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008252:	4a2e      	ldr	r2, [pc, #184]	; (800830c <xTaskIncrementTick+0x164>)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6013      	str	r3, [r2, #0]
						break;
 8008258:	e02e      	b.n	80082b8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe ffd3 	bl	800720a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	3318      	adds	r3, #24
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe ffca 	bl	800720a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827a:	2201      	movs	r2, #1
 800827c:	409a      	lsls	r2, r3
 800827e:	4b24      	ldr	r3, [pc, #144]	; (8008310 <xTaskIncrementTick+0x168>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4313      	orrs	r3, r2
 8008284:	4a22      	ldr	r2, [pc, #136]	; (8008310 <xTaskIncrementTick+0x168>)
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4a1f      	ldr	r2, [pc, #124]	; (8008314 <xTaskIncrementTick+0x16c>)
 8008296:	441a      	add	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3304      	adds	r3, #4
 800829c:	4619      	mov	r1, r3
 800829e:	4610      	mov	r0, r2
 80082a0:	f7fe ff58 	bl	8007154 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <xTaskIncrementTick+0x170>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d3b4      	bcc.n	800821c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80082b2:	2301      	movs	r3, #1
 80082b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082b6:	e7b1      	b.n	800821c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082b8:	4b17      	ldr	r3, [pc, #92]	; (8008318 <xTaskIncrementTick+0x170>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082be:	4915      	ldr	r1, [pc, #84]	; (8008314 <xTaskIncrementTick+0x16c>)
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	440b      	add	r3, r1
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d907      	bls.n	80082e0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80082d0:	2301      	movs	r3, #1
 80082d2:	617b      	str	r3, [r7, #20]
 80082d4:	e004      	b.n	80082e0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <xTaskIncrementTick+0x174>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3301      	adds	r3, #1
 80082dc:	4a0f      	ldr	r2, [pc, #60]	; (800831c <xTaskIncrementTick+0x174>)
 80082de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80082e0:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <xTaskIncrementTick+0x178>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80082e8:	2301      	movs	r3, #1
 80082ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80082ec:	697b      	ldr	r3, [r7, #20]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	200009e0 	.word	0x200009e0
 80082fc:	200009bc 	.word	0x200009bc
 8008300:	20000970 	.word	0x20000970
 8008304:	20000974 	.word	0x20000974
 8008308:	200009d0 	.word	0x200009d0
 800830c:	200009d8 	.word	0x200009d8
 8008310:	200009c0 	.word	0x200009c0
 8008314:	200008bc 	.word	0x200008bc
 8008318:	200008b8 	.word	0x200008b8
 800831c:	200009c8 	.word	0x200009c8
 8008320:	200009cc 	.word	0x200009cc

08008324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800832a:	4b26      	ldr	r3, [pc, #152]	; (80083c4 <vTaskSwitchContext+0xa0>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008332:	4b25      	ldr	r3, [pc, #148]	; (80083c8 <vTaskSwitchContext+0xa4>)
 8008334:	2201      	movs	r2, #1
 8008336:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008338:	e03f      	b.n	80083ba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800833a:	4b23      	ldr	r3, [pc, #140]	; (80083c8 <vTaskSwitchContext+0xa4>)
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008340:	4b22      	ldr	r3, [pc, #136]	; (80083cc <vTaskSwitchContext+0xa8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	fab3 f383 	clz	r3, r3
 800834c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800834e:	7afb      	ldrb	r3, [r7, #11]
 8008350:	f1c3 031f 	rsb	r3, r3, #31
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	491e      	ldr	r1, [pc, #120]	; (80083d0 <vTaskSwitchContext+0xac>)
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <vTaskSwitchContext+0x5c>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	607b      	str	r3, [r7, #4]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <vTaskSwitchContext+0x5a>
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4a11      	ldr	r2, [pc, #68]	; (80083d0 <vTaskSwitchContext+0xac>)
 800838c:	4413      	add	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	605a      	str	r2, [r3, #4]
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	3308      	adds	r3, #8
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d104      	bne.n	80083b0 <vTaskSwitchContext+0x8c>
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	605a      	str	r2, [r3, #4]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	4a07      	ldr	r2, [pc, #28]	; (80083d4 <vTaskSwitchContext+0xb0>)
 80083b8:	6013      	str	r3, [r2, #0]
}
 80083ba:	bf00      	nop
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bc80      	pop	{r7}
 80083c2:	4770      	bx	lr
 80083c4:	200009e0 	.word	0x200009e0
 80083c8:	200009cc 	.word	0x200009cc
 80083cc:	200009c0 	.word	0x200009c0
 80083d0:	200008bc 	.word	0x200008bc
 80083d4:	200008b8 	.word	0x200008b8

080083d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	60fb      	str	r3, [r7, #12]
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083fe:	4b07      	ldr	r3, [pc, #28]	; (800841c <vTaskPlaceOnEventList+0x44>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3318      	adds	r3, #24
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fe fec7 	bl	800719a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800840c:	2101      	movs	r1, #1
 800840e:	6838      	ldr	r0, [r7, #0]
 8008410:	f000 fa70 	bl	80088f4 <prvAddCurrentTaskToDelayedList>
}
 8008414:	bf00      	nop
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	200008b8 	.word	0x200008b8

08008420 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10a      	bne.n	8008448 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	617b      	str	r3, [r7, #20]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008448:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <vTaskPlaceOnEventListRestricted+0x54>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3318      	adds	r3, #24
 800844e:	4619      	mov	r1, r3
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f7fe fe7f 	bl	8007154 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800845c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008460:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	68b8      	ldr	r0, [r7, #8]
 8008466:	f000 fa45 	bl	80088f4 <prvAddCurrentTaskToDelayedList>
	}
 800846a:	bf00      	nop
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200008b8 	.word	0x200008b8

08008478 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10a      	bne.n	80084a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	60fb      	str	r3, [r7, #12]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	3318      	adds	r3, #24
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe feae 	bl	800720a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ae:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <xTaskRemoveFromEventList+0xac>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d11c      	bne.n	80084f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fea5 	bl	800720a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	2201      	movs	r2, #1
 80084c6:	409a      	lsls	r2, r3
 80084c8:	4b17      	ldr	r3, [pc, #92]	; (8008528 <xTaskRemoveFromEventList+0xb0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	4a16      	ldr	r2, [pc, #88]	; (8008528 <xTaskRemoveFromEventList+0xb0>)
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4a13      	ldr	r2, [pc, #76]	; (800852c <xTaskRemoveFromEventList+0xb4>)
 80084e0:	441a      	add	r2, r3
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4619      	mov	r1, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	f7fe fe33 	bl	8007154 <vListInsertEnd>
 80084ee:	e005      	b.n	80084fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	3318      	adds	r3, #24
 80084f4:	4619      	mov	r1, r3
 80084f6:	480e      	ldr	r0, [pc, #56]	; (8008530 <xTaskRemoveFromEventList+0xb8>)
 80084f8:	f7fe fe2c 	bl	8007154 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008500:	4b0c      	ldr	r3, [pc, #48]	; (8008534 <xTaskRemoveFromEventList+0xbc>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008506:	429a      	cmp	r2, r3
 8008508:	d905      	bls.n	8008516 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800850a:	2301      	movs	r3, #1
 800850c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <xTaskRemoveFromEventList+0xc0>)
 8008510:	2201      	movs	r2, #1
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	e001      	b.n	800851a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800851a:	697b      	ldr	r3, [r7, #20]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	200009e0 	.word	0x200009e0
 8008528:	200009c0 	.word	0x200009c0
 800852c:	200008bc 	.word	0x200008bc
 8008530:	20000978 	.word	0x20000978
 8008534:	200008b8 	.word	0x200008b8
 8008538:	200009cc 	.word	0x200009cc

0800853c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008544:	4b06      	ldr	r3, [pc, #24]	; (8008560 <vTaskInternalSetTimeOutState+0x24>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <vTaskInternalSetTimeOutState+0x28>)
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	605a      	str	r2, [r3, #4]
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	200009d0 	.word	0x200009d0
 8008564:	200009bc 	.word	0x200009bc

08008568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	613b      	str	r3, [r7, #16]
}
 800858a:	bf00      	nop
 800858c:	e7fe      	b.n	800858c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	60fb      	str	r3, [r7, #12]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80085aa:	f000 fde7 	bl	800917c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085ae:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <xTaskCheckForTimeOut+0xbc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085c6:	d102      	bne.n	80085ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	e023      	b.n	8008616 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4b15      	ldr	r3, [pc, #84]	; (8008628 <xTaskCheckForTimeOut+0xc0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d007      	beq.n	80085ea <xTaskCheckForTimeOut+0x82>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d302      	bcc.n	80085ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	e015      	b.n	8008616 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d20b      	bcs.n	800860c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff ff9b 	bl	800853c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	e004      	b.n	8008616 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008616:	f000 fde1 	bl	80091dc <vPortExitCritical>

	return xReturn;
 800861a:	69fb      	ldr	r3, [r7, #28]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3720      	adds	r7, #32
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	200009bc 	.word	0x200009bc
 8008628:	200009d0 	.word	0x200009d0

0800862c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008630:	4b03      	ldr	r3, [pc, #12]	; (8008640 <vTaskMissedYield+0x14>)
 8008632:	2201      	movs	r2, #1
 8008634:	601a      	str	r2, [r3, #0]
}
 8008636:	bf00      	nop
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	200009cc 	.word	0x200009cc

08008644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800864c:	f000 f852 	bl	80086f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <prvIdleTask+0x28>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d9f9      	bls.n	800864c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008658:	4b05      	ldr	r3, [pc, #20]	; (8008670 <prvIdleTask+0x2c>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008668:	e7f0      	b.n	800864c <prvIdleTask+0x8>
 800866a:	bf00      	nop
 800866c:	200008bc 	.word	0x200008bc
 8008670:	e000ed04 	.word	0xe000ed04

08008674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800867a:	2300      	movs	r3, #0
 800867c:	607b      	str	r3, [r7, #4]
 800867e:	e00c      	b.n	800869a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4a12      	ldr	r2, [pc, #72]	; (80086d4 <prvInitialiseTaskLists+0x60>)
 800868c:	4413      	add	r3, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fd35 	bl	80070fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3301      	adds	r3, #1
 8008698:	607b      	str	r3, [r7, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b06      	cmp	r3, #6
 800869e:	d9ef      	bls.n	8008680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086a0:	480d      	ldr	r0, [pc, #52]	; (80086d8 <prvInitialiseTaskLists+0x64>)
 80086a2:	f7fe fd2c 	bl	80070fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086a6:	480d      	ldr	r0, [pc, #52]	; (80086dc <prvInitialiseTaskLists+0x68>)
 80086a8:	f7fe fd29 	bl	80070fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086ac:	480c      	ldr	r0, [pc, #48]	; (80086e0 <prvInitialiseTaskLists+0x6c>)
 80086ae:	f7fe fd26 	bl	80070fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086b2:	480c      	ldr	r0, [pc, #48]	; (80086e4 <prvInitialiseTaskLists+0x70>)
 80086b4:	f7fe fd23 	bl	80070fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086b8:	480b      	ldr	r0, [pc, #44]	; (80086e8 <prvInitialiseTaskLists+0x74>)
 80086ba:	f7fe fd20 	bl	80070fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086be:	4b0b      	ldr	r3, [pc, #44]	; (80086ec <prvInitialiseTaskLists+0x78>)
 80086c0:	4a05      	ldr	r2, [pc, #20]	; (80086d8 <prvInitialiseTaskLists+0x64>)
 80086c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086c4:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <prvInitialiseTaskLists+0x7c>)
 80086c6:	4a05      	ldr	r2, [pc, #20]	; (80086dc <prvInitialiseTaskLists+0x68>)
 80086c8:	601a      	str	r2, [r3, #0]
}
 80086ca:	bf00      	nop
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	200008bc 	.word	0x200008bc
 80086d8:	20000948 	.word	0x20000948
 80086dc:	2000095c 	.word	0x2000095c
 80086e0:	20000978 	.word	0x20000978
 80086e4:	2000098c 	.word	0x2000098c
 80086e8:	200009a4 	.word	0x200009a4
 80086ec:	20000970 	.word	0x20000970
 80086f0:	20000974 	.word	0x20000974

080086f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086fa:	e019      	b.n	8008730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086fc:	f000 fd3e 	bl	800917c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008700:	4b10      	ldr	r3, [pc, #64]	; (8008744 <prvCheckTasksWaitingTermination+0x50>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3304      	adds	r3, #4
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe fd7c 	bl	800720a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008712:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <prvCheckTasksWaitingTermination+0x54>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3b01      	subs	r3, #1
 8008718:	4a0b      	ldr	r2, [pc, #44]	; (8008748 <prvCheckTasksWaitingTermination+0x54>)
 800871a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800871c:	4b0b      	ldr	r3, [pc, #44]	; (800874c <prvCheckTasksWaitingTermination+0x58>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3b01      	subs	r3, #1
 8008722:	4a0a      	ldr	r2, [pc, #40]	; (800874c <prvCheckTasksWaitingTermination+0x58>)
 8008724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008726:	f000 fd59 	bl	80091dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f810 	bl	8008750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <prvCheckTasksWaitingTermination+0x58>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e1      	bne.n	80086fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	2000098c 	.word	0x2000098c
 8008748:	200009b8 	.word	0x200009b8
 800874c:	200009a0 	.word	0x200009a0

08008750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
	...

08008764 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800876a:	4b0e      	ldr	r3, [pc, #56]	; (80087a4 <prvResetNextTaskUnblockTime+0x40>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <prvResetNextTaskUnblockTime+0x14>
 8008774:	2301      	movs	r3, #1
 8008776:	e000      	b.n	800877a <prvResetNextTaskUnblockTime+0x16>
 8008778:	2300      	movs	r3, #0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800877e:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <prvResetNextTaskUnblockTime+0x44>)
 8008780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008784:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008786:	e008      	b.n	800879a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <prvResetNextTaskUnblockTime+0x40>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	4a04      	ldr	r2, [pc, #16]	; (80087a8 <prvResetNextTaskUnblockTime+0x44>)
 8008798:	6013      	str	r3, [r2, #0]
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr
 80087a4:	20000970 	.word	0x20000970
 80087a8:	200009d8 	.word	0x200009d8

080087ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087b2:	4b0b      	ldr	r3, [pc, #44]	; (80087e0 <xTaskGetSchedulerState+0x34>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087ba:	2301      	movs	r3, #1
 80087bc:	607b      	str	r3, [r7, #4]
 80087be:	e008      	b.n	80087d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c0:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <xTaskGetSchedulerState+0x38>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d102      	bne.n	80087ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087c8:	2302      	movs	r3, #2
 80087ca:	607b      	str	r3, [r7, #4]
 80087cc:	e001      	b.n	80087d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087ce:	2300      	movs	r3, #0
 80087d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087d2:	687b      	ldr	r3, [r7, #4]
	}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	bc80      	pop	{r7}
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	200009c4 	.word	0x200009c4
 80087e4:	200009e0 	.word	0x200009e0

080087e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d06e      	beq.n	80088dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087fe:	4b3a      	ldr	r3, [pc, #232]	; (80088e8 <xTaskPriorityDisinherit+0x100>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	429a      	cmp	r2, r3
 8008806:	d00a      	beq.n	800881e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	60fb      	str	r3, [r7, #12]
}
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10a      	bne.n	800883c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	60bb      	str	r3, [r7, #8]
}
 8008838:	bf00      	nop
 800883a:	e7fe      	b.n	800883a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008840:	1e5a      	subs	r2, r3, #1
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884e:	429a      	cmp	r2, r3
 8008850:	d044      	beq.n	80088dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008856:	2b00      	cmp	r3, #0
 8008858:	d140      	bne.n	80088dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	3304      	adds	r3, #4
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fcd3 	bl	800720a <uxListRemove>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d115      	bne.n	8008896 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886e:	491f      	ldr	r1, [pc, #124]	; (80088ec <xTaskPriorityDisinherit+0x104>)
 8008870:	4613      	mov	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10a      	bne.n	8008896 <xTaskPriorityDisinherit+0xae>
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	2201      	movs	r2, #1
 8008886:	fa02 f303 	lsl.w	r3, r2, r3
 800888a:	43da      	mvns	r2, r3
 800888c:	4b18      	ldr	r3, [pc, #96]	; (80088f0 <xTaskPriorityDisinherit+0x108>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4013      	ands	r3, r2
 8008892:	4a17      	ldr	r2, [pc, #92]	; (80088f0 <xTaskPriorityDisinherit+0x108>)
 8008894:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	f1c3 0207 	rsb	r2, r3, #7
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ae:	2201      	movs	r2, #1
 80088b0:	409a      	lsls	r2, r3
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <xTaskPriorityDisinherit+0x108>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	4a0d      	ldr	r2, [pc, #52]	; (80088f0 <xTaskPriorityDisinherit+0x108>)
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4a08      	ldr	r2, [pc, #32]	; (80088ec <xTaskPriorityDisinherit+0x104>)
 80088ca:	441a      	add	r2, r3
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	3304      	adds	r3, #4
 80088d0:	4619      	mov	r1, r3
 80088d2:	4610      	mov	r0, r2
 80088d4:	f7fe fc3e 	bl	8007154 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088d8:	2301      	movs	r3, #1
 80088da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088dc:	697b      	ldr	r3, [r7, #20]
	}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	200008b8 	.word	0x200008b8
 80088ec:	200008bc 	.word	0x200008bc
 80088f0:	200009c0 	.word	0x200009c0

080088f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088fe:	4b29      	ldr	r3, [pc, #164]	; (80089a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008904:	4b28      	ldr	r3, [pc, #160]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3304      	adds	r3, #4
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fc7d 	bl	800720a <uxListRemove>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008916:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	2201      	movs	r2, #1
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	43da      	mvns	r2, r3
 8008924:	4b21      	ldr	r3, [pc, #132]	; (80089ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4013      	ands	r3, r2
 800892a:	4a20      	ldr	r2, [pc, #128]	; (80089ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800892c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008934:	d10a      	bne.n	800894c <prvAddCurrentTaskToDelayedList+0x58>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800893c:	4b1a      	ldr	r3, [pc, #104]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3304      	adds	r3, #4
 8008942:	4619      	mov	r1, r3
 8008944:	481a      	ldr	r0, [pc, #104]	; (80089b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008946:	f7fe fc05 	bl	8007154 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800894a:	e026      	b.n	800899a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008954:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	d209      	bcs.n	8008978 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008964:	4b13      	ldr	r3, [pc, #76]	; (80089b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	4b0f      	ldr	r3, [pc, #60]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7fe fc12 	bl	800719a <vListInsert>
}
 8008976:	e010      	b.n	800899a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008978:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3304      	adds	r3, #4
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7fe fc08 	bl	800719a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800898a:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	429a      	cmp	r2, r3
 8008992:	d202      	bcs.n	800899a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008994:	4a09      	ldr	r2, [pc, #36]	; (80089bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	6013      	str	r3, [r2, #0]
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	200009bc 	.word	0x200009bc
 80089a8:	200008b8 	.word	0x200008b8
 80089ac:	200009c0 	.word	0x200009c0
 80089b0:	200009a4 	.word	0x200009a4
 80089b4:	20000974 	.word	0x20000974
 80089b8:	20000970 	.word	0x20000970
 80089bc:	200009d8 	.word	0x200009d8

080089c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08a      	sub	sp, #40	; 0x28
 80089c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089ca:	f000 faa7 	bl	8008f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089ce:	4b1c      	ldr	r3, [pc, #112]	; (8008a40 <xTimerCreateTimerTask+0x80>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d021      	beq.n	8008a1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089de:	1d3a      	adds	r2, r7, #4
 80089e0:	f107 0108 	add.w	r1, r7, #8
 80089e4:	f107 030c 	add.w	r3, r7, #12
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7f9 f8c1 	bl	8001b70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	9202      	str	r2, [sp, #8]
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	2302      	movs	r3, #2
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	2300      	movs	r3, #0
 80089fe:	460a      	mov	r2, r1
 8008a00:	4910      	ldr	r1, [pc, #64]	; (8008a44 <xTimerCreateTimerTask+0x84>)
 8008a02:	4811      	ldr	r0, [pc, #68]	; (8008a48 <xTimerCreateTimerTask+0x88>)
 8008a04:	f7ff f93c 	bl	8007c80 <xTaskCreateStatic>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	4a10      	ldr	r2, [pc, #64]	; (8008a4c <xTimerCreateTimerTask+0x8c>)
 8008a0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a0e:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <xTimerCreateTimerTask+0x8c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a16:	2301      	movs	r3, #1
 8008a18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10a      	bne.n	8008a36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	613b      	str	r3, [r7, #16]
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a36:	697b      	ldr	r3, [r7, #20]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20000a14 	.word	0x20000a14
 8008a44:	08009d60 	.word	0x08009d60
 8008a48:	08008b6d 	.word	0x08008b6d
 8008a4c:	20000a18 	.word	0x20000a18

08008a50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	; 0x28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10a      	bne.n	8008a7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	623b      	str	r3, [r7, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	e7fe      	b.n	8008a7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <xTimerGenericCommand+0x98>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d02a      	beq.n	8008adc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	dc18      	bgt.n	8008aca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a98:	f7ff fe88 	bl	80087ac <xTaskGetSchedulerState>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d109      	bne.n	8008ab6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008aa2:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <xTimerGenericCommand+0x98>)
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	f107 0114 	add.w	r1, r7, #20
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aae:	f7fe fd05 	bl	80074bc <xQueueGenericSend>
 8008ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ab4:	e012      	b.n	8008adc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <xTimerGenericCommand+0x98>)
 8008ab8:	6818      	ldr	r0, [r3, #0]
 8008aba:	f107 0114 	add.w	r1, r7, #20
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f7fe fcfb 	bl	80074bc <xQueueGenericSend>
 8008ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ac8:	e008      	b.n	8008adc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008aca:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <xTimerGenericCommand+0x98>)
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	f107 0114 	add.w	r1, r7, #20
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	f7fe fdef 	bl	80076b8 <xQueueGenericSendFromISR>
 8008ada:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3728      	adds	r7, #40	; 0x28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000a14 	.word	0x20000a14

08008aec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008af6:	4b1c      	ldr	r3, [pc, #112]	; (8008b68 <prvProcessExpiredTimer+0x7c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe fb80 	bl	800720a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d122      	bne.n	8008b58 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	18d1      	adds	r1, r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	6978      	ldr	r0, [r7, #20]
 8008b20:	f000 f8c8 	bl	8008cb4 <prvInsertTimerInActiveList>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d016      	beq.n	8008b58 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	2100      	movs	r1, #0
 8008b34:	6978      	ldr	r0, [r7, #20]
 8008b36:	f7ff ff8b 	bl	8008a50 <xTimerGenericCommand>
 8008b3a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60fb      	str	r3, [r7, #12]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	6978      	ldr	r0, [r7, #20]
 8008b5e:	4798      	blx	r3
}
 8008b60:	bf00      	nop
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20000a0c 	.word	0x20000a0c

08008b6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b74:	f107 0308 	add.w	r3, r7, #8
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f857 	bl	8008c2c <prvGetNextExpireTime>
 8008b7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	4619      	mov	r1, r3
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 f803 	bl	8008b90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b8a:	f000 f8d5 	bl	8008d38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b8e:	e7f1      	b.n	8008b74 <prvTimerTask+0x8>

08008b90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b9a:	f7ff fa4d 	bl	8008038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b9e:	f107 0308 	add.w	r3, r7, #8
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 f866 	bl	8008c74 <prvSampleTimeNow>
 8008ba8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d130      	bne.n	8008c12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10a      	bne.n	8008bcc <prvProcessTimerOrBlockTask+0x3c>
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d806      	bhi.n	8008bcc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bbe:	f7ff fa49 	bl	8008054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff ff91 	bl	8008aec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bca:	e024      	b.n	8008c16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d008      	beq.n	8008be4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bd2:	4b13      	ldr	r3, [pc, #76]	; (8008c20 <prvProcessTimerOrBlockTask+0x90>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	bf0c      	ite	eq
 8008bdc:	2301      	moveq	r3, #1
 8008bde:	2300      	movne	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008be4:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <prvProcessTimerOrBlockTask+0x94>)
 8008be6:	6818      	ldr	r0, [r3, #0]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	f7ff f811 	bl	8007c18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008bf6:	f7ff fa2d 	bl	8008054 <xTaskResumeAll>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c00:	4b09      	ldr	r3, [pc, #36]	; (8008c28 <prvProcessTimerOrBlockTask+0x98>)
 8008c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	f3bf 8f6f 	isb	sy
}
 8008c10:	e001      	b.n	8008c16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c12:	f7ff fa1f 	bl	8008054 <xTaskResumeAll>
}
 8008c16:	bf00      	nop
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000a10 	.word	0x20000a10
 8008c24:	20000a14 	.word	0x20000a14
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c34:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <prvGetNextExpireTime+0x44>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bf0c      	ite	eq
 8008c3e:	2301      	moveq	r3, #1
 8008c40:	2300      	movne	r3, #0
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	461a      	mov	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d105      	bne.n	8008c5e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c52:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <prvGetNextExpireTime+0x44>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	e001      	b.n	8008c62 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c62:	68fb      	ldr	r3, [r7, #12]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bc80      	pop	{r7}
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	20000a0c 	.word	0x20000a0c

08008c74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c7c:	f7ff fa86 	bl	800818c <xTaskGetTickCount>
 8008c80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c82:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <prvSampleTimeNow+0x3c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d205      	bcs.n	8008c98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c8c:	f000 f8e4 	bl	8008e58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	e002      	b.n	8008c9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c9e:	4a04      	ldr	r2, [pc, #16]	; (8008cb0 <prvSampleTimeNow+0x3c>)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000a1c 	.word	0x20000a1c

08008cb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d812      	bhi.n	8008d00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d302      	bcc.n	8008cee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	e01b      	b.n	8008d26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cee:	4b10      	ldr	r3, [pc, #64]	; (8008d30 <prvInsertTimerInActiveList+0x7c>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	f7fe fa4e 	bl	800719a <vListInsert>
 8008cfe:	e012      	b.n	8008d26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d206      	bcs.n	8008d16 <prvInsertTimerInActiveList+0x62>
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d302      	bcc.n	8008d16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d10:	2301      	movs	r3, #1
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	e007      	b.n	8008d26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d16:	4b07      	ldr	r3, [pc, #28]	; (8008d34 <prvInsertTimerInActiveList+0x80>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fe fa3a 	bl	800719a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d26:	697b      	ldr	r3, [r7, #20]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000a10 	.word	0x20000a10
 8008d34:	20000a0c 	.word	0x20000a0c

08008d38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08c      	sub	sp, #48	; 0x30
 8008d3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d3e:	e078      	b.n	8008e32 <prvProcessReceivedCommands+0xfa>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	db74      	blt.n	8008e30 <prvProcessReceivedCommands+0xf8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d004      	beq.n	8008d5c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	3304      	adds	r3, #4
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fa57 	bl	800720a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d5c:	1d3b      	adds	r3, r7, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff ff88 	bl	8008c74 <prvSampleTimeNow>
 8008d64:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b09      	cmp	r3, #9
 8008d6a:	d862      	bhi.n	8008e32 <prvProcessReceivedCommands+0xfa>
 8008d6c:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <prvProcessReceivedCommands+0x3c>)
 8008d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d72:	bf00      	nop
 8008d74:	08008d9d 	.word	0x08008d9d
 8008d78:	08008d9d 	.word	0x08008d9d
 8008d7c:	08008d9d 	.word	0x08008d9d
 8008d80:	08008e33 	.word	0x08008e33
 8008d84:	08008df9 	.word	0x08008df9
 8008d88:	08008e33 	.word	0x08008e33
 8008d8c:	08008d9d 	.word	0x08008d9d
 8008d90:	08008d9d 	.word	0x08008d9d
 8008d94:	08008e33 	.word	0x08008e33
 8008d98:	08008df9 	.word	0x08008df9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	18d1      	adds	r1, r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a3a      	ldr	r2, [r7, #32]
 8008da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008daa:	f7ff ff83 	bl	8008cb4 <prvInsertTimerInActiveList>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d03e      	beq.n	8008e32 <prvProcessReceivedCommands+0xfa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	69db      	ldr	r3, [r3, #28]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d136      	bne.n	8008e32 <prvProcessReceivedCommands+0xfa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	441a      	add	r2, r3
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dd6:	f7ff fe3b 	bl	8008a50 <xTimerGenericCommand>
 8008dda:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d127      	bne.n	8008e32 <prvProcessReceivedCommands+0xfa>
	__asm volatile
 8008de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	61bb      	str	r3, [r7, #24]
}
 8008df4:	bf00      	nop
 8008df6:	e7fe      	b.n	8008df6 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10a      	bne.n	8008e1c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	617b      	str	r3, [r7, #20]
}
 8008e18:	bf00      	nop
 8008e1a:	e7fe      	b.n	8008e1a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	699a      	ldr	r2, [r3, #24]
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	18d1      	adds	r1, r2, r3
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	6a3a      	ldr	r2, [r7, #32]
 8008e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e2a:	f7ff ff43 	bl	8008cb4 <prvInsertTimerInActiveList>
					break;
 8008e2e:	e000      	b.n	8008e32 <prvProcessReceivedCommands+0xfa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e32:	4b08      	ldr	r3, [pc, #32]	; (8008e54 <prvProcessReceivedCommands+0x11c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f107 0108 	add.w	r1, r7, #8
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe fcd3 	bl	80077e8 <xQueueReceive>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f47f af7b 	bne.w	8008d40 <prvProcessReceivedCommands+0x8>
	}
}
 8008e4a:	bf00      	nop
 8008e4c:	bf00      	nop
 8008e4e:	3728      	adds	r7, #40	; 0x28
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	20000a14 	.word	0x20000a14

08008e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e5e:	e045      	b.n	8008eec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e60:	4b2c      	ldr	r3, [pc, #176]	; (8008f14 <prvSwitchTimerLists+0xbc>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e6a:	4b2a      	ldr	r3, [pc, #168]	; (8008f14 <prvSwitchTimerLists+0xbc>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe f9c6 	bl	800720a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d12e      	bne.n	8008eec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	4413      	add	r3, r2
 8008e96:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d90e      	bls.n	8008ebe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eac:	4b19      	ldr	r3, [pc, #100]	; (8008f14 <prvSwitchTimerLists+0xbc>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	f7fe f96f 	bl	800719a <vListInsert>
 8008ebc:	e016      	b.n	8008eec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7ff fdc1 	bl	8008a50 <xTimerGenericCommand>
 8008ece:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10a      	bne.n	8008eec <prvSwitchTimerLists+0x94>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	603b      	str	r3, [r7, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	e7fe      	b.n	8008eea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eec:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <prvSwitchTimerLists+0xbc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1b4      	bne.n	8008e60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ef6:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <prvSwitchTimerLists+0xbc>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008efc:	4b06      	ldr	r3, [pc, #24]	; (8008f18 <prvSwitchTimerLists+0xc0>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <prvSwitchTimerLists+0xbc>)
 8008f02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f04:	4a04      	ldr	r2, [pc, #16]	; (8008f18 <prvSwitchTimerLists+0xc0>)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	6013      	str	r3, [r2, #0]
}
 8008f0a:	bf00      	nop
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000a0c 	.word	0x20000a0c
 8008f18:	20000a10 	.word	0x20000a10

08008f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f22:	f000 f92b 	bl	800917c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f26:	4b15      	ldr	r3, [pc, #84]	; (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d120      	bne.n	8008f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f2e:	4814      	ldr	r0, [pc, #80]	; (8008f80 <prvCheckForValidListAndQueue+0x64>)
 8008f30:	f7fe f8e5 	bl	80070fe <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f34:	4813      	ldr	r0, [pc, #76]	; (8008f84 <prvCheckForValidListAndQueue+0x68>)
 8008f36:	f7fe f8e2 	bl	80070fe <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f3a:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <prvCheckForValidListAndQueue+0x6c>)
 8008f3c:	4a10      	ldr	r2, [pc, #64]	; (8008f80 <prvCheckForValidListAndQueue+0x64>)
 8008f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f40:	4b12      	ldr	r3, [pc, #72]	; (8008f8c <prvCheckForValidListAndQueue+0x70>)
 8008f42:	4a10      	ldr	r2, [pc, #64]	; (8008f84 <prvCheckForValidListAndQueue+0x68>)
 8008f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f46:	2300      	movs	r3, #0
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <prvCheckForValidListAndQueue+0x74>)
 8008f4c:	4a11      	ldr	r2, [pc, #68]	; (8008f94 <prvCheckForValidListAndQueue+0x78>)
 8008f4e:	210c      	movs	r1, #12
 8008f50:	200a      	movs	r0, #10
 8008f52:	f7fe f9eb 	bl	800732c <xQueueGenericCreateStatic>
 8008f56:	4603      	mov	r3, r0
 8008f58:	4a08      	ldr	r2, [pc, #32]	; (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f5c:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f64:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	490b      	ldr	r1, [pc, #44]	; (8008f98 <prvCheckForValidListAndQueue+0x7c>)
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fe2c 	bl	8007bc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f70:	f000 f934 	bl	80091dc <vPortExitCritical>
}
 8008f74:	bf00      	nop
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000a14 	.word	0x20000a14
 8008f80:	200009e4 	.word	0x200009e4
 8008f84:	200009f8 	.word	0x200009f8
 8008f88:	20000a0c 	.word	0x20000a0c
 8008f8c:	20000a10 	.word	0x20000a10
 8008f90:	20000a98 	.word	0x20000a98
 8008f94:	20000a20 	.word	0x20000a20
 8008f98:	08009d68 	.word	0x08009d68

08008f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3b04      	subs	r3, #4
 8008fac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f023 0201 	bic.w	r2, r3, #1
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3b04      	subs	r3, #4
 8008fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fcc:	4a08      	ldr	r2, [pc, #32]	; (8008ff0 <pxPortInitialiseStack+0x54>)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3b14      	subs	r3, #20
 8008fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3b20      	subs	r3, #32
 8008fe2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc80      	pop	{r7}
 8008fee:	4770      	bx	lr
 8008ff0:	08008ff5 	.word	0x08008ff5

08008ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ffe:	4b12      	ldr	r3, [pc, #72]	; (8009048 <prvTaskExitError+0x54>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009006:	d00a      	beq.n	800901e <prvTaskExitError+0x2a>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	60fb      	str	r3, [r7, #12]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <prvTaskExitError+0x28>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60bb      	str	r3, [r7, #8]
}
 8009030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009032:	bf00      	nop
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0fc      	beq.n	8009034 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800903a:	bf00      	nop
 800903c:	bf00      	nop
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	bc80      	pop	{r7}
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000180 	.word	0x20000180
 800904c:	00000000 	.word	0x00000000

08009050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009050:	4b07      	ldr	r3, [pc, #28]	; (8009070 <pxCurrentTCBConst2>)
 8009052:	6819      	ldr	r1, [r3, #0]
 8009054:	6808      	ldr	r0, [r1, #0]
 8009056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800905a:	f380 8809 	msr	PSP, r0
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f04f 0000 	mov.w	r0, #0
 8009066:	f380 8811 	msr	BASEPRI, r0
 800906a:	f04e 0e0d 	orr.w	lr, lr, #13
 800906e:	4770      	bx	lr

08009070 <pxCurrentTCBConst2>:
 8009070:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009074:	bf00      	nop
 8009076:	bf00      	nop

08009078 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009078:	4806      	ldr	r0, [pc, #24]	; (8009094 <prvPortStartFirstTask+0x1c>)
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	6800      	ldr	r0, [r0, #0]
 800907e:	f380 8808 	msr	MSP, r0
 8009082:	b662      	cpsie	i
 8009084:	b661      	cpsie	f
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	df00      	svc	0
 8009090:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009092:	bf00      	nop
 8009094:	e000ed08 	.word	0xe000ed08

08009098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800909e:	4b32      	ldr	r3, [pc, #200]	; (8009168 <xPortStartScheduler+0xd0>)
 80090a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	22ff      	movs	r2, #255	; 0xff
 80090ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	4b2a      	ldr	r3, [pc, #168]	; (800916c <xPortStartScheduler+0xd4>)
 80090c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090c6:	4b2a      	ldr	r3, [pc, #168]	; (8009170 <xPortStartScheduler+0xd8>)
 80090c8:	2207      	movs	r2, #7
 80090ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090cc:	e009      	b.n	80090e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80090ce:	4b28      	ldr	r3, [pc, #160]	; (8009170 <xPortStartScheduler+0xd8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	4a26      	ldr	r2, [pc, #152]	; (8009170 <xPortStartScheduler+0xd8>)
 80090d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090e2:	78fb      	ldrb	r3, [r7, #3]
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ea:	2b80      	cmp	r3, #128	; 0x80
 80090ec:	d0ef      	beq.n	80090ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090ee:	4b20      	ldr	r3, [pc, #128]	; (8009170 <xPortStartScheduler+0xd8>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f1c3 0307 	rsb	r3, r3, #7
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d00a      	beq.n	8009110 <xPortStartScheduler+0x78>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	60bb      	str	r3, [r7, #8]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009110:	4b17      	ldr	r3, [pc, #92]	; (8009170 <xPortStartScheduler+0xd8>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	021b      	lsls	r3, r3, #8
 8009116:	4a16      	ldr	r2, [pc, #88]	; (8009170 <xPortStartScheduler+0xd8>)
 8009118:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800911a:	4b15      	ldr	r3, [pc, #84]	; (8009170 <xPortStartScheduler+0xd8>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009122:	4a13      	ldr	r2, [pc, #76]	; (8009170 <xPortStartScheduler+0xd8>)
 8009124:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	b2da      	uxtb	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800912e:	4b11      	ldr	r3, [pc, #68]	; (8009174 <xPortStartScheduler+0xdc>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a10      	ldr	r2, [pc, #64]	; (8009174 <xPortStartScheduler+0xdc>)
 8009134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800913a:	4b0e      	ldr	r3, [pc, #56]	; (8009174 <xPortStartScheduler+0xdc>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a0d      	ldr	r2, [pc, #52]	; (8009174 <xPortStartScheduler+0xdc>)
 8009140:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009144:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009146:	f000 f8b9 	bl	80092bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <xPortStartScheduler+0xe0>)
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009150:	f7ff ff92 	bl	8009078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009154:	f7ff f8e6 	bl	8008324 <vTaskSwitchContext>
	prvTaskExitError();
 8009158:	f7ff ff4c 	bl	8008ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	e000e400 	.word	0xe000e400
 800916c:	20000ae0 	.word	0x20000ae0
 8009170:	20000ae4 	.word	0x20000ae4
 8009174:	e000ed20 	.word	0xe000ed20
 8009178:	20000180 	.word	0x20000180

0800917c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	607b      	str	r3, [r7, #4]
}
 8009194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009196:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <vPortEnterCritical+0x58>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3301      	adds	r3, #1
 800919c:	4a0d      	ldr	r2, [pc, #52]	; (80091d4 <vPortEnterCritical+0x58>)
 800919e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091a0:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <vPortEnterCritical+0x58>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d10f      	bne.n	80091c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091a8:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <vPortEnterCritical+0x5c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	603b      	str	r3, [r7, #0]
}
 80091c4:	bf00      	nop
 80091c6:	e7fe      	b.n	80091c6 <vPortEnterCritical+0x4a>
	}
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bc80      	pop	{r7}
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20000180 	.word	0x20000180
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091e2:	4b11      	ldr	r3, [pc, #68]	; (8009228 <vPortExitCritical+0x4c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10a      	bne.n	8009200 <vPortExitCritical+0x24>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	607b      	str	r3, [r7, #4]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009200:	4b09      	ldr	r3, [pc, #36]	; (8009228 <vPortExitCritical+0x4c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3b01      	subs	r3, #1
 8009206:	4a08      	ldr	r2, [pc, #32]	; (8009228 <vPortExitCritical+0x4c>)
 8009208:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800920a:	4b07      	ldr	r3, [pc, #28]	; (8009228 <vPortExitCritical+0x4c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d105      	bne.n	800921e <vPortExitCritical+0x42>
 8009212:	2300      	movs	r3, #0
 8009214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	f383 8811 	msr	BASEPRI, r3
}
 800921c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	bc80      	pop	{r7}
 8009226:	4770      	bx	lr
 8009228:	20000180 	.word	0x20000180
 800922c:	00000000 	.word	0x00000000

08009230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009230:	f3ef 8009 	mrs	r0, PSP
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <pxCurrentTCBConst>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009240:	6010      	str	r0, [r2, #0]
 8009242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800924a:	f380 8811 	msr	BASEPRI, r0
 800924e:	f7ff f869 	bl	8008324 <vTaskSwitchContext>
 8009252:	f04f 0000 	mov.w	r0, #0
 8009256:	f380 8811 	msr	BASEPRI, r0
 800925a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800925e:	6819      	ldr	r1, [r3, #0]
 8009260:	6808      	ldr	r0, [r1, #0]
 8009262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009266:	f380 8809 	msr	PSP, r0
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	4770      	bx	lr

08009270 <pxCurrentTCBConst>:
 8009270:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop

08009278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	607b      	str	r3, [r7, #4]
}
 8009290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009292:	f7fe ff89 	bl	80081a8 <xTaskIncrementTick>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800929c:	4b06      	ldr	r3, [pc, #24]	; (80092b8 <SysTick_Handler+0x40>)
 800929e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	2300      	movs	r3, #0
 80092a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	f383 8811 	msr	BASEPRI, r3
}
 80092ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	e000ed04 	.word	0xe000ed04

080092bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <vPortSetupTimerInterrupt+0x30>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092c6:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <vPortSetupTimerInterrupt+0x34>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <vPortSetupTimerInterrupt+0x38>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a09      	ldr	r2, [pc, #36]	; (80092f8 <vPortSetupTimerInterrupt+0x3c>)
 80092d2:	fba2 2303 	umull	r2, r3, r2, r3
 80092d6:	099b      	lsrs	r3, r3, #6
 80092d8:	4a08      	ldr	r2, [pc, #32]	; (80092fc <vPortSetupTimerInterrupt+0x40>)
 80092da:	3b01      	subs	r3, #1
 80092dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092de:	4b03      	ldr	r3, [pc, #12]	; (80092ec <vPortSetupTimerInterrupt+0x30>)
 80092e0:	2207      	movs	r2, #7
 80092e2:	601a      	str	r2, [r3, #0]
}
 80092e4:	bf00      	nop
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bc80      	pop	{r7}
 80092ea:	4770      	bx	lr
 80092ec:	e000e010 	.word	0xe000e010
 80092f0:	e000e018 	.word	0xe000e018
 80092f4:	20000064 	.word	0x20000064
 80092f8:	10624dd3 	.word	0x10624dd3
 80092fc:	e000e014 	.word	0xe000e014

08009300 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009306:	f3ef 8305 	mrs	r3, IPSR
 800930a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b0f      	cmp	r3, #15
 8009310:	d914      	bls.n	800933c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009312:	4a16      	ldr	r2, [pc, #88]	; (800936c <vPortValidateInterruptPriority+0x6c>)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800931c:	4b14      	ldr	r3, [pc, #80]	; (8009370 <vPortValidateInterruptPriority+0x70>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	7afa      	ldrb	r2, [r7, #11]
 8009322:	429a      	cmp	r2, r3
 8009324:	d20a      	bcs.n	800933c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	607b      	str	r3, [r7, #4]
}
 8009338:	bf00      	nop
 800933a:	e7fe      	b.n	800933a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <vPortValidateInterruptPriority+0x74>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009344:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <vPortValidateInterruptPriority+0x78>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	d90a      	bls.n	8009362 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	603b      	str	r3, [r7, #0]
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <vPortValidateInterruptPriority+0x60>
	}
 8009362:	bf00      	nop
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr
 800936c:	e000e3f0 	.word	0xe000e3f0
 8009370:	20000ae0 	.word	0x20000ae0
 8009374:	e000ed0c 	.word	0xe000ed0c
 8009378:	20000ae4 	.word	0x20000ae4

0800937c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009380:	2200      	movs	r2, #0
 8009382:	4912      	ldr	r1, [pc, #72]	; (80093cc <MX_USB_DEVICE_Init+0x50>)
 8009384:	4812      	ldr	r0, [pc, #72]	; (80093d0 <MX_USB_DEVICE_Init+0x54>)
 8009386:	f7fc fda1 	bl	8005ecc <USBD_Init>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d001      	beq.n	8009394 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009390:	f7f8 fdbc 	bl	8001f0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009394:	490f      	ldr	r1, [pc, #60]	; (80093d4 <MX_USB_DEVICE_Init+0x58>)
 8009396:	480e      	ldr	r0, [pc, #56]	; (80093d0 <MX_USB_DEVICE_Init+0x54>)
 8009398:	f7fc fdd0 	bl	8005f3c <USBD_RegisterClass>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093a2:	f7f8 fdb3 	bl	8001f0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093a6:	490c      	ldr	r1, [pc, #48]	; (80093d8 <MX_USB_DEVICE_Init+0x5c>)
 80093a8:	4809      	ldr	r0, [pc, #36]	; (80093d0 <MX_USB_DEVICE_Init+0x54>)
 80093aa:	f7fc fd23 	bl	8005df4 <USBD_CDC_RegisterInterface>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093b4:	f7f8 fdaa 	bl	8001f0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093b8:	4805      	ldr	r0, [pc, #20]	; (80093d0 <MX_USB_DEVICE_Init+0x54>)
 80093ba:	f7fc fde5 	bl	8005f88 <USBD_Start>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093c4:	f7f8 fda2 	bl	8001f0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093c8:	bf00      	nop
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20000194 	.word	0x20000194
 80093d0:	20001778 	.word	0x20001778
 80093d4:	2000007c 	.word	0x2000007c
 80093d8:	20000184 	.word	0x20000184

080093dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093e0:	2200      	movs	r2, #0
 80093e2:	4905      	ldr	r1, [pc, #20]	; (80093f8 <CDC_Init_FS+0x1c>)
 80093e4:	4805      	ldr	r0, [pc, #20]	; (80093fc <CDC_Init_FS+0x20>)
 80093e6:	f7fc fd1b 	bl	8005e20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093ea:	4905      	ldr	r1, [pc, #20]	; (8009400 <CDC_Init_FS+0x24>)
 80093ec:	4803      	ldr	r0, [pc, #12]	; (80093fc <CDC_Init_FS+0x20>)
 80093ee:	f7fc fd30 	bl	8005e52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20001e24 	.word	0x20001e24
 80093fc:	20001778 	.word	0x20001778
 8009400:	20001a3c 	.word	0x20001a3c

08009404 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009408:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800940a:	4618      	mov	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr
	...

08009414 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	6039      	str	r1, [r7, #0]
 800941e:	71fb      	strb	r3, [r7, #7]
 8009420:	4613      	mov	r3, r2
 8009422:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	2b23      	cmp	r3, #35	; 0x23
 8009428:	d84a      	bhi.n	80094c0 <CDC_Control_FS+0xac>
 800942a:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <CDC_Control_FS+0x1c>)
 800942c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009430:	080094c1 	.word	0x080094c1
 8009434:	080094c1 	.word	0x080094c1
 8009438:	080094c1 	.word	0x080094c1
 800943c:	080094c1 	.word	0x080094c1
 8009440:	080094c1 	.word	0x080094c1
 8009444:	080094c1 	.word	0x080094c1
 8009448:	080094c1 	.word	0x080094c1
 800944c:	080094c1 	.word	0x080094c1
 8009450:	080094c1 	.word	0x080094c1
 8009454:	080094c1 	.word	0x080094c1
 8009458:	080094c1 	.word	0x080094c1
 800945c:	080094c1 	.word	0x080094c1
 8009460:	080094c1 	.word	0x080094c1
 8009464:	080094c1 	.word	0x080094c1
 8009468:	080094c1 	.word	0x080094c1
 800946c:	080094c1 	.word	0x080094c1
 8009470:	080094c1 	.word	0x080094c1
 8009474:	080094c1 	.word	0x080094c1
 8009478:	080094c1 	.word	0x080094c1
 800947c:	080094c1 	.word	0x080094c1
 8009480:	080094c1 	.word	0x080094c1
 8009484:	080094c1 	.word	0x080094c1
 8009488:	080094c1 	.word	0x080094c1
 800948c:	080094c1 	.word	0x080094c1
 8009490:	080094c1 	.word	0x080094c1
 8009494:	080094c1 	.word	0x080094c1
 8009498:	080094c1 	.word	0x080094c1
 800949c:	080094c1 	.word	0x080094c1
 80094a0:	080094c1 	.word	0x080094c1
 80094a4:	080094c1 	.word	0x080094c1
 80094a8:	080094c1 	.word	0x080094c1
 80094ac:	080094c1 	.word	0x080094c1
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094c1 	.word	0x080094c1
 80094b8:	080094c1 	.word	0x080094c1
 80094bc:	080094c1 	.word	0x080094c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094c0:	bf00      	nop
  }

  return (USBD_OK);
 80094c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop

080094d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	4805      	ldr	r0, [pc, #20]	; (80094f4 <CDC_Receive_FS+0x24>)
 80094de:	f7fc fcb8 	bl	8005e52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094e2:	4804      	ldr	r0, [pc, #16]	; (80094f4 <CDC_Receive_FS+0x24>)
 80094e4:	f7fc fcc8 	bl	8005e78 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20001778 	.word	0x20001778

080094f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	6039      	str	r1, [r7, #0]
 8009502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2212      	movs	r2, #18
 8009508:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800950a:	4b03      	ldr	r3, [pc, #12]	; (8009518 <USBD_FS_DeviceDescriptor+0x20>)
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	200001b0 	.word	0x200001b0

0800951c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	6039      	str	r1, [r7, #0]
 8009526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	2204      	movs	r2, #4
 800952c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800952e:	4b03      	ldr	r3, [pc, #12]	; (800953c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	200001c4 	.word	0x200001c4

08009540 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d105      	bne.n	800955e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	4907      	ldr	r1, [pc, #28]	; (8009574 <USBD_FS_ProductStrDescriptor+0x34>)
 8009556:	4808      	ldr	r0, [pc, #32]	; (8009578 <USBD_FS_ProductStrDescriptor+0x38>)
 8009558:	f7fd fc8e 	bl	8006e78 <USBD_GetString>
 800955c:	e004      	b.n	8009568 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4904      	ldr	r1, [pc, #16]	; (8009574 <USBD_FS_ProductStrDescriptor+0x34>)
 8009562:	4805      	ldr	r0, [pc, #20]	; (8009578 <USBD_FS_ProductStrDescriptor+0x38>)
 8009564:	f7fd fc88 	bl	8006e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009568:	4b02      	ldr	r3, [pc, #8]	; (8009574 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20001ea4 	.word	0x20001ea4
 8009578:	08009d70 	.word	0x08009d70

0800957c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	6039      	str	r1, [r7, #0]
 8009586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	4904      	ldr	r1, [pc, #16]	; (800959c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800958c:	4804      	ldr	r0, [pc, #16]	; (80095a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800958e:	f7fd fc73 	bl	8006e78 <USBD_GetString>
  return USBD_StrDesc;
 8009592:	4b02      	ldr	r3, [pc, #8]	; (800959c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20001ea4 	.word	0x20001ea4
 80095a0:	08009d80 	.word	0x08009d80

080095a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	221a      	movs	r2, #26
 80095b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095b6:	f000 f843 	bl	8009640 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095ba:	4b02      	ldr	r3, [pc, #8]	; (80095c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	200001c8 	.word	0x200001c8

080095c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d105      	bne.n	80095e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	4907      	ldr	r1, [pc, #28]	; (80095fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80095de:	4808      	ldr	r0, [pc, #32]	; (8009600 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095e0:	f7fd fc4a 	bl	8006e78 <USBD_GetString>
 80095e4:	e004      	b.n	80095f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	4904      	ldr	r1, [pc, #16]	; (80095fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ea:	4805      	ldr	r0, [pc, #20]	; (8009600 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095ec:	f7fd fc44 	bl	8006e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095f0:	4b02      	ldr	r3, [pc, #8]	; (80095fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20001ea4 	.word	0x20001ea4
 8009600:	08009d8c 	.word	0x08009d8c

08009604 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	6039      	str	r1, [r7, #0]
 800960e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d105      	bne.n	8009622 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4907      	ldr	r1, [pc, #28]	; (8009638 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800961a:	4808      	ldr	r0, [pc, #32]	; (800963c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800961c:	f7fd fc2c 	bl	8006e78 <USBD_GetString>
 8009620:	e004      	b.n	800962c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	4904      	ldr	r1, [pc, #16]	; (8009638 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009626:	4805      	ldr	r0, [pc, #20]	; (800963c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009628:	f7fd fc26 	bl	8006e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800962c:	4b02      	ldr	r3, [pc, #8]	; (8009638 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20001ea4 	.word	0x20001ea4
 800963c:	08009d98 	.word	0x08009d98

08009640 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009646:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <Get_SerialNum+0x44>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800964c:	4b0e      	ldr	r3, [pc, #56]	; (8009688 <Get_SerialNum+0x48>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009652:	4b0e      	ldr	r3, [pc, #56]	; (800968c <Get_SerialNum+0x4c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4413      	add	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d009      	beq.n	800967a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009666:	2208      	movs	r2, #8
 8009668:	4909      	ldr	r1, [pc, #36]	; (8009690 <Get_SerialNum+0x50>)
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 f814 	bl	8009698 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009670:	2204      	movs	r2, #4
 8009672:	4908      	ldr	r1, [pc, #32]	; (8009694 <Get_SerialNum+0x54>)
 8009674:	68b8      	ldr	r0, [r7, #8]
 8009676:	f000 f80f 	bl	8009698 <IntToUnicode>
  }
}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	1ffff7e8 	.word	0x1ffff7e8
 8009688:	1ffff7ec 	.word	0x1ffff7ec
 800968c:	1ffff7f0 	.word	0x1ffff7f0
 8009690:	200001ca 	.word	0x200001ca
 8009694:	200001da 	.word	0x200001da

08009698 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	4613      	mov	r3, r2
 80096a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096aa:	2300      	movs	r3, #0
 80096ac:	75fb      	strb	r3, [r7, #23]
 80096ae:	e027      	b.n	8009700 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	0f1b      	lsrs	r3, r3, #28
 80096b4:	2b09      	cmp	r3, #9
 80096b6:	d80b      	bhi.n	80096d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	0f1b      	lsrs	r3, r3, #28
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	7dfb      	ldrb	r3, [r7, #23]
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	4619      	mov	r1, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	440b      	add	r3, r1
 80096c8:	3230      	adds	r2, #48	; 0x30
 80096ca:	b2d2      	uxtb	r2, r2
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	e00a      	b.n	80096e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	0f1b      	lsrs	r3, r3, #28
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	4619      	mov	r1, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	440b      	add	r3, r1
 80096e0:	3237      	adds	r2, #55	; 0x37
 80096e2:	b2d2      	uxtb	r2, r2
 80096e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	3301      	adds	r3, #1
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	4413      	add	r3, r2
 80096f6:	2200      	movs	r2, #0
 80096f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	3301      	adds	r3, #1
 80096fe:	75fb      	strb	r3, [r7, #23]
 8009700:	7dfa      	ldrb	r2, [r7, #23]
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	429a      	cmp	r2, r3
 8009706:	d3d3      	bcc.n	80096b0 <IntToUnicode+0x18>
  }
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	371c      	adds	r7, #28
 800970e:	46bd      	mov	sp, r7
 8009710:	bc80      	pop	{r7}
 8009712:	4770      	bx	lr

08009714 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a0d      	ldr	r2, [pc, #52]	; (8009758 <HAL_PCD_MspInit+0x44>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d113      	bne.n	800974e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009726:	4b0d      	ldr	r3, [pc, #52]	; (800975c <HAL_PCD_MspInit+0x48>)
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	4a0c      	ldr	r2, [pc, #48]	; (800975c <HAL_PCD_MspInit+0x48>)
 800972c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009730:	61d3      	str	r3, [r2, #28]
 8009732:	4b0a      	ldr	r3, [pc, #40]	; (800975c <HAL_PCD_MspInit+0x48>)
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800973a:	60fb      	str	r3, [r7, #12]
 800973c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800973e:	2200      	movs	r2, #0
 8009740:	2105      	movs	r1, #5
 8009742:	2014      	movs	r0, #20
 8009744:	f7f8 fea3 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009748:	2014      	movs	r0, #20
 800974a:	f7f8 febc 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	40005c00 	.word	0x40005c00
 800975c:	40021000 	.word	0x40021000

08009760 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7fc fc4e 	bl	8006018 <USBD_LL_SetupStage>
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8009796:	78fb      	ldrb	r3, [r7, #3]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	015b      	lsls	r3, r3, #5
 800979c:	4413      	add	r3, r2
 800979e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	78fb      	ldrb	r3, [r7, #3]
 80097a6:	4619      	mov	r1, r3
 80097a8:	f7fc fc83 	bl	80060b2 <USBD_LL_DataOutStage>
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80097c6:	78fb      	ldrb	r3, [r7, #3]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	015b      	lsls	r3, r3, #5
 80097cc:	4413      	add	r3, r2
 80097ce:	333c      	adds	r3, #60	; 0x3c
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	4619      	mov	r1, r3
 80097d6:	f7fc fcdd 	bl	8006194 <USBD_LL_DataInStage>
}
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fc fded 	bl	80063d0 <USBD_LL_SOF>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009806:	2301      	movs	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	2b02      	cmp	r3, #2
 8009810:	d001      	beq.n	8009816 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009812:	f7f8 fb7b 	bl	8001f0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800981c:	7bfa      	ldrb	r2, [r7, #15]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f7fc fd9d 	bl	8006360 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800982c:	4618      	mov	r0, r3
 800982e:	f7fc fd56 	bl	80062de <USBD_LL_Reset>
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800984a:	4618      	mov	r0, r3
 800984c:	f7fc fd97 	bl	800637e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009858:	4b04      	ldr	r3, [pc, #16]	; (800986c <HAL_PCD_SuspendCallback+0x30>)
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	4a03      	ldr	r2, [pc, #12]	; (800986c <HAL_PCD_SuspendCallback+0x30>)
 800985e:	f043 0306 	orr.w	r3, r3, #6
 8009862:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	e000ed00 	.word	0xe000ed00

08009870 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800987e:	4618      	mov	r0, r3
 8009880:	f7fc fd91 	bl	80063a6 <USBD_LL_Resume>
}
 8009884:	bf00      	nop
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009894:	4a28      	ldr	r2, [pc, #160]	; (8009938 <USBD_LL_Init+0xac>)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a26      	ldr	r2, [pc, #152]	; (8009938 <USBD_LL_Init+0xac>)
 80098a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80098a4:	4b24      	ldr	r3, [pc, #144]	; (8009938 <USBD_LL_Init+0xac>)
 80098a6:	4a25      	ldr	r2, [pc, #148]	; (800993c <USBD_LL_Init+0xb0>)
 80098a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80098aa:	4b23      	ldr	r3, [pc, #140]	; (8009938 <USBD_LL_Init+0xac>)
 80098ac:	2208      	movs	r2, #8
 80098ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098b0:	4b21      	ldr	r3, [pc, #132]	; (8009938 <USBD_LL_Init+0xac>)
 80098b2:	2202      	movs	r2, #2
 80098b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098b6:	4b20      	ldr	r3, [pc, #128]	; (8009938 <USBD_LL_Init+0xac>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <USBD_LL_Init+0xac>)
 80098be:	2200      	movs	r2, #0
 80098c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098c2:	4b1d      	ldr	r3, [pc, #116]	; (8009938 <USBD_LL_Init+0xac>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098c8:	481b      	ldr	r0, [pc, #108]	; (8009938 <USBD_LL_Init+0xac>)
 80098ca:	f7f8 ffa7 	bl	800281c <HAL_PCD_Init>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80098d4:	f7f8 fb1a 	bl	8001f0c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098de:	2318      	movs	r3, #24
 80098e0:	2200      	movs	r2, #0
 80098e2:	2100      	movs	r1, #0
 80098e4:	f7f9 fe40 	bl	8003568 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ee:	2358      	movs	r3, #88	; 0x58
 80098f0:	2200      	movs	r2, #0
 80098f2:	2180      	movs	r1, #128	; 0x80
 80098f4:	f7f9 fe38 	bl	8003568 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098fe:	23c0      	movs	r3, #192	; 0xc0
 8009900:	2200      	movs	r2, #0
 8009902:	2181      	movs	r1, #129	; 0x81
 8009904:	f7f9 fe30 	bl	8003568 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800990e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009912:	2200      	movs	r2, #0
 8009914:	2101      	movs	r1, #1
 8009916:	f7f9 fe27 	bl	8003568 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009924:	2200      	movs	r2, #0
 8009926:	2182      	movs	r1, #130	; 0x82
 8009928:	f7f9 fe1e 	bl	8003568 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	200020a4 	.word	0x200020a4
 800993c:	40005c00 	.word	0x40005c00

08009940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009956:	4618      	mov	r0, r3
 8009958:	f7f9 f841 	bl	80029de <HAL_PCD_Start>
 800995c:	4603      	mov	r3, r0
 800995e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	4618      	mov	r0, r3
 8009964:	f000 f948 	bl	8009bf8 <USBD_Get_USB_Status>
 8009968:	4603      	mov	r3, r0
 800996a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800996c:	7bbb      	ldrb	r3, [r7, #14]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	4608      	mov	r0, r1
 8009980:	4611      	mov	r1, r2
 8009982:	461a      	mov	r2, r3
 8009984:	4603      	mov	r3, r0
 8009986:	70fb      	strb	r3, [r7, #3]
 8009988:	460b      	mov	r3, r1
 800998a:	70bb      	strb	r3, [r7, #2]
 800998c:	4613      	mov	r3, r2
 800998e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800999e:	78bb      	ldrb	r3, [r7, #2]
 80099a0:	883a      	ldrh	r2, [r7, #0]
 80099a2:	78f9      	ldrb	r1, [r7, #3]
 80099a4:	f7f9 f974 	bl	8002c90 <HAL_PCD_EP_Open>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 f922 	bl	8009bf8 <USBD_Get_USB_Status>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099dc:	78fa      	ldrb	r2, [r7, #3]
 80099de:	4611      	mov	r1, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7f9 f9b5 	bl	8002d50 <HAL_PCD_EP_Close>
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f903 	bl	8009bf8 <USBD_Get_USB_Status>
 80099f2:	4603      	mov	r3, r0
 80099f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f9 fa5f 	bl	8002ee2 <HAL_PCD_EP_SetStall>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f8e4 	bl	8009bf8 <USBD_Get_USB_Status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a58:	78fa      	ldrb	r2, [r7, #3]
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7f9 fa9a 	bl	8002f96 <HAL_PCD_EP_ClrStall>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 f8c5 	bl	8009bf8 <USBD_Get_USB_Status>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	da08      	bge.n	8009aaa <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a98:	78fb      	ldrb	r3, [r7, #3]
 8009a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	015b      	lsls	r3, r3, #5
 8009aa2:	4413      	add	r3, r2
 8009aa4:	332a      	adds	r3, #42	; 0x2a
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	e008      	b.n	8009abc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	015b      	lsls	r3, r3, #5
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009aba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bc80      	pop	{r7}
 8009ac4:	4770      	bx	lr

08009ac6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ae0:	78fa      	ldrb	r2, [r7, #3]
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7f9 f8ae 	bl	8002c46 <HAL_PCD_SetAddress>
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f881 	bl	8009bf8 <USBD_Get_USB_Status>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	607a      	str	r2, [r7, #4]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	460b      	mov	r3, r1
 8009b12:	72fb      	strb	r3, [r7, #11]
 8009b14:	4613      	mov	r3, r2
 8009b16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b26:	893b      	ldrh	r3, [r7, #8]
 8009b28:	7af9      	ldrb	r1, [r7, #11]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	f7f9 f9a0 	bl	8002e70 <HAL_PCD_EP_Transmit>
 8009b30:	4603      	mov	r3, r0
 8009b32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 f85e 	bl	8009bf8 <USBD_Get_USB_Status>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b40:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b086      	sub	sp, #24
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	461a      	mov	r2, r3
 8009b56:	460b      	mov	r3, r1
 8009b58:	72fb      	strb	r3, [r7, #11]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b6c:	893b      	ldrh	r3, [r7, #8]
 8009b6e:	7af9      	ldrb	r1, [r7, #11]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	f7f9 f92f 	bl	8002dd4 <HAL_PCD_EP_Receive>
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 f83b 	bl	8009bf8 <USBD_Get_USB_Status>
 8009b82:	4603      	mov	r3, r0
 8009b84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b86:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ba2:	78fa      	ldrb	r2, [r7, #3]
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f9 f94e 	bl	8002e48 <HAL_PCD_EP_GetRxCount>
 8009bac:	4603      	mov	r3, r0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009bc0:	4b02      	ldr	r3, [pc, #8]	; (8009bcc <USBD_static_malloc+0x14>)
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr
 8009bcc:	20000ae8 	.word	0x20000ae8

08009bd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]

}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bc80      	pop	{r7}
 8009be0:	4770      	bx	lr

08009be2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be2:	b480      	push	{r7}
 8009be4:	b083      	sub	sp, #12
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	460b      	mov	r3, r1
 8009bec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009bee:	bf00      	nop
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bc80      	pop	{r7}
 8009bf6:	4770      	bx	lr

08009bf8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d817      	bhi.n	8009c3c <USBD_Get_USB_Status+0x44>
 8009c0c:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <USBD_Get_USB_Status+0x1c>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c25 	.word	0x08009c25
 8009c18:	08009c2b 	.word	0x08009c2b
 8009c1c:	08009c31 	.word	0x08009c31
 8009c20:	08009c37 	.word	0x08009c37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
    break;
 8009c28:	e00b      	b.n	8009c42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c2e:	e008      	b.n	8009c42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c30:	2301      	movs	r3, #1
 8009c32:	73fb      	strb	r3, [r7, #15]
    break;
 8009c34:	e005      	b.n	8009c42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c36:	2302      	movs	r3, #2
 8009c38:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3a:	e002      	b.n	8009c42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c40:	bf00      	nop
  }
  return usb_status;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bc80      	pop	{r7}
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop

08009c50 <_init>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	bf00      	nop
 8009c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c56:	bc08      	pop	{r3}
 8009c58:	469e      	mov	lr, r3
 8009c5a:	4770      	bx	lr

08009c5c <_fini>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	bf00      	nop
 8009c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c62:	bc08      	pop	{r3}
 8009c64:	469e      	mov	lr, r3
 8009c66:	4770      	bx	lr
